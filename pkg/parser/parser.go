// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1188},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1253},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1279},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1331},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1349},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1374},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1398},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1452},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1474},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1501},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1530},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1556},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1591},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1615},
						name: "DocumentAttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1655},
						name: "DocumentAttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1689},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1726},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1751},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1762},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1808},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1815},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1816},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1853},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1890},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1890},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1890},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1891},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1900},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1907},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1907},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1932},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1984},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2008},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2033},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2055},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2082},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2111},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2138},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2173},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2197},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2271},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2308},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2333},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2371},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2393},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2400},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2401},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2422},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2443},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2443},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2443},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2444},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2453},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2460},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2472},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2618},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2633},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2651},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2670},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2670},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2670},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2691},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2699},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2700},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2725},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2805},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2830},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2830},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2836},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2848},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2874},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2874},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2875},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2876},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2876},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2877},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2898,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3064},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3082},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3082},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3086},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3086},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3093},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3100},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3115},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3119},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3119},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3137},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3149},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3150},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3170},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3193},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3202},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3202},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3229},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3230},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3230},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3250},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3273},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3283},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3283},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3384},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3403},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3431},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3461},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3490},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3490},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3490},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3490},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3497},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3498},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3502},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3511},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3511},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3598},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3630},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3630},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3630},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3630},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3637},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3648},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3656},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3672},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3751},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3769},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3769},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3776},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3786},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3806},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3812},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3813},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3835},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3835},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3842},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3842},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3847},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3847},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 3992},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 4014},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 4014},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 4014},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4061},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4084},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4084},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4088},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4095},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4096},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4096},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4143},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4304},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4324},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4324},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4324},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4324},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4331},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4332},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4336},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4355},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4356},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4356},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4356},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4367},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4391},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4391},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4396},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4404},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4405},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4428},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4428},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4433},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4443},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4444},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4561},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4561},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4561},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4570},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4592},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4592},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4597},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4607},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4608},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4717},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4847},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 4873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 4873},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 4873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 4873},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4878},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 4885},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 4885},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4933},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4933},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 4933},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 4939},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 4946},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 4946},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 4957},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 4957},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 4964},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 4965},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 5005},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 5029},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 5029},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 5029},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5075},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5101},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5101},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5101},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5263},
			expr: &actionExpr{
				pos: position{line: 170, col: 33, offset: 5295},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 33, offset: 5295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 33, offset: 5295},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 37, offset: 5299},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 43, offset: 5305},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 66, offset: 5328},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5341},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5347},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5348},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5349},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5349},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5349},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5356},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5363},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 180, col: 1, offset: 5689},
			expr: &actionExpr{
				pos: position{line: 180, col: 26, offset: 5714},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 26, offset: 5714},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 26, offset: 5714},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 36, offset: 5724},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 37, offset: 5725},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 184, col: 1, offset: 5773},
			expr: &actionExpr{
				pos: position{line: 184, col: 27, offset: 5799},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 27, offset: 5799},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 27, offset: 5799},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 188, col: 1, offset: 5844},
			expr: &choiceExpr{
				pos: position{line: 188, col: 27, offset: 5870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 27, offset: 5870},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 27, offset: 5870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 27, offset: 5870},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 32, offset: 5875},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 38, offset: 5881},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 61, offset: 5904},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 65, offset: 5908},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 65, offset: 5908},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 72, offset: 5915},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5983},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 5983},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 5987},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 5993},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 38, offset: 6016},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 43, offset: 6021},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 43, offset: 6021},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 50, offset: 6028},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 6095},
			expr: &actionExpr{
				pos: position{line: 194, col: 34, offset: 6128},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 34, offset: 6128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 34, offset: 6128},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 38, offset: 6132},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 44, offset: 6138},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 67, offset: 6161},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 201, col: 1, offset: 6349},
			expr: &actionExpr{
				pos: position{line: 201, col: 22, offset: 6370},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 22, offset: 6370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 22, offset: 6370},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 28, offset: 6376},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 29, offset: 6377},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 48, offset: 6396},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 48, offset: 6396},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6473},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6493},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6493},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6493},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6495},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6495},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6501},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6507},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6583},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6589},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6589},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6610},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6634},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6657},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6685},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6713},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6740},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6767},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6804},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6832},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6869},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 7052},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 7075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 7075},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 7093},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 7110},
			expr: &choiceExpr{
				pos: position{line: 223, col: 14, offset: 7123},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 14, offset: 7123},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 223, col: 14, offset: 7123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 14, offset: 7123},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 19, offset: 7128},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7132},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 27, offset: 7136},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 32, offset: 7141},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 32, offset: 7141},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 39, offset: 7148},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7201},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7201},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 10, offset: 7206},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 14, offset: 7210},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 18, offset: 7214},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 23, offset: 7219},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 23, offset: 7219},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 7226},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 229, col: 1, offset: 7278},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7297},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7297},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 25, offset: 7302},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 29, offset: 7306},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 33, offset: 7310},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 38, offset: 7315},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 38, offset: 7315},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 235, col: 1, offset: 7592},
			expr: &actionExpr{
				pos: position{line: 235, col: 17, offset: 7608},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 235, col: 17, offset: 7608},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 17, offset: 7608},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 7612},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 28, offset: 7619},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 49, offset: 7640},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 239, col: 1, offset: 7698},
			expr: &actionExpr{
				pos: position{line: 239, col: 24, offset: 7721},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 239, col: 24, offset: 7721},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 7721},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 32, offset: 7729},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 32, offset: 7729},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 245, col: 1, offset: 7956},
			expr: &actionExpr{
				pos: position{line: 245, col: 16, offset: 7971},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 245, col: 16, offset: 7971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 16, offset: 7971},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 7976},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 245, col: 27, offset: 7982},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 245, col: 27, offset: 7982},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 245, col: 27, offset: 7982},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 36, offset: 7991},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 36, offset: 7991},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 4, offset: 8038},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 8, offset: 8042},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 8, offset: 8042},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 8049},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 251, col: 1, offset: 8105},
			expr: &actionExpr{
				pos: position{line: 251, col: 21, offset: 8125},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 251, col: 21, offset: 8125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 8125},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 33, offset: 8137},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 33, offset: 8137},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 40, offset: 8144},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 255, col: 1, offset: 8196},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8225},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8225},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 39, offset: 8234},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 39, offset: 8234},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 46, offset: 8241},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 260, col: 1, offset: 8382},
			expr: &actionExpr{
				pos: position{line: 260, col: 30, offset: 8411},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 260, col: 30, offset: 8411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 30, offset: 8411},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 34, offset: 8415},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 37, offset: 8418},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 53, offset: 8434},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 57, offset: 8438},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 57, offset: 8438},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 64, offset: 8445},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 265, col: 1, offset: 8600},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 8620},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 8620},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 8620},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8635},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 14, offset: 8644},
								expr: &actionExpr{
									pos: position{line: 266, col: 15, offset: 8645},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 266, col: 15, offset: 8645},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 266, col: 15, offset: 8645},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 19, offset: 8649},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 266, col: 24, offset: 8654},
													expr: &ruleRefExpr{
														pos:  position{line: 266, col: 25, offset: 8655},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8710},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 12, offset: 8717},
								expr: &actionExpr{
									pos: position{line: 267, col: 13, offset: 8718},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8718},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 267, col: 13, offset: 8718},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 17, offset: 8722},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 267, col: 22, offset: 8727},
													expr: &ruleRefExpr{
														pos:  position{line: 267, col: 23, offset: 8728},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 5, offset: 8775},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 9, offset: 8779},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 9, offset: 8779},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 8786},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 273, col: 1, offset: 8937},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 8955},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 273, col: 19, offset: 8955},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 8955},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 8959},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 34, offset: 8970},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 35, offset: 8971},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 54, offset: 8990},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 58, offset: 8994},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 58, offset: 8994},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 65, offset: 9001},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 277, col: 1, offset: 9073},
			expr: &choiceExpr{
				pos: position{line: 277, col: 21, offset: 9093},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 21, offset: 9093},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 49, offset: 9121},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 279, col: 1, offset: 9151},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9180},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9180},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 30, offset: 9180},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 35, offset: 9185},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 49, offset: 9199},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 53, offset: 9203},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 59, offset: 9209},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 9210},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 9227},
							expr: &litMatcher{
								pos:        position{line: 279, col: 77, offset: 9227},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 82, offset: 9232},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 82, offset: 9232},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 283, col: 1, offset: 9331},
			expr: &actionExpr{
				pos: position{line: 283, col: 33, offset: 9363},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 33, offset: 9363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 33, offset: 9363},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9368},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 52, offset: 9382},
							expr: &litMatcher{
								pos:        position{line: 283, col: 52, offset: 9382},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 57, offset: 9387},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 57, offset: 9387},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 287, col: 1, offset: 9475},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 9491},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 287, col: 17, offset: 9491},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 287, col: 17, offset: 9491},
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 9492},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 26, offset: 9500},
							expr: &litMatcher{
								pos:        position{line: 287, col: 27, offset: 9501},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 35, offset: 9509},
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 9510},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 46, offset: 9520},
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 48, offset: 9522},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 48, offset: 9522},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 56, offset: 9530},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 61, offset: 9535},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 61, offset: 9535},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 75, offset: 9549},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 75, offset: 9549},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 291, col: 1, offset: 9592},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9610},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9610},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 291, col: 26, offset: 9617},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 26, offset: 9617},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 295, col: 1, offset: 9668},
			expr: &actionExpr{
				pos: position{line: 295, col: 29, offset: 9696},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 295, col: 29, offset: 9696},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 295, col: 29, offset: 9696},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 295, col: 36, offset: 9703},
								expr: &charClassMatcher{
									pos:        position{line: 295, col: 36, offset: 9703},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 295, col: 50, offset: 9717},
							expr: &litMatcher{
								pos:        position{line: 295, col: 51, offset: 9718},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 299, col: 1, offset: 9884},
			expr: &actionExpr{
				pos: position{line: 299, col: 21, offset: 9904},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 299, col: 21, offset: 9904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 21, offset: 9904},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 9919},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 9919},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 43, offset: 9926},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 303, col: 1, offset: 9999},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 10018},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 10018},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 20, offset: 10018},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 29, offset: 10027},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 10027},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 36, offset: 10034},
							expr: &litMatcher{
								pos:        position{line: 303, col: 36, offset: 10034},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 41, offset: 10039},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 48, offset: 10046},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 49, offset: 10047},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 66, offset: 10064},
							expr: &litMatcher{
								pos:        position{line: 303, col: 66, offset: 10064},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 71, offset: 10069},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 77, offset: 10075},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 78, offset: 10076},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 95, offset: 10093},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 99, offset: 10097},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 99, offset: 10097},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 106, offset: 10104},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 307, col: 1, offset: 10173},
			expr: &actionExpr{
				pos: position{line: 307, col: 20, offset: 10192},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 307, col: 20, offset: 10192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 10192},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 10201},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 29, offset: 10201},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 36, offset: 10208},
							expr: &litMatcher{
								pos:        position{line: 307, col: 36, offset: 10208},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 10213},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 48, offset: 10220},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 49, offset: 10221},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 66, offset: 10238},
							expr: &litMatcher{
								pos:        position{line: 307, col: 66, offset: 10238},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 71, offset: 10243},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 77, offset: 10249},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 78, offset: 10250},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 95, offset: 10267},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 99, offset: 10271},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 99, offset: 10271},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 106, offset: 10278},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 311, col: 1, offset: 10365},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 10383},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 311, col: 20, offset: 10384},
					expr: &charClassMatcher{
						pos:        position{line: 311, col: 20, offset: 10384},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 315, col: 1, offset: 10433},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 10453},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 10453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 21, offset: 10453},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 25, offset: 10457},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 31, offset: 10463},
								expr: &ruleRefExpr{
									pos:  position{line: 315, col: 32, offset: 10464},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 10483},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 322, col: 1, offset: 10666},
			expr: &actionExpr{
				pos: position{line: 322, col: 12, offset: 10677},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 322, col: 12, offset: 10677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 12, offset: 10677},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 23, offset: 10688},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 24, offset: 10689},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10713},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 323, col: 12, offset: 10720},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 323, col: 12, offset: 10720},
									expr: &litMatcher{
										pos:        position{line: 323, col: 13, offset: 10721},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 327, col: 5, offset: 10812},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 331, col: 5, offset: 10964},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 5, offset: 10964},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 12, offset: 10971},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 19, offset: 10978},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 34, offset: 10993},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 331, col: 38, offset: 10997},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 38, offset: 10997},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 56, offset: 11015},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 335, col: 1, offset: 11121},
			expr: &actionExpr{
				pos: position{line: 335, col: 18, offset: 11138},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 335, col: 18, offset: 11138},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 335, col: 27, offset: 11147},
						expr: &seqExpr{
							pos: position{line: 335, col: 28, offset: 11148},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 335, col: 28, offset: 11148},
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 29, offset: 11149},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 335, col: 37, offset: 11157},
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 38, offset: 11158},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 54, offset: 11174},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 339, col: 1, offset: 11295},
			expr: &actionExpr{
				pos: position{line: 339, col: 17, offset: 11311},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 339, col: 17, offset: 11311},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 339, col: 26, offset: 11320},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 339, col: 26, offset: 11320},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 11, offset: 11335},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 341, col: 11, offset: 11380},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 11, offset: 11380},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 11398},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 343, col: 11, offset: 11423},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 344, col: 11, offset: 11451},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 345, col: 11, offset: 11474},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 346, col: 11, offset: 11489},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 347, col: 11, offset: 11514},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 348, col: 11, offset: 11535},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 349, col: 11, offset: 11575},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 356, col: 1, offset: 11726},
			expr: &seqExpr{
				pos: position{line: 356, col: 31, offset: 11756},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 356, col: 31, offset: 11756},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 356, col: 41, offset: 11766},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 361, col: 1, offset: 11877},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 11895},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 361, col: 19, offset: 11895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 19, offset: 11895},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 25, offset: 11901},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 40, offset: 11916},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 45, offset: 11921},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 52, offset: 11928},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 68, offset: 11944},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 75, offset: 11951},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 365, col: 1, offset: 12066},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 12085},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 12085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 20, offset: 12085},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 26, offset: 12091},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 41, offset: 12106},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 45, offset: 12110},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 52, offset: 12117},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 365, col: 68, offset: 12133},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 75, offset: 12140},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 369, col: 1, offset: 12256},
			expr: &actionExpr{
				pos: position{line: 369, col: 18, offset: 12273},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 369, col: 19, offset: 12274},
					expr: &charClassMatcher{
						pos:        position{line: 369, col: 19, offset: 12274},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 373, col: 1, offset: 12323},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 12341},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 373, col: 19, offset: 12341},
					expr: &charClassMatcher{
						pos:        position{line: 373, col: 19, offset: 12341},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 377, col: 1, offset: 12389},
			expr: &actionExpr{
				pos: position{line: 377, col: 24, offset: 12412},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 377, col: 24, offset: 12412},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 24, offset: 12412},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 28, offset: 12416},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 377, col: 34, offset: 12422},
								expr: &ruleRefExpr{
									pos:  position{line: 377, col: 35, offset: 12423},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 377, col: 54, offset: 12442},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 384, col: 1, offset: 12631},
			expr: &actionExpr{
				pos: position{line: 384, col: 18, offset: 12648},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 384, col: 18, offset: 12648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 18, offset: 12648},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 384, col: 24, offset: 12654},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 384, col: 24, offset: 12654},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 384, col: 24, offset: 12654},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 384, col: 36, offset: 12666},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 42, offset: 12672},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 384, col: 56, offset: 12686},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 384, col: 74, offset: 12704},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 386, col: 8, offset: 12858},
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 8, offset: 12858},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 15, offset: 12865},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 390, col: 1, offset: 12917},
			expr: &actionExpr{
				pos: position{line: 390, col: 26, offset: 12942},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 390, col: 26, offset: 12942},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 26, offset: 12942},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 30, offset: 12946},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 390, col: 36, offset: 12952},
								expr: &choiceExpr{
									pos: position{line: 390, col: 37, offset: 12953},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 390, col: 37, offset: 12953},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 390, col: 59, offset: 12975},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 390, col: 80, offset: 12996},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 390, col: 99, offset: 13015},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 394, col: 1, offset: 13094},
			expr: &actionExpr{
				pos: position{line: 394, col: 24, offset: 13117},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 394, col: 24, offset: 13117},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 24, offset: 13117},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 33, offset: 13126},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 40, offset: 13133},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 394, col: 66, offset: 13159},
							expr: &litMatcher{
								pos:        position{line: 394, col: 66, offset: 13159},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 398, col: 1, offset: 13218},
			expr: &actionExpr{
				pos: position{line: 398, col: 29, offset: 13246},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 398, col: 29, offset: 13246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 398, col: 29, offset: 13246},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 398, col: 36, offset: 13253},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 398, col: 36, offset: 13253},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 13370},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 400, col: 11, offset: 13406},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 401, col: 11, offset: 13432},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 11, offset: 13464},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 11, offset: 13496},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 404, col: 11, offset: 13523},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 404, col: 31, offset: 13543},
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 31, offset: 13543},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 404, col: 39, offset: 13551},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 404, col: 39, offset: 13551},
									expr: &litMatcher{
										pos:        position{line: 404, col: 40, offset: 13552},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 404, col: 46, offset: 13558},
									expr: &litMatcher{
										pos:        position{line: 404, col: 47, offset: 13559},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 408, col: 1, offset: 13591},
			expr: &actionExpr{
				pos: position{line: 408, col: 23, offset: 13613},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 408, col: 23, offset: 13613},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 23, offset: 13613},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 408, col: 30, offset: 13620},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 408, col: 30, offset: 13620},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 408, col: 47, offset: 13637},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 5, offset: 13659},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 409, col: 12, offset: 13666},
								expr: &actionExpr{
									pos: position{line: 409, col: 13, offset: 13667},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 409, col: 13, offset: 13667},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 409, col: 13, offset: 13667},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 409, col: 17, offset: 13671},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 409, col: 24, offset: 13678},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 409, col: 24, offset: 13678},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 409, col: 41, offset: 13695},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 415, col: 1, offset: 13833},
			expr: &actionExpr{
				pos: position{line: 415, col: 29, offset: 13861},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 415, col: 29, offset: 13861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 29, offset: 13861},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 34, offset: 13866},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 415, col: 41, offset: 13873},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 415, col: 41, offset: 13873},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 415, col: 58, offset: 13890},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 416, col: 5, offset: 13912},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 416, col: 12, offset: 13919},
								expr: &actionExpr{
									pos: position{line: 416, col: 13, offset: 13920},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 416, col: 13, offset: 13920},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 416, col: 13, offset: 13920},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 416, col: 17, offset: 13924},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 416, col: 24, offset: 13931},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 416, col: 24, offset: 13931},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 416, col: 41, offset: 13948},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 9, offset: 14001},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 422, col: 1, offset: 14091},
			expr: &actionExpr{
				pos: position{line: 422, col: 19, offset: 14109},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 422, col: 19, offset: 14109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 422, col: 19, offset: 14109},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 26, offset: 14116},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 422, col: 34, offset: 14124},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 39, offset: 14129},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 44, offset: 14134},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 426, col: 1, offset: 14222},
			expr: &actionExpr{
				pos: position{line: 426, col: 25, offset: 14246},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 426, col: 25, offset: 14246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 25, offset: 14246},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 30, offset: 14251},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 37, offset: 14258},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 426, col: 45, offset: 14266},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 50, offset: 14271},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 55, offset: 14276},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 426, col: 63, offset: 14284},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 430, col: 1, offset: 14369},
			expr: &actionExpr{
				pos: position{line: 430, col: 20, offset: 14388},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 430, col: 20, offset: 14388},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 430, col: 32, offset: 14400},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 434, col: 1, offset: 14495},
			expr: &actionExpr{
				pos: position{line: 434, col: 26, offset: 14520},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 434, col: 26, offset: 14520},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 26, offset: 14520},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 434, col: 31, offset: 14525},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 43, offset: 14537},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 434, col: 51, offset: 14545},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 438, col: 1, offset: 14637},
			expr: &actionExpr{
				pos: position{line: 438, col: 23, offset: 14659},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 438, col: 23, offset: 14659},
					expr: &charClassMatcher{
						pos:        position{line: 438, col: 23, offset: 14659},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 442, col: 1, offset: 14704},
			expr: &actionExpr{
				pos: position{line: 442, col: 23, offset: 14726},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 442, col: 23, offset: 14726},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 442, col: 24, offset: 14727},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 442, col: 24, offset: 14727},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 442, col: 34, offset: 14737},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 42, offset: 14745},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 48, offset: 14751},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 442, col: 73, offset: 14776},
							expr: &litMatcher{
								pos:        position{line: 442, col: 73, offset: 14776},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 446, col: 1, offset: 14925},
			expr: &actionExpr{
				pos: position{line: 446, col: 28, offset: 14952},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 446, col: 28, offset: 14952},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 28, offset: 14952},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 35, offset: 14959},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 54, offset: 14978},
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 54, offset: 14978},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 446, col: 62, offset: 14986},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 446, col: 62, offset: 14986},
									expr: &litMatcher{
										pos:        position{line: 446, col: 63, offset: 14987},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 446, col: 69, offset: 14993},
									expr: &litMatcher{
										pos:        position{line: 446, col: 70, offset: 14994},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 450, col: 1, offset: 15026},
			expr: &actionExpr{
				pos: position{line: 450, col: 22, offset: 15047},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 450, col: 22, offset: 15047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 450, col: 22, offset: 15047},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 29, offset: 15054},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 5, offset: 15068},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 12, offset: 15075},
								expr: &actionExpr{
									pos: position{line: 451, col: 13, offset: 15076},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 451, col: 13, offset: 15076},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 451, col: 13, offset: 15076},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 451, col: 17, offset: 15080},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 451, col: 24, offset: 15087},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 457, col: 1, offset: 15218},
			expr: &choiceExpr{
				pos: position{line: 457, col: 13, offset: 15230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 457, col: 13, offset: 15230},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 457, col: 13, offset: 15230},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 457, col: 18, offset: 15235},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 457, col: 18, offset: 15235},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 457, col: 30, offset: 15247},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 15315},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 459, col: 5, offset: 15315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 459, col: 5, offset: 15315},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 459, col: 9, offset: 15319},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 459, col: 14, offset: 15324},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 459, col: 14, offset: 15324},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 459, col: 26, offset: 15336},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 463, col: 1, offset: 15404},
			expr: &actionExpr{
				pos: position{line: 463, col: 16, offset: 15419},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 463, col: 16, offset: 15419},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 463, col: 16, offset: 15419},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 463, col: 23, offset: 15426},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 463, col: 23, offset: 15426},
									expr: &litMatcher{
										pos:        position{line: 463, col: 24, offset: 15427},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 466, col: 5, offset: 15481},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 474, col: 1, offset: 15723},
			expr: &zeroOrMoreExpr{
				pos: position{line: 474, col: 24, offset: 15746},
				expr: &choiceExpr{
					pos: position{line: 474, col: 25, offset: 15747},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 25, offset: 15747},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 41, offset: 15763},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 476, col: 1, offset: 15783},
			expr: &actionExpr{
				pos: position{line: 476, col: 21, offset: 15803},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 476, col: 21, offset: 15803},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 476, col: 21, offset: 15803},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 22, offset: 15804},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 26, offset: 15808},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 476, col: 35, offset: 15817},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 476, col: 35, offset: 15817},
									expr: &charClassMatcher{
										pos:        position{line: 476, col: 35, offset: 15817},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 478, col: 12, offset: 15879},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 485, col: 1, offset: 16078},
			expr: &actionExpr{
				pos: position{line: 485, col: 21, offset: 16098},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 485, col: 21, offset: 16098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 21, offset: 16098},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 485, col: 29, offset: 16106},
								expr: &choiceExpr{
									pos: position{line: 485, col: 30, offset: 16107},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 485, col: 30, offset: 16107},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 485, col: 53, offset: 16130},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 485, col: 74, offset: 16151},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 485, col: 74, offset: 16151,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 107, offset: 16184},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 489, col: 1, offset: 16255},
			expr: &actionExpr{
				pos: position{line: 489, col: 25, offset: 16279},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 489, col: 25, offset: 16279},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 489, col: 25, offset: 16279},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 33, offset: 16287},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 489, col: 38, offset: 16292},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 38, offset: 16292},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 489, col: 78, offset: 16332},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 493, col: 1, offset: 16397},
			expr: &actionExpr{
				pos: position{line: 493, col: 23, offset: 16419},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 493, col: 23, offset: 16419},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 493, col: 23, offset: 16419},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 31, offset: 16427},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 493, col: 36, offset: 16432},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 493, col: 36, offset: 16432},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 493, col: 76, offset: 16472},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 500, col: 1, offset: 16636},
			expr: &choiceExpr{
				pos: position{line: 500, col: 18, offset: 16653},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 18, offset: 16653},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 500, col: 18, offset: 16653},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 27, offset: 16662},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 9, offset: 16719},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 502, col: 9, offset: 16719},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 502, col: 15, offset: 16725},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 16, offset: 16726},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 506, col: 1, offset: 16818},
			expr: &actionExpr{
				pos: position{line: 506, col: 22, offset: 16839},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 506, col: 22, offset: 16839},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 506, col: 22, offset: 16839},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 23, offset: 16840},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 16848},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 6, offset: 16849},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 508, col: 5, offset: 16864},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 6, offset: 16865},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 509, col: 5, offset: 16887},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 6, offset: 16888},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 510, col: 5, offset: 16914},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 6, offset: 16915},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 511, col: 5, offset: 16943},
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 6, offset: 16944},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 512, col: 5, offset: 16970},
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 6, offset: 16971},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 513, col: 5, offset: 16996},
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 6, offset: 16997},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 514, col: 5, offset: 17018},
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 6, offset: 17019},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 515, col: 5, offset: 17038},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 6, offset: 17039},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 17066},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 516, col: 11, offset: 17072},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 516, col: 11, offset: 17072},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 516, col: 20, offset: 17081},
										expr: &ruleRefExpr{
											pos:  position{line: 516, col: 21, offset: 17082},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 12, offset: 17181},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 522, col: 1, offset: 17220},
			expr: &seqExpr{
				pos: position{line: 522, col: 25, offset: 17244},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 522, col: 25, offset: 17244},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 522, col: 29, offset: 17248},
						expr: &ruleRefExpr{
							pos:  position{line: 522, col: 29, offset: 17248},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 36, offset: 17255},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 524, col: 1, offset: 17327},
			expr: &actionExpr{
				pos: position{line: 524, col: 29, offset: 17355},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 524, col: 29, offset: 17355},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 524, col: 29, offset: 17355},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 50, offset: 17376},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 58, offset: 17384},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 528, col: 1, offset: 17490},
			expr: &actionExpr{
				pos: position{line: 528, col: 29, offset: 17518},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 528, col: 29, offset: 17518},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 528, col: 29, offset: 17518},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 30, offset: 17519},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 529, col: 5, offset: 17528},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 529, col: 14, offset: 17537},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 529, col: 14, offset: 17537},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17562},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17586},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17640},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17662},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17689},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 17718},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 17783},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 17834},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 17858},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 17898},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 11, offset: 17932},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 542, col: 11, offset: 17969},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 543, col: 11, offset: 17994},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 550, col: 1, offset: 18157},
			expr: &actionExpr{
				pos: position{line: 550, col: 20, offset: 18176},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 550, col: 20, offset: 18176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 20, offset: 18176},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 550, col: 31, offset: 18187},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 32, offset: 18188},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 52, offset: 18208},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 60, offset: 18216},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 83, offset: 18239},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 92, offset: 18248},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 554, col: 1, offset: 18388},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 18418},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 18418},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 5, offset: 18418},
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 5, offset: 18418},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 12, offset: 18425},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 557, col: 9, offset: 18488},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 557, col: 9, offset: 18488},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 557, col: 9, offset: 18488},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 557, col: 9, offset: 18488},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 557, col: 16, offset: 18495},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 557, col: 16, offset: 18495},
															expr: &litMatcher{
																pos:        position{line: 557, col: 17, offset: 18496},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 561, col: 9, offset: 18596},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 580, col: 11, offset: 19313},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 580, col: 11, offset: 19313},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 580, col: 11, offset: 19313},
													expr: &charClassMatcher{
														pos:        position{line: 580, col: 12, offset: 19314},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 580, col: 20, offset: 19322},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 582, col: 13, offset: 19433},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 582, col: 13, offset: 19433},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 582, col: 14, offset: 19434},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 582, col: 21, offset: 19441},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 584, col: 13, offset: 19555},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 584, col: 13, offset: 19555},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 584, col: 14, offset: 19556},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 584, col: 21, offset: 19563},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 586, col: 13, offset: 19677},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 586, col: 13, offset: 19677},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 586, col: 13, offset: 19677},
													expr: &charClassMatcher{
														pos:        position{line: 586, col: 14, offset: 19678},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 586, col: 22, offset: 19686},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 588, col: 13, offset: 19800},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 588, col: 13, offset: 19800},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 588, col: 13, offset: 19800},
													expr: &charClassMatcher{
														pos:        position{line: 588, col: 14, offset: 19801},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 588, col: 22, offset: 19809},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 590, col: 12, offset: 19922},
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 12, offset: 19922},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 594, col: 1, offset: 19957},
			expr: &actionExpr{
				pos: position{line: 594, col: 27, offset: 19983},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 594, col: 27, offset: 19983},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 594, col: 37, offset: 19993},
						expr: &ruleRefExpr{
							pos:  position{line: 594, col: 37, offset: 19993},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 601, col: 1, offset: 20193},
			expr: &actionExpr{
				pos: position{line: 601, col: 22, offset: 20214},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 601, col: 22, offset: 20214},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 22, offset: 20214},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 601, col: 33, offset: 20225},
								expr: &ruleRefExpr{
									pos:  position{line: 601, col: 34, offset: 20226},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 54, offset: 20246},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 62, offset: 20254},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 87, offset: 20279},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 601, col: 98, offset: 20290},
								expr: &ruleRefExpr{
									pos:  position{line: 601, col: 99, offset: 20291},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 129, offset: 20321},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 138, offset: 20330},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 605, col: 1, offset: 20488},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 20520},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 20520},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 606, col: 5, offset: 20520},
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 5, offset: 20520},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 12, offset: 20527},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 606, col: 20, offset: 20535},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 608, col: 9, offset: 20592},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 608, col: 9, offset: 20592},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 608, col: 9, offset: 20592},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 608, col: 16, offset: 20599},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 608, col: 16, offset: 20599},
															expr: &litMatcher{
																pos:        position{line: 608, col: 17, offset: 20600},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 612, col: 9, offset: 20700},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 629, col: 14, offset: 21407},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 629, col: 21, offset: 21414},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 629, col: 22, offset: 21415},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 631, col: 13, offset: 21501},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 13, offset: 21501},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 635, col: 1, offset: 21537},
			expr: &actionExpr{
				pos: position{line: 635, col: 32, offset: 21568},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 635, col: 32, offset: 21568},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 635, col: 32, offset: 21568},
							expr: &litMatcher{
								pos:        position{line: 635, col: 33, offset: 21569},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 635, col: 37, offset: 21573},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 636, col: 7, offset: 21587},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 636, col: 7, offset: 21587},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 636, col: 7, offset: 21587},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 637, col: 7, offset: 21632},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 637, col: 7, offset: 21632},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 638, col: 7, offset: 21675},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 638, col: 7, offset: 21675},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 639, col: 7, offset: 21717},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 7, offset: 21717},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 643, col: 1, offset: 21759},
			expr: &actionExpr{
				pos: position{line: 643, col: 29, offset: 21787},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 643, col: 29, offset: 21787},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 643, col: 39, offset: 21797},
						expr: &ruleRefExpr{
							pos:  position{line: 643, col: 39, offset: 21797},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 650, col: 1, offset: 22113},
			expr: &actionExpr{
				pos: position{line: 650, col: 20, offset: 22132},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 650, col: 20, offset: 22132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 20, offset: 22132},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 650, col: 31, offset: 22143},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 32, offset: 22144},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 52, offset: 22164},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 58, offset: 22170},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 87, offset: 22199},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 98, offset: 22210},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 124, offset: 22236},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 650, col: 136, offset: 22248},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 137, offset: 22249},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 654, col: 1, offset: 22395},
			expr: &seqExpr{
				pos: position{line: 654, col: 26, offset: 22420},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 654, col: 26, offset: 22420},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 654, col: 54, offset: 22448},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 656, col: 1, offset: 22474},
			expr: &actionExpr{
				pos: position{line: 656, col: 32, offset: 22505},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 656, col: 32, offset: 22505},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 656, col: 41, offset: 22514},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 656, col: 41, offset: 22514},
							expr: &charClassMatcher{
								pos:        position{line: 656, col: 41, offset: 22514},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 662, col: 1, offset: 22648},
			expr: &actionExpr{
				pos: position{line: 662, col: 24, offset: 22671},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 662, col: 24, offset: 22671},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 662, col: 33, offset: 22680},
						expr: &seqExpr{
							pos: position{line: 662, col: 34, offset: 22681},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 662, col: 34, offset: 22681},
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 35, offset: 22682},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 662, col: 43, offset: 22690},
									expr: &litMatcher{
										pos:        position{line: 662, col: 44, offset: 22691},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 49, offset: 22696},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 666, col: 1, offset: 22823},
			expr: &actionExpr{
				pos: position{line: 666, col: 31, offset: 22853},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 666, col: 31, offset: 22853},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 666, col: 40, offset: 22862},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 666, col: 40, offset: 22862},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 22877},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 668, col: 11, offset: 22926},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 11, offset: 22926},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 22944},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 22969},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 22998},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 23018},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 23046},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 23069},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 675, col: 11, offset: 23084},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 676, col: 11, offset: 23109},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 677, col: 11, offset: 23130},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 23170},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 682, col: 1, offset: 23209},
			expr: &actionExpr{
				pos: position{line: 683, col: 5, offset: 23242},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 683, col: 5, offset: 23242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 23242},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 683, col: 16, offset: 23253},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 683, col: 16, offset: 23253},
									expr: &litMatcher{
										pos:        position{line: 683, col: 17, offset: 23254},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 686, col: 5, offset: 23312},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 690, col: 6, offset: 23488},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 690, col: 6, offset: 23488},
									expr: &choiceExpr{
										pos: position{line: 690, col: 7, offset: 23489},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 690, col: 7, offset: 23489},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 690, col: 15, offset: 23497},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 27, offset: 23509},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 694, col: 1, offset: 23549},
			expr: &actionExpr{
				pos: position{line: 694, col: 31, offset: 23579},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 694, col: 31, offset: 23579},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 694, col: 40, offset: 23588},
						expr: &ruleRefExpr{
							pos:  position{line: 694, col: 41, offset: 23589},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 701, col: 1, offset: 23780},
			expr: &choiceExpr{
				pos: position{line: 701, col: 19, offset: 23798},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 701, col: 19, offset: 23798},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 701, col: 19, offset: 23798},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 9, offset: 23844},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 703, col: 9, offset: 23844},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 9, offset: 23892},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 705, col: 9, offset: 23892},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 9, offset: 23950},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 707, col: 9, offset: 23950},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 9, offset: 24004},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 709, col: 9, offset: 24004},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 718, col: 1, offset: 24311},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 24358},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 24358},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 24358},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 24358},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 720, col: 16, offset: 24369},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 17, offset: 24370},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 720, col: 37, offset: 24390},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 40, offset: 24393},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 720, col: 56, offset: 24409},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 61, offset: 24414},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 720, col: 67, offset: 24420},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 68, offset: 24421},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 24602},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 24602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 724, col: 5, offset: 24602},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 724, col: 16, offset: 24613},
										expr: &ruleRefExpr{
											pos:  position{line: 724, col: 17, offset: 24614},
											name: "ElementAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 724, col: 37, offset: 24634},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 724, col: 42, offset: 24639},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 51, offset: 24648},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 24843},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 24843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 24843},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 728, col: 16, offset: 24854},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 17, offset: 24855},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 728, col: 37, offset: 24875},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 735, col: 7, offset: 25159},
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 8, offset: 25160},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 735, col: 23, offset: 25175},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 32, offset: 25184},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 25381},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 25381},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 25381},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 739, col: 16, offset: 25392},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 17, offset: 25393},
											name: "ElementAttributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 739, col: 37, offset: 25413},
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 38, offset: 25414},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 739, col: 53, offset: 25429},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 739, col: 59, offset: 25435},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 60, offset: 25436},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 743, col: 1, offset: 25532},
			expr: &oneOrMoreExpr{
				pos: position{line: 743, col: 38, offset: 25569},
				expr: &actionExpr{
					pos: position{line: 743, col: 39, offset: 25570},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 743, col: 39, offset: 25570},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 743, col: 39, offset: 25570},
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 40, offset: 25571},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 743, col: 50, offset: 25581},
								expr: &litMatcher{
									pos:        position{line: 743, col: 50, offset: 25581},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 743, col: 56, offset: 25587},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 743, col: 65, offset: 25596},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 747, col: 1, offset: 25737},
			expr: &actionExpr{
				pos: position{line: 747, col: 34, offset: 25770},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 747, col: 34, offset: 25770},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 747, col: 34, offset: 25770},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 40, offset: 25776},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 747, col: 48, offset: 25784},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 747, col: 49, offset: 25785},
									expr: &charClassMatcher{
										pos:        position{line: 747, col: 49, offset: 25785},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 8, offset: 25835},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 753, col: 1, offset: 25867},
			expr: &oneOrMoreExpr{
				pos: position{line: 753, col: 36, offset: 25902},
				expr: &actionExpr{
					pos: position{line: 753, col: 37, offset: 25903},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 753, col: 37, offset: 25903},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 753, col: 37, offset: 25903},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 38, offset: 25904},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 753, col: 48, offset: 25914},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 57, offset: 25923},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 758, col: 1, offset: 26136},
			expr: &actionExpr{
				pos: position{line: 758, col: 20, offset: 26155},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 758, col: 20, offset: 26155},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 758, col: 20, offset: 26155},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 758, col: 31, offset: 26166},
								expr: &ruleRefExpr{
									pos:  position{line: 758, col: 32, offset: 26167},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 759, col: 5, offset: 26192},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 767, col: 5, offset: 26483},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 16, offset: 26494},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 26517},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 768, col: 16, offset: 26528},
								expr: &ruleRefExpr{
									pos:  position{line: 768, col: 17, offset: 26529},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 772, col: 1, offset: 26663},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 26690},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 26690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 26690},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 773, col: 15, offset: 26700},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 773, col: 15, offset: 26700},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 773, col: 20, offset: 26705},
										expr: &ruleRefExpr{
											pos:  position{line: 773, col: 20, offset: 26705},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 36, offset: 26721},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 777, col: 1, offset: 26792},
			expr: &actionExpr{
				pos: position{line: 777, col: 23, offset: 26814},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 777, col: 23, offset: 26814},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 777, col: 33, offset: 26824},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 782, col: 1, offset: 26944},
			expr: &choiceExpr{
				pos: position{line: 784, col: 5, offset: 27000},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 27000},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 27000},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 784, col: 5, offset: 27000},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 784, col: 16, offset: 27011},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 17, offset: 27012},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 784, col: 37, offset: 27032},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 40, offset: 27035},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 784, col: 56, offset: 27051},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 784, col: 61, offset: 27056},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 68, offset: 27063},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 27263},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 27263},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 788, col: 5, offset: 27263},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 788, col: 16, offset: 27274},
										expr: &ruleRefExpr{
											pos:  position{line: 788, col: 17, offset: 27275},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 788, col: 37, offset: 27295},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 44, offset: 27302},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 792, col: 1, offset: 27403},
			expr: &actionExpr{
				pos: position{line: 792, col: 28, offset: 27430},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 792, col: 28, offset: 27430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 28, offset: 27430},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 39, offset: 27441},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 59, offset: 27461},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 792, col: 70, offset: 27472},
								expr: &seqExpr{
									pos: position{line: 792, col: 71, offset: 27473},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 792, col: 71, offset: 27473},
											expr: &ruleRefExpr{
												pos:  position{line: 792, col: 72, offset: 27474},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 792, col: 93, offset: 27495},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 796, col: 1, offset: 27601},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 27653},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 27653},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 27653},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 798, col: 5, offset: 27653},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 798, col: 16, offset: 27664},
										expr: &ruleRefExpr{
											pos:  position{line: 798, col: 17, offset: 27665},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 799, col: 5, offset: 27689},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 806, col: 5, offset: 27901},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 8, offset: 27904},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 806, col: 24, offset: 27920},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 29, offset: 27925},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 806, col: 35, offset: 27931},
										expr: &ruleRefExpr{
											pos:  position{line: 806, col: 36, offset: 27932},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 28124},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 28124},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 810, col: 5, offset: 28124},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 810, col: 16, offset: 28135},
										expr: &ruleRefExpr{
											pos:  position{line: 810, col: 17, offset: 28136},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 811, col: 5, offset: 28160},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 818, col: 5, offset: 28372},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 818, col: 11, offset: 28378},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 12, offset: 28379},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 822, col: 1, offset: 28480},
			expr: &actionExpr{
				pos: position{line: 822, col: 19, offset: 28498},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 822, col: 19, offset: 28498},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 822, col: 19, offset: 28498},
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 20, offset: 28499},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 28513},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 823, col: 15, offset: 28523},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 823, col: 15, offset: 28523},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 823, col: 15, offset: 28523},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 823, col: 24, offset: 28532},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 9, offset: 28624},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 825, col: 9, offset: 28624},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 825, col: 9, offset: 28624},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 825, col: 18, offset: 28633},
														expr: &ruleRefExpr{
															pos:  position{line: 825, col: 19, offset: 28634},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 825, col: 35, offset: 28650},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 831, col: 1, offset: 28767},
			expr: &actionExpr{
				pos: position{line: 832, col: 5, offset: 28790},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 832, col: 5, offset: 28790},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 832, col: 14, offset: 28799},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 832, col: 14, offset: 28799},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 28850},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 834, col: 11, offset: 28895},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 11, offset: 28895},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 835, col: 11, offset: 28913},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 835, col: 11, offset: 28913},
										expr: &ruleRefExpr{
											pos:  position{line: 835, col: 12, offset: 28914},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 836, col: 13, offset: 28933},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 836, col: 13, offset: 28933},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 15, offset: 28959},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 838, col: 15, offset: 28986},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 29006},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 29039},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 29069},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 842, col: 15, offset: 29099},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 843, col: 15, offset: 29130},
												name: "DocumentAttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 15, offset: 29175},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 845, col: 15, offset: 29206},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 846, col: 15, offset: 29239},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 847, col: 15, offset: 29263},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 854, col: 1, offset: 29486},
			expr: &actionExpr{
				pos: position{line: 854, col: 14, offset: 29499},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 854, col: 14, offset: 29499},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 854, col: 14, offset: 29499},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 854, col: 20, offset: 29505},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 854, col: 24, offset: 29509},
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 24, offset: 29509},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 854, col: 31, offset: 29516},
							expr: &ruleRefExpr{
								pos:  position{line: 854, col: 32, offset: 29517},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 861, col: 1, offset: 29801},
			expr: &choiceExpr{
				pos: position{line: 861, col: 15, offset: 29815},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 15, offset: 29815},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 41, offset: 29841},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 65, offset: 29865},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 863, col: 1, offset: 29884},
			expr: &choiceExpr{
				pos: position{line: 863, col: 32, offset: 29915},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 863, col: 32, offset: 29915},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 32, offset: 29915},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 863, col: 36, offset: 29919},
								expr: &litMatcher{
									pos:        position{line: 863, col: 37, offset: 29920},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 863, col: 43, offset: 29926},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 43, offset: 29926},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 863, col: 47, offset: 29930},
								expr: &litMatcher{
									pos:        position{line: 863, col: 48, offset: 29931},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 863, col: 54, offset: 29937},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 863, col: 54, offset: 29937},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 863, col: 58, offset: 29941},
								expr: &litMatcher{
									pos:        position{line: 863, col: 59, offset: 29942},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 865, col: 1, offset: 29948},
			expr: &choiceExpr{
				pos: position{line: 865, col: 34, offset: 29981},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 865, col: 34, offset: 29981},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 41, offset: 29988},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 48, offset: 29995},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 55, offset: 30002},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 865, col: 61, offset: 30008},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 867, col: 1, offset: 30013},
			expr: &actionExpr{
				pos: position{line: 867, col: 26, offset: 30038},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 867, col: 26, offset: 30038},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 867, col: 32, offset: 30044},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 867, col: 32, offset: 30044},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 868, col: 15, offset: 30079},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 869, col: 15, offset: 30116},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 870, col: 15, offset: 30156},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 871, col: 15, offset: 30185},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 872, col: 15, offset: 30216},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 876, col: 1, offset: 30370},
			expr: &choiceExpr{
				pos: position{line: 876, col: 28, offset: 30397},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 876, col: 28, offset: 30397},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 15, offset: 30431},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 15, offset: 30467},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 880, col: 1, offset: 30493},
			expr: &choiceExpr{
				pos: position{line: 880, col: 22, offset: 30514},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 880, col: 22, offset: 30514},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 15, offset: 30545},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 15, offset: 30578},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 883, col: 15, offset: 30614},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 884, col: 15, offset: 30650},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 886, col: 1, offset: 30674},
			expr: &choiceExpr{
				pos: position{line: 886, col: 33, offset: 30706},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 886, col: 33, offset: 30706},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 886, col: 39, offset: 30712},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 886, col: 39, offset: 30712},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 890, col: 1, offset: 30845},
			expr: &actionExpr{
				pos: position{line: 890, col: 25, offset: 30869},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 890, col: 25, offset: 30869},
					expr: &litMatcher{
						pos:        position{line: 890, col: 25, offset: 30869},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 894, col: 1, offset: 30910},
			expr: &actionExpr{
				pos: position{line: 894, col: 25, offset: 30934},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 894, col: 25, offset: 30934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 894, col: 25, offset: 30934},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 894, col: 30, offset: 30939},
							expr: &litMatcher{
								pos:        position{line: 894, col: 30, offset: 30939},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 902, col: 1, offset: 31036},
			expr: &choiceExpr{
				pos: position{line: 902, col: 13, offset: 31048},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 902, col: 13, offset: 31048},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 902, col: 35, offset: 31070},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 904, col: 1, offset: 31137},
			expr: &actionExpr{
				pos: position{line: 904, col: 24, offset: 31160},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 904, col: 24, offset: 31160},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 904, col: 24, offset: 31160},
							expr: &litMatcher{
								pos:        position{line: 904, col: 25, offset: 31161},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 904, col: 30, offset: 31166},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 35, offset: 31171},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 45, offset: 31181},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 904, col: 74, offset: 31210},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 908, col: 1, offset: 31291},
			expr: &seqExpr{
				pos: position{line: 908, col: 32, offset: 31322},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 908, col: 32, offset: 31322},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 908, col: 59, offset: 31349},
						expr: &seqExpr{
							pos: position{line: 908, col: 60, offset: 31350},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 908, col: 60, offset: 31350},
									expr: &litMatcher{
										pos:        position{line: 908, col: 62, offset: 31352},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 908, col: 69, offset: 31359},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 908, col: 69, offset: 31359},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 908, col: 77, offset: 31367},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 910, col: 1, offset: 31432},
			expr: &choiceExpr{
				pos: position{line: 910, col: 31, offset: 31462},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 910, col: 31, offset: 31462},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 911, col: 11, offset: 31478},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 11, offset: 31509},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 913, col: 11, offset: 31531},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 11, offset: 31555},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 11, offset: 31579},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 11, offset: 31605},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 11, offset: 31628},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 11, offset: 31644},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 919, col: 11, offset: 31673},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 11, offset: 31713},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 11, offset: 31756},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 924, col: 1, offset: 31795},
			expr: &actionExpr{
				pos: position{line: 924, col: 37, offset: 31831},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 924, col: 37, offset: 31831},
					expr: &seqExpr{
						pos: position{line: 924, col: 38, offset: 31832},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 924, col: 38, offset: 31832},
								expr: &litMatcher{
									pos:        position{line: 924, col: 39, offset: 31833},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 924, col: 44, offset: 31838},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 928, col: 1, offset: 31909},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 31954},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 929, col: 5, offset: 31954},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 930, col: 7, offset: 32051},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 930, col: 7, offset: 32051},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 930, col: 7, offset: 32051},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 12, offset: 32056},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 934, col: 1, offset: 32219},
			expr: &choiceExpr{
				pos: position{line: 934, col: 24, offset: 32242},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 24, offset: 32242},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 934, col: 24, offset: 32242},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 934, col: 25, offset: 32243},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 934, col: 25, offset: 32243},
											expr: &litMatcher{
												pos:        position{line: 934, col: 26, offset: 32244},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 934, col: 30, offset: 32248},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 934, col: 34, offset: 32252},
											expr: &litMatcher{
												pos:        position{line: 934, col: 35, offset: 32253},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 934, col: 40, offset: 32258},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 50, offset: 32268},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 79, offset: 32297},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 934, col: 83, offset: 32301},
									expr: &notExpr{
										pos: position{line: 934, col: 85, offset: 32303},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 86, offset: 32304},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 32491},
						run: (*parser).callonSingleQuoteBoldText16,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 32491},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 936, col: 5, offset: 32491},
									expr: &litMatcher{
										pos:        position{line: 936, col: 6, offset: 32492},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 11, offset: 32497},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 15, offset: 32501},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 936, col: 25, offset: 32511},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 936, col: 25, offset: 32511},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 936, col: 29, offset: 32515},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 58, offset: 32544},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 940, col: 1, offset: 32743},
			expr: &seqExpr{
				pos: position{line: 940, col: 32, offset: 32774},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 940, col: 32, offset: 32774},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 33, offset: 32775},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 940, col: 39, offset: 32781},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 39, offset: 32781},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 942, col: 1, offset: 32810},
			expr: &choiceExpr{
				pos: position{line: 942, col: 31, offset: 32840},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 942, col: 31, offset: 32840},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 11, offset: 32856},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 944, col: 11, offset: 32886},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 944, col: 11, offset: 32886},
								expr: &ruleRefExpr{
									pos:  position{line: 944, col: 11, offset: 32886},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 944, col: 18, offset: 32893},
								expr: &seqExpr{
									pos: position{line: 944, col: 19, offset: 32894},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 944, col: 19, offset: 32894},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 944, col: 23, offset: 32898},
											expr: &litMatcher{
												pos:        position{line: 944, col: 24, offset: 32899},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 11, offset: 32915},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 11, offset: 32937},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 11, offset: 32961},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 11, offset: 32985},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 11, offset: 33011},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 11, offset: 33034},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 11, offset: 33051},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 11, offset: 33080},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 11, offset: 33120},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 11, offset: 33163},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 956, col: 1, offset: 33201},
			expr: &actionExpr{
				pos: position{line: 956, col: 37, offset: 33237},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 956, col: 37, offset: 33237},
					expr: &charClassMatcher{
						pos:        position{line: 956, col: 37, offset: 33237},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 960, col: 1, offset: 33471},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 33516},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 961, col: 5, offset: 33516},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 962, col: 7, offset: 33613},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 962, col: 7, offset: 33613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 962, col: 7, offset: 33613},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 11, offset: 33617},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 966, col: 1, offset: 33780},
			expr: &choiceExpr{
				pos: position{line: 967, col: 5, offset: 33804},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 33804},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 33804},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 5, offset: 33804},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 18, offset: 33817},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 40, offset: 33839},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 967, col: 45, offset: 33844},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 55, offset: 33854},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 84, offset: 33883},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 9, offset: 34040},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 969, col: 9, offset: 34040},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 34040},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 22, offset: 34053},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 44, offset: 34075},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 49, offset: 34080},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 59, offset: 34090},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 88, offset: 34119},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 972, col: 9, offset: 34319},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 972, col: 9, offset: 34319},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 9, offset: 34319},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 22, offset: 34332},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 44, offset: 34354},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 48, offset: 34358},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 58, offset: 34368},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 87, offset: 34397},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 980, col: 1, offset: 34605},
			expr: &choiceExpr{
				pos: position{line: 980, col: 15, offset: 34619},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 15, offset: 34619},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 39, offset: 34643},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 982, col: 1, offset: 34666},
			expr: &actionExpr{
				pos: position{line: 982, col: 26, offset: 34691},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 982, col: 26, offset: 34691},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 982, col: 26, offset: 34691},
							expr: &litMatcher{
								pos:        position{line: 982, col: 27, offset: 34692},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 982, col: 32, offset: 34697},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 982, col: 37, offset: 34702},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 982, col: 47, offset: 34712},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 982, col: 78, offset: 34743},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 986, col: 1, offset: 34870},
			expr: &seqExpr{
				pos: position{line: 986, col: 34, offset: 34903},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 34, offset: 34903},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 986, col: 63, offset: 34932},
						expr: &seqExpr{
							pos: position{line: 986, col: 64, offset: 34933},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 986, col: 64, offset: 34933},
									expr: &litMatcher{
										pos:        position{line: 986, col: 66, offset: 34935},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 986, col: 73, offset: 34942},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 986, col: 73, offset: 34942},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 986, col: 81, offset: 34950},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 988, col: 1, offset: 35017},
			expr: &choiceExpr{
				pos: position{line: 988, col: 33, offset: 35049},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 33, offset: 35049},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 11, offset: 35065},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 11, offset: 35098},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 11, offset: 35118},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 11, offset: 35142},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 35166},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 35192},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 11, offset: 35215},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 11, offset: 35231},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 11, offset: 35260},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 11, offset: 35305},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1000, col: 1, offset: 35345},
			expr: &actionExpr{
				pos: position{line: 1000, col: 39, offset: 35383},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1000, col: 39, offset: 35383},
					expr: &seqExpr{
						pos: position{line: 1000, col: 40, offset: 35384},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1000, col: 40, offset: 35384},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 41, offset: 35385},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1000, col: 46, offset: 35390},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1004, col: 1, offset: 35461},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 35508},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1005, col: 5, offset: 35508},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1006, col: 7, offset: 35607},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1006, col: 7, offset: 35607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1006, col: 7, offset: 35607},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1006, col: 12, offset: 35612},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1010, col: 1, offset: 35777},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 26, offset: 35802},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 26, offset: 35802},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 26, offset: 35802},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1010, col: 27, offset: 35803},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1010, col: 27, offset: 35803},
											expr: &litMatcher{
												pos:        position{line: 1010, col: 28, offset: 35804},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1010, col: 32, offset: 35808},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1010, col: 36, offset: 35812},
											expr: &litMatcher{
												pos:        position{line: 1010, col: 37, offset: 35813},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 42, offset: 35818},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 52, offset: 35828},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 83, offset: 35859},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 36042},
						run: (*parser).callonSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 36042},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1012, col: 5, offset: 36042},
									expr: &litMatcher{
										pos:        position{line: 1012, col: 6, offset: 36043},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 11, offset: 36048},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 15, offset: 36052},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1012, col: 25, offset: 36062},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1012, col: 25, offset: 36062},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1012, col: 29, offset: 36066},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 60, offset: 36097},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1016, col: 1, offset: 36300},
			expr: &seqExpr{
				pos: position{line: 1016, col: 34, offset: 36333},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1016, col: 34, offset: 36333},
						expr: &ruleRefExpr{
							pos:  position{line: 1016, col: 35, offset: 36334},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1016, col: 41, offset: 36340},
						expr: &ruleRefExpr{
							pos:  position{line: 1016, col: 41, offset: 36340},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1018, col: 1, offset: 36371},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 33, offset: 36403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1018, col: 33, offset: 36403},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 11, offset: 36419},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1020, col: 11, offset: 36451},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1020, col: 11, offset: 36451},
								expr: &ruleRefExpr{
									pos:  position{line: 1020, col: 11, offset: 36451},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1020, col: 18, offset: 36458},
								expr: &seqExpr{
									pos: position{line: 1020, col: 19, offset: 36459},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1020, col: 19, offset: 36459},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1020, col: 23, offset: 36463},
											expr: &litMatcher{
												pos:        position{line: 1020, col: 24, offset: 36464},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 11, offset: 36480},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 11, offset: 36500},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 11, offset: 36524},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 11, offset: 36548},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 11, offset: 36574},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 11, offset: 36597},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 11, offset: 36614},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 11, offset: 36643},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 11, offset: 36683},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 11, offset: 36728},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1032, col: 1, offset: 36768},
			expr: &actionExpr{
				pos: position{line: 1032, col: 39, offset: 36806},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 39, offset: 36806},
					expr: &charClassMatcher{
						pos:        position{line: 1032, col: 39, offset: 36806},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1036, col: 1, offset: 37040},
			expr: &choiceExpr{
				pos: position{line: 1037, col: 5, offset: 37087},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1037, col: 5, offset: 37087},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1038, col: 7, offset: 37186},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1038, col: 7, offset: 37186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1038, col: 7, offset: 37186},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1038, col: 11, offset: 37190},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1042, col: 1, offset: 37356},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 37382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 37382},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 37382},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 37382},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 18, offset: 37395},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1043, col: 40, offset: 37417},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 45, offset: 37422},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 55, offset: 37432},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1043, col: 86, offset: 37463},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1045, col: 9, offset: 37620},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1045, col: 9, offset: 37620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1045, col: 9, offset: 37620},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 22, offset: 37633},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 44, offset: 37655},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1045, col: 49, offset: 37660},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 59, offset: 37670},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1045, col: 90, offset: 37701},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 9, offset: 37901},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1048, col: 9, offset: 37901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1048, col: 9, offset: 37901},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 22, offset: 37914},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 44, offset: 37936},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 48, offset: 37940},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 58, offset: 37950},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 89, offset: 37981},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1055, col: 1, offset: 38191},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 18, offset: 38208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1055, col: 18, offset: 38208},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 45, offset: 38235},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1057, col: 1, offset: 38261},
			expr: &actionExpr{
				pos: position{line: 1057, col: 29, offset: 38289},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 29, offset: 38289},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1057, col: 29, offset: 38289},
							expr: &litMatcher{
								pos:        position{line: 1057, col: 30, offset: 38290},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1057, col: 35, offset: 38295},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1057, col: 40, offset: 38300},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 50, offset: 38310},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1057, col: 84, offset: 38344},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1061, col: 1, offset: 38474},
			expr: &seqExpr{
				pos: position{line: 1061, col: 37, offset: 38510},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1061, col: 37, offset: 38510},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1061, col: 69, offset: 38542},
						expr: &seqExpr{
							pos: position{line: 1061, col: 70, offset: 38543},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 70, offset: 38543},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 72, offset: 38545},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1061, col: 79, offset: 38552},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1061, col: 79, offset: 38552},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1061, col: 87, offset: 38560},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1063, col: 1, offset: 38629},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 36, offset: 38664},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1063, col: 36, offset: 38664},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 38680},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 38716},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 38735},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 38757},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 38781},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 38807},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 38830},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 11, offset: 38846},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 38875},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 38923},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1075, col: 1, offset: 38966},
			expr: &actionExpr{
				pos: position{line: 1075, col: 42, offset: 39007},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1075, col: 42, offset: 39007},
					expr: &seqExpr{
						pos: position{line: 1075, col: 43, offset: 39008},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1075, col: 43, offset: 39008},
								expr: &litMatcher{
									pos:        position{line: 1075, col: 44, offset: 39009},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1075, col: 49, offset: 39014},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1079, col: 1, offset: 39085},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 39135},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1080, col: 5, offset: 39135},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1081, col: 7, offset: 39237},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1081, col: 7, offset: 39237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 7, offset: 39237},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1081, col: 12, offset: 39242},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1085, col: 1, offset: 39410},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 29, offset: 39438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 29, offset: 39438},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1085, col: 29, offset: 39438},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1085, col: 30, offset: 39439},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1085, col: 30, offset: 39439},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 31, offset: 39440},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1085, col: 35, offset: 39444},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1085, col: 39, offset: 39448},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 40, offset: 39449},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 45, offset: 39454},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 55, offset: 39464},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 89, offset: 39498},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 39684},
						run: (*parser).callonSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 1087, col: 5, offset: 39684},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1087, col: 5, offset: 39684},
									expr: &litMatcher{
										pos:        position{line: 1087, col: 6, offset: 39685},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 11, offset: 39690},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 15, offset: 39694},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1087, col: 25, offset: 39704},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1087, col: 25, offset: 39704},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1087, col: 29, offset: 39708},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 63, offset: 39742},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1091, col: 1, offset: 39951},
			expr: &seqExpr{
				pos: position{line: 1091, col: 37, offset: 39987},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1091, col: 37, offset: 39987},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 38, offset: 39988},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1091, col: 44, offset: 39994},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 44, offset: 39994},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1093, col: 1, offset: 40028},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 37, offset: 40064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 37, offset: 40064},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 40080},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1095, col: 11, offset: 40116},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1095, col: 11, offset: 40116},
								expr: &ruleRefExpr{
									pos:  position{line: 1095, col: 11, offset: 40116},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1095, col: 18, offset: 40123},
								expr: &seqExpr{
									pos: position{line: 1095, col: 19, offset: 40124},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1095, col: 19, offset: 40124},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1095, col: 23, offset: 40128},
											expr: &litMatcher{
												pos:        position{line: 1095, col: 24, offset: 40129},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 40257},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 40295},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 40314},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 40335},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 40359},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 40385},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 40408},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 40424},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 40453},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 11, offset: 40493},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 11, offset: 40541},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1108, col: 1, offset: 40584},
			expr: &actionExpr{
				pos: position{line: 1108, col: 42, offset: 40625},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1108, col: 42, offset: 40625},
					expr: &charClassMatcher{
						pos:        position{line: 1108, col: 42, offset: 40625},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1112, col: 1, offset: 40851},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 5, offset: 40901},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1113, col: 5, offset: 40901},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1114, col: 7, offset: 41003},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1114, col: 7, offset: 41003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 7, offset: 41003},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 11, offset: 41007},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1118, col: 1, offset: 41176},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 41205},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1119, col: 5, offset: 41205},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1119, col: 5, offset: 41205},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1119, col: 5, offset: 41205},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 18, offset: 41218},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 40, offset: 41240},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 45, offset: 41245},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 55, offset: 41255},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 89, offset: 41289},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 9, offset: 41446},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1121, col: 9, offset: 41446},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 9, offset: 41446},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 22, offset: 41459},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 44, offset: 41481},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 49, offset: 41486},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 59, offset: 41496},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 93, offset: 41530},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1124, col: 9, offset: 41730},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1124, col: 9, offset: 41730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 9, offset: 41730},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 22, offset: 41743},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 44, offset: 41765},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 48, offset: 41769},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 58, offset: 41779},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 92, offset: 41813},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1128, col: 1, offset: 41963},
			expr: &actionExpr{
				pos: position{line: 1128, col: 18, offset: 41980},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 18, offset: 41980},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1128, col: 18, offset: 41980},
							expr: &litMatcher{
								pos:        position{line: 1128, col: 19, offset: 41981},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 23, offset: 41985},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 27, offset: 41989},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 36, offset: 41998},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 58, offset: 42020},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1132, col: 1, offset: 42109},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 25, offset: 42133},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 25, offset: 42133},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 38, offset: 42146},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1134, col: 1, offset: 42165},
			expr: &actionExpr{
				pos: position{line: 1134, col: 21, offset: 42185},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1134, col: 21, offset: 42185},
					expr: &charClassMatcher{
						pos:        position{line: 1134, col: 21, offset: 42185},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1138, col: 1, offset: 42262},
			expr: &actionExpr{
				pos: position{line: 1138, col: 25, offset: 42286},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 25, offset: 42286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1138, col: 25, offset: 42286},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 38, offset: 42299},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1138, col: 60, offset: 42321},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1138, col: 64, offset: 42325},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 73, offset: 42334},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1138, col: 95, offset: 42356},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1142, col: 1, offset: 42485},
			expr: &actionExpr{
				pos: position{line: 1142, col: 20, offset: 42504},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 20, offset: 42504},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1142, col: 20, offset: 42504},
							expr: &litMatcher{
								pos:        position{line: 1142, col: 21, offset: 42505},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1142, col: 25, offset: 42509},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 29, offset: 42513},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 38, offset: 42522},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1142, col: 62, offset: 42546},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1146, col: 1, offset: 42637},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 27, offset: 42663},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 27, offset: 42663},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 40, offset: 42676},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1148, col: 1, offset: 42697},
			expr: &actionExpr{
				pos: position{line: 1148, col: 23, offset: 42719},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1148, col: 23, offset: 42719},
					expr: &charClassMatcher{
						pos:        position{line: 1148, col: 23, offset: 42719},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1152, col: 1, offset: 42796},
			expr: &actionExpr{
				pos: position{line: 1152, col: 27, offset: 42822},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 27, offset: 42822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1152, col: 27, offset: 42822},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 40, offset: 42835},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1152, col: 62, offset: 42857},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 66, offset: 42861},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 75, offset: 42870},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1152, col: 99, offset: 42894},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1159, col: 1, offset: 43136},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 22, offset: 43157},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 22, offset: 43157},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 46, offset: 43181},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 70, offset: 43205},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1161, col: 1, offset: 43223},
			expr: &litMatcher{
				pos:        position{line: 1161, col: 32, offset: 43254},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1163, col: 1, offset: 43259},
			expr: &actionExpr{
				pos: position{line: 1163, col: 26, offset: 43284},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 26, offset: 43284},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1163, col: 26, offset: 43284},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 54, offset: 43312},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 63, offset: 43321},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1163, col: 93, offset: 43351},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1163, col: 121, offset: 43379},
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 122, offset: 43380},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1167, col: 1, offset: 43485},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 33, offset: 43517},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1167, col: 34, offset: 43518},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1167, col: 34, offset: 43518},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1167, col: 35, offset: 43519},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1167, col: 35, offset: 43519},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 36, offset: 43520},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1167, col: 64, offset: 43548},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 65, offset: 43549},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1167, col: 71, offset: 43555},
											expr: &ruleRefExpr{
												pos:  position{line: 1167, col: 72, offset: 43556},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1167, col: 80, offset: 43564,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1167, col: 83, offset: 43567},
									expr: &seqExpr{
										pos: position{line: 1167, col: 84, offset: 43568},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1167, col: 84, offset: 43568},
												expr: &seqExpr{
													pos: position{line: 1167, col: 86, offset: 43570},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1167, col: 86, offset: 43570},
															expr: &ruleRefExpr{
																pos:  position{line: 1167, col: 86, offset: 43570},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 93, offset: 43577},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1167, col: 122, offset: 43606},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 123, offset: 43607},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1167, col: 151, offset: 43635},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 152, offset: 43636},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1167, col: 160, offset: 43644,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 7, offset: 43786},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1169, col: 8, offset: 43787},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1169, col: 8, offset: 43787},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 9, offset: 43788},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1169, col: 15, offset: 43794},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 16, offset: 43795},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1169, col: 24, offset: 43803},
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 25, offset: 43804},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1169, col: 53, offset: 43832,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1173, col: 1, offset: 43914},
			expr: &litMatcher{
				pos:        position{line: 1173, col: 32, offset: 43945},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1175, col: 1, offset: 43952},
			expr: &actionExpr{
				pos: position{line: 1175, col: 26, offset: 43977},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 26, offset: 43977},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1175, col: 26, offset: 43977},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1175, col: 54, offset: 44005},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 63, offset: 44014},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 93, offset: 44044},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1175, col: 121, offset: 44072},
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 122, offset: 44073},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1179, col: 1, offset: 44178},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 33, offset: 44210},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1179, col: 34, offset: 44211},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1179, col: 34, offset: 44211},
							expr: &seqExpr{
								pos: position{line: 1179, col: 35, offset: 44212},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1179, col: 35, offset: 44212},
										expr: &ruleRefExpr{
											pos:  position{line: 1179, col: 36, offset: 44213},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1179, col: 64, offset: 44241,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1181, col: 7, offset: 44406},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1181, col: 7, offset: 44406},
							expr: &seqExpr{
								pos: position{line: 1181, col: 8, offset: 44407},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1181, col: 8, offset: 44407},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 9, offset: 44408},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1181, col: 15, offset: 44414},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 16, offset: 44415},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1181, col: 24, offset: 44423},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 25, offset: 44424},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1181, col: 53, offset: 44452,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1185, col: 1, offset: 44535},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 21, offset: 44555},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1185, col: 21, offset: 44555},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1185, col: 21, offset: 44555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1185, col: 21, offset: 44555},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 30, offset: 44564},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1185, col: 38, offset: 44572},
										expr: &ruleRefExpr{
											pos:  position{line: 1185, col: 39, offset: 44573},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1185, col: 67, offset: 44601},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 44697},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 44697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1187, col: 5, offset: 44697},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 15, offset: 44707},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1187, col: 23, offset: 44715},
										expr: &choiceExpr{
											pos: position{line: 1187, col: 24, offset: 44716},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1187, col: 24, offset: 44716},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1187, col: 37, offset: 44729},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 65, offset: 44757},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1191, col: 1, offset: 44853},
			expr: &actionExpr{
				pos: position{line: 1191, col: 30, offset: 44882},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1191, col: 30, offset: 44882},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1198, col: 1, offset: 45055},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 19, offset: 45073},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 19, offset: 45073},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 44, offset: 45098},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1200, col: 1, offset: 45123},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 27, offset: 45149},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1200, col: 27, offset: 45149},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1200, col: 27, offset: 45149},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 27, offset: 45149},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 32, offset: 45154},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 36, offset: 45158},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1200, col: 40, offset: 45162},
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 40, offset: 45162},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 47, offset: 45169},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1200, col: 51, offset: 45173},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1200, col: 58, offset: 45180},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1200, col: 79, offset: 45201},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1202, col: 5, offset: 45284},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1202, col: 5, offset: 45284},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1202, col: 5, offset: 45284},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1202, col: 10, offset: 45289},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1202, col: 14, offset: 45293},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1202, col: 18, offset: 45297},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1206, col: 1, offset: 45369},
			expr: &actionExpr{
				pos: position{line: 1206, col: 27, offset: 45395},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 27, offset: 45395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1206, col: 27, offset: 45395},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 35, offset: 45403},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 40, offset: 45408},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 54, offset: 45422},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 72, offset: 45440},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1210, col: 1, offset: 45570},
			expr: &ruleRefExpr{
				pos:  position{line: 1210, col: 24, offset: 45593},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1215, col: 1, offset: 45715},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 9, offset: 45723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 9, offset: 45723},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 24, offset: 45738},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1218, col: 1, offset: 45819},
			expr: &actionExpr{
				pos: position{line: 1218, col: 17, offset: 45835},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 17, offset: 45835},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1218, col: 17, offset: 45835},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 25, offset: 45843},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 30, offset: 45848},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 40, offset: 45858},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 58, offset: 45876},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1222, col: 1, offset: 45994},
			expr: &actionExpr{
				pos: position{line: 1222, col: 17, offset: 46010},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 17, offset: 46010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1222, col: 17, offset: 46010},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 22, offset: 46015},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1222, col: 42, offset: 46035},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1222, col: 59, offset: 46052},
								expr: &ruleRefExpr{
									pos:  position{line: 1222, col: 60, offset: 46053},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1226, col: 1, offset: 46146},
			expr: &actionExpr{
				pos: position{line: 1226, col: 19, offset: 46164},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 19, offset: 46164},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1226, col: 19, offset: 46164},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 23, offset: 46168},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1226, col: 33, offset: 46178},
								expr: &ruleRefExpr{
									pos:  position{line: 1226, col: 34, offset: 46179},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1227, col: 5, offset: 46211},
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 5, offset: 46211},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 12, offset: 46218},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1227, col: 23, offset: 46229},
								expr: &ruleRefExpr{
									pos:  position{line: 1227, col: 24, offset: 46230},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1227, col: 43, offset: 46249},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1231, col: 1, offset: 46366},
			expr: &actionExpr{
				pos: position{line: 1231, col: 30, offset: 46395},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 30, offset: 46395},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1233, col: 5, offset: 46446},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1233, col: 6, offset: 46447},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1233, col: 6, offset: 46447},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1233, col: 6, offset: 46447},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1233, col: 11, offset: 46452},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1233, col: 20, offset: 46461},
												expr: &choiceExpr{
													pos: position{line: 1233, col: 21, offset: 46462},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1233, col: 21, offset: 46462},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1233, col: 34, offset: 46475},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1233, col: 56, offset: 46497},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1233, col: 61, offset: 46502},
											expr: &notExpr{
												pos: position{line: 1233, col: 63, offset: 46504},
												expr: &litMatcher{
													pos:        position{line: 1233, col: 64, offset: 46505},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1233, col: 69, offset: 46510},
											expr: &litMatcher{
												pos:        position{line: 1233, col: 69, offset: 46510},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1237, col: 6, offset: 46637},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1237, col: 6, offset: 46637},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1237, col: 6, offset: 46637},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1237, col: 15, offset: 46646},
												expr: &choiceExpr{
													pos: position{line: 1237, col: 16, offset: 46647},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1237, col: 16, offset: 46647},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1237, col: 29, offset: 46660},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1237, col: 53, offset: 46684},
											expr: &notExpr{
												pos: position{line: 1237, col: 55, offset: 46686},
												expr: &litMatcher{
													pos:        position{line: 1237, col: 56, offset: 46687},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1237, col: 61, offset: 46692},
											expr: &litMatcher{
												pos:        position{line: 1237, col: 61, offset: 46692},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1243, col: 1, offset: 46806},
			expr: &actionExpr{
				pos: position{line: 1243, col: 18, offset: 46823},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1243, col: 18, offset: 46823},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1247, col: 1, offset: 46909},
			expr: &actionExpr{
				pos: position{line: 1247, col: 24, offset: 46932},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1247, col: 24, offset: 46932},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1251, col: 1, offset: 47025},
			expr: &actionExpr{
				pos: position{line: 1251, col: 26, offset: 47050},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1251, col: 26, offset: 47050},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1256, col: 1, offset: 47207},
			expr: &actionExpr{
				pos: position{line: 1257, col: 5, offset: 47227},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 5, offset: 47227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1257, col: 5, offset: 47227},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1257, col: 14, offset: 47236},
								expr: &choiceExpr{
									pos: position{line: 1257, col: 15, offset: 47237},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1257, col: 15, offset: 47237},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1258, col: 11, offset: 47252},
											expr: &ruleRefExpr{
												pos:  position{line: 1258, col: 11, offset: 47252},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1259, col: 11, offset: 47270},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1260, col: 11, offset: 47294},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1261, col: 11, offset: 47316},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1262, col: 11, offset: 47334},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1262, col: 21, offset: 47344},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1266, col: 1, offset: 47414},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 17, offset: 47430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 17, offset: 47430},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 40, offset: 47453},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1269, col: 1, offset: 47589},
			expr: &actionExpr{
				pos: position{line: 1269, col: 25, offset: 47613},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 25, offset: 47613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1269, col: 25, offset: 47613},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 33, offset: 47621},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1269, col: 38, offset: 47626},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 38, offset: 47626},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 57, offset: 47645},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 79, offset: 47667},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 97, offset: 47685},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1273, col: 1, offset: 47803},
			expr: &actionExpr{
				pos: position{line: 1273, col: 25, offset: 47827},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 25, offset: 47827},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1273, col: 25, offset: 47827},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 30, offset: 47832},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 48, offset: 47850},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1273, col: 65, offset: 47867},
								expr: &ruleRefExpr{
									pos:  position{line: 1273, col: 66, offset: 47868},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1280, col: 1, offset: 48063},
			expr: &actionExpr{
				pos: position{line: 1280, col: 15, offset: 48077},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 15, offset: 48077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 15, offset: 48077},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1280, col: 26, offset: 48088},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 27, offset: 48089},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1280, col: 47, offset: 48109},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 57, offset: 48119},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 63, offset: 48125},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 73, offset: 48135},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 91, offset: 48153},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1280, col: 108, offset: 48170},
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 108, offset: 48170},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1280, col: 115, offset: 48177},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1284, col: 1, offset: 48296},
			expr: &actionExpr{
				pos: position{line: 1284, col: 16, offset: 48311},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 16, offset: 48311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1284, col: 16, offset: 48311},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1284, col: 25, offset: 48320},
							expr: &litMatcher{
								pos:        position{line: 1284, col: 26, offset: 48321},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 30, offset: 48325},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 36, offset: 48331},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 46, offset: 48341},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 64, offset: 48359},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1288, col: 1, offset: 48480},
			expr: &actionExpr{
				pos: position{line: 1288, col: 20, offset: 48499},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 20, offset: 48499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1288, col: 20, offset: 48499},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 24, offset: 48503},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 28, offset: 48507},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 29, offset: 48508},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 56, offset: 48535},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 56, offset: 48535},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 61, offset: 48540},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 67, offset: 48546},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 68, offset: 48547},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 95, offset: 48574},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 95, offset: 48574},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 100, offset: 48579},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1288, col: 107, offset: 48586},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 108, offset: 48587},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1288, col: 135, offset: 48614},
							expr: &litMatcher{
								pos:        position{line: 1288, col: 135, offset: 48614},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1288, col: 140, offset: 48619},
							expr: &ruleRefExpr{
								pos:  position{line: 1288, col: 140, offset: 48619},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 147, offset: 48626},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1288, col: 158, offset: 48637},
								expr: &ruleRefExpr{
									pos:  position{line: 1288, col: 159, offset: 48638},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1288, col: 178, offset: 48657},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1295, col: 1, offset: 48947},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 19, offset: 48965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1295, col: 19, offset: 48965},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1295, col: 19, offset: 48965},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 19, offset: 48965},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1295, col: 32, offset: 48978},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 41, offset: 48987},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1295, col: 58, offset: 49004},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 49072},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1297, col: 5, offset: 49072},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 5, offset: 49072},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1297, col: 17, offset: 49084},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1297, col: 22, offset: 49089},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 35, offset: 49102},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1297, col: 39, offset: 49106},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1297, col: 47, offset: 49114},
										expr: &ruleRefExpr{
											pos:  position{line: 1297, col: 48, offset: 49115},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1297, col: 66, offset: 49133},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1301, col: 1, offset: 49194},
			expr: &ruleRefExpr{
				pos:  position{line: 1301, col: 16, offset: 49209},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1303, col: 1, offset: 49220},
			expr: &actionExpr{
				pos: position{line: 1303, col: 20, offset: 49239},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1303, col: 20, offset: 49239},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1303, col: 29, offset: 49248},
						expr: &seqExpr{
							pos: position{line: 1303, col: 30, offset: 49249},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1303, col: 30, offset: 49249},
									expr: &litMatcher{
										pos:        position{line: 1303, col: 31, offset: 49250},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1303, col: 35, offset: 49254},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1310, col: 1, offset: 49578},
			expr: &actionExpr{
				pos: position{line: 1310, col: 19, offset: 49596},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 19, offset: 49596},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1310, col: 19, offset: 49596},
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 20, offset: 49597},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1311, col: 5, offset: 49685},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1311, col: 12, offset: 49692},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1311, col: 12, offset: 49692},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 49715},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 49739},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 11, offset: 49763},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 11, offset: 49785},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 11, offset: 49807},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 11, offset: 49830},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1318, col: 11, offset: 49858},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1319, col: 11, offset: 49885},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 11, offset: 49901},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1324, col: 1, offset: 49942},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 19, offset: 49960},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1324, col: 19, offset: 49960},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1324, col: 19, offset: 49960},
								expr: &ruleRefExpr{
									pos:  position{line: 1324, col: 21, offset: 49962},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1324, col: 31, offset: 49972},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 19, offset: 50043},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 19, offset: 50083},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 19, offset: 50124},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 19, offset: 50165},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 19, offset: 50206},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 19, offset: 50244},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 19, offset: 50284},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1333, col: 1, offset: 50311},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 20, offset: 50330},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 20, offset: 50330},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 36, offset: 50346},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1335, col: 1, offset: 50360},
			expr: &actionExpr{
				pos: position{line: 1335, col: 17, offset: 50376},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 17, offset: 50376},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1335, col: 17, offset: 50376},
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 18, offset: 50377},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 22, offset: 50381},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 31, offset: 50390},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 52, offset: 50411},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1335, col: 61, offset: 50420},
								expr: &ruleRefExpr{
									pos:  position{line: 1335, col: 62, offset: 50421},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1335, col: 73, offset: 50432},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1339, col: 1, offset: 50502},
			expr: &actionExpr{
				pos: position{line: 1339, col: 24, offset: 50525},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1339, col: 24, offset: 50525},
					expr: &seqExpr{
						pos: position{line: 1339, col: 25, offset: 50526},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1339, col: 25, offset: 50526},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 26, offset: 50527},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1339, col: 36, offset: 50537},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1339, col: 36, offset: 50537},
										expr: &ruleRefExpr{
											pos:  position{line: 1339, col: 36, offset: 50537},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1339, col: 45, offset: 50546},
										expr: &charClassMatcher{
											pos:        position{line: 1339, col: 45, offset: 50546},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1343, col: 1, offset: 50596},
			expr: &oneOrMoreExpr{
				pos: position{line: 1343, col: 13, offset: 50608},
				expr: &ruleRefExpr{
					pos:  position{line: 1343, col: 13, offset: 50608},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1345, col: 1, offset: 50618},
			expr: &actionExpr{
				pos: position{line: 1345, col: 12, offset: 50629},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 12, offset: 50629},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1345, col: 12, offset: 50629},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 16, offset: 50633},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1345, col: 21, offset: 50638},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1345, col: 21, offset: 50638},
									expr: &charClassMatcher{
										pos:        position{line: 1345, col: 21, offset: 50638},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1345, col: 69, offset: 50686},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1345, col: 73, offset: 50690},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 73, offset: 50690},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1345, col: 80, offset: 50697},
							expr: &choiceExpr{
								pos: position{line: 1345, col: 82, offset: 50699},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1345, col: 82, offset: 50699},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 88, offset: 50705},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1349, col: 1, offset: 50758},
			expr: &actionExpr{
				pos: position{line: 1349, col: 20, offset: 50777},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 20, offset: 50777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 20, offset: 50777},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 25, offset: 50782},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 48, offset: 50805},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1349, col: 61, offset: 50818},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 61, offset: 50818},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1353, col: 1, offset: 50915},
			expr: &actionExpr{
				pos: position{line: 1353, col: 26, offset: 50940},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 26, offset: 50940},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1353, col: 26, offset: 50940},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 30, offset: 50944},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1353, col: 35, offset: 50949},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1353, col: 35, offset: 50949},
									expr: &charClassMatcher{
										pos:        position{line: 1353, col: 35, offset: 50949},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1353, col: 83, offset: 50997},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1353, col: 87, offset: 51001},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 87, offset: 51001},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1360, col: 1, offset: 51228},
			expr: &seqExpr{
				pos: position{line: 1360, col: 25, offset: 51252},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1360, col: 25, offset: 51252},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1360, col: 31, offset: 51258},
						expr: &ruleRefExpr{
							pos:  position{line: 1360, col: 31, offset: 51258},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 38, offset: 51265},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1362, col: 1, offset: 51325},
			expr: &seqExpr{
				pos: position{line: 1362, col: 30, offset: 51354},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1362, col: 30, offset: 51354},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1362, col: 36, offset: 51360},
						expr: &ruleRefExpr{
							pos:  position{line: 1362, col: 36, offset: 51360},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1362, col: 43, offset: 51367},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1364, col: 1, offset: 51372},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 28, offset: 51399},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1364, col: 29, offset: 51400},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1364, col: 29, offset: 51400},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1364, col: 35, offset: 51406},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 35, offset: 51406},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1364, col: 42, offset: 51413},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 49, offset: 51420},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1366, col: 1, offset: 51425},
			expr: &actionExpr{
				pos: position{line: 1366, col: 16, offset: 51440},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 16, offset: 51440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1366, col: 16, offset: 51440},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1366, col: 27, offset: 51451},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 28, offset: 51452},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1366, col: 48, offset: 51472},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 74, offset: 51498},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 83, offset: 51507},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1366, col: 111, offset: 51535},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1370, col: 1, offset: 51650},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1370, col: 31, offset: 51680},
				expr: &actionExpr{
					pos: position{line: 1370, col: 32, offset: 51681},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1370, col: 32, offset: 51681},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1370, col: 32, offset: 51681},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 33, offset: 51682},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1370, col: 57, offset: 51706},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 66, offset: 51715},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1377, col: 1, offset: 52052},
			expr: &seqExpr{
				pos: position{line: 1377, col: 26, offset: 52077},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1377, col: 26, offset: 52077},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1377, col: 33, offset: 52084},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 33, offset: 52084},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 40, offset: 52091},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1379, col: 1, offset: 52096},
			expr: &seqExpr{
				pos: position{line: 1379, col: 31, offset: 52126},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1379, col: 31, offset: 52126},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1379, col: 38, offset: 52133},
						expr: &ruleRefExpr{
							pos:  position{line: 1379, col: 38, offset: 52133},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 45, offset: 52140},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1381, col: 1, offset: 52145},
			expr: &choiceExpr{
				pos: position{line: 1381, col: 29, offset: 52173},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1381, col: 30, offset: 52174},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1381, col: 30, offset: 52174},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1381, col: 37, offset: 52181},
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 37, offset: 52181},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1381, col: 44, offset: 52188},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 51, offset: 52195},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1383, col: 1, offset: 52200},
			expr: &actionExpr{
				pos: position{line: 1383, col: 17, offset: 52216},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 17, offset: 52216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1383, col: 17, offset: 52216},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1383, col: 28, offset: 52227},
								expr: &ruleRefExpr{
									pos:  position{line: 1383, col: 29, offset: 52228},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 49, offset: 52248},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 76, offset: 52275},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 85, offset: 52284},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 114, offset: 52313},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1387, col: 1, offset: 52430},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1387, col: 32, offset: 52461},
				expr: &actionExpr{
					pos: position{line: 1387, col: 33, offset: 52462},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1387, col: 33, offset: 52462},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1387, col: 33, offset: 52462},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 34, offset: 52463},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1387, col: 59, offset: 52488},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 68, offset: 52497},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1394, col: 1, offset: 52834},
			expr: &seqExpr{
				pos: position{line: 1394, col: 26, offset: 52859},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1394, col: 26, offset: 52859},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1394, col: 33, offset: 52866},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 33, offset: 52866},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 40, offset: 52873},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1396, col: 1, offset: 52878},
			expr: &seqExpr{
				pos: position{line: 1396, col: 31, offset: 52908},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1396, col: 31, offset: 52908},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1396, col: 38, offset: 52915},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 38, offset: 52915},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 45, offset: 52922},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1398, col: 1, offset: 52927},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 29, offset: 52955},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1398, col: 30, offset: 52956},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1398, col: 30, offset: 52956},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1398, col: 37, offset: 52963},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 37, offset: 52963},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1398, col: 44, offset: 52970},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 51, offset: 52977},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1400, col: 1, offset: 52982},
			expr: &actionExpr{
				pos: position{line: 1400, col: 17, offset: 52998},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 17, offset: 52998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 17, offset: 52998},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1400, col: 28, offset: 53009},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 29, offset: 53010},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 49, offset: 53030},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 76, offset: 53057},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 85, offset: 53066},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 114, offset: 53095},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1404, col: 1, offset: 53212},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1404, col: 32, offset: 53243},
				expr: &actionExpr{
					pos: position{line: 1404, col: 33, offset: 53244},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1404, col: 33, offset: 53244},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1404, col: 33, offset: 53244},
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 34, offset: 53245},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1404, col: 59, offset: 53270},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 68, offset: 53279},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1411, col: 1, offset: 53614},
			expr: &seqExpr{
				pos: position{line: 1411, col: 24, offset: 53637},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1411, col: 24, offset: 53637},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1411, col: 31, offset: 53644},
						expr: &ruleRefExpr{
							pos:  position{line: 1411, col: 31, offset: 53644},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 38, offset: 53651},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1413, col: 1, offset: 53681},
			expr: &seqExpr{
				pos: position{line: 1413, col: 29, offset: 53709},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1413, col: 29, offset: 53709},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1413, col: 36, offset: 53716},
						expr: &ruleRefExpr{
							pos:  position{line: 1413, col: 36, offset: 53716},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 43, offset: 53723},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1415, col: 1, offset: 53753},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 27, offset: 53779},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1415, col: 28, offset: 53780},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1415, col: 28, offset: 53780},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1415, col: 35, offset: 53787},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 35, offset: 53787},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1415, col: 42, offset: 53794},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 49, offset: 53801},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1417, col: 1, offset: 53831},
			expr: &actionExpr{
				pos: position{line: 1417, col: 15, offset: 53845},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 15, offset: 53845},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 15, offset: 53845},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1417, col: 26, offset: 53856},
								expr: &ruleRefExpr{
									pos:  position{line: 1417, col: 27, offset: 53857},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1417, col: 47, offset: 53877},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 72, offset: 53902},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 81, offset: 53911},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1417, col: 108, offset: 53938},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1421, col: 1, offset: 54051},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1421, col: 30, offset: 54080},
				expr: &actionExpr{
					pos: position{line: 1421, col: 31, offset: 54081},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1421, col: 31, offset: 54081},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1421, col: 31, offset: 54081},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 32, offset: 54082},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1421, col: 55, offset: 54105},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 64, offset: 54114},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1430, col: 1, offset: 54498},
			expr: &actionExpr{
				pos: position{line: 1430, col: 15, offset: 54512},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1430, col: 15, offset: 54512},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1430, col: 15, offset: 54512},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1430, col: 27, offset: 54524},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1431, col: 5, offset: 54548},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 5, offset: 54734},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 30, offset: 54759},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 39, offset: 54768},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 66, offset: 54795},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1439, col: 1, offset: 54916},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1439, col: 30, offset: 54945},
				expr: &actionExpr{
					pos: position{line: 1439, col: 31, offset: 54946},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1439, col: 31, offset: 54946},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1439, col: 31, offset: 54946},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 32, offset: 54947},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1439, col: 55, offset: 54970},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 64, offset: 54979},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1446, col: 1, offset: 55316},
			expr: &seqExpr{
				pos: position{line: 1446, col: 26, offset: 55341},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1446, col: 26, offset: 55341},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1446, col: 33, offset: 55348},
						expr: &ruleRefExpr{
							pos:  position{line: 1446, col: 33, offset: 55348},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 40, offset: 55355},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1448, col: 1, offset: 55360},
			expr: &seqExpr{
				pos: position{line: 1448, col: 31, offset: 55390},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1448, col: 31, offset: 55390},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1448, col: 38, offset: 55397},
						expr: &ruleRefExpr{
							pos:  position{line: 1448, col: 38, offset: 55397},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 45, offset: 55404},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1450, col: 1, offset: 55409},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 29, offset: 55437},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1450, col: 30, offset: 55438},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1450, col: 30, offset: 55438},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1450, col: 37, offset: 55445},
								expr: &ruleRefExpr{
									pos:  position{line: 1450, col: 37, offset: 55445},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1450, col: 44, offset: 55452},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 51, offset: 55459},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1452, col: 1, offset: 55464},
			expr: &actionExpr{
				pos: position{line: 1452, col: 17, offset: 55480},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 17, offset: 55480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 17, offset: 55480},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 28, offset: 55491},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 29, offset: 55492},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 49, offset: 55512},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 76, offset: 55539},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 85, offset: 55548},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1452, col: 114, offset: 55577},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1456, col: 1, offset: 55694},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1456, col: 32, offset: 55725},
				expr: &actionExpr{
					pos: position{line: 1456, col: 33, offset: 55726},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1456, col: 33, offset: 55726},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1456, col: 33, offset: 55726},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 34, offset: 55727},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1456, col: 59, offset: 55752},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 68, offset: 55761},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1463, col: 1, offset: 56102},
			expr: &seqExpr{
				pos: position{line: 1463, col: 30, offset: 56131},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1463, col: 30, offset: 56131},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1463, col: 37, offset: 56138},
						expr: &ruleRefExpr{
							pos:  position{line: 1463, col: 37, offset: 56138},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 44, offset: 56145},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1465, col: 1, offset: 56150},
			expr: &seqExpr{
				pos: position{line: 1465, col: 35, offset: 56184},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 35, offset: 56184},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 42, offset: 56191},
						expr: &ruleRefExpr{
							pos:  position{line: 1465, col: 42, offset: 56191},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 49, offset: 56198},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1467, col: 1, offset: 56203},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 33, offset: 56235},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1467, col: 34, offset: 56236},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1467, col: 34, offset: 56236},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1467, col: 41, offset: 56243},
								expr: &ruleRefExpr{
									pos:  position{line: 1467, col: 41, offset: 56243},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1467, col: 48, offset: 56250},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 55, offset: 56257},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1469, col: 1, offset: 56262},
			expr: &actionExpr{
				pos: position{line: 1469, col: 21, offset: 56282},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1469, col: 21, offset: 56282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1469, col: 21, offset: 56282},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1469, col: 32, offset: 56293},
								expr: &ruleRefExpr{
									pos:  position{line: 1469, col: 33, offset: 56294},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1469, col: 53, offset: 56314},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 84, offset: 56345},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 93, offset: 56354},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1469, col: 126, offset: 56387},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1473, col: 1, offset: 56512},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1473, col: 36, offset: 56547},
				expr: &actionExpr{
					pos: position{line: 1473, col: 37, offset: 56548},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1473, col: 37, offset: 56548},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1473, col: 37, offset: 56548},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 38, offset: 56549},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1473, col: 67, offset: 56578},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 76, offset: 56587},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1481, col: 1, offset: 56933},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1481, col: 23, offset: 56955},
				expr: &ruleRefExpr{
					pos:  position{line: 1481, col: 23, offset: 56955},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1483, col: 1, offset: 56976},
			expr: &actionExpr{
				pos: position{line: 1484, col: 5, offset: 57003},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1484, col: 5, offset: 57003},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1484, col: 5, offset: 57003},
							expr: &ruleRefExpr{
								pos:  position{line: 1484, col: 6, offset: 57004},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1484, col: 10, offset: 57008},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1484, col: 19, offset: 57017},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1484, col: 19, offset: 57017},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1485, col: 15, offset: 57042},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1486, col: 15, offset: 57070},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1487, col: 15, offset: 57096},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1488, col: 15, offset: 57127},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 15, offset: 57160},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1490, col: 15, offset: 57191},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1491, col: 15, offset: 57230},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1492, col: 15, offset: 57259},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 15, offset: 57287},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1494, col: 15, offset: 57331},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1495, col: 15, offset: 57369},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1496, col: 15, offset: 57410},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1500, col: 1, offset: 57459},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1500, col: 22, offset: 57480},
				expr: &ruleRefExpr{
					pos:  position{line: 1500, col: 22, offset: 57480},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1502, col: 1, offset: 57500},
			expr: &actionExpr{
				pos: position{line: 1502, col: 22, offset: 57521},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 22, offset: 57521},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1502, col: 22, offset: 57521},
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 23, offset: 57522},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 27, offset: 57526},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1502, col: 36, offset: 57535},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1502, col: 36, offset: 57535},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1502, col: 48, offset: 57547},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1506, col: 1, offset: 57597},
			expr: &actionExpr{
				pos: position{line: 1506, col: 24, offset: 57620},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1506, col: 24, offset: 57620},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1506, col: 30, offset: 57626},
						expr: &ruleRefExpr{
							pos:  position{line: 1506, col: 31, offset: 57627},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1510, col: 1, offset: 57717},
			expr: &actionExpr{
				pos: position{line: 1510, col: 28, offset: 57744},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 28, offset: 57744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 28, offset: 57744},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1510, col: 37, offset: 57753},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 38, offset: 57754},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 54, offset: 57770},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1517, col: 1, offset: 58012},
			expr: &actionExpr{
				pos: position{line: 1517, col: 10, offset: 58021},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 10, offset: 58021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1517, col: 10, offset: 58021},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 21, offset: 58032},
								expr: &ruleRefExpr{
									pos:  position{line: 1517, col: 22, offset: 58033},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1517, col: 42, offset: 58053},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 5, offset: 58072},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 12, offset: 58079},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 13, offset: 58080},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 5, offset: 58102},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1519, col: 11, offset: 58108},
								expr: &ruleRefExpr{
									pos:  position{line: 1519, col: 12, offset: 58109},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1520, col: 6, offset: 58126},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1520, col: 6, offset: 58126},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1520, col: 23, offset: 58143},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1524, col: 1, offset: 58258},
			expr: &seqExpr{
				pos: position{line: 1524, col: 23, offset: 58280},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1524, col: 23, offset: 58280},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1524, col: 27, offset: 58284},
						expr: &ruleRefExpr{
							pos:  position{line: 1524, col: 27, offset: 58284},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1526, col: 1, offset: 58292},
			expr: &seqExpr{
				pos: position{line: 1526, col: 19, offset: 58310},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1526, col: 19, offset: 58310},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1526, col: 26, offset: 58317},
						expr: &ruleRefExpr{
							pos:  position{line: 1526, col: 26, offset: 58317},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1526, col: 33, offset: 58324},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1529, col: 1, offset: 58392},
			expr: &actionExpr{
				pos: position{line: 1529, col: 20, offset: 58411},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 20, offset: 58411},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1529, col: 20, offset: 58411},
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 21, offset: 58412},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 36, offset: 58427},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1529, col: 42, offset: 58433},
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 43, offset: 58434},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 55, offset: 58446},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1529, col: 59, offset: 58450},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1533, col: 1, offset: 58518},
			expr: &actionExpr{
				pos: position{line: 1533, col: 14, offset: 58531},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 14, offset: 58531},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1533, col: 14, offset: 58531},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 15, offset: 58532},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 30, offset: 58547},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1533, col: 36, offset: 58553},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 37, offset: 58554},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 49, offset: 58566},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1533, col: 53, offset: 58570},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 53, offset: 58570},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1537, col: 1, offset: 58639},
			expr: &actionExpr{
				pos: position{line: 1537, col: 14, offset: 58652},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 14, offset: 58652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1537, col: 14, offset: 58652},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 33, offset: 58671},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1537, col: 42, offset: 58680},
								expr: &seqExpr{
									pos: position{line: 1537, col: 43, offset: 58681},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1537, col: 43, offset: 58681},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 44, offset: 58682},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1537, col: 63, offset: 58701},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 64, offset: 58702},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1537, col: 68, offset: 58706},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 68, offset: 58706},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1537, col: 75, offset: 58713},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1537, col: 89, offset: 58727},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 89, offset: 58727},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1544, col: 1, offset: 58976},
			expr: &seqExpr{
				pos: position{line: 1544, col: 26, offset: 59001},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1544, col: 26, offset: 59001},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1544, col: 33, offset: 59008},
						expr: &ruleRefExpr{
							pos:  position{line: 1544, col: 33, offset: 59008},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 40, offset: 59015},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1546, col: 1, offset: 59020},
			expr: &seqExpr{
				pos: position{line: 1546, col: 31, offset: 59050},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1546, col: 31, offset: 59050},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1546, col: 38, offset: 59057},
						expr: &ruleRefExpr{
							pos:  position{line: 1546, col: 38, offset: 59057},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1546, col: 45, offset: 59064},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1548, col: 1, offset: 59069},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 29, offset: 59097},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1548, col: 30, offset: 59098},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1548, col: 30, offset: 59098},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1548, col: 37, offset: 59105},
								expr: &ruleRefExpr{
									pos:  position{line: 1548, col: 37, offset: 59105},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1548, col: 44, offset: 59112},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 51, offset: 59119},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1550, col: 1, offset: 59124},
			expr: &actionExpr{
				pos: position{line: 1550, col: 17, offset: 59140},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 17, offset: 59140},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1550, col: 17, offset: 59140},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 44, offset: 59167},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 53, offset: 59176},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1550, col: 83, offset: 59206},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1554, col: 1, offset: 59316},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1554, col: 32, offset: 59347},
				expr: &actionExpr{
					pos: position{line: 1554, col: 33, offset: 59348},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1554, col: 33, offset: 59348},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1554, col: 33, offset: 59348},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 34, offset: 59349},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1554, col: 59, offset: 59374},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 68, offset: 59383},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1558, col: 1, offset: 59524},
			expr: &actionExpr{
				pos: position{line: 1558, col: 22, offset: 59545},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 22, offset: 59545},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1558, col: 22, offset: 59545},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 23, offset: 59546},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1558, col: 45, offset: 59568},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 45, offset: 59568},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1558, col: 52, offset: 59575},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 57, offset: 59580},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 66, offset: 59589},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1558, col: 92, offset: 59615},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1562, col: 1, offset: 59680},
			expr: &actionExpr{
				pos: position{line: 1562, col: 29, offset: 59708},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1562, col: 29, offset: 59708},
					expr: &charClassMatcher{
						pos:        position{line: 1562, col: 29, offset: 59708},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1570, col: 1, offset: 60021},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 17, offset: 60037},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1570, col: 17, offset: 60037},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 49, offset: 60069},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 78, offset: 60098},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1572, col: 1, offset: 60134},
			expr: &litMatcher{
				pos:        position{line: 1572, col: 26, offset: 60159},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1575, col: 1, offset: 60231},
			expr: &actionExpr{
				pos: position{line: 1575, col: 31, offset: 60261},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 31, offset: 60261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1575, col: 31, offset: 60261},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1575, col: 42, offset: 60272},
								expr: &ruleRefExpr{
									pos:  position{line: 1575, col: 43, offset: 60273},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 63, offset: 60293},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 70, offset: 60300},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1580, col: 1, offset: 60530},
			expr: &actionExpr{
				pos: position{line: 1581, col: 5, offset: 60570},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 5, offset: 60570},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1581, col: 5, offset: 60570},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1581, col: 16, offset: 60581},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1581, col: 16, offset: 60581},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1581, col: 16, offset: 60581},
											expr: &ruleRefExpr{
												pos:  position{line: 1581, col: 16, offset: 60581},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1581, col: 23, offset: 60588},
											expr: &charClassMatcher{
												pos:        position{line: 1581, col: 23, offset: 60588},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1583, col: 8, offset: 60641},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1584, col: 5, offset: 60704},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1584, col: 16, offset: 60715},
								expr: &actionExpr{
									pos: position{line: 1585, col: 9, offset: 60725},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1585, col: 9, offset: 60725},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1585, col: 9, offset: 60725},
												expr: &ruleRefExpr{
													pos:  position{line: 1585, col: 10, offset: 60726},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1586, col: 9, offset: 60745},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1586, col: 20, offset: 60756},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1586, col: 20, offset: 60756},
														expr: &charClassMatcher{
															pos:        position{line: 1586, col: 20, offset: 60756},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1588, col: 12, offset: 60817},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1595, col: 1, offset: 61047},
			expr: &actionExpr{
				pos: position{line: 1595, col: 39, offset: 61085},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 39, offset: 61085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1595, col: 39, offset: 61085},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1595, col: 50, offset: 61096},
								expr: &ruleRefExpr{
									pos:  position{line: 1595, col: 51, offset: 61097},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 9, offset: 61125},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1596, col: 31, offset: 61147},
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 31, offset: 61147},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1596, col: 38, offset: 61154},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 46, offset: 61162},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 53, offset: 61169},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1596, col: 95, offset: 61211},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1596, col: 96, offset: 61212},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1596, col: 96, offset: 61212},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1596, col: 118, offset: 61234},
											expr: &ruleRefExpr{
												pos:  position{line: 1596, col: 118, offset: 61234},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1596, col: 125, offset: 61241},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1596, col: 132, offset: 61248},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1601, col: 1, offset: 61407},
			expr: &actionExpr{
				pos: position{line: 1601, col: 44, offset: 61450},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 44, offset: 61450},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1601, col: 50, offset: 61456},
						expr: &ruleRefExpr{
							pos:  position{line: 1601, col: 51, offset: 61457},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1605, col: 1, offset: 61541},
			expr: &actionExpr{
				pos: position{line: 1606, col: 5, offset: 61596},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1606, col: 5, offset: 61596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1606, col: 5, offset: 61596},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1606, col: 11, offset: 61602},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1606, col: 11, offset: 61602},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1606, col: 11, offset: 61602},
											expr: &ruleRefExpr{
												pos:  position{line: 1606, col: 12, offset: 61603},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1606, col: 34, offset: 61625},
											expr: &charClassMatcher{
												pos:        position{line: 1606, col: 34, offset: 61625},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1608, col: 8, offset: 61678},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1613, col: 1, offset: 61804},
			expr: &actionExpr{
				pos: position{line: 1614, col: 5, offset: 61842},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1614, col: 5, offset: 61842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1614, col: 5, offset: 61842},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1614, col: 16, offset: 61853},
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 17, offset: 61854},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1615, col: 5, offset: 61878},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 5, offset: 62092},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 12, offset: 62099},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1626, col: 1, offset: 62249},
			expr: &actionExpr{
				pos: position{line: 1626, col: 16, offset: 62264},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1626, col: 16, offset: 62264},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1631, col: 1, offset: 62347},
			expr: &actionExpr{
				pos: position{line: 1631, col: 39, offset: 62385},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1631, col: 39, offset: 62385},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1631, col: 45, offset: 62391},
						expr: &ruleRefExpr{
							pos:  position{line: 1631, col: 46, offset: 62392},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1635, col: 1, offset: 62472},
			expr: &actionExpr{
				pos: position{line: 1635, col: 38, offset: 62509},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 38, offset: 62509},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1635, col: 38, offset: 62509},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 39, offset: 62510},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1635, col: 49, offset: 62520},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1635, col: 58, offset: 62529},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1635, col: 58, offset: 62529},
									expr: &charClassMatcher{
										pos:        position{line: 1635, col: 58, offset: 62529},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1637, col: 4, offset: 62574},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1644, col: 1, offset: 62760},
			expr: &actionExpr{
				pos: position{line: 1644, col: 14, offset: 62773},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 14, offset: 62773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1644, col: 14, offset: 62773},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 19, offset: 62778},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 25, offset: 62784},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1644, col: 43, offset: 62802},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1648, col: 1, offset: 62867},
			expr: &actionExpr{
				pos: position{line: 1648, col: 21, offset: 62887},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1648, col: 21, offset: 62887},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1648, col: 30, offset: 62896},
						expr: &choiceExpr{
							pos: position{line: 1648, col: 31, offset: 62897},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1648, col: 31, offset: 62897},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1648, col: 38, offset: 62904},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1648, col: 51, offset: 62917},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1648, col: 59, offset: 62925},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1648, col: 60, offset: 62926},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1648, col: 60, offset: 62926},
												expr: &litMatcher{
													pos:        position{line: 1648, col: 61, offset: 62927},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1648, col: 66, offset: 62932,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1654, col: 1, offset: 63038},
			expr: &actionExpr{
				pos: position{line: 1654, col: 23, offset: 63060},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 23, offset: 63060},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1654, col: 23, offset: 63060},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1654, col: 29, offset: 63066},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1654, col: 36, offset: 63073},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1655, col: 5, offset: 63105},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1655, col: 11, offset: 63111},
								expr: &actionExpr{
									pos: position{line: 1655, col: 12, offset: 63112},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1655, col: 12, offset: 63112},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1655, col: 12, offset: 63112},
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 12, offset: 63112},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1655, col: 19, offset: 63119},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1655, col: 23, offset: 63123},
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 23, offset: 63123},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1655, col: 30, offset: 63130},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1655, col: 39, offset: 63139},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 5, offset: 63197},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1656, col: 11, offset: 63203},
								expr: &actionExpr{
									pos: position{line: 1656, col: 12, offset: 63204},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1656, col: 12, offset: 63204},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1656, col: 12, offset: 63204},
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 12, offset: 63204},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1656, col: 19, offset: 63211},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1656, col: 23, offset: 63215},
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 23, offset: 63215},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1656, col: 30, offset: 63222},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1656, col: 39, offset: 63231},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1657, col: 5, offset: 63289},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1661, col: 1, offset: 63368},
			expr: &actionExpr{
				pos: position{line: 1661, col: 30, offset: 63397},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1661, col: 30, offset: 63397},
					expr: &choiceExpr{
						pos: position{line: 1661, col: 31, offset: 63398},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1661, col: 31, offset: 63398},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1661, col: 42, offset: 63409},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1668, col: 1, offset: 63558},
			expr: &actionExpr{
				pos: position{line: 1668, col: 14, offset: 63571},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 14, offset: 63571},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1668, col: 14, offset: 63571},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 15, offset: 63572},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 19, offset: 63576},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 19, offset: 63576},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 26, offset: 63583},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1675, col: 1, offset: 63730},
			expr: &charClassMatcher{
				pos:        position{line: 1675, col: 13, offset: 63742},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1677, col: 1, offset: 63752},
			expr: &choiceExpr{
				pos: position{line: 1677, col: 16, offset: 63767},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1677, col: 16, offset: 63767},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 22, offset: 63773},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 28, offset: 63779},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 34, offset: 63785},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 40, offset: 63791},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1677, col: 46, offset: 63797},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1679, col: 1, offset: 63803},
			expr: &actionExpr{
				pos: position{line: 1679, col: 14, offset: 63816},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1679, col: 14, offset: 63816},
					expr: &charClassMatcher{
						pos:        position{line: 1679, col: 14, offset: 63816},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1683, col: 1, offset: 63862},
			expr: &choiceExpr{
				pos: position{line: 1687, col: 5, offset: 64190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1687, col: 5, offset: 64190},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1687, col: 5, offset: 64190},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1687, col: 5, offset: 64190},
									expr: &charClassMatcher{
										pos:        position{line: 1687, col: 5, offset: 64190},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1687, col: 15, offset: 64200},
									expr: &choiceExpr{
										pos: position{line: 1687, col: 17, offset: 64202},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1687, col: 17, offset: 64202},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1687, col: 30, offset: 64215},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1689, col: 9, offset: 64285},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1689, col: 9, offset: 64285},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1689, col: 9, offset: 64285},
									expr: &charClassMatcher{
										pos:        position{line: 1689, col: 9, offset: 64285},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1689, col: 19, offset: 64295},
									expr: &seqExpr{
										pos: position{line: 1689, col: 20, offset: 64296},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1689, col: 20, offset: 64296},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1689, col: 27, offset: 64303},
												expr: &charClassMatcher{
													pos:        position{line: 1689, col: 27, offset: 64303},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1693, col: 1, offset: 64379},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 5, offset: 64460},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1694, col: 5, offset: 64460},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1694, col: 5, offset: 64460},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1694, col: 5, offset: 64460},
									expr: &charClassMatcher{
										pos:        position{line: 1694, col: 5, offset: 64460},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1694, col: 20, offset: 64475},
									expr: &choiceExpr{
										pos: position{line: 1694, col: 22, offset: 64477},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1694, col: 22, offset: 64477},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1694, col: 32, offset: 64487},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 9, offset: 64557},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1699, col: 1, offset: 64657},
			expr: &actionExpr{
				pos: position{line: 1699, col: 12, offset: 64668},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1699, col: 12, offset: 64668},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1703, col: 1, offset: 64733},
			expr: &actionExpr{
				pos: position{line: 1703, col: 17, offset: 64749},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1703, col: 17, offset: 64749},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1703, col: 22, offset: 64754},
						expr: &choiceExpr{
							pos: position{line: 1703, col: 23, offset: 64755},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1703, col: 23, offset: 64755},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1703, col: 34, offset: 64766},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1707, col: 1, offset: 64858},
			expr: &actionExpr{
				pos: position{line: 1707, col: 25, offset: 64882},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1707, col: 25, offset: 64882},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1707, col: 30, offset: 64887},
						expr: &charClassMatcher{
							pos:        position{line: 1707, col: 31, offset: 64888},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1711, col: 1, offset: 64960},
			expr: &actionExpr{
				pos: position{line: 1711, col: 13, offset: 64972},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 13, offset: 64972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1711, col: 13, offset: 64972},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1711, col: 20, offset: 64979},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 21, offset: 64980},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1711, col: 34, offset: 64993},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1711, col: 39, offset: 64998},
								expr: &choiceExpr{
									pos: position{line: 1711, col: 40, offset: 64999},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1711, col: 40, offset: 64999},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1711, col: 51, offset: 65010},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1715, col: 1, offset: 65106},
			expr: &actionExpr{
				pos: position{line: 1715, col: 23, offset: 65128},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1715, col: 23, offset: 65128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1715, col: 23, offset: 65128},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1715, col: 31, offset: 65136},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1715, col: 43, offset: 65148},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1715, col: 48, offset: 65153},
								expr: &choiceExpr{
									pos: position{line: 1715, col: 49, offset: 65154},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1715, col: 49, offset: 65154},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1715, col: 60, offset: 65165},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1719, col: 1, offset: 65261},
			expr: &oneOrMoreExpr{
				pos: position{line: 1719, col: 13, offset: 65273},
				expr: &charClassMatcher{
					pos:        position{line: 1719, col: 14, offset: 65274},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1721, col: 1, offset: 65408},
			expr: &actionExpr{
				pos: position{line: 1721, col: 21, offset: 65428},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1721, col: 21, offset: 65428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1721, col: 21, offset: 65428},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1721, col: 29, offset: 65436},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1721, col: 41, offset: 65448},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1721, col: 47, offset: 65454},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1726, col: 1, offset: 65702},
			expr: &oneOrMoreExpr{
				pos: position{line: 1726, col: 22, offset: 65723},
				expr: &charClassMatcher{
					pos:        position{line: 1726, col: 23, offset: 65724},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1728, col: 1, offset: 65856},
			expr: &actionExpr{
				pos: position{line: 1728, col: 9, offset: 65864},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1728, col: 9, offset: 65864},
					expr: &charClassMatcher{
						pos:        position{line: 1728, col: 9, offset: 65864},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1732, col: 1, offset: 65912},
			expr: &choiceExpr{
				pos: position{line: 1732, col: 15, offset: 65926},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1732, col: 15, offset: 65926},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 27, offset: 65938},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 40, offset: 65951},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 51, offset: 65962},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1732, col: 62, offset: 65973},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1734, col: 1, offset: 65984},
			expr: &actionExpr{
				pos: position{line: 1734, col: 7, offset: 65990},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1734, col: 7, offset: 65990},
					expr: &charClassMatcher{
						pos:        position{line: 1734, col: 7, offset: 65990},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1738, col: 1, offset: 66115},
			expr: &actionExpr{
				pos: position{line: 1738, col: 10, offset: 66124},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1738, col: 10, offset: 66124},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1742, col: 1, offset: 66166},
			expr: &actionExpr{
				pos: position{line: 1742, col: 11, offset: 66176},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 11, offset: 66176},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1742, col: 11, offset: 66176},
							expr: &litMatcher{
								pos:        position{line: 1742, col: 11, offset: 66176},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1742, col: 16, offset: 66181},
							expr: &ruleRefExpr{
								pos:  position{line: 1742, col: 16, offset: 66181},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1746, col: 1, offset: 66233},
			expr: &choiceExpr{
				pos: position{line: 1746, col: 10, offset: 66242},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1746, col: 10, offset: 66242},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1746, col: 16, offset: 66248},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1746, col: 16, offset: 66248},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1750, col: 1, offset: 66289},
			expr: &choiceExpr{
				pos: position{line: 1750, col: 12, offset: 66300},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1750, col: 12, offset: 66300},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1750, col: 21, offset: 66309},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1750, col: 28, offset: 66316},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1752, col: 1, offset: 66322},
			expr: &notExpr{
				pos: position{line: 1752, col: 8, offset: 66329},
				expr: &anyMatcher{
					line: 1752, col: 9, offset: 66330,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1754, col: 1, offset: 66333},
			expr: &choiceExpr{
				pos: position{line: 1754, col: 8, offset: 66340},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1754, col: 8, offset: 66340},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 18, offset: 66350},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{}))
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return found && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText16(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText16(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText13(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText13(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
