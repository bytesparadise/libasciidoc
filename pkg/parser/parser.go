// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &choiceExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 9, offset: 1935},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 2000},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2021},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2050},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2102},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 11, offset: 2120},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 11, offset: 2145},
						name: "SingleLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 11, offset: 2173},
						name: "Table",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 11, offset: 2189},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 2213},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 11, offset: 2239},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 76, col: 11, offset: 2268},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 77, col: 11, offset: 2294},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 11, offset: 2329},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 11, offset: 2353},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 11, offset: 2385},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2411},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 11, offset: 2448},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 11, offset: 2473},
						name: "RawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 11, offset: 2496},
						name: "StandaloneAttributes",
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 89, col: 1, offset: 2626},
			expr: &ruleRefExpr{
				pos:  position{line: 89, col: 16, offset: 2641},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 91, col: 1, offset: 2659},
			expr: &actionExpr{
				pos: position{line: 91, col: 20, offset: 2678},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 91, col: 20, offset: 2678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 20, offset: 2678},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 41, offset: 2699},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 91, col: 49, offset: 2707},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 50, offset: 2708},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 75, offset: 2733},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 95, col: 1, offset: 2813},
			expr: &seqExpr{
				pos: position{line: 95, col: 26, offset: 2838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 26, offset: 2838},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 95, col: 32, offset: 2844},
						expr: &ruleRefExpr{
							pos:  position{line: 95, col: 32, offset: 2844},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 39, offset: 2851},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 97, col: 1, offset: 2856},
			expr: &actionExpr{
				pos: position{line: 97, col: 27, offset: 2882},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 97, col: 27, offset: 2882},
					expr: &oneOrMoreExpr{
						pos: position{line: 97, col: 28, offset: 2883},
						expr: &seqExpr{
							pos: position{line: 97, col: 29, offset: 2884},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 97, col: 29, offset: 2884},
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 30, offset: 2885},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 97, col: 51, offset: 2906,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 104, col: 1, offset: 3072},
			expr: &actionExpr{
				pos: position{line: 104, col: 19, offset: 3090},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 104, col: 19, offset: 3090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 104, col: 19, offset: 3090},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 104, col: 23, offset: 3094},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 23, offset: 3094},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 30, offset: 3101},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 37, offset: 3108},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 52, offset: 3123},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 56, offset: 3127},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 56, offset: 3127},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 74, offset: 3145},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3157},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3158},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 105, col: 10, offset: 3158},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 105, col: 10, offset: 3158},
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 10, offset: 3158},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 17, offset: 3165},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 37, offset: 3185},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3208},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 18, offset: 3217},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 18, offset: 3217},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 107, col: 9, offset: 3244},
							expr: &choiceExpr{
								pos: position{line: 107, col: 10, offset: 3245},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 107, col: 10, offset: 3245},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 107, col: 10, offset: 3245},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 10, offset: 3245},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 17, offset: 3252},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 107, col: 37, offset: 3272},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 9, offset: 3295},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 19, offset: 3305},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 19, offset: 3305},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 112, col: 1, offset: 3406},
			expr: &choiceExpr{
				pos: position{line: 112, col: 20, offset: 3425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 112, col: 20, offset: 3425},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 48, offset: 3453},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 114, col: 1, offset: 3483},
			expr: &actionExpr{
				pos: position{line: 114, col: 30, offset: 3512},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 30, offset: 3512},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 30, offset: 3512},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 30, offset: 3512},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 37, offset: 3519},
							expr: &litMatcher{
								pos:        position{line: 114, col: 38, offset: 3520},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 42, offset: 3524},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 114, col: 51, offset: 3533},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 51, offset: 3533},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 68, offset: 3550},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 118, col: 1, offset: 3620},
			expr: &actionExpr{
				pos: position{line: 118, col: 33, offset: 3652},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 33, offset: 3652},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 33, offset: 3652},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3652},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 118, col: 40, offset: 3659},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 118, col: 51, offset: 3670},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 59, offset: 3678},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 75, offset: 3694},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 122, col: 1, offset: 3773},
			expr: &actionExpr{
				pos: position{line: 122, col: 19, offset: 3791},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 122, col: 19, offset: 3791},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 19, offset: 3791},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 19, offset: 3791},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 26, offset: 3798},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 36, offset: 3808},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 56, offset: 3828},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 62, offset: 3834},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 63, offset: 3835},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 85, offset: 3857},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 85, offset: 3857},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 122, col: 92, offset: 3864},
							expr: &litMatcher{
								pos:        position{line: 122, col: 92, offset: 3864},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 97, offset: 3869},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 97, offset: 3869},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 127, col: 1, offset: 4014},
			expr: &actionExpr{
				pos: position{line: 127, col: 23, offset: 4036},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 127, col: 23, offset: 4036},
					expr: &charClassMatcher{
						pos:        position{line: 127, col: 23, offset: 4036},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 131, col: 1, offset: 4083},
			expr: &actionExpr{
				pos: position{line: 131, col: 24, offset: 4106},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 131, col: 24, offset: 4106},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 24, offset: 4106},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 131, col: 28, offset: 4110},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 131, col: 35, offset: 4117},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 131, col: 36, offset: 4118},
									expr: &charClassMatcher{
										pos:        position{line: 131, col: 36, offset: 4118},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 4, offset: 4165},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 139, col: 1, offset: 4326},
			expr: &actionExpr{
				pos: position{line: 139, col: 21, offset: 4346},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 139, col: 21, offset: 4346},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 21, offset: 4346},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 4346},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 139, col: 28, offset: 4353},
							expr: &litMatcher{
								pos:        position{line: 139, col: 29, offset: 4354},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 33, offset: 4358},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 140, col: 9, offset: 4377},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 140, col: 10, offset: 4378},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 140, col: 10, offset: 4378},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 10, offset: 4378},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 21, offset: 4389},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 45, offset: 4413},
													expr: &litMatcher{
														pos:        position{line: 140, col: 45, offset: 4413},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 50, offset: 4418},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 58, offset: 4426},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 59, offset: 4427},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 82, offset: 4450},
													expr: &litMatcher{
														pos:        position{line: 140, col: 82, offset: 4450},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 87, offset: 4455},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 97, offset: 4465},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 98, offset: 4466},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 142, col: 15, offset: 4583},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 142, col: 15, offset: 4583},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 142, col: 15, offset: 4583},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 142, col: 24, offset: 4592},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 142, col: 46, offset: 4614},
													expr: &litMatcher{
														pos:        position{line: 142, col: 46, offset: 4614},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 142, col: 51, offset: 4619},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 142, col: 61, offset: 4629},
														expr: &ruleRefExpr{
															pos:  position{line: 142, col: 62, offset: 4630},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 13, offset: 4739},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 149, col: 1, offset: 4869},
			expr: &choiceExpr{
				pos: position{line: 149, col: 27, offset: 4895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 149, col: 27, offset: 4895},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 149, col: 27, offset: 4895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 149, col: 27, offset: 4895},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 32, offset: 4900},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 39, offset: 4907},
									expr: &charClassMatcher{
										pos:        position{line: 149, col: 39, offset: 4907},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4955},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4955},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 151, col: 5, offset: 4955},
									expr: &litMatcher{
										pos:        position{line: 151, col: 5, offset: 4955},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 11, offset: 4961},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 151, col: 18, offset: 4968},
									expr: &charClassMatcher{
										pos:        position{line: 151, col: 18, offset: 4968},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 151, col: 29, offset: 4979},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 29, offset: 4979},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 151, col: 36, offset: 4986},
									expr: &litMatcher{
										pos:        position{line: 151, col: 37, offset: 4987},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 155, col: 1, offset: 5027},
			expr: &actionExpr{
				pos: position{line: 155, col: 25, offset: 5051},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 25, offset: 5051},
					expr: &charClassMatcher{
						pos:        position{line: 155, col: 25, offset: 5051},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 159, col: 1, offset: 5097},
			expr: &actionExpr{
				pos: position{line: 159, col: 27, offset: 5123},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 27, offset: 5123},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 27, offset: 5123},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 166, col: 1, offset: 5276},
			expr: &actionExpr{
				pos: position{line: 166, col: 25, offset: 5300},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 166, col: 25, offset: 5300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 166, col: 25, offset: 5300},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 29, offset: 5304},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 35, offset: 5310},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 166, col: 50, offset: 5325},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 9, offset: 5338},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 15, offset: 5344},
								expr: &actionExpr{
									pos: position{line: 167, col: 16, offset: 5345},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 167, col: 17, offset: 5346},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 167, col: 17, offset: 5346},
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 17, offset: 5346},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 167, col: 24, offset: 5353},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 31, offset: 5360},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 176, col: 1, offset: 5681},
			expr: &actionExpr{
				pos: position{line: 176, col: 18, offset: 5698},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 176, col: 18, offset: 5698},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 176, col: 18, offset: 5698},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 28, offset: 5708},
							expr: &charClassMatcher{
								pos:        position{line: 176, col: 29, offset: 5709},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 180, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 180, col: 30, offset: 5786},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 180, col: 30, offset: 5786},
					expr: &charClassMatcher{
						pos:        position{line: 180, col: 30, offset: 5786},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 184, col: 1, offset: 5831},
			expr: &choiceExpr{
				pos: position{line: 184, col: 19, offset: 5849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 184, col: 19, offset: 5849},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 184, col: 19, offset: 5849},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 184, col: 19, offset: 5849},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 184, col: 24, offset: 5854},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 30, offset: 5860},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 184, col: 45, offset: 5875},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 184, col: 49, offset: 5879},
									expr: &ruleRefExpr{
										pos:  position{line: 184, col: 49, offset: 5879},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 184, col: 56, offset: 5886},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5946},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5946},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 9, offset: 5950},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 15, offset: 5956},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 186, col: 30, offset: 5971},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 186, col: 35, offset: 5976},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 35, offset: 5976},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 42, offset: 5983},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 190, col: 1, offset: 6042},
			expr: &choiceExpr{
				pos: position{line: 190, col: 26, offset: 6067},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 26, offset: 6067},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 39, offset: 6080},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 192, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 192, col: 12, offset: 6100},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 192, col: 12, offset: 6100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 192, col: 12, offset: 6100},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 16, offset: 6104},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 21, offset: 6109},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 192, col: 35, offset: 6123},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 196, col: 1, offset: 6189},
			expr: &choiceExpr{
				pos: position{line: 196, col: 15, offset: 6203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 196, col: 15, offset: 6203},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 29, offset: 6217},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 43, offset: 6231},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 61, offset: 6249},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 80, offset: 6268},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 98, offset: 6286},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 198, col: 1, offset: 6304},
			expr: &actionExpr{
				pos: position{line: 198, col: 16, offset: 6319},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 198, col: 16, offset: 6319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 16, offset: 6319},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 28, offset: 6331},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 33, offset: 6336},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 47, offset: 6350},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 202, col: 1, offset: 6426},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 6441},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 6441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 202, col: 16, offset: 6441},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 29, offset: 6454},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 34, offset: 6459},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 202, col: 48, offset: 6473},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 206, col: 1, offset: 6548},
			expr: &actionExpr{
				pos: position{line: 206, col: 20, offset: 6567},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 206, col: 20, offset: 6567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 206, col: 20, offset: 6567},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 32, offset: 6579},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 37, offset: 6584},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 51, offset: 6598},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 206, col: 55, offset: 6602},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 206, col: 61, offset: 6608},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 206, col: 70, offset: 6617},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 210, col: 1, offset: 6695},
			expr: &actionExpr{
				pos: position{line: 210, col: 21, offset: 6715},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 210, col: 21, offset: 6715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 210, col: 21, offset: 6715},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 34, offset: 6728},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 39, offset: 6733},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 53, offset: 6747},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 57, offset: 6751},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 210, col: 63, offset: 6757},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 72, offset: 6766},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 214, col: 1, offset: 6843},
			expr: &actionExpr{
				pos: position{line: 214, col: 20, offset: 6862},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 214, col: 20, offset: 6862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 20, offset: 6862},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 32, offset: 6874},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 37, offset: 6879},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 51, offset: 6893},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 55, offset: 6897},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 214, col: 60, offset: 6902},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 214, col: 60, offset: 6902},
									expr: &charClassMatcher{
										pos:        position{line: 214, col: 60, offset: 6902},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 108, offset: 6950},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 218, col: 1, offset: 7032},
			expr: &actionExpr{
				pos: position{line: 218, col: 21, offset: 7052},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 218, col: 21, offset: 7052},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 21, offset: 7052},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 34, offset: 7065},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 39, offset: 7070},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 53, offset: 7084},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 57, offset: 7088},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 218, col: 62, offset: 7093},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 218, col: 62, offset: 7093},
									expr: &charClassMatcher{
										pos:        position{line: 218, col: 62, offset: 7093},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 110, offset: 7141},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 222, col: 1, offset: 7222},
			expr: &actionExpr{
				pos: position{line: 222, col: 15, offset: 7236},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 222, col: 15, offset: 7236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 15, offset: 7236},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 222, col: 21, offset: 7242},
								expr: &ruleRefExpr{
									pos:  position{line: 222, col: 22, offset: 7243},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 41, offset: 7262},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 41, offset: 7262},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 226, col: 1, offset: 7332},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7352},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7352},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 226, col: 21, offset: 7352},
							expr: &choiceExpr{
								pos: position{line: 226, col: 23, offset: 7354},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 226, col: 23, offset: 7354},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 226, col: 29, offset: 7360},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 7437},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 7443},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 227, col: 11, offset: 7443},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7464},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7488},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7525},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7558},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7586},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7618},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7650},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7677},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7704},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7741},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7777},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 242, col: 1, offset: 7880},
			expr: &actionExpr{
				pos: position{line: 242, col: 14, offset: 7893},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 242, col: 14, offset: 7893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 14, offset: 7893},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 19, offset: 7898},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 23, offset: 7902},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 27, offset: 7906},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 242, col: 32, offset: 7911},
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 32, offset: 7911},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 39, offset: 7918},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 246, col: 1, offset: 7961},
			expr: &actionExpr{
				pos: position{line: 246, col: 20, offset: 7980},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 246, col: 20, offset: 7980},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 246, col: 20, offset: 7980},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 25, offset: 7985},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 29, offset: 7989},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 246, col: 33, offset: 7993},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 246, col: 38, offset: 7998},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 38, offset: 7998},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 252, col: 1, offset: 8275},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8291},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 17, offset: 8291},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 252, col: 21, offset: 8295},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 28, offset: 8302},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 49, offset: 8323},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 49, offset: 8323},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 56, offset: 8330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 256, col: 1, offset: 8388},
			expr: &actionExpr{
				pos: position{line: 256, col: 24, offset: 8411},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 256, col: 24, offset: 8411},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 256, col: 24, offset: 8411},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 32, offset: 8419},
							expr: &charClassMatcher{
								pos:        position{line: 256, col: 32, offset: 8419},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 262, col: 1, offset: 8673},
			expr: &actionExpr{
				pos: position{line: 262, col: 31, offset: 8703},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 31, offset: 8703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 31, offset: 8703},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 35, offset: 8707},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 262, col: 42, offset: 8714},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 42, offset: 8714},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 42, offset: 8714},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 262, col: 57, offset: 8729},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 57, offset: 8729},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 262, col: 69, offset: 8741},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 262, col: 73, offset: 8745},
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 73, offset: 8745},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 80, offset: 8752},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 266, col: 1, offset: 8806},
			expr: &choiceExpr{
				pos: position{line: 266, col: 15, offset: 8820},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 266, col: 15, offset: 8820},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 31, offset: 8836},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 46, offset: 8851},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 270, col: 1, offset: 9079},
			expr: &actionExpr{
				pos: position{line: 270, col: 18, offset: 9096},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 270, col: 18, offset: 9096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 18, offset: 9096},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 22, offset: 9100},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 270, col: 29, offset: 9107},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 270, col: 29, offset: 9107},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 29, offset: 9107},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 45, offset: 9123},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 45, offset: 9123},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 60, offset: 9138},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 60, offset: 9138},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 270, col: 82, offset: 9160},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 82, offset: 9160},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 270, col: 104, offset: 9182},
										expr: &ruleRefExpr{
											pos:  position{line: 270, col: 104, offset: 9182},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 116, offset: 9194},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 120, offset: 9198},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 274, col: 1, offset: 9252},
			expr: &actionExpr{
				pos: position{line: 274, col: 19, offset: 9270},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 19, offset: 9270},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 274, col: 25, offset: 9276},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 278, col: 1, offset: 9337},
			expr: &actionExpr{
				pos: position{line: 278, col: 25, offset: 9361},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 278, col: 25, offset: 9361},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 25, offset: 9361},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 25, offset: 9361},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 32, offset: 9368},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 36, offset: 9372},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 36, offset: 9372},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 278, col: 43, offset: 9379},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 49, offset: 9385},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 49, offset: 9385},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 285, col: 1, offset: 9526},
			expr: &actionExpr{
				pos: position{line: 285, col: 25, offset: 9550},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 285, col: 25, offset: 9550},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 25, offset: 9550},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 25, offset: 9550},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 32, offset: 9557},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 36, offset: 9561},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 36, offset: 9561},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 43, offset: 9568},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 49, offset: 9574},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 49, offset: 9574},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 292, col: 1, offset: 9715},
			expr: &actionExpr{
				pos: position{line: 292, col: 26, offset: 9740},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 292, col: 26, offset: 9740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 26, offset: 9740},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 38, offset: 9752},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 38, offset: 9752},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 45, offset: 9759},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 296, col: 1, offset: 9816},
			expr: &actionExpr{
				pos: position{line: 296, col: 30, offset: 9845},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 296, col: 30, offset: 9845},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 30, offset: 9845},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 39, offset: 9854},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 39, offset: 9854},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 46, offset: 9861},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 300, col: 1, offset: 9922},
			expr: &actionExpr{
				pos: position{line: 300, col: 26, offset: 9947},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 300, col: 26, offset: 9947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 26, offset: 9947},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 38, offset: 9959},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 38, offset: 9959},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 45, offset: 9966},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 304, col: 1, offset: 10019},
			expr: &actionExpr{
				pos: position{line: 304, col: 26, offset: 10044},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 304, col: 26, offset: 10044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 26, offset: 10044},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 38, offset: 10056},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 38, offset: 10056},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 45, offset: 10063},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 309, col: 1, offset: 10196},
			expr: &actionExpr{
				pos: position{line: 309, col: 30, offset: 10225},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 30, offset: 10225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 10225},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 34, offset: 10229},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 37, offset: 10232},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 53, offset: 10248},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 57, offset: 10252},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 57, offset: 10252},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 64, offset: 10259},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 314, col: 1, offset: 10414},
			expr: &actionExpr{
				pos: position{line: 314, col: 21, offset: 10434},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 314, col: 21, offset: 10434},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 21, offset: 10434},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 5, offset: 10449},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 315, col: 14, offset: 10458},
								expr: &actionExpr{
									pos: position{line: 315, col: 15, offset: 10459},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 315, col: 15, offset: 10459},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 315, col: 15, offset: 10459},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 315, col: 19, offset: 10463},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 315, col: 24, offset: 10468},
													expr: &ruleRefExpr{
														pos:  position{line: 315, col: 25, offset: 10469},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 5, offset: 10524},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 316, col: 12, offset: 10531},
								expr: &actionExpr{
									pos: position{line: 316, col: 13, offset: 10532},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 316, col: 13, offset: 10532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 316, col: 13, offset: 10532},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 316, col: 17, offset: 10536},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 316, col: 22, offset: 10541},
													expr: &ruleRefExpr{
														pos:  position{line: 316, col: 23, offset: 10542},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 10589},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 317, col: 9, offset: 10593},
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 9, offset: 10593},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 16, offset: 10600},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 322, col: 1, offset: 10751},
			expr: &actionExpr{
				pos: position{line: 322, col: 19, offset: 10769},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 322, col: 19, offset: 10769},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 19, offset: 10769},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 23, offset: 10773},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 34, offset: 10784},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 35, offset: 10785},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 54, offset: 10804},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 58, offset: 10808},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 58, offset: 10808},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 65, offset: 10815},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 326, col: 1, offset: 10887},
			expr: &choiceExpr{
				pos: position{line: 326, col: 21, offset: 10907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 326, col: 21, offset: 10907},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 49, offset: 10935},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 328, col: 1, offset: 10965},
			expr: &actionExpr{
				pos: position{line: 328, col: 30, offset: 10994},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 328, col: 30, offset: 10994},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 30, offset: 10994},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 35, offset: 10999},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 49, offset: 11013},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 53, offset: 11017},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 328, col: 59, offset: 11023},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 60, offset: 11024},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 328, col: 77, offset: 11041},
							expr: &litMatcher{
								pos:        position{line: 328, col: 77, offset: 11041},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 328, col: 82, offset: 11046},
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 82, offset: 11046},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 332, col: 1, offset: 11145},
			expr: &actionExpr{
				pos: position{line: 332, col: 33, offset: 11177},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 332, col: 33, offset: 11177},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 332, col: 33, offset: 11177},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 38, offset: 11182},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 332, col: 52, offset: 11196},
							expr: &litMatcher{
								pos:        position{line: 332, col: 52, offset: 11196},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 332, col: 57, offset: 11201},
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 57, offset: 11201},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 336, col: 1, offset: 11289},
			expr: &actionExpr{
				pos: position{line: 336, col: 17, offset: 11305},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 336, col: 17, offset: 11305},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 336, col: 17, offset: 11305},
							expr: &litMatcher{
								pos:        position{line: 336, col: 18, offset: 11306},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 336, col: 26, offset: 11314},
							expr: &litMatcher{
								pos:        position{line: 336, col: 27, offset: 11315},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 336, col: 35, offset: 11323},
							expr: &litMatcher{
								pos:        position{line: 336, col: 36, offset: 11324},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 336, col: 46, offset: 11334},
							expr: &oneOrMoreExpr{
								pos: position{line: 336, col: 48, offset: 11336},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 48, offset: 11336},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 336, col: 56, offset: 11344},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 336, col: 61, offset: 11349},
								expr: &charClassMatcher{
									pos:        position{line: 336, col: 61, offset: 11349},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 336, col: 75, offset: 11363},
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 75, offset: 11363},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 340, col: 1, offset: 11406},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11424},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 340, col: 19, offset: 11424},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 340, col: 26, offset: 11431},
						expr: &charClassMatcher{
							pos:        position{line: 340, col: 26, offset: 11431},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 344, col: 1, offset: 11482},
			expr: &actionExpr{
				pos: position{line: 344, col: 29, offset: 11510},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 344, col: 29, offset: 11510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 344, col: 29, offset: 11510},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 344, col: 36, offset: 11517},
								expr: &charClassMatcher{
									pos:        position{line: 344, col: 36, offset: 11517},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 344, col: 50, offset: 11531},
							expr: &litMatcher{
								pos:        position{line: 344, col: 51, offset: 11532},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 348, col: 1, offset: 11698},
			expr: &actionExpr{
				pos: position{line: 348, col: 20, offset: 11717},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 348, col: 20, offset: 11717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 20, offset: 11717},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 348, col: 29, offset: 11726},
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 29, offset: 11726},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 348, col: 36, offset: 11733},
							expr: &litMatcher{
								pos:        position{line: 348, col: 36, offset: 11733},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 41, offset: 11738},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 348, col: 48, offset: 11745},
								expr: &ruleRefExpr{
									pos:  position{line: 348, col: 49, offset: 11746},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 348, col: 66, offset: 11763},
							expr: &litMatcher{
								pos:        position{line: 348, col: 66, offset: 11763},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 71, offset: 11768},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 348, col: 77, offset: 11774},
								expr: &ruleRefExpr{
									pos:  position{line: 348, col: 78, offset: 11775},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 95, offset: 11792},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 348, col: 99, offset: 11796},
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 99, offset: 11796},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 106, offset: 11803},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 352, col: 1, offset: 11872},
			expr: &actionExpr{
				pos: position{line: 352, col: 20, offset: 11891},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 352, col: 20, offset: 11891},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 20, offset: 11891},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 352, col: 29, offset: 11900},
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 29, offset: 11900},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 352, col: 36, offset: 11907},
							expr: &litMatcher{
								pos:        position{line: 352, col: 36, offset: 11907},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 41, offset: 11912},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 48, offset: 11919},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 49, offset: 11920},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 352, col: 66, offset: 11937},
							expr: &litMatcher{
								pos:        position{line: 352, col: 66, offset: 11937},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 352, col: 71, offset: 11942},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 352, col: 77, offset: 11948},
								expr: &ruleRefExpr{
									pos:  position{line: 352, col: 78, offset: 11949},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 352, col: 95, offset: 11966},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 352, col: 99, offset: 11970},
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 99, offset: 11970},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 106, offset: 11977},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 356, col: 1, offset: 12064},
			expr: &actionExpr{
				pos: position{line: 356, col: 19, offset: 12082},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 356, col: 20, offset: 12083},
					expr: &charClassMatcher{
						pos:        position{line: 356, col: 20, offset: 12083},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 360, col: 1, offset: 12132},
			expr: &actionExpr{
				pos: position{line: 360, col: 20, offset: 12151},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 360, col: 20, offset: 12151},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 20, offset: 12151},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 24, offset: 12155},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 360, col: 31, offset: 12162},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 360, col: 31, offset: 12162},
										expr: &ruleRefExpr{
											pos:  position{line: 360, col: 31, offset: 12162},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 360, col: 51, offset: 12182},
										expr: &ruleRefExpr{
											pos:  position{line: 360, col: 51, offset: 12182},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 360, col: 66, offset: 12197},
										expr: &ruleRefExpr{
											pos:  position{line: 360, col: 66, offset: 12197},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 360, col: 78, offset: 12209},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 364, col: 1, offset: 12263},
			expr: &actionExpr{
				pos: position{line: 364, col: 23, offset: 12285},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 364, col: 23, offset: 12285},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 364, col: 28, offset: 12290},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 368, col: 1, offset: 12349},
			expr: &actionExpr{
				pos: position{line: 368, col: 25, offset: 12373},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 368, col: 25, offset: 12373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 25, offset: 12373},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 368, col: 36, offset: 12384},
								expr: &ruleRefExpr{
									pos:  position{line: 368, col: 37, offset: 12385},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 368, col: 56, offset: 12404},
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 56, offset: 12404},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 372, col: 1, offset: 12519},
			expr: &choiceExpr{
				pos: position{line: 372, col: 18, offset: 12536},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 18, offset: 12536},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 36, offset: 12554},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 58, offset: 12576},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 374, col: 1, offset: 12595},
			expr: &actionExpr{
				pos: position{line: 374, col: 24, offset: 12618},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 374, col: 24, offset: 12618},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 24, offset: 12618},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 28, offset: 12622},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 35, offset: 12629},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 374, col: 50, offset: 12644},
							expr: &charClassMatcher{
								pos:        position{line: 374, col: 51, offset: 12645},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 378, col: 1, offset: 12705},
			expr: &actionExpr{
				pos: position{line: 378, col: 20, offset: 12724},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 378, col: 20, offset: 12724},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 20, offset: 12724},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 24, offset: 12728},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 27, offset: 12731},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 378, col: 42, offset: 12746},
							expr: &charClassMatcher{
								pos:        position{line: 378, col: 43, offset: 12747},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 382, col: 1, offset: 12799},
			expr: &actionExpr{
				pos: position{line: 382, col: 22, offset: 12820},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 382, col: 22, offset: 12820},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 22, offset: 12820},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 26, offset: 12824},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 31, offset: 12829},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 382, col: 46, offset: 12844},
							expr: &charClassMatcher{
								pos:        position{line: 382, col: 47, offset: 12845},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 387, col: 1, offset: 12945},
			expr: &actionExpr{
				pos: position{line: 387, col: 20, offset: 12964},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 387, col: 20, offset: 12964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 20, offset: 12964},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 26, offset: 12970},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 387, col: 41, offset: 12985},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 42, offset: 12986},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 391, col: 1, offset: 13022},
			expr: &choiceExpr{
				pos: position{line: 391, col: 14, offset: 13035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 391, col: 14, offset: 13035},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 26, offset: 13047},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 38, offset: 13059},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 391, col: 50, offset: 13071},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 393, col: 1, offset: 13085},
			expr: &actionExpr{
				pos: position{line: 393, col: 15, offset: 13099},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 393, col: 15, offset: 13099},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 393, col: 21, offset: 13105},
						expr: &ruleRefExpr{
							pos:  position{line: 393, col: 21, offset: 13105},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 397, col: 1, offset: 13170},
			expr: &actionExpr{
				pos: position{line: 397, col: 18, offset: 13187},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 397, col: 18, offset: 13187},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 397, col: 18, offset: 13187},
							expr: &litMatcher{
								pos:        position{line: 397, col: 18, offset: 13187},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 397, col: 23, offset: 13192},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 23, offset: 13192},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 30, offset: 13199},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 32, offset: 13201},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 397, col: 45, offset: 13214},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 45, offset: 13214},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 52, offset: 13221},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 56, offset: 13225},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 397, col: 59, offset: 13228},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 397, col: 59, offset: 13228},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 71, offset: 13240},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 83, offset: 13252},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 402, col: 1, offset: 13441},
			expr: &actionExpr{
				pos: position{line: 402, col: 14, offset: 13454},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 402, col: 14, offset: 13454},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 14, offset: 13454},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 14, offset: 13454},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 402, col: 21, offset: 13461},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 22, offset: 13462},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 408, col: 1, offset: 13598},
			expr: &actionExpr{
				pos: position{line: 408, col: 14, offset: 13611},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 408, col: 14, offset: 13611},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 14, offset: 13611},
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 14, offset: 13611},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 21, offset: 13618},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 25, offset: 13622},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 29, offset: 13626},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 41, offset: 13638},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 45, offset: 13642},
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 45, offset: 13642},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 408, col: 52, offset: 13649},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 53, offset: 13650},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 410, col: 1, offset: 13677},
			expr: &actionExpr{
				pos: position{line: 410, col: 16, offset: 13692},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 410, col: 16, offset: 13692},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 410, col: 20, offset: 13696},
						expr: &choiceExpr{
							pos: position{line: 410, col: 22, offset: 13698},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 410, col: 22, offset: 13698},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 410, col: 37, offset: 13713},
									expr: &charClassMatcher{
										pos:        position{line: 410, col: 37, offset: 13713},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 410, col: 51, offset: 13727},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 412, col: 1, offset: 13767},
			expr: &actionExpr{
				pos: position{line: 412, col: 17, offset: 13783},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 412, col: 17, offset: 13783},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 415, col: 1, offset: 13843},
			expr: &actionExpr{
				pos: position{line: 415, col: 14, offset: 13856},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 415, col: 14, offset: 13856},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 415, col: 14, offset: 13856},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 14, offset: 13856},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 21, offset: 13863},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 25, offset: 13867},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 29, offset: 13871},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 41, offset: 13883},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 415, col: 45, offset: 13887},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 45, offset: 13887},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 417, col: 1, offset: 13915},
			expr: &actionExpr{
				pos: position{line: 417, col: 16, offset: 13930},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 417, col: 16, offset: 13930},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 417, col: 20, offset: 13934},
						expr: &choiceExpr{
							pos: position{line: 417, col: 22, offset: 13936},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 417, col: 22, offset: 13936},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 417, col: 37, offset: 13951},
									expr: &charClassMatcher{
										pos:        position{line: 417, col: 37, offset: 13951},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 417, col: 51, offset: 13965},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 419, col: 1, offset: 14005},
			expr: &actionExpr{
				pos: position{line: 419, col: 17, offset: 14021},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 419, col: 17, offset: 14021},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 422, col: 1, offset: 14112},
			expr: &actionExpr{
				pos: position{line: 422, col: 17, offset: 14128},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 422, col: 17, offset: 14128},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 422, col: 17, offset: 14128},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 17, offset: 14128},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 422, col: 30, offset: 14141},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 31, offset: 14142},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 425, col: 1, offset: 14253},
			expr: &actionExpr{
				pos: position{line: 425, col: 19, offset: 14271},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 425, col: 19, offset: 14271},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 425, col: 19, offset: 14271},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 19, offset: 14271},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 425, col: 31, offset: 14283},
							expr: &charClassMatcher{
								pos:        position{line: 425, col: 32, offset: 14284},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 427, col: 1, offset: 14341},
			expr: &choiceExpr{
				pos: position{line: 427, col: 19, offset: 14359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 427, col: 19, offset: 14359},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 41, offset: 14381},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 65, offset: 14405},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 431, col: 1, offset: 14603},
			expr: &actionExpr{
				pos: position{line: 431, col: 24, offset: 14626},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 431, col: 24, offset: 14626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 24, offset: 14626},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 431, col: 31, offset: 14633},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 431, col: 31, offset: 14633},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 5, offset: 14719},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 434, col: 13, offset: 14727},
								expr: &choiceExpr{
									pos: position{line: 434, col: 14, offset: 14728},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 434, col: 14, offset: 14728},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 435, col: 12, offset: 14759},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 435, col: 12, offset: 14759},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 435, col: 34, offset: 14781},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 435, col: 34, offset: 14781},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 435, col: 34, offset: 14781},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 435, col: 39, offset: 14786},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 442, col: 1, offset: 14969},
			expr: &actionExpr{
				pos: position{line: 442, col: 13, offset: 14981},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 442, col: 13, offset: 14981},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 442, col: 13, offset: 14981},
							expr: &seqExpr{
								pos: position{line: 442, col: 15, offset: 14983},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 442, col: 15, offset: 14983},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 442, col: 19, offset: 14987},
										expr: &ruleRefExpr{
											pos:  position{line: 442, col: 19, offset: 14987},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 29, offset: 14997},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 33, offset: 15001},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 442, col: 46, offset: 15014},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 46, offset: 15014},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 442, col: 53, offset: 15021},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 442, col: 57, offset: 15025},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 57, offset: 15025},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 64, offset: 15032},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 70, offset: 15038},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 442, col: 85, offset: 15053},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 85, offset: 15053},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 447, col: 1, offset: 15234},
			expr: &actionExpr{
				pos: position{line: 447, col: 17, offset: 15250},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 447, col: 17, offset: 15250},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 447, col: 17, offset: 15250},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 447, col: 26, offset: 15259},
							expr: &charClassMatcher{
								pos:        position{line: 447, col: 26, offset: 15259},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 451, col: 1, offset: 15307},
			expr: &choiceExpr{
				pos: position{line: 451, col: 19, offset: 15325},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 451, col: 19, offset: 15325},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 451, col: 35, offset: 15341},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 451, col: 59, offset: 15365},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 451, col: 83, offset: 15389},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 453, col: 1, offset: 15405},
			expr: &actionExpr{
				pos: position{line: 453, col: 19, offset: 15423},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 453, col: 19, offset: 15423},
					expr: &charClassMatcher{
						pos:        position{line: 453, col: 19, offset: 15423},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 457, col: 1, offset: 15476},
			expr: &actionExpr{
				pos: position{line: 457, col: 26, offset: 15501},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 457, col: 26, offset: 15501},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 26, offset: 15501},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 30, offset: 15505},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 457, col: 39, offset: 15514},
								expr: &choiceExpr{
									pos: position{line: 458, col: 5, offset: 15520},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 458, col: 6, offset: 15521},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 458, col: 6, offset: 15521},
												expr: &charClassMatcher{
													pos:        position{line: 458, col: 6, offset: 15521},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 10, offset: 15603},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 460, col: 31, offset: 15624},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 464, col: 1, offset: 15666},
			expr: &actionExpr{
				pos: position{line: 464, col: 26, offset: 15691},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 464, col: 26, offset: 15691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 26, offset: 15691},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 31, offset: 15696},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 464, col: 40, offset: 15705},
								expr: &choiceExpr{
									pos: position{line: 465, col: 5, offset: 15711},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 465, col: 6, offset: 15712},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 465, col: 6, offset: 15712},
												expr: &charClassMatcher{
													pos:        position{line: 465, col: 6, offset: 15712},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 467, col: 10, offset: 15794},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 467, col: 31, offset: 15815},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 473, col: 1, offset: 16055},
			expr: &actionExpr{
				pos: position{line: 473, col: 18, offset: 16072},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 473, col: 18, offset: 16072},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 480, col: 1, offset: 16207},
			expr: &actionExpr{
				pos: position{line: 480, col: 12, offset: 16218},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 480, col: 12, offset: 16218},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 480, col: 12, offset: 16218},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 480, col: 23, offset: 16229},
								expr: &ruleRefExpr{
									pos:  position{line: 480, col: 24, offset: 16230},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 5, offset: 16247},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 481, col: 12, offset: 16254},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 481, col: 12, offset: 16254},
									expr: &litMatcher{
										pos:        position{line: 481, col: 13, offset: 16255},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 485, col: 5, offset: 16346},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 489, col: 5, offset: 16498},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 5, offset: 16498},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 12, offset: 16505},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 19, offset: 16512},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 34, offset: 16527},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 489, col: 38, offset: 16531},
								expr: &ruleRefExpr{
									pos:  position{line: 489, col: 38, offset: 16531},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 56, offset: 16549},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 493, col: 1, offset: 16655},
			expr: &actionExpr{
				pos: position{line: 493, col: 18, offset: 16672},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 493, col: 18, offset: 16672},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 493, col: 27, offset: 16681},
						expr: &seqExpr{
							pos: position{line: 493, col: 28, offset: 16682},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 493, col: 28, offset: 16682},
									expr: &ruleRefExpr{
										pos:  position{line: 493, col: 29, offset: 16683},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 493, col: 37, offset: 16691},
									expr: &ruleRefExpr{
										pos:  position{line: 493, col: 38, offset: 16692},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 493, col: 54, offset: 16708},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 497, col: 1, offset: 16829},
			expr: &actionExpr{
				pos: position{line: 497, col: 17, offset: 16845},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 497, col: 17, offset: 16845},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 497, col: 26, offset: 16854},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 497, col: 26, offset: 16854},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16869},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 499, col: 11, offset: 16914},
								expr: &ruleRefExpr{
									pos:  position{line: 499, col: 11, offset: 16914},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16932},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16961},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 508, col: 1, offset: 17112},
			expr: &seqExpr{
				pos: position{line: 508, col: 31, offset: 17142},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 508, col: 31, offset: 17142},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 41, offset: 17152},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 513, col: 1, offset: 17263},
			expr: &actionExpr{
				pos: position{line: 513, col: 19, offset: 17281},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 513, col: 19, offset: 17281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 513, col: 19, offset: 17281},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 25, offset: 17287},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 513, col: 40, offset: 17302},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 45, offset: 17307},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 52, offset: 17314},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 68, offset: 17330},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 75, offset: 17337},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 517, col: 1, offset: 17452},
			expr: &actionExpr{
				pos: position{line: 517, col: 20, offset: 17471},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 517, col: 20, offset: 17471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 517, col: 20, offset: 17471},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 26, offset: 17477},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 517, col: 41, offset: 17492},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 45, offset: 17496},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 52, offset: 17503},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 68, offset: 17519},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 75, offset: 17526},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 521, col: 1, offset: 17642},
			expr: &actionExpr{
				pos: position{line: 521, col: 18, offset: 17659},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 521, col: 18, offset: 17659},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 521, col: 18, offset: 17659},
							expr: &litMatcher{
								pos:        position{line: 521, col: 19, offset: 17660},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 30, offset: 17671},
							expr: &charClassMatcher{
								pos:        position{line: 521, col: 30, offset: 17671},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 525, col: 1, offset: 17720},
			expr: &actionExpr{
				pos: position{line: 525, col: 19, offset: 17738},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 525, col: 19, offset: 17738},
					expr: &charClassMatcher{
						pos:        position{line: 525, col: 19, offset: 17738},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 529, col: 1, offset: 17786},
			expr: &actionExpr{
				pos: position{line: 529, col: 24, offset: 17809},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 529, col: 24, offset: 17809},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 529, col: 24, offset: 17809},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 529, col: 28, offset: 17813},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 529, col: 34, offset: 17819},
								expr: &ruleRefExpr{
									pos:  position{line: 529, col: 35, offset: 17820},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 529, col: 54, offset: 17839},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 536, col: 1, offset: 18021},
			expr: &actionExpr{
				pos: position{line: 536, col: 18, offset: 18038},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 536, col: 18, offset: 18038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 536, col: 18, offset: 18038},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 536, col: 24, offset: 18044},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 536, col: 24, offset: 18044},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 536, col: 24, offset: 18044},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 536, col: 36, offset: 18056},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 536, col: 42, offset: 18062},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 536, col: 56, offset: 18076},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 536, col: 74, offset: 18094},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 538, col: 8, offset: 18241},
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 8, offset: 18241},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 15, offset: 18248},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 542, col: 1, offset: 18300},
			expr: &actionExpr{
				pos: position{line: 542, col: 26, offset: 18325},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 542, col: 26, offset: 18325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 542, col: 26, offset: 18325},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 30, offset: 18329},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 542, col: 36, offset: 18335},
								expr: &choiceExpr{
									pos: position{line: 542, col: 37, offset: 18336},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 542, col: 37, offset: 18336},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 542, col: 59, offset: 18358},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 542, col: 80, offset: 18379},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 542, col: 99, offset: 18398},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 546, col: 1, offset: 18470},
			expr: &actionExpr{
				pos: position{line: 546, col: 24, offset: 18493},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 546, col: 24, offset: 18493},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 546, col: 24, offset: 18493},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 33, offset: 18502},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 40, offset: 18509},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 546, col: 66, offset: 18535},
							expr: &litMatcher{
								pos:        position{line: 546, col: 66, offset: 18535},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 550, col: 1, offset: 18594},
			expr: &actionExpr{
				pos: position{line: 550, col: 29, offset: 18622},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 550, col: 29, offset: 18622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 29, offset: 18622},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 550, col: 36, offset: 18629},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 550, col: 36, offset: 18629},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 551, col: 11, offset: 18746},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 11, offset: 18782},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 553, col: 11, offset: 18808},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 554, col: 11, offset: 18840},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 555, col: 11, offset: 18872},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 18899},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 556, col: 31, offset: 18919},
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 31, offset: 18919},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 556, col: 39, offset: 18927},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 556, col: 39, offset: 18927},
									expr: &litMatcher{
										pos:        position{line: 556, col: 40, offset: 18928},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 556, col: 46, offset: 18934},
									expr: &litMatcher{
										pos:        position{line: 556, col: 47, offset: 18935},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 560, col: 1, offset: 18967},
			expr: &actionExpr{
				pos: position{line: 560, col: 23, offset: 18989},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 560, col: 23, offset: 18989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 560, col: 23, offset: 18989},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 560, col: 30, offset: 18996},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 560, col: 30, offset: 18996},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 560, col: 47, offset: 19013},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 19035},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 561, col: 12, offset: 19042},
								expr: &actionExpr{
									pos: position{line: 561, col: 13, offset: 19043},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 561, col: 13, offset: 19043},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 561, col: 13, offset: 19043},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 561, col: 17, offset: 19047},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 561, col: 24, offset: 19054},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 561, col: 24, offset: 19054},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 561, col: 41, offset: 19071},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 567, col: 1, offset: 19209},
			expr: &actionExpr{
				pos: position{line: 567, col: 29, offset: 19237},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 567, col: 29, offset: 19237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 29, offset: 19237},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 34, offset: 19242},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 567, col: 41, offset: 19249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 567, col: 41, offset: 19249},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 567, col: 58, offset: 19266},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 5, offset: 19288},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 568, col: 12, offset: 19295},
								expr: &actionExpr{
									pos: position{line: 568, col: 13, offset: 19296},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 568, col: 13, offset: 19296},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 568, col: 13, offset: 19296},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 568, col: 17, offset: 19300},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 568, col: 24, offset: 19307},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 568, col: 24, offset: 19307},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 568, col: 41, offset: 19324},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 570, col: 9, offset: 19377},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 574, col: 1, offset: 19467},
			expr: &actionExpr{
				pos: position{line: 574, col: 19, offset: 19485},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 574, col: 19, offset: 19485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 574, col: 19, offset: 19485},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 26, offset: 19492},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 574, col: 34, offset: 19500},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 574, col: 39, offset: 19505},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 44, offset: 19510},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 578, col: 1, offset: 19598},
			expr: &actionExpr{
				pos: position{line: 578, col: 25, offset: 19622},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 578, col: 25, offset: 19622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 25, offset: 19622},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 30, offset: 19627},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 37, offset: 19634},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 578, col: 45, offset: 19642},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 50, offset: 19647},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 55, offset: 19652},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 578, col: 63, offset: 19660},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 582, col: 1, offset: 19745},
			expr: &actionExpr{
				pos: position{line: 582, col: 20, offset: 19764},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 582, col: 20, offset: 19764},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 582, col: 32, offset: 19776},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 586, col: 1, offset: 19871},
			expr: &actionExpr{
				pos: position{line: 586, col: 26, offset: 19896},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 586, col: 26, offset: 19896},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 586, col: 26, offset: 19896},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 31, offset: 19901},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 43, offset: 19913},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 586, col: 51, offset: 19921},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 590, col: 1, offset: 20013},
			expr: &actionExpr{
				pos: position{line: 590, col: 23, offset: 20035},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 590, col: 23, offset: 20035},
					expr: &charClassMatcher{
						pos:        position{line: 590, col: 23, offset: 20035},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 594, col: 1, offset: 20080},
			expr: &actionExpr{
				pos: position{line: 594, col: 23, offset: 20102},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 594, col: 23, offset: 20102},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 594, col: 24, offset: 20103},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 594, col: 24, offset: 20103},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 594, col: 34, offset: 20113},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 42, offset: 20121},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 48, offset: 20127},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 594, col: 73, offset: 20152},
							expr: &litMatcher{
								pos:        position{line: 594, col: 73, offset: 20152},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 598, col: 1, offset: 20301},
			expr: &actionExpr{
				pos: position{line: 598, col: 28, offset: 20328},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 598, col: 28, offset: 20328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 28, offset: 20328},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 35, offset: 20335},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 54, offset: 20354},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 54, offset: 20354},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 598, col: 62, offset: 20362},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 598, col: 62, offset: 20362},
									expr: &litMatcher{
										pos:        position{line: 598, col: 63, offset: 20363},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 598, col: 69, offset: 20369},
									expr: &litMatcher{
										pos:        position{line: 598, col: 70, offset: 20370},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 602, col: 1, offset: 20402},
			expr: &actionExpr{
				pos: position{line: 602, col: 22, offset: 20423},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 602, col: 22, offset: 20423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 22, offset: 20423},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 29, offset: 20430},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 20444},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 603, col: 12, offset: 20451},
								expr: &actionExpr{
									pos: position{line: 603, col: 13, offset: 20452},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 603, col: 13, offset: 20452},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 603, col: 13, offset: 20452},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 603, col: 17, offset: 20456},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 603, col: 24, offset: 20463},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 609, col: 1, offset: 20594},
			expr: &choiceExpr{
				pos: position{line: 609, col: 13, offset: 20606},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 13, offset: 20606},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 609, col: 13, offset: 20606},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 609, col: 18, offset: 20611},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 609, col: 18, offset: 20611},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 609, col: 30, offset: 20623},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 611, col: 5, offset: 20691},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 611, col: 5, offset: 20691},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 611, col: 5, offset: 20691},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 611, col: 9, offset: 20695},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 611, col: 14, offset: 20700},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 14, offset: 20700},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 26, offset: 20712},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 615, col: 1, offset: 20780},
			expr: &actionExpr{
				pos: position{line: 615, col: 16, offset: 20795},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 615, col: 16, offset: 20795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 16, offset: 20795},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 615, col: 23, offset: 20802},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 615, col: 23, offset: 20802},
									expr: &litMatcher{
										pos:        position{line: 615, col: 24, offset: 20803},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 618, col: 5, offset: 20857},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 628, col: 1, offset: 21151},
			expr: &actionExpr{
				pos: position{line: 628, col: 21, offset: 21171},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 628, col: 21, offset: 21171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 21, offset: 21171},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 628, col: 29, offset: 21179},
								expr: &choiceExpr{
									pos: position{line: 628, col: 30, offset: 21180},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 628, col: 30, offset: 21180},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 628, col: 53, offset: 21203},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 628, col: 74, offset: 21224},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 628, col: 74, offset: 21224,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 628, col: 107, offset: 21257},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 632, col: 1, offset: 21328},
			expr: &actionExpr{
				pos: position{line: 632, col: 25, offset: 21352},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 632, col: 25, offset: 21352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 25, offset: 21352},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 33, offset: 21360},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 632, col: 38, offset: 21365},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 632, col: 38, offset: 21365},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 78, offset: 21405},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 636, col: 1, offset: 21470},
			expr: &actionExpr{
				pos: position{line: 636, col: 23, offset: 21492},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 636, col: 23, offset: 21492},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 23, offset: 21492},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 31, offset: 21500},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 636, col: 36, offset: 21505},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 36, offset: 21505},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 636, col: 76, offset: 21545},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 643, col: 1, offset: 21709},
			expr: &choiceExpr{
				pos: position{line: 643, col: 18, offset: 21726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 643, col: 18, offset: 21726},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 643, col: 18, offset: 21726},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 27, offset: 21735},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 9, offset: 21792},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 645, col: 9, offset: 21792},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 645, col: 15, offset: 21798},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 16, offset: 21799},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 649, col: 1, offset: 21891},
			expr: &actionExpr{
				pos: position{line: 649, col: 22, offset: 21912},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 649, col: 22, offset: 21912},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 649, col: 22, offset: 21912},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 23, offset: 21913},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 650, col: 5, offset: 21921},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 6, offset: 21922},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21937},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21938},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21960},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21961},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21987},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21988},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 22016},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 22017},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 22043},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 22044},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 22069},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 22070},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 22091},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 22092},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 22111},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 22112},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 659, col: 5, offset: 22139},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 659, col: 11, offset: 22145},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 659, col: 11, offset: 22145},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 659, col: 11, offset: 22145},
											expr: &ruleRefExpr{
												pos:  position{line: 659, col: 11, offset: 22145},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 659, col: 18, offset: 22152},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 659, col: 27, offset: 22161},
												expr: &ruleRefExpr{
													pos:  position{line: 659, col: 28, offset: 22162},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 12, offset: 22261},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 665, col: 1, offset: 22300},
			expr: &seqExpr{
				pos: position{line: 665, col: 25, offset: 22324},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 665, col: 25, offset: 22324},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 665, col: 29, offset: 22328},
						expr: &ruleRefExpr{
							pos:  position{line: 665, col: 29, offset: 22328},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 665, col: 36, offset: 22335},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 667, col: 1, offset: 22407},
			expr: &actionExpr{
				pos: position{line: 667, col: 29, offset: 22435},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 667, col: 29, offset: 22435},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 667, col: 29, offset: 22435},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 667, col: 50, offset: 22456},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 58, offset: 22464},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 671, col: 1, offset: 22570},
			expr: &actionExpr{
				pos: position{line: 671, col: 29, offset: 22598},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 671, col: 29, offset: 22598},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 671, col: 29, offset: 22598},
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 30, offset: 22599},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 22608},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 672, col: 14, offset: 22617},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 672, col: 14, offset: 22617},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22642},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22670},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22686},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22707},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22731},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22758},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22787},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 22852},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22903},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 22927},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22959},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22985},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 23022},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23047},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 694, col: 1, offset: 23213},
			expr: &actionExpr{
				pos: position{line: 694, col: 20, offset: 23232},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 694, col: 20, offset: 23232},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 694, col: 20, offset: 23232},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 694, col: 26, offset: 23238},
								expr: &ruleRefExpr{
									pos:  position{line: 694, col: 27, offset: 23239},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 40, offset: 23252},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 48, offset: 23260},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 694, col: 71, offset: 23283},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 80, offset: 23292},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 698, col: 1, offset: 23427},
			expr: &actionExpr{
				pos: position{line: 699, col: 5, offset: 23457},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 699, col: 5, offset: 23457},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 699, col: 5, offset: 23457},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 5, offset: 23457},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 12, offset: 23464},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 701, col: 9, offset: 23527},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 701, col: 9, offset: 23527},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 701, col: 9, offset: 23527},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 701, col: 9, offset: 23527},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 701, col: 16, offset: 23534},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 701, col: 16, offset: 23534},
															expr: &litMatcher{
																pos:        position{line: 701, col: 17, offset: 23535},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 705, col: 9, offset: 23635},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 11, offset: 24352},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 724, col: 11, offset: 24352},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 724, col: 11, offset: 24352},
													expr: &charClassMatcher{
														pos:        position{line: 724, col: 12, offset: 24353},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 724, col: 20, offset: 24361},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 726, col: 13, offset: 24472},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 726, col: 13, offset: 24472},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 726, col: 14, offset: 24473},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 726, col: 21, offset: 24480},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 728, col: 13, offset: 24594},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 728, col: 13, offset: 24594},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 728, col: 14, offset: 24595},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 728, col: 21, offset: 24602},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 730, col: 13, offset: 24716},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 730, col: 13, offset: 24716},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 730, col: 13, offset: 24716},
													expr: &charClassMatcher{
														pos:        position{line: 730, col: 14, offset: 24717},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 730, col: 26, offset: 24729},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 732, col: 13, offset: 24843},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 732, col: 13, offset: 24843},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 732, col: 13, offset: 24843},
													expr: &charClassMatcher{
														pos:        position{line: 732, col: 14, offset: 24844},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 732, col: 26, offset: 24856},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 734, col: 12, offset: 24969},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 12, offset: 24969},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 738, col: 1, offset: 25004},
			expr: &actionExpr{
				pos: position{line: 738, col: 27, offset: 25030},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 27, offset: 25030},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 738, col: 37, offset: 25040},
						expr: &ruleRefExpr{
							pos:  position{line: 738, col: 37, offset: 25040},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 745, col: 1, offset: 25240},
			expr: &actionExpr{
				pos: position{line: 745, col: 22, offset: 25261},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 745, col: 22, offset: 25261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 745, col: 22, offset: 25261},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 745, col: 28, offset: 25267},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 29, offset: 25268},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 42, offset: 25281},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 50, offset: 25289},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 75, offset: 25314},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 745, col: 86, offset: 25325},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 87, offset: 25326},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 117, offset: 25356},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 126, offset: 25365},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 749, col: 1, offset: 25518},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 25550},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 750, col: 5, offset: 25550},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 750, col: 5, offset: 25550},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 5, offset: 25550},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 750, col: 12, offset: 25557},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 750, col: 20, offset: 25565},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 752, col: 9, offset: 25622},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 752, col: 9, offset: 25622},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 752, col: 9, offset: 25622},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 752, col: 16, offset: 25629},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 752, col: 16, offset: 25629},
															expr: &litMatcher{
																pos:        position{line: 752, col: 17, offset: 25630},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 756, col: 9, offset: 25730},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 773, col: 14, offset: 26437},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 773, col: 21, offset: 26444},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 773, col: 22, offset: 26445},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 775, col: 13, offset: 26531},
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 13, offset: 26531},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 779, col: 1, offset: 26567},
			expr: &actionExpr{
				pos: position{line: 779, col: 32, offset: 26598},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 779, col: 32, offset: 26598},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 779, col: 32, offset: 26598},
							expr: &litMatcher{
								pos:        position{line: 779, col: 33, offset: 26599},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 37, offset: 26603},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 780, col: 7, offset: 26617},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 780, col: 7, offset: 26617},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 780, col: 7, offset: 26617},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 781, col: 7, offset: 26662},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 781, col: 7, offset: 26662},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 782, col: 7, offset: 26705},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 782, col: 7, offset: 26705},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 783, col: 7, offset: 26747},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 7, offset: 26747},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 787, col: 1, offset: 26789},
			expr: &actionExpr{
				pos: position{line: 787, col: 29, offset: 26817},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 787, col: 29, offset: 26817},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 787, col: 39, offset: 26827},
						expr: &ruleRefExpr{
							pos:  position{line: 787, col: 39, offset: 26827},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 794, col: 1, offset: 27143},
			expr: &actionExpr{
				pos: position{line: 794, col: 20, offset: 27162},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 794, col: 20, offset: 27162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 794, col: 20, offset: 27162},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 794, col: 26, offset: 27168},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 27, offset: 27169},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 40, offset: 27182},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 46, offset: 27188},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 75, offset: 27217},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 86, offset: 27228},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 112, offset: 27254},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 124, offset: 27266},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 125, offset: 27267},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 798, col: 1, offset: 27408},
			expr: &seqExpr{
				pos: position{line: 798, col: 26, offset: 27433},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 798, col: 26, offset: 27433},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 798, col: 54, offset: 27461},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 800, col: 1, offset: 27487},
			expr: &choiceExpr{
				pos: position{line: 800, col: 33, offset: 27519},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 800, col: 33, offset: 27519},
						expr: &charClassMatcher{
							pos:        position{line: 800, col: 33, offset: 27519},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 800, col: 45, offset: 27531},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 800, col: 45, offset: 27531},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 800, col: 49, offset: 27535},
								expr: &litMatcher{
									pos:        position{line: 800, col: 50, offset: 27536},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 801, col: 1, offset: 27540},
			expr: &actionExpr{
				pos: position{line: 801, col: 32, offset: 27571},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 801, col: 32, offset: 27571},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 801, col: 42, offset: 27581},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 801, col: 42, offset: 27581},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 42, offset: 27581},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 807, col: 1, offset: 27736},
			expr: &actionExpr{
				pos: position{line: 807, col: 24, offset: 27759},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 807, col: 24, offset: 27759},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 807, col: 33, offset: 27768},
						expr: &seqExpr{
							pos: position{line: 807, col: 34, offset: 27769},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 807, col: 34, offset: 27769},
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 35, offset: 27770},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 807, col: 43, offset: 27778},
									expr: &litMatcher{
										pos:        position{line: 807, col: 44, offset: 27779},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 49, offset: 27784},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 811, col: 1, offset: 27911},
			expr: &actionExpr{
				pos: position{line: 811, col: 31, offset: 27941},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 811, col: 31, offset: 27941},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 811, col: 40, offset: 27950},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 811, col: 40, offset: 27950},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 27965},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 813, col: 11, offset: 28014},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 11, offset: 28014},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 814, col: 11, offset: 28032},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28057},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 28086},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28106},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 28195},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28216},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28239},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28254},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28279},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 28302},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 28323},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 28350},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 28367},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 28399},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 831, col: 1, offset: 28438},
			expr: &actionExpr{
				pos: position{line: 832, col: 5, offset: 28471},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 832, col: 5, offset: 28471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 832, col: 5, offset: 28471},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 832, col: 16, offset: 28482},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 832, col: 16, offset: 28482},
									expr: &litMatcher{
										pos:        position{line: 832, col: 17, offset: 28483},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 835, col: 5, offset: 28541},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 839, col: 6, offset: 28717},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 839, col: 6, offset: 28717},
									expr: &choiceExpr{
										pos: position{line: 839, col: 7, offset: 28718},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 839, col: 7, offset: 28718},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 15, offset: 28726},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 839, col: 27, offset: 28738},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 843, col: 1, offset: 28778},
			expr: &actionExpr{
				pos: position{line: 843, col: 31, offset: 28808},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 843, col: 31, offset: 28808},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 843, col: 40, offset: 28817},
						expr: &ruleRefExpr{
							pos:  position{line: 843, col: 41, offset: 28818},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 850, col: 1, offset: 29009},
			expr: &choiceExpr{
				pos: position{line: 850, col: 19, offset: 29027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 850, col: 19, offset: 29027},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 850, col: 19, offset: 29027},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 29065},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 852, col: 5, offset: 29065},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 29105},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 854, col: 5, offset: 29105},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 29155},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 856, col: 5, offset: 29155},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 29201},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 858, col: 5, offset: 29201},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 869, col: 1, offset: 29513},
			expr: &choiceExpr{
				pos: position{line: 871, col: 5, offset: 29563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 29563},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 29563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 29563},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 871, col: 16, offset: 29574},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 17, offset: 29575},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 871, col: 30, offset: 29588},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 33, offset: 29591},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 871, col: 49, offset: 29607},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 871, col: 54, offset: 29612},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 871, col: 60, offset: 29618},
										expr: &choiceExpr{
											pos: position{line: 871, col: 61, offset: 29619},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 871, col: 61, offset: 29619},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 871, col: 81, offset: 29639},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 29874},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 29874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 876, col: 5, offset: 29874},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 876, col: 16, offset: 29885},
										expr: &ruleRefExpr{
											pos:  position{line: 876, col: 17, offset: 29886},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 30, offset: 29899},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 876, col: 35, offset: 29904},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 44, offset: 29913},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 30086},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 30086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 5, offset: 30086},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 16, offset: 30097},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 17, offset: 30098},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 880, col: 30, offset: 30111},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 887, col: 7, offset: 30395},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 887, col: 15, offset: 30403},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 16, offset: 30404},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 30570},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 891, col: 5, offset: 30570},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 891, col: 5, offset: 30570},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 891, col: 16, offset: 30581},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 17, offset: 30582},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 891, col: 31, offset: 30596},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 891, col: 37, offset: 30602},
										expr: &choiceExpr{
											pos: position{line: 891, col: 38, offset: 30603},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 891, col: 38, offset: 30603},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 891, col: 58, offset: 30623},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 895, col: 1, offset: 30721},
			expr: &oneOrMoreExpr{
				pos: position{line: 895, col: 33, offset: 30753},
				expr: &actionExpr{
					pos: position{line: 895, col: 34, offset: 30754},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 895, col: 34, offset: 30754},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 895, col: 34, offset: 30754},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 35, offset: 30755},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 895, col: 45, offset: 30765},
								expr: &litMatcher{
									pos:        position{line: 895, col: 45, offset: 30765},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 895, col: 51, offset: 30771},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 60, offset: 30780},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 899, col: 1, offset: 30821},
			expr: &actionExpr{
				pos: position{line: 899, col: 21, offset: 30841},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 899, col: 21, offset: 30841},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 899, col: 21, offset: 30841},
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 22, offset: 30842},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 30862},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 14, offset: 30871},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 39, offset: 30896},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 900, col: 43, offset: 30900},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 910, col: 1, offset: 31135},
			expr: &actionExpr{
				pos: position{line: 910, col: 28, offset: 31162},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 910, col: 28, offset: 31162},
					expr: &charClassMatcher{
						pos:        position{line: 910, col: 28, offset: 31162},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 915, col: 1, offset: 31279},
			expr: &actionExpr{
				pos: position{line: 915, col: 23, offset: 31301},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 915, col: 23, offset: 31301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 915, col: 23, offset: 31301},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 915, col: 34, offset: 31312},
								expr: &ruleRefExpr{
									pos:  position{line: 915, col: 35, offset: 31313},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 916, col: 5, offset: 31331},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 5, offset: 31622},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 16, offset: 31633},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 31659},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 16, offset: 31670},
								expr: &choiceExpr{
									pos: position{line: 925, col: 17, offset: 31671},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 31671},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 37, offset: 31691},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 929, col: 1, offset: 31823},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 31853},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 31853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 31853},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 930, col: 14, offset: 31862},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 930, col: 14, offset: 31862},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 930, col: 14, offset: 31862},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 23, offset: 31871},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 930, col: 28, offset: 31876},
											expr: &charClassMatcher{
												pos:        position{line: 930, col: 28, offset: 31876},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 68, offset: 31916},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 941, col: 1, offset: 32168},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 32227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 32227},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 32227},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 32227},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 943, col: 16, offset: 32238},
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 17, offset: 32239},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 943, col: 30, offset: 32252},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 33, offset: 32255},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 943, col: 49, offset: 32271},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 54, offset: 32276},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 61, offset: 32283},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 32486},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 32486},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 5, offset: 32486},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 947, col: 16, offset: 32497},
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 17, offset: 32498},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 947, col: 30, offset: 32511},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 37, offset: 32518},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 951, col: 1, offset: 32622},
			expr: &actionExpr{
				pos: position{line: 951, col: 31, offset: 32652},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 951, col: 31, offset: 32652},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 951, col: 31, offset: 32652},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 42, offset: 32663},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 951, col: 65, offset: 32686},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 951, col: 76, offset: 32697},
								expr: &actionExpr{
									pos: position{line: 951, col: 77, offset: 32698},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 951, col: 77, offset: 32698},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 951, col: 77, offset: 32698},
												expr: &ruleRefExpr{
													pos:  position{line: 951, col: 78, offset: 32699},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 951, col: 99, offset: 32720},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 951, col: 105, offset: 32726},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 951, col: 105, offset: 32726},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 951, col: 125, offset: 32746},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 959, col: 1, offset: 32988},
			expr: &actionExpr{
				pos: position{line: 959, col: 19, offset: 33006},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 959, col: 19, offset: 33006},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 959, col: 19, offset: 33006},
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 20, offset: 33007},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 5, offset: 33021},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 960, col: 15, offset: 33031},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 960, col: 15, offset: 33031},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 960, col: 15, offset: 33031},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 960, col: 24, offset: 33040},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 962, col: 9, offset: 33132},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 962, col: 9, offset: 33132},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 962, col: 9, offset: 33132},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 962, col: 18, offset: 33141},
														expr: &ruleRefExpr{
															pos:  position{line: 962, col: 19, offset: 33142},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 962, col: 35, offset: 33158},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 968, col: 1, offset: 33275},
			expr: &actionExpr{
				pos: position{line: 969, col: 5, offset: 33298},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 969, col: 5, offset: 33298},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 969, col: 14, offset: 33307},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 969, col: 14, offset: 33307},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 970, col: 11, offset: 33368},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 971, col: 11, offset: 33413},
								expr: &ruleRefExpr{
									pos:  position{line: 971, col: 11, offset: 33413},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 972, col: 11, offset: 33431},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 972, col: 11, offset: 33431},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 12, offset: 33432},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 973, col: 13, offset: 33450},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 973, col: 13, offset: 33450},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33477},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33502},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 33527},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 33554},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 33574},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 33667},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 33697},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 33765},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 33796},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 33817},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 33848},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 33885},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 33915},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 15, offset: 33948},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 988, col: 15, offset: 33972},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 15, offset: 34005},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 996, col: 1, offset: 34228},
			expr: &actionExpr{
				pos: position{line: 996, col: 14, offset: 34241},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 996, col: 14, offset: 34241},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 996, col: 14, offset: 34241},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 996, col: 20, offset: 34247},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 996, col: 24, offset: 34251},
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 24, offset: 34251},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 996, col: 31, offset: 34258},
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 32, offset: 34259},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1003, col: 1, offset: 34543},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 15, offset: 34557},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1003, col: 15, offset: 34557},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 41, offset: 34583},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 65, offset: 34607},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1005, col: 1, offset: 34626},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 32, offset: 34657},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1005, col: 32, offset: 34657},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 32, offset: 34657},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 36, offset: 34661},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 37, offset: 34662},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 43, offset: 34668},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 43, offset: 34668},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 47, offset: 34672},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 48, offset: 34673},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 54, offset: 34679},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 54, offset: 34679},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 58, offset: 34683},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 59, offset: 34684},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1005, col: 65, offset: 34690},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1005, col: 65, offset: 34690},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1005, col: 69, offset: 34694},
								expr: &litMatcher{
									pos:        position{line: 1005, col: 70, offset: 34695},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1007, col: 1, offset: 34700},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 34, offset: 34733},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1007, col: 34, offset: 34733},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 41, offset: 34740},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 48, offset: 34747},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 55, offset: 34754},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 62, offset: 34761},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1007, col: 68, offset: 34767},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1009, col: 1, offset: 34772},
			expr: &actionExpr{
				pos: position{line: 1009, col: 26, offset: 34797},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1009, col: 26, offset: 34797},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1009, col: 32, offset: 34803},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1009, col: 32, offset: 34803},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 15, offset: 34838},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 15, offset: 34874},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 15, offset: 34910},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 15, offset: 34950},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 15, offset: 34979},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 15, offset: 35010},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1019, col: 1, offset: 35164},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 28, offset: 35191},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 28, offset: 35191},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 15, offset: 35225},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 35261},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 35297},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1024, col: 1, offset: 35323},
			expr: &choiceExpr{
				pos: position{line: 1024, col: 22, offset: 35344},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1024, col: 22, offset: 35344},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 35375},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 15, offset: 35407},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 15, offset: 35439},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 15, offset: 35475},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 15, offset: 35511},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1031, col: 1, offset: 35535},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 33, offset: 35567},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1031, col: 33, offset: 35567},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1031, col: 39, offset: 35573},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1031, col: 39, offset: 35573},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1035, col: 1, offset: 35706},
			expr: &actionExpr{
				pos: position{line: 1035, col: 25, offset: 35730},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1035, col: 25, offset: 35730},
					expr: &litMatcher{
						pos:        position{line: 1035, col: 25, offset: 35730},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1039, col: 1, offset: 35771},
			expr: &actionExpr{
				pos: position{line: 1039, col: 25, offset: 35795},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 25, offset: 35795},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1039, col: 25, offset: 35795},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1039, col: 30, offset: 35800},
							expr: &litMatcher{
								pos:        position{line: 1039, col: 30, offset: 35800},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1047, col: 1, offset: 35897},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 13, offset: 35909},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 13, offset: 35909},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 35, offset: 35931},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1049, col: 1, offset: 35998},
			expr: &actionExpr{
				pos: position{line: 1049, col: 24, offset: 36021},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 24, offset: 36021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1049, col: 24, offset: 36021},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1049, col: 30, offset: 36027},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 31, offset: 36028},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 49, offset: 36046},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 54, offset: 36051},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 64, offset: 36061},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 93, offset: 36090},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1053, col: 1, offset: 36177},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1053, col: 32, offset: 36208},
				expr: &ruleRefExpr{
					pos:  position{line: 1053, col: 32, offset: 36208},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1055, col: 1, offset: 36239},
			expr: &actionExpr{
				pos: position{line: 1055, col: 31, offset: 36269},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 31, offset: 36269},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1055, col: 31, offset: 36269},
							expr: &litMatcher{
								pos:        position{line: 1055, col: 33, offset: 36271},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 39, offset: 36277},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1055, col: 48, offset: 36286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1055, col: 48, offset: 36286},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1056, col: 11, offset: 36301},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1057, col: 11, offset: 36350},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1057, col: 11, offset: 36350},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1057, col: 19, offset: 36358},
												expr: &ruleRefExpr{
													pos:  position{line: 1057, col: 20, offset: 36359},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1058, col: 11, offset: 36377},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 36407},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 36430},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 36451},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1062, col: 11, offset: 36472},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1063, col: 11, offset: 36496},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1064, col: 11, offset: 36520},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1065, col: 11, offset: 36546},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 11, offset: 36575},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1070, col: 1, offset: 36642},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 36686},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1071, col: 5, offset: 36686},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1072, col: 7, offset: 36783},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1072, col: 7, offset: 36783},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1072, col: 7, offset: 36783},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1072, col: 12, offset: 36788},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1076, col: 1, offset: 36951},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 24, offset: 36974},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 24, offset: 36974},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 24, offset: 36974},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1076, col: 24, offset: 36974},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1076, col: 30, offset: 36980},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 31, offset: 36981},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1076, col: 51, offset: 37001},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1076, col: 51, offset: 37001},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1076, col: 55, offset: 37005},
											expr: &litMatcher{
												pos:        position{line: 1076, col: 56, offset: 37006},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 61, offset: 37011},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 71, offset: 37021},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 100, offset: 37050},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1076, col: 104, offset: 37054},
									expr: &notExpr{
										pos: position{line: 1076, col: 106, offset: 37056},
										expr: &ruleRefExpr{
											pos:  position{line: 1076, col: 107, offset: 37057},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 37251},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 37251},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 5, offset: 37251},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 11, offset: 37257},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 12, offset: 37258},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 30, offset: 37276},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 34, offset: 37280},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1078, col: 44, offset: 37290},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1078, col: 44, offset: 37290},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1078, col: 48, offset: 37294},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 77, offset: 37323},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1082, col: 1, offset: 37529},
			expr: &seqExpr{
				pos: position{line: 1082, col: 32, offset: 37560},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1082, col: 32, offset: 37560},
						expr: &ruleRefExpr{
							pos:  position{line: 1082, col: 33, offset: 37561},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1082, col: 39, offset: 37567},
						expr: &ruleRefExpr{
							pos:  position{line: 1082, col: 39, offset: 37567},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1084, col: 1, offset: 37596},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 31, offset: 37626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1084, col: 31, offset: 37626},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1085, col: 11, offset: 37641},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1085, col: 11, offset: 37641},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1085, col: 19, offset: 37649},
								expr: &ruleRefExpr{
									pos:  position{line: 1085, col: 20, offset: 37650},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 37668},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 37698},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1088, col: 11, offset: 37721},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1088, col: 11, offset: 37721},
								expr: &ruleRefExpr{
									pos:  position{line: 1088, col: 11, offset: 37721},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1088, col: 18, offset: 37728},
								expr: &seqExpr{
									pos: position{line: 1088, col: 19, offset: 37729},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1088, col: 19, offset: 37729},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1088, col: 23, offset: 37733},
											expr: &litMatcher{
												pos:        position{line: 1088, col: 24, offset: 37734},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 37750},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 37771},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 37792},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 37816},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 37840},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 37866},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 37895},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1097, col: 1, offset: 37933},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 37977},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1098, col: 5, offset: 37977},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1099, col: 7, offset: 38074},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1099, col: 7, offset: 38074},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1099, col: 7, offset: 38074},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1099, col: 11, offset: 38078},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1103, col: 1, offset: 38241},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 5, offset: 38265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 38265},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 38265},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 5, offset: 38265},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 18, offset: 38278},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 40, offset: 38300},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 45, offset: 38305},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 55, offset: 38315},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 84, offset: 38344},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 9, offset: 38501},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1106, col: 9, offset: 38501},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 9, offset: 38501},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 22, offset: 38514},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 38536},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 49, offset: 38541},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 59, offset: 38551},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 88, offset: 38580},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 9, offset: 38780},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1109, col: 9, offset: 38780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 9, offset: 38780},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 22, offset: 38793},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 44, offset: 38815},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 48, offset: 38819},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 58, offset: 38829},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1109, col: 87, offset: 38858},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1117, col: 1, offset: 39066},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 15, offset: 39080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 15, offset: 39080},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 39, offset: 39104},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1119, col: 1, offset: 39127},
			expr: &actionExpr{
				pos: position{line: 1119, col: 26, offset: 39152},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 26, offset: 39152},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1119, col: 26, offset: 39152},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1119, col: 32, offset: 39158},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 33, offset: 39159},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 51, offset: 39177},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 56, offset: 39182},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 66, offset: 39192},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1119, col: 97, offset: 39223},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1123, col: 1, offset: 39357},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1123, col: 34, offset: 39390},
				expr: &ruleRefExpr{
					pos:  position{line: 1123, col: 34, offset: 39390},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1125, col: 1, offset: 39422},
			expr: &actionExpr{
				pos: position{line: 1125, col: 33, offset: 39454},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 33, offset: 39454},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1125, col: 33, offset: 39454},
							expr: &litMatcher{
								pos:        position{line: 1125, col: 35, offset: 39456},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 41, offset: 39462},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1125, col: 50, offset: 39471},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1125, col: 50, offset: 39471},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 39486},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1127, col: 11, offset: 39535},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1127, col: 11, offset: 39535},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1127, col: 19, offset: 39543},
												expr: &ruleRefExpr{
													pos:  position{line: 1127, col: 20, offset: 39544},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1128, col: 11, offset: 39562},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 39594},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 39617},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 39636},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 39657},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 39681},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 39705},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 39731},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 39760},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1140, col: 1, offset: 39829},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 39875},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1141, col: 5, offset: 39875},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1142, col: 7, offset: 39974},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1142, col: 7, offset: 39974},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 7, offset: 39974},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 12, offset: 39979},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1146, col: 1, offset: 40144},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 26, offset: 40169},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 26, offset: 40169},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 26, offset: 40169},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 26, offset: 40169},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1146, col: 32, offset: 40175},
										expr: &ruleRefExpr{
											pos:  position{line: 1146, col: 33, offset: 40176},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1146, col: 52, offset: 40195},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1146, col: 52, offset: 40195},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1146, col: 56, offset: 40199},
											expr: &litMatcher{
												pos:        position{line: 1146, col: 57, offset: 40200},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 62, offset: 40205},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 72, offset: 40215},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 103, offset: 40246},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 40436},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 40436},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 5, offset: 40436},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1148, col: 11, offset: 40442},
										expr: &ruleRefExpr{
											pos:  position{line: 1148, col: 12, offset: 40443},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 30, offset: 40461},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 34, offset: 40465},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1148, col: 44, offset: 40475},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1148, col: 44, offset: 40475},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1148, col: 48, offset: 40479},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 79, offset: 40510},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1152, col: 1, offset: 40720},
			expr: &seqExpr{
				pos: position{line: 1152, col: 34, offset: 40753},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1152, col: 34, offset: 40753},
						expr: &ruleRefExpr{
							pos:  position{line: 1152, col: 35, offset: 40754},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1152, col: 41, offset: 40760},
						expr: &ruleRefExpr{
							pos:  position{line: 1152, col: 41, offset: 40760},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1154, col: 1, offset: 40791},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 33, offset: 40823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1154, col: 33, offset: 40823},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1155, col: 11, offset: 40838},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1155, col: 11, offset: 40838},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1155, col: 19, offset: 40846},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 20, offset: 40847},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 40865},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 40897},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1158, col: 11, offset: 40920},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1158, col: 11, offset: 40920},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 11, offset: 40920},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1158, col: 18, offset: 40927},
								expr: &seqExpr{
									pos: position{line: 1158, col: 19, offset: 40928},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1158, col: 19, offset: 40928},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1158, col: 23, offset: 40932},
											expr: &litMatcher{
												pos:        position{line: 1158, col: 24, offset: 40933},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 40949},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 40968},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 40989},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 41013},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 41037},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 41063},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 41092},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1167, col: 1, offset: 41132},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 5, offset: 41178},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1168, col: 5, offset: 41178},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1169, col: 7, offset: 41277},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1169, col: 7, offset: 41277},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1169, col: 7, offset: 41277},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1169, col: 11, offset: 41281},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1173, col: 1, offset: 41447},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 5, offset: 41473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1174, col: 5, offset: 41473},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1174, col: 5, offset: 41473},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1174, col: 5, offset: 41473},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 18, offset: 41486},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 40, offset: 41508},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1174, col: 45, offset: 41513},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 55, offset: 41523},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 86, offset: 41554},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 9, offset: 41711},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1176, col: 9, offset: 41711},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1176, col: 9, offset: 41711},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 22, offset: 41724},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 44, offset: 41746},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 49, offset: 41751},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 59, offset: 41761},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 90, offset: 41792},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 9, offset: 41992},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1179, col: 9, offset: 41992},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 9, offset: 41992},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 22, offset: 42005},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 44, offset: 42027},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 48, offset: 42031},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 58, offset: 42041},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 89, offset: 42072},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1186, col: 1, offset: 42282},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 18, offset: 42299},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1186, col: 18, offset: 42299},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 45, offset: 42326},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1188, col: 1, offset: 42352},
			expr: &actionExpr{
				pos: position{line: 1188, col: 29, offset: 42380},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 29, offset: 42380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 29, offset: 42380},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1188, col: 35, offset: 42386},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 36, offset: 42387},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 54, offset: 42405},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 59, offset: 42410},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 69, offset: 42420},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 103, offset: 42454},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1192, col: 1, offset: 42591},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1192, col: 37, offset: 42627},
				expr: &ruleRefExpr{
					pos:  position{line: 1192, col: 37, offset: 42627},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1194, col: 1, offset: 42694},
			expr: &actionExpr{
				pos: position{line: 1194, col: 36, offset: 42729},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 36, offset: 42729},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1194, col: 36, offset: 42729},
							expr: &litMatcher{
								pos:        position{line: 1194, col: 38, offset: 42731},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 44, offset: 42737},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1194, col: 53, offset: 42746},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1194, col: 53, offset: 42746},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 11, offset: 42761},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1196, col: 11, offset: 42810},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1196, col: 11, offset: 42810},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1196, col: 19, offset: 42818},
												expr: &ruleRefExpr{
													pos:  position{line: 1196, col: 20, offset: 42819},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 11, offset: 42837},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1198, col: 11, offset: 42860},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1198, col: 11, offset: 42860},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 11, offset: 43044},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 43079},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 43098},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 43119},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 43140},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 43164},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 43190},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 43219},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1213, col: 1, offset: 43291},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 43340},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1214, col: 5, offset: 43340},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1215, col: 7, offset: 43442},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1215, col: 7, offset: 43442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 7, offset: 43442},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 12, offset: 43447},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1219, col: 1, offset: 43615},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 29, offset: 43643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1219, col: 29, offset: 43643},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1219, col: 29, offset: 43643},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 29, offset: 43643},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1219, col: 35, offset: 43649},
										expr: &ruleRefExpr{
											pos:  position{line: 1219, col: 36, offset: 43650},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1219, col: 55, offset: 43669},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1219, col: 55, offset: 43669},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1219, col: 59, offset: 43673},
											expr: &litMatcher{
												pos:        position{line: 1219, col: 60, offset: 43674},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 65, offset: 43679},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 75, offset: 43689},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 109, offset: 43723},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 43916},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 43916},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1221, col: 5, offset: 43916},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1221, col: 11, offset: 43922},
										expr: &ruleRefExpr{
											pos:  position{line: 1221, col: 12, offset: 43923},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 30, offset: 43941},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 34, offset: 43945},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1221, col: 44, offset: 43955},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1221, col: 44, offset: 43955},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1221, col: 48, offset: 43959},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 82, offset: 43993},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1225, col: 1, offset: 44207},
			expr: &seqExpr{
				pos: position{line: 1225, col: 37, offset: 44243},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1225, col: 37, offset: 44243},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 38, offset: 44244},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1225, col: 44, offset: 44250},
						expr: &ruleRefExpr{
							pos:  position{line: 1225, col: 44, offset: 44250},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1227, col: 1, offset: 44284},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 37, offset: 44320},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1227, col: 37, offset: 44320},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1228, col: 11, offset: 44335},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1228, col: 11, offset: 44335},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1228, col: 19, offset: 44343},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 20, offset: 44344},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 44362},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 44397},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1231, col: 11, offset: 44420},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1231, col: 11, offset: 44420},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 11, offset: 44420},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1231, col: 18, offset: 44427},
								expr: &seqExpr{
									pos: position{line: 1231, col: 19, offset: 44428},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1231, col: 19, offset: 44428},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1231, col: 23, offset: 44432},
											expr: &litMatcher{
												pos:        position{line: 1231, col: 24, offset: 44433},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 44561},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 44580},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 44601},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 44622},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 44646},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1237, col: 11, offset: 44672},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1237, col: 11, offset: 44672},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 44813},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 44842},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1244, col: 1, offset: 44885},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 44934},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1245, col: 5, offset: 44934},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1246, col: 7, offset: 45036},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1246, col: 7, offset: 45036},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1246, col: 7, offset: 45036},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 11, offset: 45040},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1250, col: 1, offset: 45209},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 45238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 45238},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 45238},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 5, offset: 45238},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 18, offset: 45251},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 40, offset: 45273},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 45, offset: 45278},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 55, offset: 45288},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 89, offset: 45322},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 9, offset: 45479},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1253, col: 9, offset: 45479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1253, col: 9, offset: 45479},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 22, offset: 45492},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 44, offset: 45514},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1253, col: 49, offset: 45519},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 59, offset: 45529},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 93, offset: 45563},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1256, col: 9, offset: 45763},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1256, col: 9, offset: 45763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1256, col: 9, offset: 45763},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 22, offset: 45776},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 44, offset: 45798},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 48, offset: 45802},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 58, offset: 45812},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 92, offset: 45846},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1264, col: 1, offset: 46171},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 17, offset: 46187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1264, col: 17, offset: 46187},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 38, offset: 46208},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1266, col: 1, offset: 46228},
			expr: &actionExpr{
				pos: position{line: 1266, col: 23, offset: 46250},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 23, offset: 46250},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1266, col: 23, offset: 46250},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 46, offset: 46273},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1266, col: 55, offset: 46282},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 82, offset: 46309},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1270, col: 1, offset: 46413},
			expr: &actionExpr{
				pos: position{line: 1270, col: 31, offset: 46443},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1270, col: 31, offset: 46443},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1270, col: 41, offset: 46453},
						expr: &ruleRefExpr{
							pos:  position{line: 1270, col: 41, offset: 46453},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1274, col: 1, offset: 46531},
			expr: &seqExpr{
				pos: position{line: 1274, col: 27, offset: 46557},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1274, col: 27, offset: 46557},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1274, col: 32, offset: 46562},
						expr: &charClassMatcher{
							pos:        position{line: 1274, col: 33, offset: 46563},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1276, col: 1, offset: 46574},
			expr: &litMatcher{
				pos:        position{line: 1276, col: 25, offset: 46598},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1279, col: 1, offset: 46686},
			expr: &actionExpr{
				pos: position{line: 1279, col: 30, offset: 46715},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1279, col: 30, offset: 46715},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1280, col: 9, offset: 46733},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1280, col: 9, offset: 46733},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1280, col: 9, offset: 46733},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1280, col: 19, offset: 46743},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 20, offset: 46744},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1281, col: 11, offset: 46800},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1281, col: 11, offset: 46800},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 11, offset: 46800},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1281, col: 18, offset: 46807},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 19, offset: 46808},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1282, col: 11, offset: 46839},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1282, col: 11, offset: 46839},
										expr: &litMatcher{
											pos:        position{line: 1282, col: 12, offset: 46840},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 16, offset: 46844},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 46892},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 46911},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 46932},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 46953},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 11, offset: 46977},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1288, col: 11, offset: 47003},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1288, col: 11, offset: 47003},
										expr: &litMatcher{
											pos:        position{line: 1288, col: 12, offset: 47004},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 17, offset: 47009},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 47033},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 47062},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1294, col: 1, offset: 47128},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 41, offset: 47168},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1294, col: 41, offset: 47168},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1294, col: 55, offset: 47182},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1294, col: 55, offset: 47182},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 55, offset: 47182},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1294, col: 59, offset: 47186},
									expr: &litMatcher{
										pos:        position{line: 1294, col: 60, offset: 47187},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1298, col: 1, offset: 47246},
			expr: &actionExpr{
				pos: position{line: 1298, col: 23, offset: 47268},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 23, offset: 47268},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1298, col: 23, offset: 47268},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1298, col: 46, offset: 47291},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 55, offset: 47300},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1298, col: 82, offset: 47327},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1302, col: 1, offset: 47431},
			expr: &actionExpr{
				pos: position{line: 1302, col: 31, offset: 47461},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1302, col: 31, offset: 47461},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1302, col: 41, offset: 47471},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 41, offset: 47471},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1307, col: 1, offset: 47631},
			expr: &actionExpr{
				pos: position{line: 1307, col: 30, offset: 47660},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1307, col: 30, offset: 47660},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1308, col: 9, offset: 47678},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1308, col: 9, offset: 47678},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1308, col: 9, offset: 47678},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1308, col: 19, offset: 47688},
										expr: &ruleRefExpr{
											pos:  position{line: 1308, col: 20, offset: 47689},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1309, col: 11, offset: 47745},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1309, col: 11, offset: 47745},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 11, offset: 47745},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1309, col: 18, offset: 47752},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 19, offset: 47753},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1310, col: 11, offset: 47784},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1311, col: 11, offset: 47803},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1312, col: 11, offset: 47824},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 11, offset: 47845},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 47869},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1315, col: 11, offset: 47895},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1315, col: 11, offset: 47895},
										expr: &litMatcher{
											pos:        position{line: 1315, col: 12, offset: 47896},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 18, offset: 47902},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1316, col: 10, offset: 47925},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 11, offset: 47954},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1321, col: 1, offset: 48028},
			expr: &seqExpr{
				pos: position{line: 1321, col: 27, offset: 48054},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1321, col: 27, offset: 48054},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1321, col: 33, offset: 48060},
						expr: &charClassMatcher{
							pos:        position{line: 1321, col: 34, offset: 48061},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1323, col: 1, offset: 48072},
			expr: &litMatcher{
				pos:        position{line: 1323, col: 25, offset: 48096},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1325, col: 1, offset: 48103},
			expr: &actionExpr{
				pos: position{line: 1325, col: 41, offset: 48143},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1325, col: 42, offset: 48144},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1325, col: 42, offset: 48144},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1325, col: 56, offset: 48158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1325, col: 56, offset: 48158},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1325, col: 60, offset: 48162},
									expr: &litMatcher{
										pos:        position{line: 1325, col: 61, offset: 48163},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1334, col: 1, offset: 48283},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 15, offset: 48297},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1334, col: 15, offset: 48297},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 39, offset: 48321},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1336, col: 1, offset: 48344},
			expr: &actionExpr{
				pos: position{line: 1336, col: 26, offset: 48369},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 26, offset: 48369},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 26, offset: 48369},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 32, offset: 48375},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 33, offset: 48376},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 51, offset: 48394},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 56, offset: 48399},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 66, offset: 48409},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 97, offset: 48440},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1340, col: 1, offset: 48574},
			expr: &seqExpr{
				pos: position{line: 1340, col: 34, offset: 48607},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 34, offset: 48607},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1340, col: 63, offset: 48636},
						expr: &seqExpr{
							pos: position{line: 1340, col: 64, offset: 48637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1340, col: 64, offset: 48637},
									expr: &litMatcher{
										pos:        position{line: 1340, col: 66, offset: 48639},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1340, col: 73, offset: 48646},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1340, col: 73, offset: 48646},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1340, col: 81, offset: 48654},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1342, col: 1, offset: 48721},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 33, offset: 48753},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 33, offset: 48753},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 48768},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1344, col: 11, offset: 48800},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1344, col: 11, offset: 48800},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1344, col: 19, offset: 48808},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 20, offset: 48809},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 48827},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 48850},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 48869},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 48890},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 48914},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 48938},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 48964},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 48993},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1354, col: 1, offset: 49033},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 49079},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1355, col: 5, offset: 49079},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1356, col: 7, offset: 49178},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1356, col: 7, offset: 49178},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1356, col: 7, offset: 49178},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 12, offset: 49183},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1360, col: 1, offset: 49348},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 26, offset: 49373},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1360, col: 26, offset: 49373},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1360, col: 26, offset: 49373},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 26, offset: 49373},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1360, col: 32, offset: 49379},
										expr: &ruleRefExpr{
											pos:  position{line: 1360, col: 33, offset: 49380},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1360, col: 52, offset: 49399},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1360, col: 52, offset: 49399},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1360, col: 56, offset: 49403},
											expr: &litMatcher{
												pos:        position{line: 1360, col: 57, offset: 49404},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 62, offset: 49409},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 72, offset: 49419},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 103, offset: 49450},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 49640},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1362, col: 5, offset: 49640},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1362, col: 5, offset: 49640},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1362, col: 11, offset: 49646},
										expr: &ruleRefExpr{
											pos:  position{line: 1362, col: 12, offset: 49647},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 30, offset: 49665},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1362, col: 34, offset: 49669},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1362, col: 44, offset: 49679},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1362, col: 44, offset: 49679},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1362, col: 48, offset: 49683},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 79, offset: 49714},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1366, col: 1, offset: 49923},
			expr: &seqExpr{
				pos: position{line: 1366, col: 34, offset: 49956},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1366, col: 34, offset: 49956},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 35, offset: 49957},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1366, col: 41, offset: 49963},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 41, offset: 49963},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1368, col: 1, offset: 49994},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 33, offset: 50026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 33, offset: 50026},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 50041},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1370, col: 11, offset: 50073},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1370, col: 11, offset: 50073},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1370, col: 19, offset: 50081},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 20, offset: 50082},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 50100},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1372, col: 11, offset: 50123},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1372, col: 11, offset: 50123},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 11, offset: 50123},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1372, col: 18, offset: 50130},
								expr: &seqExpr{
									pos: position{line: 1372, col: 19, offset: 50131},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1372, col: 19, offset: 50131},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1372, col: 23, offset: 50135},
											expr: &litMatcher{
												pos:        position{line: 1372, col: 24, offset: 50136},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 50152},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 50171},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 50192},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 50216},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50240},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 50266},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 50295},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1381, col: 1, offset: 50335},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 50381},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1382, col: 5, offset: 50381},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1383, col: 7, offset: 50478},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1383, col: 7, offset: 50478},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1383, col: 7, offset: 50478},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1383, col: 11, offset: 50482},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1387, col: 1, offset: 50645},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 50670},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 50670},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1388, col: 5, offset: 50670},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1388, col: 5, offset: 50670},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 18, offset: 50683},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 40, offset: 50705},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1388, col: 45, offset: 50710},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 55, offset: 50720},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 86, offset: 50751},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 9, offset: 50908},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1390, col: 9, offset: 50908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1390, col: 9, offset: 50908},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 22, offset: 50921},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 44, offset: 50943},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 49, offset: 50948},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 59, offset: 50958},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 90, offset: 50989},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1393, col: 9, offset: 51189},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1393, col: 9, offset: 51189},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1393, col: 9, offset: 51189},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 22, offset: 51202},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 44, offset: 51224},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1393, col: 48, offset: 51228},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 58, offset: 51238},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1393, col: 89, offset: 51269},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1398, col: 1, offset: 51419},
			expr: &actionExpr{
				pos: position{line: 1398, col: 18, offset: 51436},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 18, offset: 51436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 18, offset: 51436},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 24, offset: 51442},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 25, offset: 51443},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 43, offset: 51461},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 47, offset: 51465},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 56, offset: 51474},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 78, offset: 51496},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1402, col: 1, offset: 51592},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 25, offset: 51616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1402, col: 25, offset: 51616},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 38, offset: 51629},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1404, col: 1, offset: 51648},
			expr: &actionExpr{
				pos: position{line: 1404, col: 21, offset: 51668},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1404, col: 21, offset: 51668},
					expr: &charClassMatcher{
						pos:        position{line: 1404, col: 21, offset: 51668},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1408, col: 1, offset: 51745},
			expr: &actionExpr{
				pos: position{line: 1408, col: 25, offset: 51769},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 25, offset: 51769},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1408, col: 25, offset: 51769},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 38, offset: 51782},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 60, offset: 51804},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 64, offset: 51808},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 73, offset: 51817},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 95, offset: 51839},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1412, col: 1, offset: 51968},
			expr: &actionExpr{
				pos: position{line: 1412, col: 20, offset: 51987},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 20, offset: 51987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1412, col: 20, offset: 51987},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1412, col: 26, offset: 51993},
								expr: &ruleRefExpr{
									pos:  position{line: 1412, col: 27, offset: 51994},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 45, offset: 52012},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 49, offset: 52016},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 58, offset: 52025},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1412, col: 82, offset: 52049},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1416, col: 1, offset: 52147},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 27, offset: 52173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1416, col: 27, offset: 52173},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 40, offset: 52186},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1418, col: 1, offset: 52207},
			expr: &actionExpr{
				pos: position{line: 1418, col: 23, offset: 52229},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1418, col: 23, offset: 52229},
					expr: &charClassMatcher{
						pos:        position{line: 1418, col: 23, offset: 52229},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1422, col: 1, offset: 52306},
			expr: &actionExpr{
				pos: position{line: 1422, col: 27, offset: 52332},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1422, col: 27, offset: 52332},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1422, col: 27, offset: 52332},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1422, col: 40, offset: 52345},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1422, col: 62, offset: 52367},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1422, col: 66, offset: 52371},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1422, col: 75, offset: 52380},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1422, col: 99, offset: 52404},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1429, col: 1, offset: 52646},
			expr: &choiceExpr{
				pos: position{line: 1429, col: 22, offset: 52667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1429, col: 22, offset: 52667},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 46, offset: 52691},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 70, offset: 52715},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1431, col: 1, offset: 52733},
			expr: &litMatcher{
				pos:        position{line: 1431, col: 32, offset: 52764},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1433, col: 1, offset: 52769},
			expr: &actionExpr{
				pos: position{line: 1433, col: 26, offset: 52794},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 26, offset: 52794},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1433, col: 26, offset: 52794},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 54, offset: 52822},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 63, offset: 52831},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 93, offset: 52861},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1433, col: 121, offset: 52889},
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 122, offset: 52890},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1437, col: 1, offset: 52995},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 33, offset: 53027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1437, col: 34, offset: 53028},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1437, col: 34, offset: 53028},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1437, col: 35, offset: 53029},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1437, col: 35, offset: 53029},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 36, offset: 53030},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1437, col: 64, offset: 53058},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 65, offset: 53059},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1437, col: 71, offset: 53065},
											expr: &ruleRefExpr{
												pos:  position{line: 1437, col: 72, offset: 53066},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1437, col: 80, offset: 53074,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1437, col: 83, offset: 53077},
									expr: &seqExpr{
										pos: position{line: 1437, col: 84, offset: 53078},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1437, col: 84, offset: 53078},
												expr: &seqExpr{
													pos: position{line: 1437, col: 86, offset: 53080},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1437, col: 86, offset: 53080},
															expr: &ruleRefExpr{
																pos:  position{line: 1437, col: 86, offset: 53080},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1437, col: 93, offset: 53087},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1437, col: 122, offset: 53116},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 123, offset: 53117},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1437, col: 151, offset: 53145},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 152, offset: 53146},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1437, col: 160, offset: 53154,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1439, col: 7, offset: 53296},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1439, col: 8, offset: 53297},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1439, col: 8, offset: 53297},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 9, offset: 53298},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1439, col: 15, offset: 53304},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 16, offset: 53305},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1439, col: 24, offset: 53313},
									expr: &ruleRefExpr{
										pos:  position{line: 1439, col: 25, offset: 53314},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1439, col: 53, offset: 53342,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1443, col: 1, offset: 53424},
			expr: &litMatcher{
				pos:        position{line: 1443, col: 32, offset: 53455},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1445, col: 1, offset: 53462},
			expr: &actionExpr{
				pos: position{line: 1445, col: 26, offset: 53487},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1445, col: 26, offset: 53487},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 26, offset: 53487},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1445, col: 54, offset: 53515},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 63, offset: 53524},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1445, col: 93, offset: 53554},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1445, col: 121, offset: 53582},
							expr: &ruleRefExpr{
								pos:  position{line: 1445, col: 122, offset: 53583},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1449, col: 1, offset: 53688},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 33, offset: 53720},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1449, col: 34, offset: 53721},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1449, col: 34, offset: 53721},
							expr: &seqExpr{
								pos: position{line: 1449, col: 35, offset: 53722},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1449, col: 35, offset: 53722},
										expr: &ruleRefExpr{
											pos:  position{line: 1449, col: 36, offset: 53723},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1449, col: 64, offset: 53751,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1451, col: 7, offset: 53916},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1451, col: 7, offset: 53916},
							expr: &seqExpr{
								pos: position{line: 1451, col: 8, offset: 53917},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1451, col: 8, offset: 53917},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 9, offset: 53918},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 15, offset: 53924},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 16, offset: 53925},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1451, col: 24, offset: 53933},
										expr: &ruleRefExpr{
											pos:  position{line: 1451, col: 25, offset: 53934},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1451, col: 53, offset: 53962,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1455, col: 1, offset: 54045},
			expr: &choiceExpr{
				pos: position{line: 1455, col: 21, offset: 54065},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1455, col: 21, offset: 54065},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1455, col: 21, offset: 54065},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1455, col: 21, offset: 54065},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1455, col: 30, offset: 54074},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1455, col: 38, offset: 54082},
										expr: &ruleRefExpr{
											pos:  position{line: 1455, col: 39, offset: 54083},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1455, col: 67, offset: 54111},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1457, col: 5, offset: 54207},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1457, col: 5, offset: 54207},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1457, col: 5, offset: 54207},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1457, col: 15, offset: 54217},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1457, col: 23, offset: 54225},
										expr: &choiceExpr{
											pos: position{line: 1457, col: 24, offset: 54226},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1457, col: 24, offset: 54226},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1457, col: 37, offset: 54239},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1457, col: 65, offset: 54267},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1461, col: 1, offset: 54363},
			expr: &actionExpr{
				pos: position{line: 1461, col: 30, offset: 54392},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1461, col: 30, offset: 54392},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1468, col: 1, offset: 54565},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 19, offset: 54583},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1468, col: 19, offset: 54583},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1468, col: 44, offset: 54608},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1470, col: 1, offset: 54633},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 27, offset: 54659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1470, col: 27, offset: 54659},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1470, col: 27, offset: 54659},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1470, col: 27, offset: 54659},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 32, offset: 54664},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 36, offset: 54668},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1470, col: 40, offset: 54672},
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 40, offset: 54672},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 47, offset: 54679},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 51, offset: 54683},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1470, col: 58, offset: 54690},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 79, offset: 54711},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1472, col: 5, offset: 54794},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1472, col: 5, offset: 54794},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1472, col: 5, offset: 54794},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1472, col: 10, offset: 54799},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1472, col: 14, offset: 54803},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1472, col: 18, offset: 54807},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1476, col: 1, offset: 54879},
			expr: &actionExpr{
				pos: position{line: 1476, col: 27, offset: 54905},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1476, col: 27, offset: 54905},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1476, col: 27, offset: 54905},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 35, offset: 54913},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 40, offset: 54918},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 54, offset: 54932},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1476, col: 72, offset: 54950},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1480, col: 1, offset: 55073},
			expr: &ruleRefExpr{
				pos:  position{line: 1480, col: 24, offset: 55096},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1485, col: 1, offset: 55218},
			expr: &choiceExpr{
				pos: position{line: 1485, col: 9, offset: 55226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1485, col: 9, offset: 55226},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 24, offset: 55241},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1488, col: 1, offset: 55322},
			expr: &actionExpr{
				pos: position{line: 1488, col: 17, offset: 55338},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 17, offset: 55338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1488, col: 17, offset: 55338},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 25, offset: 55346},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 30, offset: 55351},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1488, col: 40, offset: 55361},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1488, col: 58, offset: 55379},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1492, col: 1, offset: 55490},
			expr: &actionExpr{
				pos: position{line: 1492, col: 17, offset: 55506},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1492, col: 17, offset: 55506},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1492, col: 17, offset: 55506},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1492, col: 22, offset: 55511},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1492, col: 42, offset: 55531},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1492, col: 59, offset: 55548},
								expr: &ruleRefExpr{
									pos:  position{line: 1492, col: 60, offset: 55549},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1496, col: 1, offset: 55642},
			expr: &actionExpr{
				pos: position{line: 1496, col: 19, offset: 55660},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 19, offset: 55660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1496, col: 19, offset: 55660},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 23, offset: 55664},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1496, col: 33, offset: 55674},
								expr: &ruleRefExpr{
									pos:  position{line: 1496, col: 34, offset: 55675},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1497, col: 5, offset: 55707},
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 5, offset: 55707},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 12, offset: 55714},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1497, col: 23, offset: 55725},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 24, offset: 55726},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1497, col: 43, offset: 55745},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1501, col: 1, offset: 55862},
			expr: &actionExpr{
				pos: position{line: 1501, col: 30, offset: 55891},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1501, col: 30, offset: 55891},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1503, col: 5, offset: 55942},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1503, col: 6, offset: 55943},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1503, col: 6, offset: 55943},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1503, col: 6, offset: 55943},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1503, col: 11, offset: 55948},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1503, col: 20, offset: 55957},
												expr: &choiceExpr{
													pos: position{line: 1503, col: 21, offset: 55958},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1503, col: 21, offset: 55958},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1503, col: 36, offset: 55973},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1503, col: 49, offset: 55986},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1503, col: 70, offset: 56007},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1503, col: 92, offset: 56029},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1503, col: 97, offset: 56034},
											expr: &notExpr{
												pos: position{line: 1503, col: 99, offset: 56036},
												expr: &litMatcher{
													pos:        position{line: 1503, col: 100, offset: 56037},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1503, col: 105, offset: 56042},
											expr: &litMatcher{
												pos:        position{line: 1503, col: 105, offset: 56042},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1507, col: 6, offset: 56169},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1507, col: 6, offset: 56169},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1507, col: 6, offset: 56169},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1507, col: 15, offset: 56178},
												expr: &choiceExpr{
													pos: position{line: 1507, col: 16, offset: 56179},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1507, col: 16, offset: 56179},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1507, col: 31, offset: 56194},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1507, col: 44, offset: 56207},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1507, col: 65, offset: 56228},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1507, col: 89, offset: 56252},
											expr: &notExpr{
												pos: position{line: 1507, col: 91, offset: 56254},
												expr: &litMatcher{
													pos:        position{line: 1507, col: 92, offset: 56255},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1507, col: 97, offset: 56260},
											expr: &litMatcher{
												pos:        position{line: 1507, col: 97, offset: 56260},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1513, col: 1, offset: 56374},
			expr: &actionExpr{
				pos: position{line: 1513, col: 18, offset: 56391},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1513, col: 18, offset: 56391},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1517, col: 1, offset: 56477},
			expr: &actionExpr{
				pos: position{line: 1517, col: 24, offset: 56500},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1517, col: 24, offset: 56500},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1521, col: 1, offset: 56593},
			expr: &actionExpr{
				pos: position{line: 1521, col: 26, offset: 56618},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1521, col: 26, offset: 56618},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1525, col: 1, offset: 56704},
			expr: &choiceExpr{
				pos: position{line: 1525, col: 17, offset: 56720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1525, col: 17, offset: 56720},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1525, col: 40, offset: 56743},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1528, col: 1, offset: 56871},
			expr: &actionExpr{
				pos: position{line: 1528, col: 25, offset: 56895},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 25, offset: 56895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1528, col: 25, offset: 56895},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 33, offset: 56903},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1528, col: 38, offset: 56908},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1528, col: 38, offset: 56908},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 57, offset: 56927},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 79, offset: 56949},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 97, offset: 56967},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1532, col: 1, offset: 57078},
			expr: &actionExpr{
				pos: position{line: 1532, col: 25, offset: 57102},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 25, offset: 57102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1532, col: 25, offset: 57102},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 30, offset: 57107},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 48, offset: 57125},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 65, offset: 57142},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 66, offset: 57143},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1539, col: 1, offset: 57338},
			expr: &actionExpr{
				pos: position{line: 1539, col: 15, offset: 57352},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1539, col: 15, offset: 57352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1539, col: 15, offset: 57352},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1539, col: 26, offset: 57363},
								expr: &ruleRefExpr{
									pos:  position{line: 1539, col: 27, offset: 57364},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1539, col: 45, offset: 57382},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 55, offset: 57392},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 61, offset: 57398},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1539, col: 71, offset: 57408},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 84, offset: 57421},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1539, col: 102, offset: 57439},
							expr: &ruleRefExpr{
								pos:  position{line: 1539, col: 102, offset: 57439},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1539, col: 109, offset: 57446},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1544, col: 1, offset: 57656},
			expr: &actionExpr{
				pos: position{line: 1544, col: 16, offset: 57671},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 16, offset: 57671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 16, offset: 57671},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1544, col: 25, offset: 57680},
							expr: &litMatcher{
								pos:        position{line: 1544, col: 26, offset: 57681},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 30, offset: 57685},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 36, offset: 57691},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 46, offset: 57701},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 59, offset: 57714},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1548, col: 1, offset: 57852},
			expr: &actionExpr{
				pos: position{line: 1548, col: 21, offset: 57872},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 21, offset: 57872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1548, col: 21, offset: 57872},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 25, offset: 57876},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 29, offset: 57880},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 44, offset: 57895},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 46, offset: 57897},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 57, offset: 57908},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 59, offset: 57910},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 71, offset: 57922},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 74, offset: 57925},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1548, col: 85, offset: 57936},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1552, col: 1, offset: 57998},
			expr: &choiceExpr{
				pos: position{line: 1552, col: 20, offset: 58017},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1552, col: 20, offset: 58017},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1552, col: 36, offset: 58033},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1552, col: 51, offset: 58048},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1554, col: 1, offset: 58059},
			expr: &actionExpr{
				pos: position{line: 1554, col: 18, offset: 58076},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 18, offset: 58076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1554, col: 18, offset: 58076},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 22, offset: 58080},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1554, col: 29, offset: 58087},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1554, col: 29, offset: 58087},
										expr: &ruleRefExpr{
											pos:  position{line: 1554, col: 29, offset: 58087},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1554, col: 43, offset: 58101},
										expr: &ruleRefExpr{
											pos:  position{line: 1554, col: 43, offset: 58101},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1554, col: 58, offset: 58116},
										expr: &ruleRefExpr{
											pos:  position{line: 1554, col: 58, offset: 58116},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1554, col: 74, offset: 58132},
										expr: &ruleRefExpr{
											pos:  position{line: 1554, col: 74, offset: 58132},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1554, col: 91, offset: 58149},
										expr: &ruleRefExpr{
											pos:  position{line: 1554, col: 91, offset: 58149},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1554, col: 103, offset: 58161},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1554, col: 107, offset: 58165},
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 107, offset: 58165},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1554, col: 114, offset: 58172},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1558, col: 1, offset: 58226},
			expr: &actionExpr{
				pos: position{line: 1558, col: 19, offset: 58244},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1558, col: 19, offset: 58244},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1558, col: 25, offset: 58250},
						expr: &ruleRefExpr{
							pos:  position{line: 1558, col: 25, offset: 58250},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1562, col: 1, offset: 58329},
			expr: &actionExpr{
				pos: position{line: 1562, col: 15, offset: 58343},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 15, offset: 58343},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1562, col: 15, offset: 58343},
							expr: &litMatcher{
								pos:        position{line: 1562, col: 15, offset: 58343},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 20, offset: 58348},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1562, col: 26, offset: 58354},
								expr: &ruleRefExpr{
									pos:  position{line: 1562, col: 26, offset: 58354},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1566, col: 1, offset: 58430},
			expr: &actionExpr{
				pos: position{line: 1566, col: 16, offset: 58445},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 16, offset: 58445},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1566, col: 16, offset: 58445},
							expr: &litMatcher{
								pos:        position{line: 1566, col: 16, offset: 58445},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1566, col: 21, offset: 58450},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1566, col: 27, offset: 58456},
								expr: &ruleRefExpr{
									pos:  position{line: 1566, col: 27, offset: 58456},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1570, col: 1, offset: 58538},
			expr: &actionExpr{
				pos: position{line: 1570, col: 17, offset: 58554},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1570, col: 17, offset: 58554},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1570, col: 17, offset: 58554},
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 17, offset: 58554},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 24, offset: 58561},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 30, offset: 58567},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1570, col: 46, offset: 58583},
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 46, offset: 58583},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1574, col: 1, offset: 58659},
			expr: &actionExpr{
				pos: position{line: 1574, col: 19, offset: 58677},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 19, offset: 58677},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1574, col: 19, offset: 58677},
							expr: &ruleRefExpr{
								pos:  position{line: 1574, col: 19, offset: 58677},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1574, col: 26, offset: 58684},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1574, col: 30, offset: 58688},
							expr: &ruleRefExpr{
								pos:  position{line: 1574, col: 30, offset: 58688},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1574, col: 37, offset: 58695},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1574, col: 43, offset: 58701},
								expr: &ruleRefExpr{
									pos:  position{line: 1574, col: 43, offset: 58701},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1581, col: 1, offset: 58836},
			expr: &actionExpr{
				pos: position{line: 1581, col: 20, offset: 58855},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 20, offset: 58855},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1581, col: 20, offset: 58855},
							expr: &ruleRefExpr{
								pos:  position{line: 1581, col: 20, offset: 58855},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1581, col: 27, offset: 58862},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1581, col: 31, offset: 58866},
							expr: &ruleRefExpr{
								pos:  position{line: 1581, col: 31, offset: 58866},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1581, col: 38, offset: 58873},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1581, col: 44, offset: 58879},
								expr: &ruleRefExpr{
									pos:  position{line: 1581, col: 44, offset: 58879},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1592, col: 1, offset: 59213},
			expr: &actionExpr{
				pos: position{line: 1592, col: 15, offset: 59227},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 15, offset: 59227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1592, col: 15, offset: 59227},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 23, offset: 59235},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1592, col: 29, offset: 59241},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1592, col: 29, offset: 59241},
									expr: &charClassMatcher{
										pos:        position{line: 1592, col: 29, offset: 59241},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 73, offset: 59285},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1592, col: 80, offset: 59292},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1596, col: 1, offset: 59374},
			expr: &actionExpr{
				pos: position{line: 1596, col: 14, offset: 59387},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 14, offset: 59387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1596, col: 14, offset: 59387},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 18, offset: 59391},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 23, offset: 59396},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 32, offset: 59405},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 35, offset: 59408},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1596, col: 46, offset: 59419},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1600, col: 1, offset: 59476},
			expr: &actionExpr{
				pos: position{line: 1600, col: 13, offset: 59488},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1600, col: 13, offset: 59488},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1600, col: 19, offset: 59494},
						expr: &ruleRefExpr{
							pos:  position{line: 1600, col: 19, offset: 59494},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1607, col: 1, offset: 59770},
			expr: &choiceExpr{
				pos: position{line: 1607, col: 19, offset: 59788},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1607, col: 19, offset: 59788},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1607, col: 19, offset: 59788},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1607, col: 19, offset: 59788},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1607, col: 32, offset: 59801},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1607, col: 41, offset: 59810},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1607, col: 58, offset: 59827},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1609, col: 5, offset: 59895},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1609, col: 5, offset: 59895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1609, col: 5, offset: 59895},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1609, col: 17, offset: 59907},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1609, col: 22, offset: 59912},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1609, col: 35, offset: 59925},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1609, col: 39, offset: 59929},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1609, col: 47, offset: 59937},
										expr: &ruleRefExpr{
											pos:  position{line: 1609, col: 48, offset: 59938},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1609, col: 66, offset: 59956},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1613, col: 1, offset: 60017},
			expr: &ruleRefExpr{
				pos:  position{line: 1613, col: 16, offset: 60032},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1615, col: 1, offset: 60043},
			expr: &actionExpr{
				pos: position{line: 1615, col: 20, offset: 60062},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1615, col: 20, offset: 60062},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1615, col: 29, offset: 60071},
						expr: &seqExpr{
							pos: position{line: 1615, col: 30, offset: 60072},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1615, col: 30, offset: 60072},
									expr: &litMatcher{
										pos:        position{line: 1615, col: 31, offset: 60073},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1615, col: 35, offset: 60077},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1623, col: 1, offset: 60393},
			expr: &actionExpr{
				pos: position{line: 1623, col: 12, offset: 60404},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1623, col: 12, offset: 60404},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1623, col: 12, offset: 60404},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1623, col: 16, offset: 60408},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1623, col: 21, offset: 60413},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1623, col: 21, offset: 60413},
									expr: &charClassMatcher{
										pos:        position{line: 1623, col: 21, offset: 60413},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1623, col: 69, offset: 60461},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1623, col: 73, offset: 60465},
							expr: &ruleRefExpr{
								pos:  position{line: 1623, col: 73, offset: 60465},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1623, col: 80, offset: 60472},
							expr: &choiceExpr{
								pos: position{line: 1623, col: 82, offset: 60474},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1623, col: 82, offset: 60474},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1623, col: 88, offset: 60480},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1627, col: 1, offset: 60533},
			expr: &actionExpr{
				pos: position{line: 1627, col: 20, offset: 60552},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 20, offset: 60552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1627, col: 20, offset: 60552},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 25, offset: 60557},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 48, offset: 60580},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1627, col: 61, offset: 60593},
								expr: &ruleRefExpr{
									pos:  position{line: 1627, col: 61, offset: 60593},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1631, col: 1, offset: 60690},
			expr: &actionExpr{
				pos: position{line: 1631, col: 26, offset: 60715},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 26, offset: 60715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1631, col: 26, offset: 60715},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 30, offset: 60719},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1631, col: 35, offset: 60724},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1631, col: 35, offset: 60724},
									expr: &charClassMatcher{
										pos:        position{line: 1631, col: 35, offset: 60724},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1631, col: 83, offset: 60772},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1631, col: 87, offset: 60776},
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 87, offset: 60776},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1640, col: 1, offset: 61023},
			expr: &actionExpr{
				pos: position{line: 1640, col: 18, offset: 61040},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 18, offset: 61040},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1640, col: 19, offset: 61041},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1640, col: 19, offset: 61041},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1640, col: 27, offset: 61049},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1640, col: 37, offset: 61059},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1640, col: 45, offset: 61067},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1640, col: 55, offset: 61077},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1640, col: 63, offset: 61085},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1640, col: 72, offset: 61094},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1650, col: 1, offset: 61344},
			expr: &actionExpr{
				pos: position{line: 1650, col: 19, offset: 61362},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1650, col: 19, offset: 61362},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1650, col: 19, offset: 61362},
							expr: &ruleRefExpr{
								pos:  position{line: 1650, col: 20, offset: 61363},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 5, offset: 61451},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1651, col: 12, offset: 61458},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1651, col: 12, offset: 61458},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1652, col: 11, offset: 61481},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1653, col: 11, offset: 61505},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1654, col: 11, offset: 61529},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1655, col: 11, offset: 61550},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1656, col: 11, offset: 61571},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1657, col: 11, offset: 61594},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1658, col: 11, offset: 61621},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1662, col: 1, offset: 61662},
			expr: &choiceExpr{
				pos: position{line: 1662, col: 19, offset: 61680},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1662, col: 19, offset: 61680},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1662, col: 19, offset: 61680},
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 21, offset: 61682},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1662, col: 31, offset: 61692},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1663, col: 19, offset: 61763},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1664, col: 19, offset: 61803},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1665, col: 19, offset: 61844},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1666, col: 19, offset: 61885},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1667, col: 19, offset: 61926},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1668, col: 19, offset: 61964},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 19, offset: 62004},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1674, col: 1, offset: 62227},
			expr: &actionExpr{
				pos: position{line: 1674, col: 17, offset: 62243},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 17, offset: 62243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1674, col: 17, offset: 62243},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1674, col: 28, offset: 62254},
								expr: &ruleRefExpr{
									pos:  position{line: 1674, col: 29, offset: 62255},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1674, col: 42, offset: 62268},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 69, offset: 62295},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 77, offset: 62303},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1674, col: 101, offset: 62327},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1678, col: 1, offset: 62426},
			expr: &seqExpr{
				pos: position{line: 1678, col: 26, offset: 62451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1678, col: 26, offset: 62451},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1678, col: 33, offset: 62458},
						expr: &ruleRefExpr{
							pos:  position{line: 1678, col: 33, offset: 62458},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1678, col: 40, offset: 62465},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1680, col: 1, offset: 62470},
			expr: &seqExpr{
				pos: position{line: 1680, col: 31, offset: 62500},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1680, col: 31, offset: 62500},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1680, col: 38, offset: 62507},
						expr: &ruleRefExpr{
							pos:  position{line: 1680, col: 38, offset: 62507},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1680, col: 45, offset: 62514},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1682, col: 1, offset: 62519},
			expr: &choiceExpr{
				pos: position{line: 1682, col: 29, offset: 62547},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1682, col: 30, offset: 62548},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1682, col: 30, offset: 62548},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1682, col: 37, offset: 62555},
								expr: &ruleRefExpr{
									pos:  position{line: 1682, col: 37, offset: 62555},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1682, col: 44, offset: 62562},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1682, col: 51, offset: 62569},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1684, col: 1, offset: 62574},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1684, col: 27, offset: 62600},
				expr: &actionExpr{
					pos: position{line: 1685, col: 8, offset: 62609},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1685, col: 8, offset: 62609},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1685, col: 8, offset: 62609},
								expr: &ruleRefExpr{
									pos:  position{line: 1685, col: 9, offset: 62610},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1686, col: 8, offset: 62643},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1686, col: 17, offset: 62652},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1686, col: 17, offset: 62652},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 62677},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 62702},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 62730},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 62761},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 62794},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 62825},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 62864},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1694, col: 15, offset: 62891},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1695, col: 15, offset: 62919},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 62944},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 62969},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 62996},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 63028},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1700, col: 15, offset: 63059},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1701, col: 15, offset: 63079},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1702, col: 15, offset: 63106},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1703, col: 15, offset: 63134},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1704, col: 15, offset: 63161},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1711, col: 1, offset: 63417},
			expr: &actionExpr{
				pos: position{line: 1711, col: 15, offset: 63431},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 15, offset: 63431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1711, col: 15, offset: 63431},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1711, col: 26, offset: 63442},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 27, offset: 63443},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1712, col: 5, offset: 63461},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1723, col: 5, offset: 63809},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 30, offset: 63834},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1723, col: 39, offset: 63843},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1723, col: 61, offset: 63865},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1727, col: 1, offset: 63969},
			expr: &seqExpr{
				pos: position{line: 1727, col: 24, offset: 63992},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1727, col: 24, offset: 63992},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1727, col: 31, offset: 63999},
						expr: &ruleRefExpr{
							pos:  position{line: 1727, col: 31, offset: 63999},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1727, col: 38, offset: 64006},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1729, col: 1, offset: 64036},
			expr: &seqExpr{
				pos: position{line: 1729, col: 29, offset: 64064},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1729, col: 29, offset: 64064},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1729, col: 36, offset: 64071},
						expr: &ruleRefExpr{
							pos:  position{line: 1729, col: 36, offset: 64071},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1729, col: 43, offset: 64078},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1731, col: 1, offset: 64108},
			expr: &choiceExpr{
				pos: position{line: 1731, col: 27, offset: 64134},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1731, col: 28, offset: 64135},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1731, col: 28, offset: 64135},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1731, col: 35, offset: 64142},
								expr: &ruleRefExpr{
									pos:  position{line: 1731, col: 35, offset: 64142},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1731, col: 42, offset: 64149},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1731, col: 49, offset: 64156},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1733, col: 1, offset: 64186},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1733, col: 25, offset: 64210},
				expr: &actionExpr{
					pos: position{line: 1734, col: 8, offset: 64219},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1734, col: 8, offset: 64219},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1734, col: 8, offset: 64219},
								expr: &ruleRefExpr{
									pos:  position{line: 1734, col: 9, offset: 64220},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1735, col: 8, offset: 64251},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1735, col: 17, offset: 64260},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1735, col: 17, offset: 64260},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1736, col: 15, offset: 64285},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1737, col: 15, offset: 64310},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1738, col: 15, offset: 64338},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1739, col: 15, offset: 64369},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1740, col: 15, offset: 64402},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1741, col: 15, offset: 64433},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1742, col: 15, offset: 64472},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1743, col: 15, offset: 64499},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1744, col: 15, offset: 64527},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1745, col: 15, offset: 64552},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1746, col: 15, offset: 64579},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1747, col: 15, offset: 64606},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1748, col: 15, offset: 64638},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1749, col: 15, offset: 64669},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1750, col: 15, offset: 64689},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1751, col: 15, offset: 64716},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1752, col: 15, offset: 64744},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1753, col: 15, offset: 64771},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1760, col: 1, offset: 65029},
			expr: &actionExpr{
				pos: position{line: 1760, col: 17, offset: 65045},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 17, offset: 65045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1760, col: 17, offset: 65045},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1760, col: 28, offset: 65056},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 29, offset: 65057},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 42, offset: 65070},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 69, offset: 65097},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 78, offset: 65106},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1760, col: 102, offset: 65130},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1764, col: 1, offset: 65230},
			expr: &seqExpr{
				pos: position{line: 1764, col: 26, offset: 65255},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1764, col: 26, offset: 65255},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1764, col: 33, offset: 65262},
						expr: &ruleRefExpr{
							pos:  position{line: 1764, col: 33, offset: 65262},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 40, offset: 65269},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1766, col: 1, offset: 65274},
			expr: &seqExpr{
				pos: position{line: 1766, col: 31, offset: 65304},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1766, col: 31, offset: 65304},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1766, col: 38, offset: 65311},
						expr: &ruleRefExpr{
							pos:  position{line: 1766, col: 38, offset: 65311},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1766, col: 45, offset: 65318},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1768, col: 1, offset: 65323},
			expr: &choiceExpr{
				pos: position{line: 1768, col: 29, offset: 65351},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1768, col: 30, offset: 65352},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1768, col: 30, offset: 65352},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1768, col: 37, offset: 65359},
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 37, offset: 65359},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1768, col: 44, offset: 65366},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 51, offset: 65373},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1770, col: 1, offset: 65378},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1770, col: 27, offset: 65404},
				expr: &actionExpr{
					pos: position{line: 1771, col: 8, offset: 65413},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1771, col: 8, offset: 65413},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1771, col: 8, offset: 65413},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 9, offset: 65414},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1772, col: 8, offset: 65447},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1772, col: 17, offset: 65456},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1772, col: 17, offset: 65456},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1773, col: 15, offset: 65481},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1774, col: 15, offset: 65506},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1775, col: 15, offset: 65534},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1776, col: 15, offset: 65565},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1777, col: 15, offset: 65598},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1778, col: 15, offset: 65629},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1779, col: 15, offset: 65668},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1780, col: 15, offset: 65695},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1781, col: 15, offset: 65722},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1782, col: 15, offset: 65748},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1783, col: 15, offset: 65775},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1784, col: 15, offset: 65800},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1785, col: 15, offset: 65832},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1786, col: 15, offset: 65863},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1787, col: 15, offset: 65883},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1788, col: 15, offset: 65910},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1789, col: 15, offset: 65938},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1790, col: 15, offset: 65965},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1797, col: 1, offset: 66222},
			expr: &actionExpr{
				pos: position{line: 1797, col: 16, offset: 66237},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1797, col: 16, offset: 66237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1797, col: 16, offset: 66237},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1797, col: 27, offset: 66248},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 28, offset: 66249},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 41, offset: 66262},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1797, col: 67, offset: 66288},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1797, col: 76, offset: 66297},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1797, col: 99, offset: 66320},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1801, col: 1, offset: 66418},
			expr: &seqExpr{
				pos: position{line: 1801, col: 25, offset: 66442},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 25, offset: 66442},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 31, offset: 66448},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 31, offset: 66448},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 38, offset: 66455},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1803, col: 1, offset: 66515},
			expr: &seqExpr{
				pos: position{line: 1803, col: 30, offset: 66544},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1803, col: 30, offset: 66544},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1803, col: 36, offset: 66550},
						expr: &ruleRefExpr{
							pos:  position{line: 1803, col: 36, offset: 66550},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 43, offset: 66557},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1805, col: 1, offset: 66562},
			expr: &choiceExpr{
				pos: position{line: 1805, col: 28, offset: 66589},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1805, col: 29, offset: 66590},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1805, col: 29, offset: 66590},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1805, col: 35, offset: 66596},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 35, offset: 66596},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1805, col: 42, offset: 66603},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1805, col: 49, offset: 66610},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1807, col: 1, offset: 66615},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1807, col: 26, offset: 66640},
				expr: &actionExpr{
					pos: position{line: 1807, col: 27, offset: 66641},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1807, col: 27, offset: 66641},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1807, col: 27, offset: 66641},
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 28, offset: 66642},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1807, col: 52, offset: 66666},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 58, offset: 66672},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1814, col: 1, offset: 66906},
			expr: &actionExpr{
				pos: position{line: 1814, col: 17, offset: 66922},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 17, offset: 66922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1814, col: 17, offset: 66922},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1814, col: 28, offset: 66933},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 29, offset: 66934},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1814, col: 42, offset: 66947},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 69, offset: 66974},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 78, offset: 66983},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1814, col: 102, offset: 67007},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1818, col: 1, offset: 67107},
			expr: &seqExpr{
				pos: position{line: 1818, col: 26, offset: 67132},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1818, col: 26, offset: 67132},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1818, col: 33, offset: 67139},
						expr: &ruleRefExpr{
							pos:  position{line: 1818, col: 33, offset: 67139},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 40, offset: 67146},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1820, col: 1, offset: 67151},
			expr: &seqExpr{
				pos: position{line: 1820, col: 31, offset: 67181},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1820, col: 31, offset: 67181},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1820, col: 38, offset: 67188},
						expr: &ruleRefExpr{
							pos:  position{line: 1820, col: 38, offset: 67188},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 45, offset: 67195},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1822, col: 1, offset: 67200},
			expr: &choiceExpr{
				pos: position{line: 1822, col: 29, offset: 67228},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1822, col: 30, offset: 67229},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1822, col: 30, offset: 67229},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1822, col: 37, offset: 67236},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 37, offset: 67236},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1822, col: 44, offset: 67243},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1822, col: 51, offset: 67250},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1824, col: 1, offset: 67255},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1824, col: 27, offset: 67281},
				expr: &actionExpr{
					pos: position{line: 1824, col: 28, offset: 67282},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1824, col: 28, offset: 67282},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1824, col: 28, offset: 67282},
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 29, offset: 67283},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1824, col: 54, offset: 67308},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 60, offset: 67314},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1831, col: 1, offset: 67546},
			expr: &actionExpr{
				pos: position{line: 1831, col: 15, offset: 67560},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 15, offset: 67560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1831, col: 15, offset: 67560},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1831, col: 26, offset: 67571},
								expr: &ruleRefExpr{
									pos:  position{line: 1831, col: 27, offset: 67572},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1832, col: 5, offset: 67590},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 5, offset: 67800},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 30, offset: 67825},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1839, col: 39, offset: 67834},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 61, offset: 67856},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1843, col: 1, offset: 67960},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1843, col: 25, offset: 67984},
				expr: &actionExpr{
					pos: position{line: 1843, col: 26, offset: 67985},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1843, col: 26, offset: 67985},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1843, col: 26, offset: 67985},
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 27, offset: 67986},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1843, col: 50, offset: 68009},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1843, col: 56, offset: 68015},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1850, col: 1, offset: 68253},
			expr: &actionExpr{
				pos: position{line: 1850, col: 21, offset: 68273},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1850, col: 21, offset: 68273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1850, col: 21, offset: 68273},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1850, col: 32, offset: 68284},
								expr: &ruleRefExpr{
									pos:  position{line: 1850, col: 33, offset: 68285},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1850, col: 46, offset: 68298},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1850, col: 77, offset: 68329},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1850, col: 86, offset: 68338},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1850, col: 114, offset: 68366},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1854, col: 1, offset: 68474},
			expr: &seqExpr{
				pos: position{line: 1854, col: 30, offset: 68503},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1854, col: 30, offset: 68503},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1854, col: 37, offset: 68510},
						expr: &ruleRefExpr{
							pos:  position{line: 1854, col: 37, offset: 68510},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 44, offset: 68517},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1856, col: 1, offset: 68522},
			expr: &seqExpr{
				pos: position{line: 1856, col: 35, offset: 68556},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1856, col: 35, offset: 68556},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1856, col: 42, offset: 68563},
						expr: &ruleRefExpr{
							pos:  position{line: 1856, col: 42, offset: 68563},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1856, col: 49, offset: 68570},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1858, col: 1, offset: 68575},
			expr: &choiceExpr{
				pos: position{line: 1858, col: 33, offset: 68607},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1858, col: 34, offset: 68608},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1858, col: 34, offset: 68608},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1858, col: 41, offset: 68615},
								expr: &ruleRefExpr{
									pos:  position{line: 1858, col: 41, offset: 68615},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1858, col: 48, offset: 68622},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1858, col: 55, offset: 68629},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1860, col: 1, offset: 68634},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1860, col: 31, offset: 68664},
				expr: &actionExpr{
					pos: position{line: 1860, col: 32, offset: 68665},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1860, col: 32, offset: 68665},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1860, col: 32, offset: 68665},
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 33, offset: 68666},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1860, col: 62, offset: 68695},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 68, offset: 68701},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1867, col: 1, offset: 68935},
			expr: &seqExpr{
				pos: position{line: 1867, col: 26, offset: 68960},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1867, col: 26, offset: 68960},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1867, col: 33, offset: 68967},
						expr: &ruleRefExpr{
							pos:  position{line: 1867, col: 33, offset: 68967},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 40, offset: 68974},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1869, col: 1, offset: 68979},
			expr: &seqExpr{
				pos: position{line: 1869, col: 31, offset: 69009},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1869, col: 31, offset: 69009},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1869, col: 38, offset: 69016},
						expr: &ruleRefExpr{
							pos:  position{line: 1869, col: 38, offset: 69016},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1869, col: 45, offset: 69023},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1871, col: 1, offset: 69028},
			expr: &choiceExpr{
				pos: position{line: 1871, col: 29, offset: 69056},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1871, col: 30, offset: 69057},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1871, col: 30, offset: 69057},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1871, col: 37, offset: 69064},
								expr: &ruleRefExpr{
									pos:  position{line: 1871, col: 37, offset: 69064},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1871, col: 44, offset: 69071},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1871, col: 51, offset: 69078},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1873, col: 1, offset: 69083},
			expr: &actionExpr{
				pos: position{line: 1873, col: 17, offset: 69099},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1873, col: 17, offset: 69099},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1873, col: 17, offset: 69099},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1873, col: 44, offset: 69126},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1873, col: 53, offset: 69135},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 78, offset: 69160},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1877, col: 1, offset: 69253},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1877, col: 27, offset: 69279},
				expr: &actionExpr{
					pos: position{line: 1877, col: 28, offset: 69280},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1877, col: 28, offset: 69280},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1877, col: 28, offset: 69280},
								expr: &ruleRefExpr{
									pos:  position{line: 1877, col: 29, offset: 69281},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1877, col: 54, offset: 69306},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1877, col: 60, offset: 69312},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1881, col: 1, offset: 69350},
			expr: &actionExpr{
				pos: position{line: 1881, col: 22, offset: 69371},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1881, col: 22, offset: 69371},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1881, col: 22, offset: 69371},
							expr: &ruleRefExpr{
								pos:  position{line: 1881, col: 23, offset: 69372},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1881, col: 45, offset: 69394},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1881, col: 50, offset: 69399},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1881, col: 59, offset: 69408},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1881, col: 85, offset: 69434},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1885, col: 1, offset: 69499},
			expr: &actionExpr{
				pos: position{line: 1885, col: 29, offset: 69527},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1885, col: 29, offset: 69527},
					expr: &charClassMatcher{
						pos:        position{line: 1885, col: 29, offset: 69527},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1893, col: 1, offset: 69816},
			expr: &choiceExpr{
				pos: position{line: 1893, col: 17, offset: 69832},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1893, col: 17, offset: 69832},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1894, col: 19, offset: 69861},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1895, col: 19, offset: 69892},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1896, col: 19, offset: 69916},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1897, col: 19, offset: 69953},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1898, col: 19, offset: 69987},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1899, col: 19, offset: 70021},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1900, col: 19, offset: 70056},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1901, col: 19, offset: 70090},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1902, col: 19, offset: 70127},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1904, col: 1, offset: 70138},
			expr: &actionExpr{
				pos: position{line: 1904, col: 23, offset: 70160},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1904, col: 23, offset: 70160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1904, col: 23, offset: 70160},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1904, col: 32, offset: 70169},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1904, col: 37, offset: 70174},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1904, col: 37, offset: 70174},
									expr: &charClassMatcher{
										pos:        position{line: 1904, col: 37, offset: 70174},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1904, col: 76, offset: 70213},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1909, col: 1, offset: 70365},
			expr: &seqExpr{
				pos: position{line: 1910, col: 5, offset: 70395},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1910, col: 5, offset: 70395},
						expr: &choiceExpr{
							pos: position{line: 1910, col: 6, offset: 70396},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1910, col: 6, offset: 70396},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 11, offset: 70425},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 11, offset: 70486},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1913, col: 11, offset: 70515},
									expr: &ruleRefExpr{
										pos:  position{line: 1913, col: 11, offset: 70515},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1914, col: 11, offset: 70533},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 70551},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1915, col: 21, offset: 70561},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1918, col: 1, offset: 70682},
			expr: &seqExpr{
				pos: position{line: 1919, col: 5, offset: 70711},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1919, col: 5, offset: 70711},
						expr: &choiceExpr{
							pos: position{line: 1919, col: 6, offset: 70712},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1919, col: 6, offset: 70712},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1920, col: 11, offset: 70773},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1921, col: 11, offset: 70800},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1922, col: 11, offset: 70829},
									expr: &ruleRefExpr{
										pos:  position{line: 1922, col: 11, offset: 70829},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 70846},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 11, offset: 70864},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1924, col: 21, offset: 70874},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1927, col: 1, offset: 70928},
			expr: &seqExpr{
				pos: position{line: 1928, col: 5, offset: 70951},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1928, col: 5, offset: 70951},
						expr: &choiceExpr{
							pos: position{line: 1928, col: 6, offset: 70952},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1928, col: 6, offset: 70952},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1929, col: 11, offset: 71013},
									expr: &ruleRefExpr{
										pos:  position{line: 1929, col: 11, offset: 71013},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1930, col: 11, offset: 71031},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1931, col: 11, offset: 71053},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 71076},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 71105},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 71123},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1934, col: 21, offset: 71133},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1937, col: 1, offset: 71191},
			expr: &seqExpr{
				pos: position{line: 1938, col: 5, offset: 71213},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1938, col: 5, offset: 71213},
						expr: &choiceExpr{
							pos: position{line: 1938, col: 6, offset: 71214},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1938, col: 6, offset: 71214},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1939, col: 11, offset: 71275},
									expr: &ruleRefExpr{
										pos:  position{line: 1939, col: 11, offset: 71275},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1940, col: 11, offset: 71293},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1941, col: 11, offset: 71325},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1942, col: 11, offset: 71354},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 11, offset: 71372},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1943, col: 21, offset: 71382},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1946, col: 1, offset: 71436},
			expr: &seqExpr{
				pos: position{line: 1947, col: 5, offset: 71460},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1947, col: 5, offset: 71460},
						expr: &choiceExpr{
							pos: position{line: 1947, col: 6, offset: 71461},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1947, col: 6, offset: 71461},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1948, col: 11, offset: 71522},
									expr: &ruleRefExpr{
										pos:  position{line: 1948, col: 11, offset: 71522},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1949, col: 11, offset: 71540},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1950, col: 11, offset: 71563},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1951, col: 11, offset: 71592},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 11, offset: 71610},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1952, col: 21, offset: 71620},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1955, col: 1, offset: 71700},
			expr: &actionExpr{
				pos: position{line: 1955, col: 27, offset: 71726},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 27, offset: 71726},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1955, col: 27, offset: 71726},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1955, col: 33, offset: 71732},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 34, offset: 71733},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1955, col: 54, offset: 71753},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1959, col: 1, offset: 71820},
			expr: &actionExpr{
				pos: position{line: 1960, col: 5, offset: 71846},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1960, col: 5, offset: 71846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1960, col: 5, offset: 71846},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1960, col: 14, offset: 71855},
								expr: &choiceExpr{
									pos: position{line: 1960, col: 15, offset: 71856},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1960, col: 15, offset: 71856},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1961, col: 11, offset: 71917},
											expr: &ruleRefExpr{
												pos:  position{line: 1961, col: 11, offset: 71917},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1962, col: 11, offset: 71935},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1963, col: 11, offset: 71958},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1964, col: 11, offset: 71987},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1964, col: 21, offset: 71997},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1968, col: 1, offset: 72068},
			expr: &actionExpr{
				pos: position{line: 1968, col: 29, offset: 72096},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 29, offset: 72096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1968, col: 29, offset: 72096},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1968, col: 35, offset: 72102},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1968, col: 43, offset: 72110},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1968, col: 44, offset: 72111},
									expr: &charClassMatcher{
										pos:        position{line: 1968, col: 44, offset: 72111},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1970, col: 8, offset: 72161},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1975, col: 1, offset: 72248},
			expr: &seqExpr{
				pos: position{line: 1976, col: 5, offset: 72272},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1976, col: 5, offset: 72272},
						expr: &choiceExpr{
							pos: position{line: 1976, col: 6, offset: 72273},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1976, col: 6, offset: 72273},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1977, col: 11, offset: 72334},
									expr: &ruleRefExpr{
										pos:  position{line: 1977, col: 11, offset: 72334},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1978, col: 11, offset: 72352},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1979, col: 11, offset: 72370},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1980, col: 11, offset: 72399},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1981, col: 11, offset: 72417},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1981, col: 21, offset: 72427},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1985, col: 1, offset: 72575},
			expr: &seqExpr{
				pos: position{line: 1985, col: 24, offset: 72598},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1985, col: 24, offset: 72598},
						expr: &choiceExpr{
							pos: position{line: 1986, col: 5, offset: 72604},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1986, col: 5, offset: 72604},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1987, col: 7, offset: 72661},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1988, col: 7, offset: 72686},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1989, col: 7, offset: 72729},
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 7, offset: 72729},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1990, col: 7, offset: 72743},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1991, col: 7, offset: 72757},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1991, col: 17, offset: 72767},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1994, col: 1, offset: 72824},
			expr: &seqExpr{
				pos: position{line: 1995, col: 5, offset: 72844},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1995, col: 5, offset: 72844},
						expr: &choiceExpr{
							pos: position{line: 1995, col: 6, offset: 72845},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1995, col: 6, offset: 72845},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1996, col: 11, offset: 72906},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1997, col: 11, offset: 72935},
									expr: &ruleRefExpr{
										pos:  position{line: 1997, col: 11, offset: 72935},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1998, col: 11, offset: 72952},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1999, col: 11, offset: 72970},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 11, offset: 72988},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2000, col: 21, offset: 72998},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 2003, col: 1, offset: 73050},
			expr: &seqExpr{
				pos: position{line: 2003, col: 13, offset: 73062},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 2003, col: 13, offset: 73062},
						expr: &choiceExpr{
							pos: position{line: 2004, col: 5, offset: 73068},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2004, col: 5, offset: 73068},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2005, col: 8, offset: 73095},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 2005, col: 8, offset: 73095},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2005, col: 8, offset: 73095},
												expr: &ruleRefExpr{
													pos:  position{line: 2005, col: 9, offset: 73096},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 2005, col: 13, offset: 73100},
												expr: &charClassMatcher{
													pos:        position{line: 2005, col: 13, offset: 73100},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2005, col: 22, offset: 73109},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2007, col: 10, offset: 73214},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2012, col: 1, offset: 73407},
			expr: &actionExpr{
				pos: position{line: 2012, col: 10, offset: 73416},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 10, offset: 73416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2012, col: 10, offset: 73416},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2012, col: 16, offset: 73422},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2012, col: 17, offset: 73423},
									expr: &ruleRefExpr{
										pos:  position{line: 2012, col: 17, offset: 73423},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2012, col: 31, offset: 73437},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 5, offset: 73456},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2013, col: 12, offset: 73463},
								expr: &ruleRefExpr{
									pos:  position{line: 2013, col: 13, offset: 73464},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2014, col: 5, offset: 73486},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2014, col: 11, offset: 73492},
								expr: &ruleRefExpr{
									pos:  position{line: 2014, col: 12, offset: 73493},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2015, col: 6, offset: 73510},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2015, col: 6, offset: 73510},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2015, col: 23, offset: 73527},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2019, col: 1, offset: 73637},
			expr: &seqExpr{
				pos: position{line: 2019, col: 23, offset: 73659},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2019, col: 23, offset: 73659},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2019, col: 27, offset: 73663},
						expr: &ruleRefExpr{
							pos:  position{line: 2019, col: 27, offset: 73663},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2021, col: 1, offset: 73671},
			expr: &seqExpr{
				pos: position{line: 2021, col: 19, offset: 73689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2021, col: 19, offset: 73689},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2021, col: 26, offset: 73696},
						expr: &ruleRefExpr{
							pos:  position{line: 2021, col: 26, offset: 73696},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2021, col: 33, offset: 73703},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2024, col: 1, offset: 73771},
			expr: &actionExpr{
				pos: position{line: 2024, col: 20, offset: 73790},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2024, col: 20, offset: 73790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2024, col: 20, offset: 73790},
							expr: &ruleRefExpr{
								pos:  position{line: 2024, col: 21, offset: 73791},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2024, col: 36, offset: 73806},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2024, col: 42, offset: 73812},
								expr: &ruleRefExpr{
									pos:  position{line: 2024, col: 43, offset: 73813},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2024, col: 55, offset: 73825},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2024, col: 59, offset: 73829},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2028, col: 1, offset: 73897},
			expr: &actionExpr{
				pos: position{line: 2028, col: 14, offset: 73910},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2028, col: 14, offset: 73910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2028, col: 14, offset: 73910},
							expr: &ruleRefExpr{
								pos:  position{line: 2028, col: 15, offset: 73911},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2028, col: 30, offset: 73926},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2028, col: 36, offset: 73932},
								expr: &ruleRefExpr{
									pos:  position{line: 2028, col: 37, offset: 73933},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2028, col: 49, offset: 73945},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2028, col: 53, offset: 73949},
							expr: &ruleRefExpr{
								pos:  position{line: 2028, col: 53, offset: 73949},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2032, col: 1, offset: 74018},
			expr: &actionExpr{
				pos: position{line: 2032, col: 14, offset: 74031},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 14, offset: 74031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2032, col: 14, offset: 74031},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 33, offset: 74050},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2032, col: 42, offset: 74059},
								expr: &seqExpr{
									pos: position{line: 2032, col: 43, offset: 74060},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2032, col: 43, offset: 74060},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 44, offset: 74061},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2032, col: 63, offset: 74080},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 64, offset: 74081},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2032, col: 68, offset: 74085},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 68, offset: 74085},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2032, col: 75, offset: 74092},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2032, col: 89, offset: 74106},
											expr: &ruleRefExpr{
												pos:  position{line: 2032, col: 89, offset: 74106},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2039, col: 1, offset: 74432},
			expr: &choiceExpr{
				pos: position{line: 2039, col: 17, offset: 74448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2039, col: 17, offset: 74448},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2039, col: 49, offset: 74480},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2039, col: 78, offset: 74509},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2041, col: 1, offset: 74545},
			expr: &litMatcher{
				pos:        position{line: 2041, col: 26, offset: 74570},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2044, col: 1, offset: 74642},
			expr: &actionExpr{
				pos: position{line: 2044, col: 31, offset: 74672},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2044, col: 31, offset: 74672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2044, col: 31, offset: 74672},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2044, col: 42, offset: 74683},
								expr: &ruleRefExpr{
									pos:  position{line: 2044, col: 43, offset: 74684},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2044, col: 56, offset: 74697},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2044, col: 63, offset: 74704},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2049, col: 1, offset: 74934},
			expr: &actionExpr{
				pos: position{line: 2050, col: 5, offset: 74974},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 5, offset: 74974},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 5, offset: 74974},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 2050, col: 16, offset: 74985},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2051, col: 5, offset: 75021},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2051, col: 16, offset: 75032},
								expr: &ruleRefExpr{
									pos:  position{line: 2051, col: 17, offset: 75033},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 2055, col: 1, offset: 75142},
			expr: &actionExpr{
				pos: position{line: 2055, col: 35, offset: 75176},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 2055, col: 35, offset: 75176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2055, col: 35, offset: 75176},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2055, col: 41, offset: 75182},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 2055, col: 41, offset: 75182},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2055, col: 41, offset: 75182},
											expr: &ruleRefExpr{
												pos:  position{line: 2055, col: 41, offset: 75182},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2055, col: 48, offset: 75189},
											expr: &charClassMatcher{
												pos:        position{line: 2055, col: 48, offset: 75189},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2057, col: 8, offset: 75255},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2062, col: 1, offset: 75395},
			expr: &actionExpr{
				pos: position{line: 2062, col: 39, offset: 75433},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2062, col: 39, offset: 75433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2062, col: 39, offset: 75433},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2062, col: 50, offset: 75444},
								expr: &ruleRefExpr{
									pos:  position{line: 2062, col: 51, offset: 75445},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 9, offset: 75466},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2063, col: 31, offset: 75488},
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 31, offset: 75488},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 38, offset: 75495},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2063, col: 46, offset: 75503},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 53, offset: 75510},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2063, col: 95, offset: 75552},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2063, col: 96, offset: 75553},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2063, col: 96, offset: 75553},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2063, col: 118, offset: 75575},
											expr: &ruleRefExpr{
												pos:  position{line: 2063, col: 118, offset: 75575},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2063, col: 125, offset: 75582},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2063, col: 132, offset: 75589},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2068, col: 1, offset: 75748},
			expr: &actionExpr{
				pos: position{line: 2068, col: 44, offset: 75791},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2068, col: 44, offset: 75791},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2068, col: 50, offset: 75797},
						expr: &ruleRefExpr{
							pos:  position{line: 2068, col: 51, offset: 75798},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2072, col: 1, offset: 75882},
			expr: &actionExpr{
				pos: position{line: 2073, col: 5, offset: 75937},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2073, col: 5, offset: 75937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2073, col: 5, offset: 75937},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2073, col: 11, offset: 75943},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2073, col: 11, offset: 75943},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2073, col: 11, offset: 75943},
											expr: &ruleRefExpr{
												pos:  position{line: 2073, col: 12, offset: 75944},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2073, col: 34, offset: 75966},
											expr: &charClassMatcher{
												pos:        position{line: 2073, col: 34, offset: 75966},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2075, col: 8, offset: 76032},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2080, col: 1, offset: 76158},
			expr: &actionExpr{
				pos: position{line: 2081, col: 5, offset: 76196},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2081, col: 5, offset: 76196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2081, col: 5, offset: 76196},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2081, col: 16, offset: 76207},
								expr: &ruleRefExpr{
									pos:  position{line: 2081, col: 17, offset: 76208},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2082, col: 5, offset: 76225},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2089, col: 5, offset: 76437},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2089, col: 11, offset: 76443},
								expr: &ruleRefExpr{
									pos:  position{line: 2089, col: 12, offset: 76444},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2093, col: 1, offset: 76581},
			expr: &actionExpr{
				pos: position{line: 2093, col: 16, offset: 76596},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2093, col: 16, offset: 76596},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2097, col: 1, offset: 76642},
			expr: &actionExpr{
				pos: position{line: 2097, col: 25, offset: 76666},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2097, col: 25, offset: 76666},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2097, col: 25, offset: 76666},
							expr: &ruleRefExpr{
								pos:  position{line: 2097, col: 26, offset: 76667},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2097, col: 36, offset: 76677},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2097, col: 45, offset: 76686},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2097, col: 45, offset: 76686},
									expr: &charClassMatcher{
										pos:        position{line: 2097, col: 45, offset: 76686},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2099, col: 4, offset: 76744},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2106, col: 1, offset: 76921},
			expr: &actionExpr{
				pos: position{line: 2106, col: 14, offset: 76934},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2106, col: 14, offset: 76934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2106, col: 14, offset: 76934},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2106, col: 19, offset: 76939},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2106, col: 25, offset: 76945},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2106, col: 43, offset: 76963},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2110, col: 1, offset: 77028},
			expr: &actionExpr{
				pos: position{line: 2110, col: 21, offset: 77048},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2110, col: 21, offset: 77048},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2110, col: 30, offset: 77057},
						expr: &choiceExpr{
							pos: position{line: 2110, col: 31, offset: 77058},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2110, col: 31, offset: 77058},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2110, col: 38, offset: 77065},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2110, col: 53, offset: 77080},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2110, col: 66, offset: 77093},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2110, col: 74, offset: 77101},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2110, col: 93, offset: 77120},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2110, col: 114, offset: 77141},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2110, col: 115, offset: 77142},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2110, col: 115, offset: 77142},
												expr: &litMatcher{
													pos:        position{line: 2110, col: 116, offset: 77143},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2110, col: 121, offset: 77148,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2116, col: 1, offset: 77254},
			expr: &actionExpr{
				pos: position{line: 2116, col: 23, offset: 77276},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2116, col: 23, offset: 77276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2116, col: 23, offset: 77276},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2116, col: 29, offset: 77282},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2116, col: 36, offset: 77289},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2117, col: 5, offset: 77321},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2117, col: 11, offset: 77327},
								expr: &actionExpr{
									pos: position{line: 2117, col: 12, offset: 77328},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2117, col: 12, offset: 77328},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2117, col: 12, offset: 77328},
												expr: &ruleRefExpr{
													pos:  position{line: 2117, col: 12, offset: 77328},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2117, col: 19, offset: 77335},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2117, col: 23, offset: 77339},
												expr: &ruleRefExpr{
													pos:  position{line: 2117, col: 23, offset: 77339},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2117, col: 30, offset: 77346},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2117, col: 39, offset: 77355},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2118, col: 5, offset: 77413},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2118, col: 11, offset: 77419},
								expr: &actionExpr{
									pos: position{line: 2118, col: 12, offset: 77420},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2118, col: 12, offset: 77420},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2118, col: 12, offset: 77420},
												expr: &ruleRefExpr{
													pos:  position{line: 2118, col: 12, offset: 77420},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2118, col: 19, offset: 77427},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2118, col: 23, offset: 77431},
												expr: &ruleRefExpr{
													pos:  position{line: 2118, col: 23, offset: 77431},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2118, col: 30, offset: 77438},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2118, col: 39, offset: 77447},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2119, col: 5, offset: 77505},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2123, col: 1, offset: 77584},
			expr: &actionExpr{
				pos: position{line: 2123, col: 30, offset: 77613},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2123, col: 30, offset: 77613},
					expr: &choiceExpr{
						pos: position{line: 2123, col: 31, offset: 77614},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2123, col: 31, offset: 77614},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2123, col: 42, offset: 77625},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2130, col: 1, offset: 77774},
			expr: &actionExpr{
				pos: position{line: 2130, col: 14, offset: 77787},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2130, col: 14, offset: 77787},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2130, col: 14, offset: 77787},
							expr: &ruleRefExpr{
								pos:  position{line: 2130, col: 15, offset: 77788},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2130, col: 19, offset: 77792},
							expr: &ruleRefExpr{
								pos:  position{line: 2130, col: 19, offset: 77792},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2130, col: 26, offset: 77799},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2138, col: 1, offset: 77944},
			expr: &choiceExpr{
				pos: position{line: 2138, col: 11, offset: 77954},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2138, col: 11, offset: 77954},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 24, offset: 77967},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 36, offset: 77979},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 48, offset: 77991},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 61, offset: 78004},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2138, col: 72, offset: 78015},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2140, col: 1, offset: 78034},
			expr: &actionExpr{
				pos: position{line: 2140, col: 15, offset: 78048},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2140, col: 15, offset: 78048},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2143, col: 1, offset: 78101},
			expr: &actionExpr{
				pos: position{line: 2143, col: 14, offset: 78114},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2143, col: 14, offset: 78114},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2146, col: 1, offset: 78168},
			expr: &actionExpr{
				pos: position{line: 2146, col: 14, offset: 78181},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2146, col: 14, offset: 78181},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2149, col: 1, offset: 78236},
			expr: &actionExpr{
				pos: position{line: 2149, col: 15, offset: 78250},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2149, col: 15, offset: 78250},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2152, col: 1, offset: 78304},
			expr: &actionExpr{
				pos: position{line: 2152, col: 13, offset: 78316},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2152, col: 13, offset: 78316},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2160, col: 1, offset: 78593},
			expr: &actionExpr{
				pos: position{line: 2160, col: 22, offset: 78614},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 22, offset: 78614},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2160, col: 22, offset: 78614},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2160, col: 31, offset: 78623},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2160, col: 35, offset: 78627},
							expr: &charClassMatcher{
								pos:        position{line: 2160, col: 36, offset: 78628},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2169, col: 1, offset: 78990},
			expr: &choiceExpr{
				pos: position{line: 2169, col: 21, offset: 79010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2169, col: 21, offset: 79010},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2169, col: 21, offset: 79010},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2172, col: 9, offset: 79173},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2172, col: 10, offset: 79174},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2172, col: 10, offset: 79174},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2172, col: 16, offset: 79180},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2172, col: 22, offset: 79186},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2179, col: 1, offset: 79364},
			expr: &charClassMatcher{
				pos:        position{line: 2179, col: 13, offset: 79376},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2181, col: 1, offset: 79386},
			expr: &choiceExpr{
				pos: position{line: 2181, col: 16, offset: 79401},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2181, col: 16, offset: 79401},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2181, col: 22, offset: 79407},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2181, col: 28, offset: 79413},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2181, col: 34, offset: 79419},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2181, col: 40, offset: 79425},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2181, col: 46, offset: 79431},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2183, col: 1, offset: 79437},
			expr: &actionExpr{
				pos: position{line: 2183, col: 14, offset: 79450},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2183, col: 14, offset: 79450},
					expr: &charClassMatcher{
						pos:        position{line: 2183, col: 14, offset: 79450},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2187, col: 1, offset: 79496},
			expr: &choiceExpr{
				pos: position{line: 2191, col: 5, offset: 79823},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2191, col: 5, offset: 79823},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2191, col: 5, offset: 79823},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2191, col: 5, offset: 79823},
									expr: &charClassMatcher{
										pos:        position{line: 2191, col: 5, offset: 79823},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2191, col: 15, offset: 79833},
									expr: &choiceExpr{
										pos: position{line: 2191, col: 17, offset: 79835},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2191, col: 17, offset: 79835},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2191, col: 30, offset: 79848},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2193, col: 9, offset: 79918},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2193, col: 9, offset: 79918},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2193, col: 9, offset: 79918},
									expr: &charClassMatcher{
										pos:        position{line: 2193, col: 9, offset: 79918},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2193, col: 19, offset: 79928},
									expr: &seqExpr{
										pos: position{line: 2193, col: 20, offset: 79929},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2193, col: 20, offset: 79929},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2193, col: 27, offset: 79936},
												expr: &charClassMatcher{
													pos:        position{line: 2193, col: 27, offset: 79936},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2197, col: 1, offset: 80012},
			expr: &choiceExpr{
				pos: position{line: 2198, col: 5, offset: 80093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2198, col: 5, offset: 80093},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2198, col: 5, offset: 80093},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2198, col: 5, offset: 80093},
									expr: &charClassMatcher{
										pos:        position{line: 2198, col: 5, offset: 80093},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2198, col: 19, offset: 80107},
									expr: &choiceExpr{
										pos: position{line: 2198, col: 21, offset: 80109},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2198, col: 21, offset: 80109},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2198, col: 31, offset: 80119},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2200, col: 9, offset: 80188},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2203, col: 1, offset: 80288},
			expr: &actionExpr{
				pos: position{line: 2203, col: 12, offset: 80299},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2203, col: 12, offset: 80299},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2207, col: 1, offset: 80364},
			expr: &actionExpr{
				pos: position{line: 2207, col: 17, offset: 80380},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2207, col: 17, offset: 80380},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2207, col: 22, offset: 80385},
						expr: &choiceExpr{
							pos: position{line: 2207, col: 23, offset: 80386},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2207, col: 23, offset: 80386},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2207, col: 34, offset: 80397},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2211, col: 1, offset: 80478},
			expr: &actionExpr{
				pos: position{line: 2211, col: 25, offset: 80502},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2211, col: 25, offset: 80502},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2211, col: 30, offset: 80507},
						expr: &charClassMatcher{
							pos:        position{line: 2211, col: 31, offset: 80508},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2215, col: 1, offset: 80580},
			expr: &actionExpr{
				pos: position{line: 2215, col: 13, offset: 80592},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2215, col: 13, offset: 80592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2215, col: 13, offset: 80592},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2215, col: 20, offset: 80599},
								expr: &ruleRefExpr{
									pos:  position{line: 2215, col: 21, offset: 80600},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2215, col: 34, offset: 80613},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2215, col: 39, offset: 80618},
								expr: &choiceExpr{
									pos: position{line: 2215, col: 40, offset: 80619},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2215, col: 40, offset: 80619},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2215, col: 52, offset: 80631},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2219, col: 1, offset: 80716},
			expr: &actionExpr{
				pos: position{line: 2219, col: 23, offset: 80738},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2219, col: 23, offset: 80738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2219, col: 23, offset: 80738},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2219, col: 31, offset: 80746},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2219, col: 43, offset: 80758},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2219, col: 48, offset: 80763},
								expr: &choiceExpr{
									pos: position{line: 2219, col: 49, offset: 80764},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2219, col: 49, offset: 80764},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2219, col: 60, offset: 80775},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2223, col: 1, offset: 80860},
			expr: &oneOrMoreExpr{
				pos: position{line: 2223, col: 13, offset: 80872},
				expr: &charClassMatcher{
					pos:        position{line: 2223, col: 14, offset: 80873},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2225, col: 1, offset: 80941},
			expr: &actionExpr{
				pos: position{line: 2225, col: 21, offset: 80961},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2225, col: 21, offset: 80961},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2225, col: 21, offset: 80961},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2225, col: 29, offset: 80969},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2225, col: 41, offset: 80981},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2225, col: 47, offset: 80987},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2230, col: 1, offset: 81235},
			expr: &oneOrMoreExpr{
				pos: position{line: 2230, col: 22, offset: 81256},
				expr: &charClassMatcher{
					pos:        position{line: 2230, col: 23, offset: 81257},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2232, col: 1, offset: 81389},
			expr: &actionExpr{
				pos: position{line: 2232, col: 9, offset: 81397},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2232, col: 9, offset: 81397},
					expr: &charClassMatcher{
						pos:        position{line: 2232, col: 9, offset: 81397},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2236, col: 1, offset: 81445},
			expr: &choiceExpr{
				pos: position{line: 2236, col: 15, offset: 81459},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2236, col: 15, offset: 81459},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2236, col: 27, offset: 81471},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2236, col: 40, offset: 81484},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2236, col: 51, offset: 81495},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2236, col: 62, offset: 81506},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2238, col: 1, offset: 81517},
			expr: &actionExpr{
				pos: position{line: 2238, col: 7, offset: 81523},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2238, col: 7, offset: 81523},
					expr: &charClassMatcher{
						pos:        position{line: 2238, col: 7, offset: 81523},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2242, col: 1, offset: 81648},
			expr: &actionExpr{
				pos: position{line: 2242, col: 10, offset: 81657},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2242, col: 10, offset: 81657},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2246, col: 1, offset: 81699},
			expr: &actionExpr{
				pos: position{line: 2246, col: 11, offset: 81709},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2246, col: 11, offset: 81709},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2246, col: 11, offset: 81709},
							expr: &litMatcher{
								pos:        position{line: 2246, col: 11, offset: 81709},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2246, col: 16, offset: 81714},
							expr: &ruleRefExpr{
								pos:  position{line: 2246, col: 16, offset: 81714},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2250, col: 1, offset: 81766},
			expr: &choiceExpr{
				pos: position{line: 2250, col: 10, offset: 81775},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2250, col: 10, offset: 81775},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2250, col: 16, offset: 81781},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2250, col: 16, offset: 81781},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2254, col: 1, offset: 81822},
			expr: &choiceExpr{
				pos: position{line: 2254, col: 12, offset: 81833},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2254, col: 12, offset: 81833},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2254, col: 21, offset: 81842},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2254, col: 28, offset: 81849},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2256, col: 1, offset: 81855},
			expr: &notExpr{
				pos: position{line: 2256, col: 8, offset: 81862},
				expr: &anyMatcher{
					line: 2256, col: 9, offset: 81863,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2258, col: 1, offset: 81866},
			expr: &choiceExpr{
				pos: position{line: 2258, col: 8, offset: 81873},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2258, col: 8, offset: 81873},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2258, col: 18, offset: 81883},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrBlockKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	if attributes == nil {
		return true, nil
	}
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		// if AttrKind is missing, then accept as a QuoteBlock
		return !ok || kind == types.Quote, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrBlockKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
