// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1537},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1565},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1595},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1622},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1658},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1683},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1716},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1743},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1781},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1807},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1839},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 63, col: 1, offset: 1852},
			expr: &labeledExpr{
				pos:   position{line: 63, col: 47, offset: 1898},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 63, col: 54, offset: 1905},
					expr: &ruleRefExpr{
						pos:  position{line: 63, col: 55, offset: 1906},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1945},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1982},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1982},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1982},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1983},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1993},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 66, col: 12, offset: 2000},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 66, col: 12, offset: 2000},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 2026},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2079},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2104},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2130},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2181},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2211},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2239},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2275},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2300},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2333},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2360},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2398},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2424},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 84, col: 1, offset: 2466},
			expr: &labeledExpr{
				pos:   position{line: 84, col: 23, offset: 2488},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 30, offset: 2495},
					expr: &ruleRefExpr{
						pos:  position{line: 84, col: 31, offset: 2496},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 86, col: 1, offset: 2519},
			expr: &actionExpr{
				pos: position{line: 86, col: 22, offset: 2540},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 86, col: 22, offset: 2540},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 86, col: 22, offset: 2540},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 23, offset: 2541},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2551},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 87, col: 12, offset: 2558},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 12, offset: 2558},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 24, offset: 2570},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 94, col: 1, offset: 2723},
			expr: &ruleRefExpr{
				pos:  position{line: 94, col: 16, offset: 2738},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 96, col: 1, offset: 2758},
			expr: &actionExpr{
				pos: position{line: 96, col: 20, offset: 2777},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 96, col: 20, offset: 2777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 96, col: 20, offset: 2777},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 41, offset: 2798},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 96, col: 49, offset: 2806},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 50, offset: 2807},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 75, offset: 2832},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 100, col: 1, offset: 2916},
			expr: &seqExpr{
				pos: position{line: 100, col: 26, offset: 2941},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 26, offset: 2941},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 100, col: 32, offset: 2947},
						expr: &ruleRefExpr{
							pos:  position{line: 100, col: 32, offset: 2947},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 39, offset: 2954},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 102, col: 1, offset: 2961},
			expr: &actionExpr{
				pos: position{line: 102, col: 27, offset: 2987},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 102, col: 27, offset: 2987},
					expr: &oneOrMoreExpr{
						pos: position{line: 102, col: 28, offset: 2988},
						expr: &seqExpr{
							pos: position{line: 102, col: 29, offset: 2989},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 29, offset: 2989},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 30, offset: 2990},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 102, col: 51, offset: 3011,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 109, col: 1, offset: 3184},
			expr: &actionExpr{
				pos: position{line: 109, col: 19, offset: 3202},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 109, col: 19, offset: 3202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 109, col: 19, offset: 3202},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 109, col: 23, offset: 3206},
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 23, offset: 3206},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 30, offset: 3213},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 37, offset: 3220},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 52, offset: 3235},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 56, offset: 3239},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 56, offset: 3239},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 74, offset: 3257},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3270},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 3271},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 30, offset: 3291},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3315},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 18, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 18, offset: 3324},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3352},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3353},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3353},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3373},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3397},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 19, offset: 3407},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 19, offset: 3407},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 117, col: 1, offset: 3512},
			expr: &choiceExpr{
				pos: position{line: 117, col: 20, offset: 3531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 20, offset: 3531},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 117, col: 48, offset: 3559},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 119, col: 1, offset: 3591},
			expr: &actionExpr{
				pos: position{line: 119, col: 30, offset: 3620},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 119, col: 30, offset: 3620},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 30, offset: 3620},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 30, offset: 3620},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 119, col: 37, offset: 3627},
							expr: &litMatcher{
								pos:        position{line: 119, col: 38, offset: 3628},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 42, offset: 3632},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 119, col: 51, offset: 3641},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 51, offset: 3641},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 68, offset: 3658},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 123, col: 1, offset: 3732},
			expr: &actionExpr{
				pos: position{line: 123, col: 33, offset: 3764},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 33, offset: 3764},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 33, offset: 3764},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 33, offset: 3764},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 40, offset: 3771},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 51, offset: 3782},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 59, offset: 3790},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 75, offset: 3806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 127, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 127, col: 19, offset: 3907},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 127, col: 19, offset: 3907},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 19, offset: 3907},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 19, offset: 3907},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 26, offset: 3914},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 3924},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 56, offset: 3944},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 62, offset: 3950},
								expr: &ruleRefExpr{
									pos:  position{line: 127, col: 63, offset: 3951},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 85, offset: 3973},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 85, offset: 3973},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 92, offset: 3980},
							expr: &litMatcher{
								pos:        position{line: 127, col: 92, offset: 3980},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 97, offset: 3985},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 97, offset: 3985},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 132, col: 1, offset: 4135},
			expr: &actionExpr{
				pos: position{line: 132, col: 23, offset: 4157},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 132, col: 23, offset: 4157},
					expr: &charClassMatcher{
						pos:        position{line: 132, col: 23, offset: 4157},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 136, col: 1, offset: 4208},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 4231},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 4231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 24, offset: 4231},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 28, offset: 4235},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 136, col: 35, offset: 4242},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 136, col: 36, offset: 4243},
									expr: &charClassMatcher{
										pos:        position{line: 136, col: 36, offset: 4243},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 4, offset: 4292},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 144, col: 1, offset: 4459},
			expr: &actionExpr{
				pos: position{line: 144, col: 21, offset: 4479},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 144, col: 21, offset: 4479},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 144, col: 21, offset: 4479},
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 21, offset: 4479},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 144, col: 28, offset: 4486},
							expr: &litMatcher{
								pos:        position{line: 144, col: 29, offset: 4487},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 33, offset: 4491},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 145, col: 9, offset: 4511},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 145, col: 10, offset: 4512},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 145, col: 10, offset: 4512},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 10, offset: 4512},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 21, offset: 4523},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 45, offset: 4547},
													expr: &litMatcher{
														pos:        position{line: 145, col: 45, offset: 4547},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 50, offset: 4552},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 58, offset: 4560},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 59, offset: 4561},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 82, offset: 4584},
													expr: &litMatcher{
														pos:        position{line: 145, col: 82, offset: 4584},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 87, offset: 4589},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 97, offset: 4599},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 98, offset: 4600},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 147, col: 15, offset: 4719},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 147, col: 15, offset: 4719},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 15, offset: 4719},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 24, offset: 4728},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 46, offset: 4750},
													expr: &litMatcher{
														pos:        position{line: 147, col: 46, offset: 4750},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 51, offset: 4755},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 61, offset: 4765},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 62, offset: 4766},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 13, offset: 4877},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 154, col: 1, offset: 5012},
			expr: &choiceExpr{
				pos: position{line: 154, col: 27, offset: 5038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 27, offset: 5038},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 154, col: 27, offset: 5038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 154, col: 27, offset: 5038},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 32, offset: 5043},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 39, offset: 5050},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 39, offset: 5050},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 5100},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 5100},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 5100},
									expr: &litMatcher{
										pos:        position{line: 156, col: 5, offset: 5100},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 11, offset: 5106},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 5113},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 5113},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 156, col: 29, offset: 5124},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 29, offset: 5124},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 156, col: 36, offset: 5131},
									expr: &litMatcher{
										pos:        position{line: 156, col: 37, offset: 5132},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 160, col: 1, offset: 5176},
			expr: &actionExpr{
				pos: position{line: 160, col: 25, offset: 5200},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 160, col: 25, offset: 5200},
					expr: &charClassMatcher{
						pos:        position{line: 160, col: 25, offset: 5200},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 164, col: 1, offset: 5250},
			expr: &actionExpr{
				pos: position{line: 164, col: 27, offset: 5276},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 164, col: 27, offset: 5276},
					expr: &charClassMatcher{
						pos:        position{line: 164, col: 27, offset: 5276},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 171, col: 1, offset: 5436},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5460},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 171, col: 25, offset: 5460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 171, col: 25, offset: 5460},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 29, offset: 5464},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 35, offset: 5470},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 171, col: 50, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 9, offset: 5499},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 15, offset: 5505},
								expr: &actionExpr{
									pos: position{line: 172, col: 16, offset: 5506},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 172, col: 17, offset: 5507},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 172, col: 17, offset: 5507},
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 17, offset: 5507},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 172, col: 24, offset: 5514},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 31, offset: 5521},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 174, col: 13, offset: 5597},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 13, offset: 5597},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 20, offset: 5604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 181, col: 1, offset: 5851},
			expr: &actionExpr{
				pos: position{line: 181, col: 18, offset: 5868},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 181, col: 18, offset: 5868},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 181, col: 18, offset: 5868},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 28, offset: 5878},
							expr: &charClassMatcher{
								pos:        position{line: 181, col: 29, offset: 5879},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 185, col: 1, offset: 5931},
			expr: &actionExpr{
				pos: position{line: 185, col: 30, offset: 5960},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 185, col: 30, offset: 5960},
					expr: &charClassMatcher{
						pos:        position{line: 185, col: 30, offset: 5960},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 189, col: 1, offset: 6009},
			expr: &choiceExpr{
				pos: position{line: 189, col: 19, offset: 6027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 19, offset: 6027},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 189, col: 19, offset: 6027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 19, offset: 6027},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 24, offset: 6032},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 6038},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 45, offset: 6053},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 49, offset: 6057},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 49, offset: 6057},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 56, offset: 6064},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 6126},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 6126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 5, offset: 6126},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 9, offset: 6130},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 15, offset: 6136},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 30, offset: 6151},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 35, offset: 6156},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 35, offset: 6156},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 42, offset: 6163},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 195, col: 1, offset: 6226},
			expr: &actionExpr{
				pos: position{line: 195, col: 26, offset: 6251},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 195, col: 26, offset: 6251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 26, offset: 6251},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 30, offset: 6255},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 36, offset: 6261},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 51, offset: 6276},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &actionExpr{
				pos: position{line: 199, col: 15, offset: 6360},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 199, col: 15, offset: 6360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 15, offset: 6360},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 21, offset: 6366},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 22, offset: 6367},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 199, col: 41, offset: 6386},
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 41, offset: 6386},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 203, col: 1, offset: 6460},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 6480},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 6480},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 203, col: 21, offset: 6480},
							expr: &choiceExpr{
								pos: position{line: 203, col: 23, offset: 6482},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 203, col: 23, offset: 6482},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 29, offset: 6488},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 35, offset: 6494},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6571},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 204, col: 11, offset: 6577},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 204, col: 11, offset: 6577},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6599},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6624},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6648},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6677},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6706},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6734},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6762},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6800},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6829},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6867},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 219, col: 1, offset: 7055},
			expr: &choiceExpr{
				pos: position{line: 219, col: 24, offset: 7078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 24, offset: 7078},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 42, offset: 7096},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 221, col: 1, offset: 7115},
			expr: &choiceExpr{
				pos: position{line: 221, col: 14, offset: 7128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 14, offset: 7128},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 221, col: 14, offset: 7128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 221, col: 14, offset: 7128},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 19, offset: 7133},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 23, offset: 7137},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 221, col: 27, offset: 7141},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 221, col: 32, offset: 7146},
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 32, offset: 7146},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 39, offset: 7153},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7208},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 7208},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 5, offset: 7208},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 10, offset: 7213},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 14, offset: 7217},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 7221},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 23, offset: 7226},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7226},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 30, offset: 7233},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7289},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7308},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7308},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7313},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7317},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7321},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7326},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7326},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7609},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7625},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7625},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7629},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7636},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 49, offset: 7657},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7719},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7742},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7742},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7742},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7750},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7750},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 243, col: 1, offset: 7983},
			expr: &actionExpr{
				pos: position{line: 243, col: 16, offset: 7998},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 243, col: 16, offset: 7998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 16, offset: 7998},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 21, offset: 8003},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 243, col: 27, offset: 8009},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 243, col: 27, offset: 8009},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 243, col: 27, offset: 8009},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 243, col: 36, offset: 8018},
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 36, offset: 8018},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 4, offset: 8067},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 8, offset: 8071},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 8, offset: 8071},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 8078},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 249, col: 1, offset: 8138},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8158},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8158},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 249, col: 33, offset: 8170},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 33, offset: 8170},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 40, offset: 8177},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 253, col: 1, offset: 8233},
			expr: &actionExpr{
				pos: position{line: 253, col: 30, offset: 8262},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 253, col: 30, offset: 8262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 253, col: 30, offset: 8262},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 39, offset: 8271},
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 39, offset: 8271},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 46, offset: 8278},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 258, col: 1, offset: 8424},
			expr: &actionExpr{
				pos: position{line: 258, col: 30, offset: 8453},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 258, col: 30, offset: 8453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 30, offset: 8453},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 34, offset: 8457},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 37, offset: 8460},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 53, offset: 8476},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 57, offset: 8480},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 57, offset: 8480},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 64, offset: 8487},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 263, col: 1, offset: 8647},
			expr: &actionExpr{
				pos: position{line: 263, col: 21, offset: 8667},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 263, col: 21, offset: 8667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 21, offset: 8667},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8683},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 14, offset: 8692},
								expr: &actionExpr{
									pos: position{line: 264, col: 15, offset: 8693},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 264, col: 15, offset: 8693},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 15, offset: 8693},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 19, offset: 8697},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 24, offset: 8702},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 25, offset: 8703},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 8759},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 12, offset: 8766},
								expr: &actionExpr{
									pos: position{line: 265, col: 13, offset: 8767},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 265, col: 13, offset: 8767},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 265, col: 13, offset: 8767},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 17, offset: 8771},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 265, col: 22, offset: 8776},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 23, offset: 8777},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8825},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 9, offset: 8829},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 9, offset: 8829},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 16, offset: 8836},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 271, col: 1, offset: 8992},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 9010},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 9010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 19, offset: 9010},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 23, offset: 9014},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 34, offset: 9025},
								expr: &ruleRefExpr{
									pos:  position{line: 271, col: 35, offset: 9026},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 54, offset: 9045},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 58, offset: 9049},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 58, offset: 9049},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 271, col: 65, offset: 9056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 275, col: 1, offset: 9132},
			expr: &choiceExpr{
				pos: position{line: 275, col: 21, offset: 9152},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 21, offset: 9152},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 49, offset: 9180},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 277, col: 1, offset: 9212},
			expr: &actionExpr{
				pos: position{line: 277, col: 30, offset: 9241},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 277, col: 30, offset: 9241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 30, offset: 9241},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 35, offset: 9246},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 49, offset: 9260},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 53, offset: 9264},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 59, offset: 9270},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 60, offset: 9271},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 277, col: 77, offset: 9288},
							expr: &litMatcher{
								pos:        position{line: 277, col: 77, offset: 9288},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 82, offset: 9293},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 82, offset: 9293},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 281, col: 1, offset: 9396},
			expr: &actionExpr{
				pos: position{line: 281, col: 33, offset: 9428},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 33, offset: 9428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 281, col: 33, offset: 9428},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 38, offset: 9433},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 52, offset: 9447},
							expr: &litMatcher{
								pos:        position{line: 281, col: 52, offset: 9447},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 57, offset: 9452},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 57, offset: 9452},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 285, col: 1, offset: 9544},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 9560},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 9560},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 285, col: 17, offset: 9560},
							expr: &litMatcher{
								pos:        position{line: 285, col: 18, offset: 9561},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 26, offset: 9569},
							expr: &litMatcher{
								pos:        position{line: 285, col: 27, offset: 9570},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 35, offset: 9578},
							expr: &litMatcher{
								pos:        position{line: 285, col: 36, offset: 9579},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 46, offset: 9589},
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 48, offset: 9591},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 48, offset: 9591},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 56, offset: 9599},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 61, offset: 9604},
								expr: &charClassMatcher{
									pos:        position{line: 285, col: 61, offset: 9604},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 75, offset: 9618},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 75, offset: 9618},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 289, col: 1, offset: 9665},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9683},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 289, col: 19, offset: 9683},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 289, col: 26, offset: 9690},
						expr: &charClassMatcher{
							pos:        position{line: 289, col: 26, offset: 9690},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 293, col: 1, offset: 9745},
			expr: &actionExpr{
				pos: position{line: 293, col: 29, offset: 9773},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 293, col: 29, offset: 9773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 29, offset: 9773},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 293, col: 36, offset: 9780},
								expr: &charClassMatcher{
									pos:        position{line: 293, col: 36, offset: 9780},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 293, col: 50, offset: 9794},
							expr: &litMatcher{
								pos:        position{line: 293, col: 51, offset: 9795},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 297, col: 1, offset: 9965},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9985},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9985},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 36, offset: 10000},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 36, offset: 10000},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 43, offset: 10007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 301, col: 1, offset: 10077},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 10096},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 10096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 10096},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 29, offset: 10105},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 29, offset: 10105},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 36, offset: 10112},
							expr: &litMatcher{
								pos:        position{line: 301, col: 36, offset: 10112},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 41, offset: 10117},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 48, offset: 10124},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 49, offset: 10125},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 66, offset: 10142},
							expr: &litMatcher{
								pos:        position{line: 301, col: 66, offset: 10142},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 71, offset: 10147},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 77, offset: 10153},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 78, offset: 10154},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 95, offset: 10171},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 99, offset: 10175},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 99, offset: 10175},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 106, offset: 10182},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 305, col: 1, offset: 10255},
			expr: &actionExpr{
				pos: position{line: 305, col: 20, offset: 10274},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 305, col: 20, offset: 10274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 20, offset: 10274},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 29, offset: 10283},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 29, offset: 10283},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 36, offset: 10290},
							expr: &litMatcher{
								pos:        position{line: 305, col: 36, offset: 10290},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 10295},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 48, offset: 10302},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 49, offset: 10303},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 66, offset: 10320},
							expr: &litMatcher{
								pos:        position{line: 305, col: 66, offset: 10320},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 71, offset: 10325},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 77, offset: 10331},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 78, offset: 10332},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 95, offset: 10349},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 99, offset: 10353},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 99, offset: 10353},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 106, offset: 10360},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 309, col: 1, offset: 10451},
			expr: &actionExpr{
				pos: position{line: 309, col: 19, offset: 10469},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 309, col: 20, offset: 10470},
					expr: &charClassMatcher{
						pos:        position{line: 309, col: 20, offset: 10470},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 313, col: 1, offset: 10523},
			expr: &actionExpr{
				pos: position{line: 313, col: 21, offset: 10543},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 313, col: 21, offset: 10543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 21, offset: 10543},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 25, offset: 10547},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 31, offset: 10553},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 32, offset: 10554},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 51, offset: 10573},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 326, col: 1, offset: 11054},
			expr: &actionExpr{
				pos: position{line: 326, col: 20, offset: 11073},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 20, offset: 11073},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 326, col: 27, offset: 11080},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 27, offset: 11080},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 44, offset: 11097},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 333, col: 1, offset: 11366},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11384},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 333, col: 19, offset: 11384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 19, offset: 11384},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 23, offset: 11388},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 28, offset: 11393},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 28, offset: 11393},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 48, offset: 11413},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 337, col: 1, offset: 11473},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 11495},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 11495},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 11495},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 11496},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 11501},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 337, col: 35, offset: 11507},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 337, col: 35, offset: 11507},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 35, offset: 11507},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 346, col: 1, offset: 11823},
			expr: &actionExpr{
				pos: position{line: 346, col: 24, offset: 11846},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 346, col: 24, offset: 11846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 24, offset: 11846},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 28, offset: 11850},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 346, col: 34, offset: 11856},
								expr: &choiceExpr{
									pos: position{line: 346, col: 36, offset: 11858},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 36, offset: 11858},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 346, col: 58, offset: 11880},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 79, offset: 11901},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 350, col: 1, offset: 11936},
			expr: &actionExpr{
				pos: position{line: 350, col: 24, offset: 11959},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 350, col: 24, offset: 11959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 24, offset: 11959},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 28, offset: 11963},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 350, col: 34, offset: 11969},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 34, offset: 11969},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 34, offset: 11969},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 356, col: 1, offset: 12082},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 12103},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 12103},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 12103},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 12107},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 356, col: 30, offset: 12111},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 356, col: 30, offset: 12111},
									expr: &charClassMatcher{
										pos:        position{line: 356, col: 30, offset: 12111},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 362, col: 1, offset: 12218},
			expr: &actionExpr{
				pos: position{line: 362, col: 25, offset: 12242},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 362, col: 25, offset: 12242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 362, col: 25, offset: 12242},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 362, col: 36, offset: 12253},
								expr: &ruleRefExpr{
									pos:  position{line: 362, col: 37, offset: 12254},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 362, col: 56, offset: 12273},
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 56, offset: 12273},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 67, offset: 12284},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 370, col: 1, offset: 12551},
			expr: &actionExpr{
				pos: position{line: 370, col: 17, offset: 12567},
				run: (*parser).callonQuotedString1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 17, offset: 12567},
					label: "qs",
					expr: &choiceExpr{
						pos: position{line: 370, col: 21, offset: 12571},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 370, col: 21, offset: 12571},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 370, col: 42, offset: 12592},
								name: "DoubleQuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 374, col: 1, offset: 12640},
			expr: &actionExpr{
				pos: position{line: 374, col: 23, offset: 12662},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 374, col: 23, offset: 12662},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 23, offset: 12662},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 28, offset: 12667},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 37, offset: 12676},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 64, offset: 12703},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 378, col: 1, offset: 12814},
			expr: &actionExpr{
				pos: position{line: 378, col: 31, offset: 12844},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 31, offset: 12844},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 378, col: 41, offset: 12854},
						expr: &ruleRefExpr{
							pos:  position{line: 378, col: 41, offset: 12854},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 383, col: 1, offset: 13019},
			expr: &actionExpr{
				pos: position{line: 383, col: 30, offset: 13048},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 383, col: 30, offset: 13048},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 384, col: 9, offset: 13067},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 384, col: 9, offset: 13067},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 385, col: 11, offset: 13113},
								expr: &ruleRefExpr{
									pos:  position{line: 385, col: 11, offset: 13113},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 386, col: 11, offset: 13131},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 387, col: 11, offset: 13153},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 388, col: 11, offset: 13176},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 389, col: 11, offset: 13202},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 13231},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 13247},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 13280},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 13300},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 13322},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 11, offset: 13344},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13369},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 397, col: 11, offset: 13396},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 397, col: 11, offset: 13396},
										expr: &litMatcher{
											pos:        position{line: 397, col: 12, offset: 13397},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 17, offset: 13402},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 398, col: 11, offset: 13427},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 399, col: 11, offset: 13457},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 403, col: 1, offset: 13527},
			expr: &choiceExpr{
				pos: position{line: 403, col: 41, offset: 13567},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 403, col: 41, offset: 13567},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 403, col: 52, offset: 13578},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 403, col: 52, offset: 13578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 52, offset: 13578},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 403, col: 56, offset: 13582},
									expr: &litMatcher{
										pos:        position{line: 403, col: 57, offset: 13583},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 407, col: 1, offset: 13646},
			expr: &actionExpr{
				pos: position{line: 407, col: 23, offset: 13668},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 407, col: 23, offset: 13668},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 23, offset: 13668},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 29, offset: 13674},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 38, offset: 13683},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 407, col: 65, offset: 13710},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 412, col: 1, offset: 13824},
			expr: &actionExpr{
				pos: position{line: 412, col: 31, offset: 13854},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 31, offset: 13854},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 412, col: 41, offset: 13864},
						expr: &ruleRefExpr{
							pos:  position{line: 412, col: 41, offset: 13864},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 417, col: 1, offset: 14029},
			expr: &actionExpr{
				pos: position{line: 417, col: 30, offset: 14058},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 417, col: 30, offset: 14058},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 418, col: 9, offset: 14077},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 418, col: 9, offset: 14077},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 420, col: 11, offset: 14142},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 14164},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 14187},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14213},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14242},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14258},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14291},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14311},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14333},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14355},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14380},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 431, col: 11, offset: 14407},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 431, col: 11, offset: 14407},
										expr: &litMatcher{
											pos:        position{line: 431, col: 12, offset: 14408},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 431, col: 18, offset: 14414},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 14439},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14469},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 437, col: 1, offset: 14547},
			expr: &actionExpr{
				pos: position{line: 437, col: 41, offset: 14587},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 437, col: 42, offset: 14588},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 437, col: 42, offset: 14588},
							val:        "[^\\r\\n`]",
							chars:      []rune{'\r', '\n', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 437, col: 53, offset: 14599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 53, offset: 14599},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 437, col: 57, offset: 14603},
									expr: &litMatcher{
										pos:        position{line: 437, col: 58, offset: 14604},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 444, col: 1, offset: 14776},
			expr: &actionExpr{
				pos: position{line: 444, col: 12, offset: 14787},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 444, col: 12, offset: 14787},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 444, col: 12, offset: 14787},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 444, col: 23, offset: 14798},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 24, offset: 14799},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 5, offset: 14817},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 445, col: 12, offset: 14824},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 445, col: 12, offset: 14824},
									expr: &litMatcher{
										pos:        position{line: 445, col: 13, offset: 14825},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 449, col: 5, offset: 14920},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 453, col: 5, offset: 15076},
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 5, offset: 15076},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 12, offset: 15083},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 19, offset: 15090},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 453, col: 34, offset: 15105},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 38, offset: 15109},
								expr: &ruleRefExpr{
									pos:  position{line: 453, col: 38, offset: 15109},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 56, offset: 15127},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 457, col: 1, offset: 15237},
			expr: &actionExpr{
				pos: position{line: 457, col: 18, offset: 15254},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 457, col: 18, offset: 15254},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 457, col: 27, offset: 15263},
						expr: &seqExpr{
							pos: position{line: 457, col: 28, offset: 15264},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 457, col: 28, offset: 15264},
									expr: &ruleRefExpr{
										pos:  position{line: 457, col: 29, offset: 15265},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 457, col: 37, offset: 15273},
									expr: &ruleRefExpr{
										pos:  position{line: 457, col: 38, offset: 15274},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 457, col: 54, offset: 15290},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 461, col: 1, offset: 15415},
			expr: &actionExpr{
				pos: position{line: 461, col: 17, offset: 15431},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 461, col: 17, offset: 15431},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 461, col: 26, offset: 15440},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 461, col: 26, offset: 15440},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 462, col: 11, offset: 15456},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 463, col: 11, offset: 15502},
								expr: &ruleRefExpr{
									pos:  position{line: 463, col: 11, offset: 15502},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 15521},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 15547},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 466, col: 11, offset: 15576},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 467, col: 11, offset: 15598},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 15621},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 15637},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 15663},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 15687},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 15709},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 15742},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 480, col: 1, offset: 15900},
			expr: &seqExpr{
				pos: position{line: 480, col: 31, offset: 15930},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 480, col: 31, offset: 15930},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 480, col: 41, offset: 15940},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 485, col: 1, offset: 16056},
			expr: &actionExpr{
				pos: position{line: 485, col: 19, offset: 16074},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 485, col: 19, offset: 16074},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 19, offset: 16074},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 25, offset: 16080},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 485, col: 40, offset: 16095},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 485, col: 45, offset: 16100},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 52, offset: 16107},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 68, offset: 16123},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 75, offset: 16130},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 489, col: 1, offset: 16249},
			expr: &actionExpr{
				pos: position{line: 489, col: 20, offset: 16268},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 489, col: 20, offset: 16268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 489, col: 20, offset: 16268},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 26, offset: 16274},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 489, col: 41, offset: 16289},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 45, offset: 16293},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 52, offset: 16300},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 68, offset: 16316},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 75, offset: 16323},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 493, col: 1, offset: 16443},
			expr: &actionExpr{
				pos: position{line: 493, col: 18, offset: 16460},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 493, col: 19, offset: 16461},
					expr: &charClassMatcher{
						pos:        position{line: 493, col: 19, offset: 16461},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 497, col: 1, offset: 16514},
			expr: &actionExpr{
				pos: position{line: 497, col: 19, offset: 16532},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 497, col: 19, offset: 16532},
					expr: &charClassMatcher{
						pos:        position{line: 497, col: 19, offset: 16532},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 501, col: 1, offset: 16584},
			expr: &actionExpr{
				pos: position{line: 501, col: 24, offset: 16607},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 501, col: 24, offset: 16607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 24, offset: 16607},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 28, offset: 16611},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 501, col: 34, offset: 16617},
								expr: &ruleRefExpr{
									pos:  position{line: 501, col: 35, offset: 16618},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 501, col: 54, offset: 16637},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 508, col: 1, offset: 16826},
			expr: &actionExpr{
				pos: position{line: 508, col: 18, offset: 16843},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 508, col: 18, offset: 16843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 508, col: 18, offset: 16843},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 508, col: 24, offset: 16849},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 508, col: 24, offset: 16849},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 508, col: 24, offset: 16849},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 508, col: 36, offset: 16861},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 508, col: 42, offset: 16867},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 508, col: 56, offset: 16881},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 508, col: 74, offset: 16899},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 8, offset: 17048},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 8, offset: 17048},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 510, col: 15, offset: 17055},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 514, col: 1, offset: 17111},
			expr: &actionExpr{
				pos: position{line: 514, col: 26, offset: 17136},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 514, col: 26, offset: 17136},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 26, offset: 17136},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 30, offset: 17140},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 514, col: 36, offset: 17146},
								expr: &choiceExpr{
									pos: position{line: 514, col: 37, offset: 17147},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 514, col: 37, offset: 17147},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 514, col: 59, offset: 17169},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 514, col: 80, offset: 17190},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 514, col: 99, offset: 17209},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 518, col: 1, offset: 17285},
			expr: &actionExpr{
				pos: position{line: 518, col: 24, offset: 17308},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 518, col: 24, offset: 17308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 24, offset: 17308},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 33, offset: 17317},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 40, offset: 17324},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 518, col: 66, offset: 17350},
							expr: &litMatcher{
								pos:        position{line: 518, col: 66, offset: 17350},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 522, col: 1, offset: 17413},
			expr: &actionExpr{
				pos: position{line: 522, col: 29, offset: 17441},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 522, col: 29, offset: 17441},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 522, col: 29, offset: 17441},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 522, col: 36, offset: 17448},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 522, col: 36, offset: 17448},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 523, col: 11, offset: 17566},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 524, col: 11, offset: 17603},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 11, offset: 17630},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 526, col: 11, offset: 17663},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 17696},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17724},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 528, col: 31, offset: 17744},
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 31, offset: 17744},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 528, col: 39, offset: 17752},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 528, col: 39, offset: 17752},
									expr: &litMatcher{
										pos:        position{line: 528, col: 40, offset: 17753},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 528, col: 46, offset: 17759},
									expr: &litMatcher{
										pos:        position{line: 528, col: 47, offset: 17760},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 532, col: 1, offset: 17796},
			expr: &actionExpr{
				pos: position{line: 532, col: 23, offset: 17818},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 532, col: 23, offset: 17818},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 23, offset: 17818},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 532, col: 30, offset: 17825},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 532, col: 30, offset: 17825},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 47, offset: 17842},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 533, col: 5, offset: 17865},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 533, col: 12, offset: 17872},
								expr: &actionExpr{
									pos: position{line: 533, col: 13, offset: 17873},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 533, col: 13, offset: 17873},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 533, col: 13, offset: 17873},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 533, col: 17, offset: 17877},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 533, col: 24, offset: 17884},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 533, col: 24, offset: 17884},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 533, col: 41, offset: 17901},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 539, col: 1, offset: 18045},
			expr: &actionExpr{
				pos: position{line: 539, col: 29, offset: 18073},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 539, col: 29, offset: 18073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 29, offset: 18073},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 34, offset: 18078},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 539, col: 41, offset: 18085},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 539, col: 41, offset: 18085},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 58, offset: 18102},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 18125},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 540, col: 12, offset: 18132},
								expr: &actionExpr{
									pos: position{line: 540, col: 13, offset: 18133},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 540, col: 13, offset: 18133},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 540, col: 13, offset: 18133},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 540, col: 17, offset: 18137},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 540, col: 24, offset: 18144},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 540, col: 24, offset: 18144},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 540, col: 41, offset: 18161},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 542, col: 9, offset: 18216},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 546, col: 1, offset: 18310},
			expr: &actionExpr{
				pos: position{line: 546, col: 19, offset: 18328},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 546, col: 19, offset: 18328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 19, offset: 18328},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 26, offset: 18335},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 546, col: 34, offset: 18343},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 39, offset: 18348},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 44, offset: 18353},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 550, col: 1, offset: 18445},
			expr: &actionExpr{
				pos: position{line: 550, col: 25, offset: 18469},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 550, col: 25, offset: 18469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 25, offset: 18469},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 30, offset: 18474},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 37, offset: 18481},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 45, offset: 18489},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 50, offset: 18494},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 55, offset: 18499},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 63, offset: 18507},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 554, col: 1, offset: 18596},
			expr: &actionExpr{
				pos: position{line: 554, col: 20, offset: 18615},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 554, col: 20, offset: 18615},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 554, col: 32, offset: 18627},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 558, col: 1, offset: 18726},
			expr: &actionExpr{
				pos: position{line: 558, col: 26, offset: 18751},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 558, col: 26, offset: 18751},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 558, col: 26, offset: 18751},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 31, offset: 18756},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 43, offset: 18768},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 558, col: 51, offset: 18776},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 562, col: 1, offset: 18872},
			expr: &actionExpr{
				pos: position{line: 562, col: 23, offset: 18894},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 562, col: 23, offset: 18894},
					expr: &charClassMatcher{
						pos:        position{line: 562, col: 23, offset: 18894},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 566, col: 1, offset: 18943},
			expr: &actionExpr{
				pos: position{line: 566, col: 23, offset: 18965},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 566, col: 23, offset: 18965},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 566, col: 24, offset: 18966},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 566, col: 24, offset: 18966},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 566, col: 34, offset: 18976},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 42, offset: 18984},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 48, offset: 18990},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 566, col: 73, offset: 19015},
							expr: &litMatcher{
								pos:        position{line: 566, col: 73, offset: 19015},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 570, col: 1, offset: 19168},
			expr: &actionExpr{
				pos: position{line: 570, col: 28, offset: 19195},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 570, col: 28, offset: 19195},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 570, col: 28, offset: 19195},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 35, offset: 19202},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 570, col: 54, offset: 19221},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 54, offset: 19221},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 570, col: 62, offset: 19229},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 570, col: 62, offset: 19229},
									expr: &litMatcher{
										pos:        position{line: 570, col: 63, offset: 19230},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 570, col: 69, offset: 19236},
									expr: &litMatcher{
										pos:        position{line: 570, col: 70, offset: 19237},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 574, col: 1, offset: 19273},
			expr: &actionExpr{
				pos: position{line: 574, col: 22, offset: 19294},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 574, col: 22, offset: 19294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 574, col: 22, offset: 19294},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 29, offset: 19301},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 5, offset: 19316},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 575, col: 12, offset: 19323},
								expr: &actionExpr{
									pos: position{line: 575, col: 13, offset: 19324},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 575, col: 13, offset: 19324},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 575, col: 13, offset: 19324},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 575, col: 17, offset: 19328},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 575, col: 24, offset: 19335},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 581, col: 1, offset: 19472},
			expr: &choiceExpr{
				pos: position{line: 581, col: 13, offset: 19484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 581, col: 13, offset: 19484},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 581, col: 13, offset: 19484},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 581, col: 18, offset: 19489},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 581, col: 18, offset: 19489},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 30, offset: 19501},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 19571},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 19571},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 583, col: 5, offset: 19571},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 9, offset: 19575},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 583, col: 14, offset: 19580},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 14, offset: 19580},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 26, offset: 19592},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 587, col: 1, offset: 19664},
			expr: &actionExpr{
				pos: position{line: 587, col: 16, offset: 19679},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 587, col: 16, offset: 19679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 16, offset: 19679},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 587, col: 23, offset: 19686},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 587, col: 23, offset: 19686},
									expr: &litMatcher{
										pos:        position{line: 587, col: 24, offset: 19687},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 590, col: 5, offset: 19744},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 598, col: 1, offset: 19994},
			expr: &zeroOrMoreExpr{
				pos: position{line: 598, col: 24, offset: 20017},
				expr: &choiceExpr{
					pos: position{line: 598, col: 25, offset: 20018},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 598, col: 25, offset: 20018},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 41, offset: 20034},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 600, col: 1, offset: 20056},
			expr: &actionExpr{
				pos: position{line: 600, col: 21, offset: 20076},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 600, col: 21, offset: 20076},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 600, col: 21, offset: 20076},
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 22, offset: 20077},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 26, offset: 20081},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 600, col: 35, offset: 20090},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 600, col: 35, offset: 20090},
									expr: &charClassMatcher{
										pos:        position{line: 600, col: 35, offset: 20090},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 12, offset: 20154},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 609, col: 1, offset: 20360},
			expr: &actionExpr{
				pos: position{line: 609, col: 21, offset: 20380},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 609, col: 21, offset: 20380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 21, offset: 20380},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 29, offset: 20388},
								expr: &choiceExpr{
									pos: position{line: 609, col: 30, offset: 20389},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 609, col: 30, offset: 20389},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 609, col: 53, offset: 20412},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 609, col: 74, offset: 20433},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 609, col: 74, offset: 20433,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 107, offset: 20466},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 613, col: 1, offset: 20541},
			expr: &actionExpr{
				pos: position{line: 613, col: 25, offset: 20565},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 613, col: 25, offset: 20565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 25, offset: 20565},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 33, offset: 20573},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 613, col: 38, offset: 20578},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 38, offset: 20578},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 613, col: 78, offset: 20618},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 617, col: 1, offset: 20687},
			expr: &actionExpr{
				pos: position{line: 617, col: 23, offset: 20709},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 617, col: 23, offset: 20709},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 617, col: 23, offset: 20709},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 31, offset: 20717},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 617, col: 36, offset: 20722},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 36, offset: 20722},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 617, col: 76, offset: 20762},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 624, col: 1, offset: 20933},
			expr: &choiceExpr{
				pos: position{line: 624, col: 18, offset: 20950},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 18, offset: 20950},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 624, col: 18, offset: 20950},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 27, offset: 20959},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 9, offset: 21018},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 626, col: 9, offset: 21018},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 626, col: 15, offset: 21024},
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 16, offset: 21025},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 630, col: 1, offset: 21121},
			expr: &actionExpr{
				pos: position{line: 630, col: 22, offset: 21142},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 630, col: 22, offset: 21142},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 630, col: 22, offset: 21142},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 23, offset: 21143},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 631, col: 5, offset: 21152},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 6, offset: 21153},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 632, col: 5, offset: 21169},
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 6, offset: 21170},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 633, col: 5, offset: 21193},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 6, offset: 21194},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 634, col: 5, offset: 21221},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 6, offset: 21222},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 635, col: 5, offset: 21251},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 6, offset: 21252},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 5, offset: 21279},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 6, offset: 21280},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 637, col: 5, offset: 21306},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 6, offset: 21307},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 638, col: 5, offset: 21329},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 6, offset: 21330},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 5, offset: 21350},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 6, offset: 21351},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 21379},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 640, col: 11, offset: 21385},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 640, col: 11, offset: 21385},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 640, col: 20, offset: 21394},
										expr: &ruleRefExpr{
											pos:  position{line: 640, col: 21, offset: 21395},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 12, offset: 21496},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 646, col: 1, offset: 21539},
			expr: &seqExpr{
				pos: position{line: 646, col: 25, offset: 21563},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 646, col: 25, offset: 21563},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 646, col: 29, offset: 21567},
						expr: &ruleRefExpr{
							pos:  position{line: 646, col: 29, offset: 21567},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 36, offset: 21574},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 648, col: 1, offset: 21648},
			expr: &actionExpr{
				pos: position{line: 648, col: 29, offset: 21676},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 648, col: 29, offset: 21676},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 648, col: 29, offset: 21676},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 50, offset: 21697},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 58, offset: 21705},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 652, col: 1, offset: 21815},
			expr: &actionExpr{
				pos: position{line: 652, col: 29, offset: 21843},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 29, offset: 21843},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 29, offset: 21843},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 30, offset: 21844},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 21854},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 653, col: 14, offset: 21863},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 653, col: 14, offset: 21863},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 11, offset: 21889},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 655, col: 11, offset: 21914},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 21969},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 657, col: 11, offset: 21992},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 658, col: 11, offset: 22020},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 22050},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22117},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22169},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22194},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22227},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22254},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22292},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22318},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 674, col: 1, offset: 22488},
			expr: &actionExpr{
				pos: position{line: 674, col: 20, offset: 22507},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 674, col: 20, offset: 22507},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 20, offset: 22507},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 674, col: 31, offset: 22518},
								expr: &ruleRefExpr{
									pos:  position{line: 674, col: 32, offset: 22519},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 45, offset: 22532},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 53, offset: 22540},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 76, offset: 22563},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 85, offset: 22572},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 678, col: 1, offset: 22716},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 22747},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 22747},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 679, col: 5, offset: 22747},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 5, offset: 22747},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 12, offset: 22754},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 681, col: 9, offset: 22819},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 681, col: 9, offset: 22819},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 681, col: 9, offset: 22819},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 681, col: 9, offset: 22819},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 681, col: 16, offset: 22826},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 681, col: 16, offset: 22826},
															expr: &litMatcher{
																pos:        position{line: 681, col: 17, offset: 22827},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 685, col: 9, offset: 22931},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 704, col: 11, offset: 23667},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 704, col: 11, offset: 23667},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 704, col: 11, offset: 23667},
													expr: &charClassMatcher{
														pos:        position{line: 704, col: 12, offset: 23668},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 704, col: 20, offset: 23676},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 706, col: 13, offset: 23789},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 706, col: 13, offset: 23789},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 706, col: 14, offset: 23790},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 706, col: 21, offset: 23797},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 708, col: 13, offset: 23913},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 708, col: 13, offset: 23913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 708, col: 14, offset: 23914},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 708, col: 21, offset: 23921},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 710, col: 13, offset: 24037},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 710, col: 13, offset: 24037},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 710, col: 13, offset: 24037},
													expr: &charClassMatcher{
														pos:        position{line: 710, col: 14, offset: 24038},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 710, col: 22, offset: 24046},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 712, col: 13, offset: 24162},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 712, col: 13, offset: 24162},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 712, col: 13, offset: 24162},
													expr: &charClassMatcher{
														pos:        position{line: 712, col: 14, offset: 24163},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 712, col: 22, offset: 24171},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 714, col: 12, offset: 24286},
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 12, offset: 24286},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 718, col: 1, offset: 24325},
			expr: &actionExpr{
				pos: position{line: 718, col: 27, offset: 24351},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 718, col: 27, offset: 24351},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 718, col: 37, offset: 24361},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 37, offset: 24361},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 725, col: 1, offset: 24568},
			expr: &actionExpr{
				pos: position{line: 725, col: 22, offset: 24589},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 725, col: 22, offset: 24589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 22, offset: 24589},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 725, col: 33, offset: 24600},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 34, offset: 24601},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 47, offset: 24614},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 55, offset: 24622},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 80, offset: 24647},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 725, col: 91, offset: 24658},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 92, offset: 24659},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 122, offset: 24689},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 131, offset: 24698},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 729, col: 1, offset: 24860},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 24893},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 24893},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 730, col: 5, offset: 24893},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 5, offset: 24893},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 12, offset: 24900},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 730, col: 20, offset: 24908},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 732, col: 9, offset: 24967},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 732, col: 9, offset: 24967},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 732, col: 9, offset: 24967},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 732, col: 16, offset: 24974},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 732, col: 16, offset: 24974},
															expr: &litMatcher{
																pos:        position{line: 732, col: 17, offset: 24975},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 736, col: 9, offset: 25079},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 753, col: 14, offset: 25803},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 753, col: 21, offset: 25810},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 753, col: 22, offset: 25811},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 755, col: 13, offset: 25899},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 13, offset: 25899},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 759, col: 1, offset: 25939},
			expr: &actionExpr{
				pos: position{line: 759, col: 32, offset: 25970},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 759, col: 32, offset: 25970},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 759, col: 32, offset: 25970},
							expr: &litMatcher{
								pos:        position{line: 759, col: 33, offset: 25971},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 37, offset: 25975},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 760, col: 7, offset: 25990},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 760, col: 7, offset: 25990},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 760, col: 7, offset: 25990},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 761, col: 7, offset: 26036},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 761, col: 7, offset: 26036},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 762, col: 7, offset: 26080},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 762, col: 7, offset: 26080},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 763, col: 7, offset: 26123},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 7, offset: 26123},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 767, col: 1, offset: 26169},
			expr: &actionExpr{
				pos: position{line: 767, col: 29, offset: 26197},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 767, col: 29, offset: 26197},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 767, col: 39, offset: 26207},
						expr: &ruleRefExpr{
							pos:  position{line: 767, col: 39, offset: 26207},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 774, col: 1, offset: 26530},
			expr: &actionExpr{
				pos: position{line: 774, col: 20, offset: 26549},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 774, col: 20, offset: 26549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 774, col: 20, offset: 26549},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 774, col: 31, offset: 26560},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 32, offset: 26561},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 45, offset: 26574},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 51, offset: 26580},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 80, offset: 26609},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 91, offset: 26620},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 117, offset: 26646},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 774, col: 129, offset: 26658},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 130, offset: 26659},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 778, col: 1, offset: 26809},
			expr: &seqExpr{
				pos: position{line: 778, col: 26, offset: 26834},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 778, col: 26, offset: 26834},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 54, offset: 26862},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 780, col: 1, offset: 26890},
			expr: &choiceExpr{
				pos: position{line: 780, col: 33, offset: 26922},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 780, col: 33, offset: 26922},
						expr: &charClassMatcher{
							pos:        position{line: 780, col: 33, offset: 26922},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 780, col: 45, offset: 26934},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 780, col: 45, offset: 26934},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 780, col: 49, offset: 26938},
								expr: &litMatcher{
									pos:        position{line: 780, col: 50, offset: 26939},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 781, col: 1, offset: 26944},
			expr: &actionExpr{
				pos: position{line: 781, col: 32, offset: 26975},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 781, col: 32, offset: 26975},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 781, col: 42, offset: 26985},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 781, col: 42, offset: 26985},
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 42, offset: 26985},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 787, col: 1, offset: 27146},
			expr: &actionExpr{
				pos: position{line: 787, col: 24, offset: 27169},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 787, col: 24, offset: 27169},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 787, col: 33, offset: 27178},
						expr: &seqExpr{
							pos: position{line: 787, col: 34, offset: 27179},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 787, col: 34, offset: 27179},
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 35, offset: 27180},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 787, col: 43, offset: 27188},
									expr: &litMatcher{
										pos:        position{line: 787, col: 44, offset: 27189},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 787, col: 49, offset: 27194},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 791, col: 1, offset: 27325},
			expr: &actionExpr{
				pos: position{line: 791, col: 31, offset: 27355},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 791, col: 31, offset: 27355},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 791, col: 40, offset: 27364},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 791, col: 40, offset: 27364},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 27380},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 793, col: 11, offset: 27430},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 11, offset: 27430},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 794, col: 11, offset: 27449},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 795, col: 11, offset: 27475},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 27505},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27526},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 27555},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 27577},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27601},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27617},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27643},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27667},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27689},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27722},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 809, col: 1, offset: 27765},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 27799},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 810, col: 5, offset: 27799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 27799},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 810, col: 16, offset: 27810},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 810, col: 16, offset: 27810},
									expr: &litMatcher{
										pos:        position{line: 810, col: 17, offset: 27811},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 813, col: 5, offset: 27872},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 817, col: 6, offset: 28052},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 817, col: 6, offset: 28052},
									expr: &choiceExpr{
										pos: position{line: 817, col: 7, offset: 28053},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 817, col: 7, offset: 28053},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 817, col: 15, offset: 28061},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 27, offset: 28073},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 821, col: 1, offset: 28117},
			expr: &actionExpr{
				pos: position{line: 821, col: 31, offset: 28147},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 821, col: 31, offset: 28147},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 821, col: 40, offset: 28156},
						expr: &ruleRefExpr{
							pos:  position{line: 821, col: 41, offset: 28157},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 828, col: 1, offset: 28355},
			expr: &choiceExpr{
				pos: position{line: 828, col: 19, offset: 28373},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 828, col: 19, offset: 28373},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 828, col: 19, offset: 28373},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 830, col: 9, offset: 28421},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 830, col: 9, offset: 28421},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 9, offset: 28471},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 832, col: 9, offset: 28471},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 9, offset: 28531},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 834, col: 9, offset: 28531},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 9, offset: 28587},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 836, col: 9, offset: 28587},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 845, col: 1, offset: 28903},
			expr: &choiceExpr{
				pos: position{line: 847, col: 5, offset: 28952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 28952},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 28952},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 847, col: 5, offset: 28952},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 847, col: 16, offset: 28963},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 17, offset: 28964},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 847, col: 30, offset: 28977},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 33, offset: 28980},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 847, col: 49, offset: 28996},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 847, col: 54, offset: 29001},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 847, col: 60, offset: 29007},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 61, offset: 29008},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 29193},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 29193},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 29193},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 851, col: 16, offset: 29204},
										expr: &ruleRefExpr{
											pos:  position{line: 851, col: 17, offset: 29205},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 30, offset: 29218},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 851, col: 35, offset: 29223},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 44, offset: 29232},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 29431},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 29431},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 855, col: 5, offset: 29431},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 855, col: 16, offset: 29442},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 17, offset: 29443},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 855, col: 30, offset: 29456},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 862, col: 7, offset: 29742},
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 8, offset: 29743},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 862, col: 23, offset: 29758},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 32, offset: 29767},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 29968},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 29968},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 29968},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 16, offset: 29979},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 17, offset: 29980},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 866, col: 30, offset: 29993},
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 31, offset: 29994},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 46, offset: 30009},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 866, col: 52, offset: 30015},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 53, offset: 30016},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 870, col: 1, offset: 30116},
			expr: &oneOrMoreExpr{
				pos: position{line: 870, col: 38, offset: 30153},
				expr: &actionExpr{
					pos: position{line: 870, col: 39, offset: 30154},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 870, col: 39, offset: 30154},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 870, col: 39, offset: 30154},
								expr: &ruleRefExpr{
									pos:  position{line: 870, col: 40, offset: 30155},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 870, col: 50, offset: 30165},
								expr: &litMatcher{
									pos:        position{line: 870, col: 50, offset: 30165},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 870, col: 56, offset: 30171},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 870, col: 65, offset: 30180},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 874, col: 1, offset: 30325},
			expr: &actionExpr{
				pos: position{line: 874, col: 34, offset: 30358},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 874, col: 34, offset: 30358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 874, col: 34, offset: 30358},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 40, offset: 30364},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 874, col: 48, offset: 30372},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 874, col: 49, offset: 30373},
									expr: &charClassMatcher{
										pos:        position{line: 874, col: 49, offset: 30373},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 8, offset: 30425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 880, col: 1, offset: 30461},
			expr: &oneOrMoreExpr{
				pos: position{line: 880, col: 36, offset: 30496},
				expr: &actionExpr{
					pos: position{line: 880, col: 37, offset: 30497},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 880, col: 37, offset: 30497},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 880, col: 37, offset: 30497},
								expr: &ruleRefExpr{
									pos:  position{line: 880, col: 38, offset: 30498},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 880, col: 48, offset: 30508},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 880, col: 57, offset: 30517},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 885, col: 1, offset: 30735},
			expr: &actionExpr{
				pos: position{line: 885, col: 20, offset: 30754},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 885, col: 20, offset: 30754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 885, col: 20, offset: 30754},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 31, offset: 30765},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 32, offset: 30766},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 886, col: 5, offset: 30785},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 31079},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 16, offset: 31090},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 31114},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 895, col: 16, offset: 31125},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 17, offset: 31126},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 899, col: 1, offset: 31264},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 31292},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 31292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 31292},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 900, col: 15, offset: 31302},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 900, col: 15, offset: 31302},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 900, col: 20, offset: 31307},
										expr: &ruleRefExpr{
											pos:  position{line: 900, col: 20, offset: 31307},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 36, offset: 31323},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 904, col: 1, offset: 31398},
			expr: &actionExpr{
				pos: position{line: 904, col: 23, offset: 31420},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 904, col: 23, offset: 31420},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 904, col: 33, offset: 31430},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 909, col: 1, offset: 31555},
			expr: &choiceExpr{
				pos: position{line: 911, col: 5, offset: 31613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 31613},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 911, col: 5, offset: 31613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 911, col: 5, offset: 31613},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 911, col: 16, offset: 31624},
										expr: &ruleRefExpr{
											pos:  position{line: 911, col: 17, offset: 31625},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 911, col: 30, offset: 31638},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 33, offset: 31641},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 49, offset: 31657},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 911, col: 54, offset: 31662},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 61, offset: 31669},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 31873},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 31873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 915, col: 5, offset: 31873},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 915, col: 16, offset: 31884},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 17, offset: 31885},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 915, col: 30, offset: 31898},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 37, offset: 31905},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 919, col: 1, offset: 32010},
			expr: &actionExpr{
				pos: position{line: 919, col: 28, offset: 32037},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 919, col: 28, offset: 32037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 919, col: 28, offset: 32037},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 39, offset: 32048},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 919, col: 59, offset: 32068},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 919, col: 70, offset: 32079},
								expr: &seqExpr{
									pos: position{line: 919, col: 71, offset: 32080},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 919, col: 71, offset: 32080},
											expr: &ruleRefExpr{
												pos:  position{line: 919, col: 72, offset: 32081},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 919, col: 93, offset: 32102},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 923, col: 1, offset: 32212},
			expr: &choiceExpr{
				pos: position{line: 925, col: 5, offset: 32266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 925, col: 5, offset: 32266},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 925, col: 5, offset: 32266},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 925, col: 5, offset: 32266},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 925, col: 16, offset: 32277},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 32278},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 926, col: 5, offset: 32296},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 933, col: 5, offset: 32508},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 933, col: 8, offset: 32511},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 933, col: 24, offset: 32527},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 933, col: 29, offset: 32532},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 933, col: 35, offset: 32538},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 36, offset: 32539},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 32735},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 32735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 937, col: 5, offset: 32735},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 937, col: 16, offset: 32746},
										expr: &ruleRefExpr{
											pos:  position{line: 937, col: 17, offset: 32747},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 938, col: 5, offset: 32765},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 32977},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 945, col: 11, offset: 32983},
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 12, offset: 32984},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 949, col: 1, offset: 33089},
			expr: &actionExpr{
				pos: position{line: 949, col: 19, offset: 33107},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 949, col: 19, offset: 33107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 949, col: 19, offset: 33107},
							expr: &ruleRefExpr{
								pos:  position{line: 949, col: 20, offset: 33108},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 33123},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 950, col: 15, offset: 33133},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 950, col: 15, offset: 33133},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 950, col: 15, offset: 33133},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 950, col: 24, offset: 33142},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 952, col: 9, offset: 33236},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 952, col: 9, offset: 33236},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 952, col: 9, offset: 33236},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 952, col: 18, offset: 33245},
														expr: &ruleRefExpr{
															pos:  position{line: 952, col: 19, offset: 33246},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 952, col: 35, offset: 33262},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 958, col: 1, offset: 33385},
			expr: &actionExpr{
				pos: position{line: 959, col: 5, offset: 33409},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 959, col: 5, offset: 33409},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 959, col: 14, offset: 33418},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 959, col: 14, offset: 33418},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 960, col: 11, offset: 33470},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 961, col: 11, offset: 33516},
								expr: &ruleRefExpr{
									pos:  position{line: 961, col: 11, offset: 33516},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 962, col: 11, offset: 33535},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 962, col: 11, offset: 33535},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 12, offset: 33536},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 963, col: 13, offset: 33555},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 963, col: 13, offset: 33555},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 15, offset: 33583},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 15, offset: 33609},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 15, offset: 33635},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 967, col: 15, offset: 33663},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 15, offset: 33684},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 15, offset: 33718},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 970, col: 15, offset: 33749},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 33780},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33812},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33850},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33881},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33915},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 33940},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 983, col: 1, offset: 34170},
			expr: &actionExpr{
				pos: position{line: 983, col: 14, offset: 34183},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 983, col: 14, offset: 34183},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 983, col: 14, offset: 34183},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 983, col: 20, offset: 34189},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 983, col: 24, offset: 34193},
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 24, offset: 34193},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 983, col: 31, offset: 34200},
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 32, offset: 34201},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 990, col: 1, offset: 34492},
			expr: &choiceExpr{
				pos: position{line: 990, col: 15, offset: 34506},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 990, col: 15, offset: 34506},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 41, offset: 34532},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 65, offset: 34556},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 992, col: 1, offset: 34577},
			expr: &choiceExpr{
				pos: position{line: 992, col: 32, offset: 34608},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 992, col: 32, offset: 34608},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 992, col: 32, offset: 34608},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 992, col: 36, offset: 34612},
								expr: &litMatcher{
									pos:        position{line: 992, col: 37, offset: 34613},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 992, col: 43, offset: 34619},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 992, col: 43, offset: 34619},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 992, col: 47, offset: 34623},
								expr: &litMatcher{
									pos:        position{line: 992, col: 48, offset: 34624},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 992, col: 54, offset: 34630},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 992, col: 54, offset: 34630},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 992, col: 58, offset: 34634},
								expr: &litMatcher{
									pos:        position{line: 992, col: 59, offset: 34635},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 992, col: 65, offset: 34641},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 992, col: 65, offset: 34641},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 992, col: 69, offset: 34645},
								expr: &litMatcher{
									pos:        position{line: 992, col: 70, offset: 34646},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 994, col: 1, offset: 34653},
			expr: &choiceExpr{
				pos: position{line: 994, col: 34, offset: 34686},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 994, col: 34, offset: 34686},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 994, col: 41, offset: 34693},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 994, col: 48, offset: 34700},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 994, col: 55, offset: 34707},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 994, col: 62, offset: 34714},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 994, col: 68, offset: 34720},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 996, col: 1, offset: 34727},
			expr: &actionExpr{
				pos: position{line: 996, col: 26, offset: 34752},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 996, col: 26, offset: 34752},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 996, col: 32, offset: 34758},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 996, col: 32, offset: 34758},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 997, col: 15, offset: 34794},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 998, col: 15, offset: 34831},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 999, col: 15, offset: 34868},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1000, col: 15, offset: 34909},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1001, col: 15, offset: 34939},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 15, offset: 34971},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1006, col: 1, offset: 35129},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 28, offset: 35156},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 28, offset: 35156},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 15, offset: 35191},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 15, offset: 35228},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 15, offset: 35265},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1011, col: 1, offset: 35293},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 22, offset: 35314},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1011, col: 22, offset: 35314},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 15, offset: 35346},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1013, col: 15, offset: 35379},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 15, offset: 35412},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 15, offset: 35449},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 15, offset: 35486},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1018, col: 1, offset: 35512},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 33, offset: 35544},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1018, col: 33, offset: 35544},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1018, col: 39, offset: 35550},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 39, offset: 35550},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1022, col: 1, offset: 35687},
			expr: &actionExpr{
				pos: position{line: 1022, col: 25, offset: 35711},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1022, col: 25, offset: 35711},
					expr: &litMatcher{
						pos:        position{line: 1022, col: 25, offset: 35711},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1026, col: 1, offset: 35756},
			expr: &actionExpr{
				pos: position{line: 1026, col: 25, offset: 35780},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 25, offset: 35780},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1026, col: 25, offset: 35780},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1026, col: 30, offset: 35785},
							expr: &litMatcher{
								pos:        position{line: 1026, col: 30, offset: 35785},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1034, col: 1, offset: 35890},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 13, offset: 35902},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1034, col: 13, offset: 35902},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 35, offset: 35924},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1036, col: 1, offset: 35993},
			expr: &actionExpr{
				pos: position{line: 1036, col: 24, offset: 36016},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 24, offset: 36016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1036, col: 24, offset: 36016},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1036, col: 30, offset: 36022},
								expr: &ruleRefExpr{
									pos:  position{line: 1036, col: 31, offset: 36023},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1036, col: 49, offset: 36041},
							expr: &litMatcher{
								pos:        position{line: 1036, col: 50, offset: 36042},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1036, col: 55, offset: 36047},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 60, offset: 36052},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 70, offset: 36062},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1036, col: 99, offset: 36091},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1040, col: 1, offset: 36182},
			expr: &seqExpr{
				pos: position{line: 1040, col: 32, offset: 36213},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1040, col: 32, offset: 36213},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1040, col: 59, offset: 36240},
						expr: &seqExpr{
							pos: position{line: 1040, col: 60, offset: 36241},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1040, col: 60, offset: 36241},
									expr: &litMatcher{
										pos:        position{line: 1040, col: 62, offset: 36243},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1040, col: 69, offset: 36250},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1040, col: 69, offset: 36250},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1040, col: 77, offset: 36258},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1042, col: 1, offset: 36325},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 31, offset: 36355},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 31, offset: 36355},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 11, offset: 36372},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 11, offset: 36404},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 11, offset: 36426},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 11, offset: 36448},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 11, offset: 36473},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 11, offset: 36498},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 36525},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 36547},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 36570},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 36586},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 36615},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 36639},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 11, offset: 36672},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 11, offset: 36716},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 1059, col: 1, offset: 36758},
			expr: &actionExpr{
				pos: position{line: 1059, col: 37, offset: 36794},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1059, col: 37, offset: 36794},
					expr: &seqExpr{
						pos: position{line: 1059, col: 38, offset: 36795},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1059, col: 38, offset: 36795},
								expr: &litMatcher{
									pos:        position{line: 1059, col: 39, offset: 36796},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1059, col: 44, offset: 36801},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1063, col: 1, offset: 36876},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 36922},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1064, col: 5, offset: 36922},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1065, col: 7, offset: 37020},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1065, col: 7, offset: 37020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1065, col: 7, offset: 37020},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 12, offset: 37025},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1069, col: 1, offset: 37192},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 24, offset: 37215},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 24, offset: 37215},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1069, col: 24, offset: 37215},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1069, col: 24, offset: 37215},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1069, col: 30, offset: 37221},
										expr: &ruleRefExpr{
											pos:  position{line: 1069, col: 31, offset: 37222},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1069, col: 50, offset: 37241},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1069, col: 50, offset: 37241},
											expr: &litMatcher{
												pos:        position{line: 1069, col: 51, offset: 37242},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1069, col: 55, offset: 37246},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1069, col: 59, offset: 37250},
											expr: &litMatcher{
												pos:        position{line: 1069, col: 60, offset: 37251},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 65, offset: 37256},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 75, offset: 37266},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 104, offset: 37295},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1069, col: 108, offset: 37299},
									expr: &notExpr{
										pos: position{line: 1069, col: 110, offset: 37301},
										expr: &ruleRefExpr{
											pos:  position{line: 1069, col: 111, offset: 37302},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 37498},
						run: (*parser).callonSingleQuoteBoldText19,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 37498},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1071, col: 5, offset: 37498},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1071, col: 11, offset: 37504},
										expr: &ruleRefExpr{
											pos:  position{line: 1071, col: 12, offset: 37505},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1071, col: 30, offset: 37523},
									expr: &litMatcher{
										pos:        position{line: 1071, col: 31, offset: 37524},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 36, offset: 37529},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 40, offset: 37533},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1071, col: 50, offset: 37543},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1071, col: 50, offset: 37543},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1071, col: 54, offset: 37547},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 83, offset: 37576},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1075, col: 1, offset: 37786},
			expr: &seqExpr{
				pos: position{line: 1075, col: 32, offset: 37817},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1075, col: 32, offset: 37817},
						expr: &ruleRefExpr{
							pos:  position{line: 1075, col: 33, offset: 37818},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1075, col: 39, offset: 37824},
						expr: &ruleRefExpr{
							pos:  position{line: 1075, col: 39, offset: 37824},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1077, col: 1, offset: 37855},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 31, offset: 37885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 31, offset: 37885},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 11, offset: 37902},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 1079, col: 11, offset: 37933},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1079, col: 11, offset: 37933},
								expr: &ruleRefExpr{
									pos:  position{line: 1079, col: 11, offset: 37933},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1079, col: 18, offset: 37940},
								expr: &seqExpr{
									pos: position{line: 1079, col: 19, offset: 37941},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1079, col: 19, offset: 37941},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1079, col: 23, offset: 37945},
											expr: &litMatcher{
												pos:        position{line: 1079, col: 24, offset: 37946},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 37963},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 37985},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 38007},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 38032},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 38057},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 38084},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 38106},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 38130},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 38148},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 38177},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 38201},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 38234},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 38278},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1094, col: 1, offset: 38318},
			expr: &actionExpr{
				pos: position{line: 1094, col: 37, offset: 38354},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1094, col: 37, offset: 38354},
					expr: &charClassMatcher{
						pos:        position{line: 1094, col: 37, offset: 38354},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1098, col: 1, offset: 38584},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 38630},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1099, col: 5, offset: 38630},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1100, col: 7, offset: 38728},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1100, col: 7, offset: 38728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 7, offset: 38728},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 11, offset: 38732},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1104, col: 1, offset: 38899},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 38924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1105, col: 5, offset: 38924},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1105, col: 5, offset: 38924},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1105, col: 5, offset: 38924},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 18, offset: 38937},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 40, offset: 38959},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 45, offset: 38964},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 55, offset: 38974},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 84, offset: 39003},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1107, col: 9, offset: 39162},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1107, col: 9, offset: 39162},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1107, col: 9, offset: 39162},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 22, offset: 39175},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 44, offset: 39197},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 49, offset: 39202},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 59, offset: 39212},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 88, offset: 39241},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 9, offset: 39444},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1110, col: 9, offset: 39444},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1110, col: 9, offset: 39444},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 22, offset: 39457},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 44, offset: 39479},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 48, offset: 39483},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 58, offset: 39493},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 87, offset: 39522},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1118, col: 1, offset: 39738},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 15, offset: 39752},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 15, offset: 39752},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 39, offset: 39776},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1120, col: 1, offset: 39801},
			expr: &actionExpr{
				pos: position{line: 1120, col: 26, offset: 39826},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 26, offset: 39826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1120, col: 26, offset: 39826},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1120, col: 32, offset: 39832},
								expr: &ruleRefExpr{
									pos:  position{line: 1120, col: 33, offset: 39833},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1120, col: 51, offset: 39851},
							expr: &litMatcher{
								pos:        position{line: 1120, col: 52, offset: 39852},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1120, col: 57, offset: 39857},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 62, offset: 39862},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 72, offset: 39872},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1120, col: 103, offset: 39903},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1124, col: 1, offset: 40041},
			expr: &seqExpr{
				pos: position{line: 1124, col: 34, offset: 40074},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1124, col: 34, offset: 40074},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1124, col: 63, offset: 40103},
						expr: &seqExpr{
							pos: position{line: 1124, col: 64, offset: 40104},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1124, col: 64, offset: 40104},
									expr: &litMatcher{
										pos:        position{line: 1124, col: 66, offset: 40106},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1124, col: 73, offset: 40113},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1124, col: 73, offset: 40113},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1124, col: 81, offset: 40121},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1126, col: 1, offset: 40190},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 33, offset: 40222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1126, col: 33, offset: 40222},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 40239},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 40273},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 40293},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 40315},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 40340},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 40365},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 40392},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 40414},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 40438},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 40455},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 40484},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 40508},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 40554},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1141, col: 1, offset: 40596},
			expr: &actionExpr{
				pos: position{line: 1141, col: 39, offset: 40634},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1141, col: 39, offset: 40634},
					expr: &seqExpr{
						pos: position{line: 1141, col: 40, offset: 40635},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1141, col: 40, offset: 40635},
								expr: &litMatcher{
									pos:        position{line: 1141, col: 41, offset: 40636},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1141, col: 46, offset: 40641},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1145, col: 1, offset: 40716},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 40764},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1146, col: 5, offset: 40764},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1147, col: 7, offset: 40864},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1147, col: 7, offset: 40864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 7, offset: 40864},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 12, offset: 40869},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1151, col: 1, offset: 41038},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 26, offset: 41063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1151, col: 26, offset: 41063},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1151, col: 26, offset: 41063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 26, offset: 41063},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1151, col: 32, offset: 41069},
										expr: &ruleRefExpr{
											pos:  position{line: 1151, col: 33, offset: 41070},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1151, col: 52, offset: 41089},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1151, col: 52, offset: 41089},
											expr: &litMatcher{
												pos:        position{line: 1151, col: 53, offset: 41090},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1151, col: 57, offset: 41094},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1151, col: 61, offset: 41098},
											expr: &litMatcher{
												pos:        position{line: 1151, col: 62, offset: 41099},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 67, offset: 41104},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 77, offset: 41114},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 108, offset: 41145},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1153, col: 5, offset: 41337},
						run: (*parser).callonSingleQuoteItalicText16,
						expr: &seqExpr{
							pos: position{line: 1153, col: 5, offset: 41337},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1153, col: 5, offset: 41337},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1153, col: 11, offset: 41343},
										expr: &ruleRefExpr{
											pos:  position{line: 1153, col: 12, offset: 41344},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1153, col: 30, offset: 41362},
									expr: &litMatcher{
										pos:        position{line: 1153, col: 31, offset: 41363},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 36, offset: 41368},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1153, col: 40, offset: 41372},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1153, col: 50, offset: 41382},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1153, col: 50, offset: 41382},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1153, col: 54, offset: 41386},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1153, col: 85, offset: 41417},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1157, col: 1, offset: 41631},
			expr: &seqExpr{
				pos: position{line: 1157, col: 34, offset: 41664},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1157, col: 34, offset: 41664},
						expr: &ruleRefExpr{
							pos:  position{line: 1157, col: 35, offset: 41665},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1157, col: 41, offset: 41671},
						expr: &ruleRefExpr{
							pos:  position{line: 1157, col: 41, offset: 41671},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1159, col: 1, offset: 41704},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 33, offset: 41736},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 33, offset: 41736},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 41753},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1161, col: 11, offset: 41786},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1161, col: 11, offset: 41786},
								expr: &ruleRefExpr{
									pos:  position{line: 1161, col: 11, offset: 41786},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1161, col: 18, offset: 41793},
								expr: &seqExpr{
									pos: position{line: 1161, col: 19, offset: 41794},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1161, col: 19, offset: 41794},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1161, col: 23, offset: 41798},
											expr: &litMatcher{
												pos:        position{line: 1161, col: 24, offset: 41799},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 41816},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 41836},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 41858},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 41883},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 11, offset: 41908},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 11, offset: 41935},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 11, offset: 41957},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 41981},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 11, offset: 41999},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 11, offset: 42029},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 42053},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 42086},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 42132},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1176, col: 1, offset: 42174},
			expr: &actionExpr{
				pos: position{line: 1176, col: 39, offset: 42212},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1176, col: 39, offset: 42212},
					expr: &charClassMatcher{
						pos:        position{line: 1176, col: 39, offset: 42212},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1180, col: 1, offset: 42442},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 42490},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1181, col: 5, offset: 42490},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1182, col: 7, offset: 42590},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1182, col: 7, offset: 42590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 7, offset: 42590},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1182, col: 11, offset: 42594},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1186, col: 1, offset: 42764},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 5, offset: 42791},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 42791},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 42791},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1187, col: 5, offset: 42791},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 18, offset: 42804},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 40, offset: 42826},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 45, offset: 42831},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 55, offset: 42841},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1187, col: 86, offset: 42872},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 9, offset: 43031},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1189, col: 9, offset: 43031},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1189, col: 9, offset: 43031},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1189, col: 22, offset: 43044},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1189, col: 44, offset: 43066},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1189, col: 49, offset: 43071},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1189, col: 59, offset: 43081},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1189, col: 90, offset: 43112},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1192, col: 9, offset: 43315},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1192, col: 9, offset: 43315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1192, col: 9, offset: 43315},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1192, col: 22, offset: 43328},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1192, col: 44, offset: 43350},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1192, col: 48, offset: 43354},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1192, col: 58, offset: 43364},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1192, col: 89, offset: 43395},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1199, col: 1, offset: 43612},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 18, offset: 43629},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 18, offset: 43629},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 45, offset: 43656},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1201, col: 1, offset: 43684},
			expr: &actionExpr{
				pos: position{line: 1201, col: 29, offset: 43712},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 29, offset: 43712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1201, col: 29, offset: 43712},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1201, col: 35, offset: 43718},
								expr: &ruleRefExpr{
									pos:  position{line: 1201, col: 36, offset: 43719},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1201, col: 54, offset: 43737},
							expr: &litMatcher{
								pos:        position{line: 1201, col: 55, offset: 43738},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1201, col: 60, offset: 43743},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 65, offset: 43748},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 75, offset: 43758},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1201, col: 109, offset: 43792},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1205, col: 1, offset: 43933},
			expr: &seqExpr{
				pos: position{line: 1205, col: 37, offset: 43969},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 37, offset: 43969},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1205, col: 69, offset: 44001},
						expr: &seqExpr{
							pos: position{line: 1205, col: 70, offset: 44002},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1205, col: 70, offset: 44002},
									expr: &litMatcher{
										pos:        position{line: 1205, col: 72, offset: 44004},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1205, col: 79, offset: 44011},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1205, col: 79, offset: 44011},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1205, col: 87, offset: 44019},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1207, col: 1, offset: 44090},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 36, offset: 44125},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 36, offset: 44125},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 44142},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 44179},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 44199},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 44221},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 44243},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 44268},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 44295},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 44317},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 44340},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 44356},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 44386},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44410},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44459},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1222, col: 1, offset: 44504},
			expr: &actionExpr{
				pos: position{line: 1222, col: 42, offset: 44545},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1222, col: 42, offset: 44545},
					expr: &seqExpr{
						pos: position{line: 1222, col: 43, offset: 44546},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1222, col: 43, offset: 44546},
								expr: &litMatcher{
									pos:        position{line: 1222, col: 44, offset: 44547},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1222, col: 49, offset: 44552},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1226, col: 1, offset: 44627},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 44678},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1227, col: 5, offset: 44678},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1228, col: 7, offset: 44781},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1228, col: 7, offset: 44781},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1228, col: 7, offset: 44781},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1228, col: 12, offset: 44786},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1232, col: 1, offset: 44958},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 29, offset: 44986},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1232, col: 29, offset: 44986},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1232, col: 29, offset: 44986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1232, col: 29, offset: 44986},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1232, col: 35, offset: 44992},
										expr: &ruleRefExpr{
											pos:  position{line: 1232, col: 36, offset: 44993},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1232, col: 55, offset: 45012},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1232, col: 55, offset: 45012},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 56, offset: 45013},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1232, col: 60, offset: 45017},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1232, col: 64, offset: 45021},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 65, offset: 45022},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 70, offset: 45027},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 80, offset: 45037},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1232, col: 114, offset: 45071},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 5, offset: 45266},
						run: (*parser).callonSingleQuoteMonospaceText16,
						expr: &seqExpr{
							pos: position{line: 1234, col: 5, offset: 45266},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 5, offset: 45266},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1234, col: 11, offset: 45272},
										expr: &ruleRefExpr{
											pos:  position{line: 1234, col: 12, offset: 45273},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1234, col: 30, offset: 45291},
									expr: &litMatcher{
										pos:        position{line: 1234, col: 31, offset: 45292},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 36, offset: 45297},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 40, offset: 45301},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1234, col: 50, offset: 45311},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1234, col: 50, offset: 45311},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1234, col: 54, offset: 45315},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 88, offset: 45349},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1238, col: 1, offset: 45569},
			expr: &seqExpr{
				pos: position{line: 1238, col: 37, offset: 45605},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1238, col: 37, offset: 45605},
						expr: &ruleRefExpr{
							pos:  position{line: 1238, col: 38, offset: 45606},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1238, col: 44, offset: 45612},
						expr: &ruleRefExpr{
							pos:  position{line: 1238, col: 44, offset: 45612},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1240, col: 1, offset: 45648},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 37, offset: 45684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1240, col: 37, offset: 45684},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 11, offset: 45701},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1242, col: 11, offset: 45738},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1242, col: 11, offset: 45738},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 11, offset: 45738},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1242, col: 18, offset: 45745},
								expr: &seqExpr{
									pos: position{line: 1242, col: 19, offset: 45746},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1242, col: 19, offset: 45746},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1242, col: 23, offset: 45750},
											expr: &litMatcher{
												pos:        position{line: 1242, col: 24, offset: 45751},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 45880},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 45919},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 45939},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 45961},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 45983},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 46008},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 46035},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 46057},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 46081},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 46098},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 46128},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 46152},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 46185},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 46234},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1258, col: 1, offset: 46279},
			expr: &actionExpr{
				pos: position{line: 1258, col: 42, offset: 46320},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1258, col: 42, offset: 46320},
					expr: &charClassMatcher{
						pos:        position{line: 1258, col: 42, offset: 46320},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1262, col: 1, offset: 46542},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 5, offset: 46593},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1263, col: 5, offset: 46593},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1264, col: 7, offset: 46696},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1264, col: 7, offset: 46696},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1264, col: 7, offset: 46696},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1264, col: 11, offset: 46700},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1268, col: 1, offset: 46873},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 46903},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 46903},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1269, col: 5, offset: 46903},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1269, col: 5, offset: 46903},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1269, col: 18, offset: 46916},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 40, offset: 46938},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1269, col: 45, offset: 46943},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1269, col: 55, offset: 46953},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 89, offset: 46987},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1271, col: 9, offset: 47146},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1271, col: 9, offset: 47146},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1271, col: 9, offset: 47146},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 22, offset: 47159},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 44, offset: 47181},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1271, col: 49, offset: 47186},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1271, col: 59, offset: 47196},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1271, col: 93, offset: 47230},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1274, col: 9, offset: 47433},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1274, col: 9, offset: 47433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 9, offset: 47433},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 22, offset: 47446},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 44, offset: 47468},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 48, offset: 47472},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 58, offset: 47482},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 92, offset: 47516},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1282, col: 1, offset: 47732},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 15, offset: 47746},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 15, offset: 47746},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 39, offset: 47770},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1284, col: 1, offset: 47795},
			expr: &actionExpr{
				pos: position{line: 1284, col: 26, offset: 47820},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 26, offset: 47820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1284, col: 26, offset: 47820},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1284, col: 32, offset: 47826},
								expr: &ruleRefExpr{
									pos:  position{line: 1284, col: 33, offset: 47827},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1284, col: 51, offset: 47845},
							expr: &litMatcher{
								pos:        position{line: 1284, col: 52, offset: 47846},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1284, col: 57, offset: 47851},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 62, offset: 47856},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 72, offset: 47866},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1284, col: 103, offset: 47897},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1288, col: 1, offset: 48035},
			expr: &seqExpr{
				pos: position{line: 1288, col: 34, offset: 48068},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1288, col: 34, offset: 48068},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1288, col: 63, offset: 48097},
						expr: &seqExpr{
							pos: position{line: 1288, col: 64, offset: 48098},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1288, col: 64, offset: 48098},
									expr: &litMatcher{
										pos:        position{line: 1288, col: 66, offset: 48100},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1288, col: 73, offset: 48107},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1288, col: 73, offset: 48107},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1288, col: 81, offset: 48115},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1290, col: 1, offset: 48184},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 33, offset: 48216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1290, col: 33, offset: 48216},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 48232},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 48265},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 48285},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 48307},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 48332},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 48357},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 48384},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 48406},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 48429},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 48445},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 48474},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 48498},
						name: "DoubleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 48544},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextStringElement",
			pos:  position{line: 1305, col: 1, offset: 48586},
			expr: &actionExpr{
				pos: position{line: 1305, col: 39, offset: 48624},
				run: (*parser).callonDoubleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1305, col: 39, offset: 48624},
					expr: &seqExpr{
						pos: position{line: 1305, col: 40, offset: 48625},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1305, col: 40, offset: 48625},
								expr: &litMatcher{
									pos:        position{line: 1305, col: 41, offset: 48626},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1305, col: 46, offset: 48631},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1309, col: 1, offset: 48705},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 48752},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1310, col: 5, offset: 48752},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1311, col: 7, offset: 48852},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1311, col: 7, offset: 48852},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1311, col: 7, offset: 48852},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1311, col: 12, offset: 48857},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1315, col: 1, offset: 49026},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 26, offset: 49051},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1315, col: 26, offset: 49051},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1315, col: 26, offset: 49051},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1315, col: 26, offset: 49051},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1315, col: 32, offset: 49057},
										expr: &ruleRefExpr{
											pos:  position{line: 1315, col: 33, offset: 49058},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1315, col: 52, offset: 49077},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1315, col: 52, offset: 49077},
											expr: &litMatcher{
												pos:        position{line: 1315, col: 53, offset: 49078},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1315, col: 57, offset: 49082},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1315, col: 61, offset: 49086},
											expr: &litMatcher{
												pos:        position{line: 1315, col: 62, offset: 49087},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 67, offset: 49092},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1315, col: 77, offset: 49102},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1315, col: 108, offset: 49133},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 49325},
						run: (*parser).callonSingleQuoteMarkedText16,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 49325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1317, col: 5, offset: 49325},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1317, col: 11, offset: 49331},
										expr: &ruleRefExpr{
											pos:  position{line: 1317, col: 12, offset: 49332},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1317, col: 30, offset: 49350},
									expr: &litMatcher{
										pos:        position{line: 1317, col: 31, offset: 49351},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1317, col: 36, offset: 49356},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 40, offset: 49360},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1317, col: 50, offset: 49370},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1317, col: 50, offset: 49370},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1317, col: 54, offset: 49374},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1317, col: 85, offset: 49405},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1321, col: 1, offset: 49618},
			expr: &seqExpr{
				pos: position{line: 1321, col: 34, offset: 49651},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1321, col: 34, offset: 49651},
						expr: &ruleRefExpr{
							pos:  position{line: 1321, col: 35, offset: 49652},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1321, col: 41, offset: 49658},
						expr: &ruleRefExpr{
							pos:  position{line: 1321, col: 41, offset: 49658},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1323, col: 1, offset: 49691},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 33, offset: 49723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1323, col: 33, offset: 49723},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 49739},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1325, col: 11, offset: 49772},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1325, col: 11, offset: 49772},
								expr: &ruleRefExpr{
									pos:  position{line: 1325, col: 11, offset: 49772},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1325, col: 18, offset: 49779},
								expr: &seqExpr{
									pos: position{line: 1325, col: 19, offset: 49780},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1325, col: 19, offset: 49780},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1325, col: 23, offset: 49784},
											expr: &litMatcher{
												pos:        position{line: 1325, col: 24, offset: 49785},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 49802},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 49822},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 49844},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 49869},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 49894},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 49921},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 49943},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 49966},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 49982},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 50011},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 50035},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 50068},
						name: "SingleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 50114},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStringElement",
			pos:  position{line: 1340, col: 1, offset: 50156},
			expr: &actionExpr{
				pos: position{line: 1340, col: 39, offset: 50194},
				run: (*parser).callonSingleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1340, col: 39, offset: 50194},
					expr: &charClassMatcher{
						pos:        position{line: 1340, col: 39, offset: 50194},
						val:        "[^\\r\\n{} #^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '#', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1344, col: 1, offset: 50424},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 50471},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1345, col: 5, offset: 50471},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1346, col: 7, offset: 50569},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1346, col: 7, offset: 50569},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 7, offset: 50569},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1346, col: 11, offset: 50573},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1350, col: 1, offset: 50740},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 50766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1351, col: 5, offset: 50766},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1351, col: 5, offset: 50766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1351, col: 5, offset: 50766},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 18, offset: 50779},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1351, col: 40, offset: 50801},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1351, col: 45, offset: 50806},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 55, offset: 50816},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1351, col: 86, offset: 50847},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 9, offset: 51006},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1353, col: 9, offset: 51006},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1353, col: 9, offset: 51006},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 22, offset: 51019},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 44, offset: 51041},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 49, offset: 51046},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 59, offset: 51056},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 90, offset: 51087},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1356, col: 9, offset: 51290},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1356, col: 9, offset: 51290},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1356, col: 9, offset: 51290},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 22, offset: 51303},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 44, offset: 51325},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 48, offset: 51329},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1356, col: 58, offset: 51339},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 89, offset: 51370},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1361, col: 1, offset: 51525},
			expr: &actionExpr{
				pos: position{line: 1361, col: 18, offset: 51542},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 18, offset: 51542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1361, col: 18, offset: 51542},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1361, col: 24, offset: 51548},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 25, offset: 51549},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1361, col: 43, offset: 51567},
							expr: &litMatcher{
								pos:        position{line: 1361, col: 44, offset: 51568},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1361, col: 48, offset: 51572},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 52, offset: 51576},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 61, offset: 51585},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1361, col: 83, offset: 51607},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1365, col: 1, offset: 51707},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 25, offset: 51731},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 25, offset: 51731},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 38, offset: 51744},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1367, col: 1, offset: 51765},
			expr: &actionExpr{
				pos: position{line: 1367, col: 21, offset: 51785},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1367, col: 21, offset: 51785},
					expr: &charClassMatcher{
						pos:        position{line: 1367, col: 21, offset: 51785},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1371, col: 1, offset: 51866},
			expr: &actionExpr{
				pos: position{line: 1371, col: 25, offset: 51890},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 25, offset: 51890},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1371, col: 25, offset: 51890},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 38, offset: 51903},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1371, col: 60, offset: 51925},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1371, col: 64, offset: 51929},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 73, offset: 51938},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1371, col: 95, offset: 51960},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1375, col: 1, offset: 52093},
			expr: &actionExpr{
				pos: position{line: 1375, col: 20, offset: 52112},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 20, offset: 52112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 20, offset: 52112},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1375, col: 26, offset: 52118},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 27, offset: 52119},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1375, col: 45, offset: 52137},
							expr: &litMatcher{
								pos:        position{line: 1375, col: 46, offset: 52138},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 50, offset: 52142},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 54, offset: 52146},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 63, offset: 52155},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1375, col: 87, offset: 52179},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1379, col: 1, offset: 52281},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 27, offset: 52307},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1379, col: 27, offset: 52307},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 40, offset: 52320},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1381, col: 1, offset: 52343},
			expr: &actionExpr{
				pos: position{line: 1381, col: 23, offset: 52365},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1381, col: 23, offset: 52365},
					expr: &charClassMatcher{
						pos:        position{line: 1381, col: 23, offset: 52365},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1385, col: 1, offset: 52446},
			expr: &actionExpr{
				pos: position{line: 1385, col: 27, offset: 52472},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1385, col: 27, offset: 52472},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1385, col: 27, offset: 52472},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 40, offset: 52485},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1385, col: 62, offset: 52507},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1385, col: 66, offset: 52511},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1385, col: 75, offset: 52520},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1385, col: 99, offset: 52544},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1392, col: 1, offset: 52793},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 22, offset: 52814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1392, col: 22, offset: 52814},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 46, offset: 52838},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 70, offset: 52862},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1394, col: 1, offset: 52882},
			expr: &litMatcher{
				pos:        position{line: 1394, col: 32, offset: 52913},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1396, col: 1, offset: 52920},
			expr: &actionExpr{
				pos: position{line: 1396, col: 26, offset: 52945},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 26, offset: 52945},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1396, col: 26, offset: 52945},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 54, offset: 52973},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 63, offset: 52982},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1396, col: 93, offset: 53012},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1396, col: 121, offset: 53040},
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 122, offset: 53041},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1400, col: 1, offset: 53150},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 33, offset: 53182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1400, col: 34, offset: 53183},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1400, col: 34, offset: 53183},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1400, col: 35, offset: 53184},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1400, col: 35, offset: 53184},
											expr: &ruleRefExpr{
												pos:  position{line: 1400, col: 36, offset: 53185},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1400, col: 64, offset: 53213},
											expr: &ruleRefExpr{
												pos:  position{line: 1400, col: 65, offset: 53214},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1400, col: 71, offset: 53220},
											expr: &ruleRefExpr{
												pos:  position{line: 1400, col: 72, offset: 53221},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1400, col: 80, offset: 53229,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1400, col: 83, offset: 53232},
									expr: &seqExpr{
										pos: position{line: 1400, col: 84, offset: 53233},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1400, col: 84, offset: 53233},
												expr: &seqExpr{
													pos: position{line: 1400, col: 86, offset: 53235},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1400, col: 86, offset: 53235},
															expr: &ruleRefExpr{
																pos:  position{line: 1400, col: 86, offset: 53235},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1400, col: 93, offset: 53242},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1400, col: 122, offset: 53271},
												expr: &ruleRefExpr{
													pos:  position{line: 1400, col: 123, offset: 53272},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1400, col: 151, offset: 53300},
												expr: &ruleRefExpr{
													pos:  position{line: 1400, col: 152, offset: 53301},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1400, col: 160, offset: 53309,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 7, offset: 53453},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1402, col: 8, offset: 53454},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1402, col: 8, offset: 53454},
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 9, offset: 53455},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1402, col: 15, offset: 53461},
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 16, offset: 53462},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1402, col: 24, offset: 53470},
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 25, offset: 53471},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1402, col: 53, offset: 53499,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1406, col: 1, offset: 53585},
			expr: &litMatcher{
				pos:        position{line: 1406, col: 32, offset: 53616},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1408, col: 1, offset: 53625},
			expr: &actionExpr{
				pos: position{line: 1408, col: 26, offset: 53650},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 26, offset: 53650},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1408, col: 26, offset: 53650},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 54, offset: 53678},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 63, offset: 53687},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1408, col: 93, offset: 53717},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1408, col: 121, offset: 53745},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 122, offset: 53746},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1412, col: 1, offset: 53855},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 33, offset: 53887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1412, col: 34, offset: 53888},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1412, col: 34, offset: 53888},
							expr: &seqExpr{
								pos: position{line: 1412, col: 35, offset: 53889},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1412, col: 35, offset: 53889},
										expr: &ruleRefExpr{
											pos:  position{line: 1412, col: 36, offset: 53890},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1412, col: 64, offset: 53918,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 7, offset: 54085},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1414, col: 7, offset: 54085},
							expr: &seqExpr{
								pos: position{line: 1414, col: 8, offset: 54086},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1414, col: 8, offset: 54086},
										expr: &ruleRefExpr{
											pos:  position{line: 1414, col: 9, offset: 54087},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1414, col: 15, offset: 54093},
										expr: &ruleRefExpr{
											pos:  position{line: 1414, col: 16, offset: 54094},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1414, col: 24, offset: 54102},
										expr: &ruleRefExpr{
											pos:  position{line: 1414, col: 25, offset: 54103},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1414, col: 53, offset: 54131,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1418, col: 1, offset: 54218},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 21, offset: 54238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1418, col: 21, offset: 54238},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1418, col: 21, offset: 54238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1418, col: 21, offset: 54238},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 30, offset: 54247},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1418, col: 38, offset: 54255},
										expr: &ruleRefExpr{
											pos:  position{line: 1418, col: 39, offset: 54256},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 67, offset: 54284},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1420, col: 5, offset: 54382},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1420, col: 5, offset: 54382},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1420, col: 5, offset: 54382},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 15, offset: 54392},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1420, col: 23, offset: 54400},
										expr: &choiceExpr{
											pos: position{line: 1420, col: 24, offset: 54401},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1420, col: 24, offset: 54401},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1420, col: 37, offset: 54414},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1420, col: 65, offset: 54442},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1424, col: 1, offset: 54542},
			expr: &actionExpr{
				pos: position{line: 1424, col: 30, offset: 54571},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1424, col: 30, offset: 54571},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1431, col: 1, offset: 54751},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 19, offset: 54769},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 19, offset: 54769},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 44, offset: 54794},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1433, col: 1, offset: 54821},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 27, offset: 54847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1433, col: 27, offset: 54847},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1433, col: 27, offset: 54847},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1433, col: 27, offset: 54847},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 32, offset: 54852},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 36, offset: 54856},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1433, col: 40, offset: 54860},
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 40, offset: 54860},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 47, offset: 54867},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 51, offset: 54871},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 58, offset: 54878},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 79, offset: 54899},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1435, col: 5, offset: 54984},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1435, col: 5, offset: 54984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 5, offset: 54984},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1435, col: 10, offset: 54989},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1435, col: 14, offset: 54993},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1435, col: 18, offset: 54997},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1439, col: 1, offset: 55073},
			expr: &actionExpr{
				pos: position{line: 1439, col: 27, offset: 55099},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 27, offset: 55099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1439, col: 27, offset: 55099},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 35, offset: 55107},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 40, offset: 55112},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 54, offset: 55126},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 72, offset: 55144},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1443, col: 1, offset: 55271},
			expr: &ruleRefExpr{
				pos:  position{line: 1443, col: 24, offset: 55294},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1448, col: 1, offset: 55421},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 9, offset: 55429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1448, col: 9, offset: 55429},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 24, offset: 55444},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1451, col: 1, offset: 55528},
			expr: &actionExpr{
				pos: position{line: 1451, col: 17, offset: 55544},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1451, col: 17, offset: 55544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1451, col: 17, offset: 55544},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 25, offset: 55552},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1451, col: 30, offset: 55557},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 40, offset: 55567},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1451, col: 58, offset: 55585},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1455, col: 1, offset: 55700},
			expr: &actionExpr{
				pos: position{line: 1455, col: 17, offset: 55716},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 17, offset: 55716},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1455, col: 17, offset: 55716},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 22, offset: 55721},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 42, offset: 55741},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1455, col: 59, offset: 55758},
								expr: &ruleRefExpr{
									pos:  position{line: 1455, col: 60, offset: 55759},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1459, col: 1, offset: 55856},
			expr: &actionExpr{
				pos: position{line: 1459, col: 19, offset: 55874},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 19, offset: 55874},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1459, col: 19, offset: 55874},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1459, col: 23, offset: 55878},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1459, col: 33, offset: 55888},
								expr: &ruleRefExpr{
									pos:  position{line: 1459, col: 34, offset: 55889},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1460, col: 5, offset: 55922},
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 5, offset: 55922},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 12, offset: 55929},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1460, col: 23, offset: 55940},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 24, offset: 55941},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1460, col: 43, offset: 55960},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1464, col: 1, offset: 56081},
			expr: &actionExpr{
				pos: position{line: 1464, col: 30, offset: 56110},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1464, col: 30, offset: 56110},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1466, col: 5, offset: 56163},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1466, col: 6, offset: 56164},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1466, col: 6, offset: 56164},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1466, col: 6, offset: 56164},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1466, col: 11, offset: 56169},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1466, col: 20, offset: 56178},
												expr: &choiceExpr{
													pos: position{line: 1466, col: 21, offset: 56179},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1466, col: 21, offset: 56179},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1466, col: 36, offset: 56194},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1466, col: 49, offset: 56207},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1466, col: 71, offset: 56229},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1466, col: 76, offset: 56234},
											expr: &notExpr{
												pos: position{line: 1466, col: 78, offset: 56236},
												expr: &litMatcher{
													pos:        position{line: 1466, col: 79, offset: 56237},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1466, col: 84, offset: 56242},
											expr: &litMatcher{
												pos:        position{line: 1466, col: 84, offset: 56242},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1470, col: 6, offset: 56373},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1470, col: 6, offset: 56373},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1470, col: 6, offset: 56373},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1470, col: 15, offset: 56382},
												expr: &choiceExpr{
													pos: position{line: 1470, col: 16, offset: 56383},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1470, col: 16, offset: 56383},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 31, offset: 56398},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1470, col: 44, offset: 56411},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1470, col: 68, offset: 56435},
											expr: &notExpr{
												pos: position{line: 1470, col: 70, offset: 56437},
												expr: &litMatcher{
													pos:        position{line: 1470, col: 71, offset: 56438},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1470, col: 76, offset: 56443},
											expr: &litMatcher{
												pos:        position{line: 1470, col: 76, offset: 56443},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1476, col: 1, offset: 56563},
			expr: &actionExpr{
				pos: position{line: 1476, col: 18, offset: 56580},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1476, col: 18, offset: 56580},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1480, col: 1, offset: 56670},
			expr: &actionExpr{
				pos: position{line: 1480, col: 24, offset: 56693},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1480, col: 24, offset: 56693},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1484, col: 1, offset: 56790},
			expr: &actionExpr{
				pos: position{line: 1484, col: 26, offset: 56815},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1484, col: 26, offset: 56815},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1489, col: 1, offset: 56977},
			expr: &actionExpr{
				pos: position{line: 1490, col: 5, offset: 56998},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1490, col: 5, offset: 56998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1490, col: 5, offset: 56998},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1490, col: 14, offset: 57007},
								expr: &choiceExpr{
									pos: position{line: 1490, col: 15, offset: 57008},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1490, col: 15, offset: 57008},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1491, col: 11, offset: 57024},
											expr: &ruleRefExpr{
												pos:  position{line: 1491, col: 11, offset: 57024},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1492, col: 11, offset: 57043},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1493, col: 11, offset: 57068},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1494, col: 11, offset: 57091},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1495, col: 11, offset: 57110},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 21, offset: 57120},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1499, col: 1, offset: 57194},
			expr: &choiceExpr{
				pos: position{line: 1499, col: 17, offset: 57210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1499, col: 17, offset: 57210},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1499, col: 40, offset: 57233},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1502, col: 1, offset: 57364},
			expr: &actionExpr{
				pos: position{line: 1502, col: 25, offset: 57388},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 25, offset: 57388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1502, col: 25, offset: 57388},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 33, offset: 57396},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1502, col: 38, offset: 57401},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1502, col: 38, offset: 57401},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1502, col: 57, offset: 57420},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1502, col: 79, offset: 57442},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1502, col: 97, offset: 57460},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1506, col: 1, offset: 57575},
			expr: &actionExpr{
				pos: position{line: 1506, col: 25, offset: 57599},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1506, col: 25, offset: 57599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1506, col: 25, offset: 57599},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 30, offset: 57604},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 48, offset: 57622},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1506, col: 65, offset: 57639},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 66, offset: 57640},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1513, col: 1, offset: 57842},
			expr: &actionExpr{
				pos: position{line: 1513, col: 15, offset: 57856},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 15, offset: 57856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1513, col: 15, offset: 57856},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1513, col: 26, offset: 57867},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 27, offset: 57868},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1513, col: 40, offset: 57881},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 50, offset: 57891},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 56, offset: 57897},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 66, offset: 57907},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 84, offset: 57925},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1513, col: 101, offset: 57942},
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 101, offset: 57942},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1513, col: 108, offset: 57949},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1517, col: 1, offset: 58065},
			expr: &actionExpr{
				pos: position{line: 1517, col: 16, offset: 58080},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 16, offset: 58080},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1517, col: 16, offset: 58080},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1517, col: 25, offset: 58089},
							expr: &litMatcher{
								pos:        position{line: 1517, col: 26, offset: 58090},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 30, offset: 58094},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 36, offset: 58100},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 46, offset: 58110},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 64, offset: 58128},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1521, col: 1, offset: 58246},
			expr: &actionExpr{
				pos: position{line: 1521, col: 20, offset: 58265},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 20, offset: 58265},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1521, col: 20, offset: 58265},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 24, offset: 58269},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 28, offset: 58273},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 29, offset: 58274},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 56, offset: 58301},
							expr: &litMatcher{
								pos:        position{line: 1521, col: 56, offset: 58301},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 61, offset: 58306},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 67, offset: 58312},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 68, offset: 58313},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 95, offset: 58340},
							expr: &litMatcher{
								pos:        position{line: 1521, col: 95, offset: 58340},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 100, offset: 58345},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 107, offset: 58352},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 108, offset: 58353},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1521, col: 135, offset: 58380},
							expr: &litMatcher{
								pos:        position{line: 1521, col: 135, offset: 58380},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1521, col: 140, offset: 58385},
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 140, offset: 58385},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 147, offset: 58392},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1521, col: 158, offset: 58403},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 159, offset: 58404},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1521, col: 178, offset: 58423},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1528, col: 1, offset: 58715},
			expr: &actionExpr{
				pos: position{line: 1528, col: 15, offset: 58729},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 15, offset: 58729},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1528, col: 15, offset: 58729},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 23, offset: 58737},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1528, col: 34, offset: 58748},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1528, col: 34, offset: 58748},
									expr: &charClassMatcher{
										pos:        position{line: 1528, col: 34, offset: 58748},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 78, offset: 58792},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 96, offset: 58810},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1532, col: 1, offset: 58917},
			expr: &actionExpr{
				pos: position{line: 1532, col: 19, offset: 58935},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 19, offset: 58935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1532, col: 19, offset: 58935},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 23, offset: 58939},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 28, offset: 58944},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 29, offset: 58945},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1532, col: 56, offset: 58972},
							expr: &litMatcher{
								pos:        position{line: 1532, col: 56, offset: 58972},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1532, col: 61, offset: 58977},
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 61, offset: 58977},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 68, offset: 58984},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1532, col: 75, offset: 58991},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 76, offset: 58992},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1532, col: 95, offset: 59011},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1539, col: 1, offset: 59289},
			expr: &choiceExpr{
				pos: position{line: 1539, col: 19, offset: 59307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1539, col: 19, offset: 59307},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1539, col: 19, offset: 59307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1539, col: 19, offset: 59307},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1539, col: 32, offset: 59320},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1539, col: 41, offset: 59329},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1539, col: 58, offset: 59346},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1541, col: 5, offset: 59416},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1541, col: 5, offset: 59416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1541, col: 5, offset: 59416},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1541, col: 17, offset: 59428},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1541, col: 22, offset: 59433},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1541, col: 35, offset: 59446},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1541, col: 39, offset: 59450},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1541, col: 47, offset: 59458},
										expr: &ruleRefExpr{
											pos:  position{line: 1541, col: 48, offset: 59459},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1541, col: 66, offset: 59477},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1545, col: 1, offset: 59542},
			expr: &ruleRefExpr{
				pos:  position{line: 1545, col: 16, offset: 59557},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1547, col: 1, offset: 59570},
			expr: &actionExpr{
				pos: position{line: 1547, col: 20, offset: 59589},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1547, col: 20, offset: 59589},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1547, col: 29, offset: 59598},
						expr: &seqExpr{
							pos: position{line: 1547, col: 30, offset: 59599},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1547, col: 30, offset: 59599},
									expr: &litMatcher{
										pos:        position{line: 1547, col: 31, offset: 59600},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1547, col: 35, offset: 59604},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1554, col: 1, offset: 59935},
			expr: &actionExpr{
				pos: position{line: 1554, col: 19, offset: 59953},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 19, offset: 59953},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1554, col: 19, offset: 59953},
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 20, offset: 59954},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1555, col: 5, offset: 60043},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1555, col: 12, offset: 60050},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1555, col: 12, offset: 60050},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1556, col: 11, offset: 60074},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1557, col: 11, offset: 60099},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1558, col: 11, offset: 60124},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1559, col: 11, offset: 60147},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1560, col: 11, offset: 60170},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1561, col: 11, offset: 60194},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1562, col: 11, offset: 60223},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1563, col: 11, offset: 60251},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1564, col: 11, offset: 60268},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1568, col: 1, offset: 60313},
			expr: &choiceExpr{
				pos: position{line: 1568, col: 19, offset: 60331},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1568, col: 19, offset: 60331},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1568, col: 19, offset: 60331},
								expr: &ruleRefExpr{
									pos:  position{line: 1568, col: 21, offset: 60333},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1568, col: 31, offset: 60343},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1569, col: 19, offset: 60415},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1570, col: 19, offset: 60456},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1571, col: 19, offset: 60498},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1572, col: 19, offset: 60540},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1573, col: 19, offset: 60582},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1574, col: 19, offset: 60621},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1575, col: 19, offset: 60662},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1577, col: 1, offset: 60691},
			expr: &choiceExpr{
				pos: position{line: 1577, col: 20, offset: 60710},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1577, col: 20, offset: 60710},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1577, col: 36, offset: 60726},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1579, col: 1, offset: 60742},
			expr: &actionExpr{
				pos: position{line: 1579, col: 17, offset: 60758},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 17, offset: 60758},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1579, col: 17, offset: 60758},
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 18, offset: 60759},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 22, offset: 60763},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 31, offset: 60772},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 52, offset: 60793},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1579, col: 61, offset: 60802},
								expr: &ruleRefExpr{
									pos:  position{line: 1579, col: 62, offset: 60803},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1579, col: 73, offset: 60814},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1583, col: 1, offset: 60888},
			expr: &actionExpr{
				pos: position{line: 1583, col: 24, offset: 60911},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1583, col: 24, offset: 60911},
					expr: &seqExpr{
						pos: position{line: 1583, col: 25, offset: 60912},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1583, col: 25, offset: 60912},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 26, offset: 60913},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1583, col: 36, offset: 60923},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1583, col: 36, offset: 60923},
										expr: &ruleRefExpr{
											pos:  position{line: 1583, col: 36, offset: 60923},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1583, col: 45, offset: 60932},
										expr: &charClassMatcher{
											pos:        position{line: 1583, col: 45, offset: 60932},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1587, col: 1, offset: 60986},
			expr: &oneOrMoreExpr{
				pos: position{line: 1587, col: 13, offset: 60998},
				expr: &ruleRefExpr{
					pos:  position{line: 1587, col: 13, offset: 60998},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1589, col: 1, offset: 61010},
			expr: &actionExpr{
				pos: position{line: 1589, col: 12, offset: 61021},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1589, col: 12, offset: 61021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1589, col: 12, offset: 61021},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 16, offset: 61025},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1589, col: 21, offset: 61030},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1589, col: 21, offset: 61030},
									expr: &charClassMatcher{
										pos:        position{line: 1589, col: 21, offset: 61030},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1589, col: 69, offset: 61078},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1589, col: 73, offset: 61082},
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 73, offset: 61082},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1589, col: 80, offset: 61089},
							expr: &choiceExpr{
								pos: position{line: 1589, col: 82, offset: 61091},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1589, col: 82, offset: 61091},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1589, col: 88, offset: 61097},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1593, col: 1, offset: 61154},
			expr: &actionExpr{
				pos: position{line: 1593, col: 20, offset: 61173},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 20, offset: 61173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1593, col: 20, offset: 61173},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 25, offset: 61178},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 48, offset: 61201},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1593, col: 61, offset: 61214},
								expr: &ruleRefExpr{
									pos:  position{line: 1593, col: 61, offset: 61214},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1597, col: 1, offset: 61315},
			expr: &actionExpr{
				pos: position{line: 1597, col: 26, offset: 61340},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1597, col: 26, offset: 61340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1597, col: 26, offset: 61340},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1597, col: 30, offset: 61344},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1597, col: 35, offset: 61349},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1597, col: 35, offset: 61349},
									expr: &charClassMatcher{
										pos:        position{line: 1597, col: 35, offset: 61349},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1597, col: 83, offset: 61397},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1597, col: 87, offset: 61401},
							expr: &ruleRefExpr{
								pos:  position{line: 1597, col: 87, offset: 61401},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1604, col: 1, offset: 61635},
			expr: &seqExpr{
				pos: position{line: 1604, col: 25, offset: 61659},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1604, col: 25, offset: 61659},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1604, col: 31, offset: 61665},
						expr: &ruleRefExpr{
							pos:  position{line: 1604, col: 31, offset: 61665},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 38, offset: 61672},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1606, col: 1, offset: 61734},
			expr: &seqExpr{
				pos: position{line: 1606, col: 30, offset: 61763},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1606, col: 30, offset: 61763},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1606, col: 36, offset: 61769},
						expr: &ruleRefExpr{
							pos:  position{line: 1606, col: 36, offset: 61769},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 43, offset: 61776},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1608, col: 1, offset: 61783},
			expr: &choiceExpr{
				pos: position{line: 1608, col: 28, offset: 61810},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1608, col: 29, offset: 61811},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1608, col: 29, offset: 61811},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1608, col: 35, offset: 61817},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 35, offset: 61817},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1608, col: 42, offset: 61824},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 49, offset: 61831},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1610, col: 1, offset: 61838},
			expr: &actionExpr{
				pos: position{line: 1610, col: 16, offset: 61853},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1610, col: 16, offset: 61853},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1610, col: 16, offset: 61853},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1610, col: 27, offset: 61864},
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 28, offset: 61865},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1610, col: 41, offset: 61878},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1610, col: 67, offset: 61904},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1610, col: 76, offset: 61913},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1610, col: 104, offset: 61941},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1614, col: 1, offset: 62060},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1614, col: 31, offset: 62090},
				expr: &actionExpr{
					pos: position{line: 1614, col: 32, offset: 62091},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1614, col: 32, offset: 62091},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1614, col: 32, offset: 62091},
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 33, offset: 62092},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1614, col: 57, offset: 62116},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1614, col: 66, offset: 62125},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1621, col: 1, offset: 62469},
			expr: &seqExpr{
				pos: position{line: 1621, col: 26, offset: 62494},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1621, col: 26, offset: 62494},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1621, col: 33, offset: 62501},
						expr: &ruleRefExpr{
							pos:  position{line: 1621, col: 33, offset: 62501},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1621, col: 40, offset: 62508},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1623, col: 1, offset: 62515},
			expr: &seqExpr{
				pos: position{line: 1623, col: 31, offset: 62545},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1623, col: 31, offset: 62545},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1623, col: 38, offset: 62552},
						expr: &ruleRefExpr{
							pos:  position{line: 1623, col: 38, offset: 62552},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1623, col: 45, offset: 62559},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1625, col: 1, offset: 62566},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 29, offset: 62594},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1625, col: 30, offset: 62595},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1625, col: 30, offset: 62595},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1625, col: 37, offset: 62602},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 37, offset: 62602},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1625, col: 44, offset: 62609},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1625, col: 51, offset: 62616},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1627, col: 1, offset: 62623},
			expr: &actionExpr{
				pos: position{line: 1627, col: 17, offset: 62639},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1627, col: 17, offset: 62639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1627, col: 17, offset: 62639},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1627, col: 28, offset: 62650},
								expr: &ruleRefExpr{
									pos:  position{line: 1627, col: 29, offset: 62651},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1627, col: 42, offset: 62664},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 69, offset: 62691},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1627, col: 78, offset: 62700},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1627, col: 107, offset: 62729},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1631, col: 1, offset: 62850},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1631, col: 32, offset: 62881},
				expr: &actionExpr{
					pos: position{line: 1631, col: 33, offset: 62882},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1631, col: 33, offset: 62882},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1631, col: 33, offset: 62882},
								expr: &ruleRefExpr{
									pos:  position{line: 1631, col: 34, offset: 62883},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1631, col: 59, offset: 62908},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1631, col: 68, offset: 62917},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1638, col: 1, offset: 63261},
			expr: &seqExpr{
				pos: position{line: 1638, col: 26, offset: 63286},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1638, col: 26, offset: 63286},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1638, col: 33, offset: 63293},
						expr: &ruleRefExpr{
							pos:  position{line: 1638, col: 33, offset: 63293},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 40, offset: 63300},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1640, col: 1, offset: 63307},
			expr: &seqExpr{
				pos: position{line: 1640, col: 31, offset: 63337},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1640, col: 31, offset: 63337},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1640, col: 38, offset: 63344},
						expr: &ruleRefExpr{
							pos:  position{line: 1640, col: 38, offset: 63344},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 45, offset: 63351},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1642, col: 1, offset: 63358},
			expr: &choiceExpr{
				pos: position{line: 1642, col: 29, offset: 63386},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1642, col: 30, offset: 63387},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1642, col: 30, offset: 63387},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1642, col: 37, offset: 63394},
								expr: &ruleRefExpr{
									pos:  position{line: 1642, col: 37, offset: 63394},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1642, col: 44, offset: 63401},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1642, col: 51, offset: 63408},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1644, col: 1, offset: 63415},
			expr: &actionExpr{
				pos: position{line: 1644, col: 17, offset: 63431},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1644, col: 17, offset: 63431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1644, col: 17, offset: 63431},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1644, col: 28, offset: 63442},
								expr: &ruleRefExpr{
									pos:  position{line: 1644, col: 29, offset: 63443},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1644, col: 42, offset: 63456},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1644, col: 69, offset: 63483},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1644, col: 78, offset: 63492},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1644, col: 107, offset: 63521},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1648, col: 1, offset: 63642},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1648, col: 32, offset: 63673},
				expr: &actionExpr{
					pos: position{line: 1648, col: 33, offset: 63674},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1648, col: 33, offset: 63674},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1648, col: 33, offset: 63674},
								expr: &ruleRefExpr{
									pos:  position{line: 1648, col: 34, offset: 63675},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1648, col: 59, offset: 63700},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1648, col: 68, offset: 63709},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1655, col: 1, offset: 64051},
			expr: &seqExpr{
				pos: position{line: 1655, col: 24, offset: 64074},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1655, col: 24, offset: 64074},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1655, col: 31, offset: 64081},
						expr: &ruleRefExpr{
							pos:  position{line: 1655, col: 31, offset: 64081},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 38, offset: 64088},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1657, col: 1, offset: 64120},
			expr: &seqExpr{
				pos: position{line: 1657, col: 29, offset: 64148},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1657, col: 29, offset: 64148},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1657, col: 36, offset: 64155},
						expr: &ruleRefExpr{
							pos:  position{line: 1657, col: 36, offset: 64155},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 43, offset: 64162},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1659, col: 1, offset: 64194},
			expr: &choiceExpr{
				pos: position{line: 1659, col: 27, offset: 64220},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1659, col: 28, offset: 64221},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1659, col: 28, offset: 64221},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1659, col: 35, offset: 64228},
								expr: &ruleRefExpr{
									pos:  position{line: 1659, col: 35, offset: 64228},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1659, col: 42, offset: 64235},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1659, col: 49, offset: 64242},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1661, col: 1, offset: 64274},
			expr: &actionExpr{
				pos: position{line: 1661, col: 15, offset: 64288},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1661, col: 15, offset: 64288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1661, col: 15, offset: 64288},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1661, col: 26, offset: 64299},
								expr: &ruleRefExpr{
									pos:  position{line: 1661, col: 27, offset: 64300},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1661, col: 40, offset: 64313},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 65, offset: 64338},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 74, offset: 64347},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1661, col: 101, offset: 64374},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1665, col: 1, offset: 64491},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1665, col: 30, offset: 64520},
				expr: &actionExpr{
					pos: position{line: 1665, col: 31, offset: 64521},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1665, col: 31, offset: 64521},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1665, col: 31, offset: 64521},
								expr: &ruleRefExpr{
									pos:  position{line: 1665, col: 32, offset: 64522},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1665, col: 55, offset: 64545},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1665, col: 64, offset: 64554},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1674, col: 1, offset: 64947},
			expr: &actionExpr{
				pos: position{line: 1674, col: 15, offset: 64961},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1674, col: 15, offset: 64961},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1674, col: 15, offset: 64961},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1674, col: 27, offset: 64973},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1675, col: 5, offset: 64991},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1679, col: 5, offset: 65190},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 30, offset: 65215},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 39, offset: 65224},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1679, col: 66, offset: 65251},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1683, col: 1, offset: 65376},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1683, col: 30, offset: 65405},
				expr: &actionExpr{
					pos: position{line: 1683, col: 31, offset: 65406},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1683, col: 31, offset: 65406},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1683, col: 31, offset: 65406},
								expr: &ruleRefExpr{
									pos:  position{line: 1683, col: 32, offset: 65407},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1683, col: 55, offset: 65430},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1683, col: 64, offset: 65439},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1690, col: 1, offset: 65783},
			expr: &seqExpr{
				pos: position{line: 1690, col: 26, offset: 65808},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1690, col: 26, offset: 65808},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1690, col: 33, offset: 65815},
						expr: &ruleRefExpr{
							pos:  position{line: 1690, col: 33, offset: 65815},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 40, offset: 65822},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1692, col: 1, offset: 65829},
			expr: &seqExpr{
				pos: position{line: 1692, col: 31, offset: 65859},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1692, col: 31, offset: 65859},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1692, col: 38, offset: 65866},
						expr: &ruleRefExpr{
							pos:  position{line: 1692, col: 38, offset: 65866},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1692, col: 45, offset: 65873},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1694, col: 1, offset: 65880},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 29, offset: 65908},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1694, col: 30, offset: 65909},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1694, col: 30, offset: 65909},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1694, col: 37, offset: 65916},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 37, offset: 65916},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1694, col: 44, offset: 65923},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1694, col: 51, offset: 65930},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1696, col: 1, offset: 65937},
			expr: &actionExpr{
				pos: position{line: 1696, col: 17, offset: 65953},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1696, col: 17, offset: 65953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1696, col: 17, offset: 65953},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1696, col: 28, offset: 65964},
								expr: &ruleRefExpr{
									pos:  position{line: 1696, col: 29, offset: 65965},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1696, col: 42, offset: 65978},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1696, col: 69, offset: 66005},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1696, col: 78, offset: 66014},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1696, col: 107, offset: 66043},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1700, col: 1, offset: 66164},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1700, col: 32, offset: 66195},
				expr: &actionExpr{
					pos: position{line: 1700, col: 33, offset: 66196},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1700, col: 33, offset: 66196},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1700, col: 33, offset: 66196},
								expr: &ruleRefExpr{
									pos:  position{line: 1700, col: 34, offset: 66197},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1700, col: 59, offset: 66222},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1700, col: 68, offset: 66231},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1707, col: 1, offset: 66579},
			expr: &seqExpr{
				pos: position{line: 1707, col: 30, offset: 66608},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1707, col: 30, offset: 66608},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1707, col: 37, offset: 66615},
						expr: &ruleRefExpr{
							pos:  position{line: 1707, col: 37, offset: 66615},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1707, col: 44, offset: 66622},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1709, col: 1, offset: 66629},
			expr: &seqExpr{
				pos: position{line: 1709, col: 35, offset: 66663},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1709, col: 35, offset: 66663},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1709, col: 42, offset: 66670},
						expr: &ruleRefExpr{
							pos:  position{line: 1709, col: 42, offset: 66670},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 49, offset: 66677},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1711, col: 1, offset: 66684},
			expr: &choiceExpr{
				pos: position{line: 1711, col: 33, offset: 66716},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1711, col: 34, offset: 66717},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1711, col: 34, offset: 66717},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1711, col: 41, offset: 66724},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 41, offset: 66724},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1711, col: 48, offset: 66731},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1711, col: 55, offset: 66738},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1713, col: 1, offset: 66745},
			expr: &actionExpr{
				pos: position{line: 1713, col: 21, offset: 66765},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1713, col: 21, offset: 66765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1713, col: 21, offset: 66765},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1713, col: 32, offset: 66776},
								expr: &ruleRefExpr{
									pos:  position{line: 1713, col: 33, offset: 66777},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1713, col: 46, offset: 66790},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 77, offset: 66821},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1713, col: 86, offset: 66830},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1713, col: 119, offset: 66863},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1717, col: 1, offset: 66992},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1717, col: 36, offset: 67027},
				expr: &actionExpr{
					pos: position{line: 1717, col: 37, offset: 67028},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1717, col: 37, offset: 67028},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1717, col: 37, offset: 67028},
								expr: &ruleRefExpr{
									pos:  position{line: 1717, col: 38, offset: 67029},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1717, col: 67, offset: 67058},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1717, col: 76, offset: 67067},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1725, col: 1, offset: 67421},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1725, col: 23, offset: 67443},
				expr: &ruleRefExpr{
					pos:  position{line: 1725, col: 23, offset: 67443},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1727, col: 1, offset: 67466},
			expr: &actionExpr{
				pos: position{line: 1728, col: 5, offset: 67494},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1728, col: 5, offset: 67494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1728, col: 5, offset: 67494},
							expr: &ruleRefExpr{
								pos:  position{line: 1728, col: 6, offset: 67495},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1728, col: 10, offset: 67499},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1728, col: 19, offset: 67508},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1728, col: 19, offset: 67508},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1729, col: 15, offset: 67534},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1730, col: 15, offset: 67563},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1731, col: 15, offset: 67590},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1732, col: 15, offset: 67622},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1733, col: 15, offset: 67656},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1734, col: 15, offset: 67688},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1735, col: 15, offset: 67728},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1736, col: 15, offset: 67758},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1737, col: 15, offset: 67787},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 15, offset: 67824},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 15, offset: 67855},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1740, col: 15, offset: 67897},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1744, col: 1, offset: 67950},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1744, col: 22, offset: 67971},
				expr: &ruleRefExpr{
					pos:  position{line: 1744, col: 22, offset: 67971},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1746, col: 1, offset: 67993},
			expr: &actionExpr{
				pos: position{line: 1746, col: 22, offset: 68014},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1746, col: 22, offset: 68014},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1746, col: 22, offset: 68014},
							expr: &ruleRefExpr{
								pos:  position{line: 1746, col: 23, offset: 68015},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1746, col: 27, offset: 68019},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1746, col: 36, offset: 68028},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1746, col: 36, offset: 68028},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1746, col: 48, offset: 68040},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1750, col: 1, offset: 68094},
			expr: &actionExpr{
				pos: position{line: 1750, col: 24, offset: 68117},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1750, col: 24, offset: 68117},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1750, col: 30, offset: 68123},
						expr: &ruleRefExpr{
							pos:  position{line: 1750, col: 31, offset: 68124},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1754, col: 1, offset: 68218},
			expr: &actionExpr{
				pos: position{line: 1754, col: 28, offset: 68245},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1754, col: 28, offset: 68245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1754, col: 28, offset: 68245},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1754, col: 37, offset: 68254},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 38, offset: 68255},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1754, col: 54, offset: 68271},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1761, col: 1, offset: 68520},
			expr: &actionExpr{
				pos: position{line: 1761, col: 10, offset: 68529},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1761, col: 10, offset: 68529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1761, col: 10, offset: 68529},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1761, col: 21, offset: 68540},
								expr: &ruleRefExpr{
									pos:  position{line: 1761, col: 22, offset: 68541},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1761, col: 35, offset: 68554},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1762, col: 5, offset: 68574},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1762, col: 12, offset: 68581},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 13, offset: 68582},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1763, col: 5, offset: 68605},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1763, col: 11, offset: 68611},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 12, offset: 68612},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1764, col: 6, offset: 68630},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1764, col: 6, offset: 68630},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1764, col: 23, offset: 68647},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1768, col: 1, offset: 68766},
			expr: &seqExpr{
				pos: position{line: 1768, col: 23, offset: 68788},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1768, col: 23, offset: 68788},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1768, col: 27, offset: 68792},
						expr: &ruleRefExpr{
							pos:  position{line: 1768, col: 27, offset: 68792},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1770, col: 1, offset: 68802},
			expr: &seqExpr{
				pos: position{line: 1770, col: 19, offset: 68820},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1770, col: 19, offset: 68820},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1770, col: 26, offset: 68827},
						expr: &ruleRefExpr{
							pos:  position{line: 1770, col: 26, offset: 68827},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 33, offset: 68834},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1773, col: 1, offset: 68905},
			expr: &actionExpr{
				pos: position{line: 1773, col: 20, offset: 68924},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 20, offset: 68924},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1773, col: 20, offset: 68924},
							expr: &ruleRefExpr{
								pos:  position{line: 1773, col: 21, offset: 68925},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 36, offset: 68940},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1773, col: 42, offset: 68946},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 43, offset: 68947},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 55, offset: 68959},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 59, offset: 68963},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1777, col: 1, offset: 69035},
			expr: &actionExpr{
				pos: position{line: 1777, col: 14, offset: 69048},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 14, offset: 69048},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1777, col: 14, offset: 69048},
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 15, offset: 69049},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1777, col: 30, offset: 69064},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1777, col: 36, offset: 69070},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 37, offset: 69071},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1777, col: 49, offset: 69083},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1777, col: 53, offset: 69087},
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 53, offset: 69087},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1781, col: 1, offset: 69160},
			expr: &actionExpr{
				pos: position{line: 1781, col: 14, offset: 69173},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 14, offset: 69173},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1781, col: 14, offset: 69173},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1781, col: 33, offset: 69192},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1781, col: 42, offset: 69201},
								expr: &seqExpr{
									pos: position{line: 1781, col: 43, offset: 69202},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1781, col: 43, offset: 69202},
											expr: &ruleRefExpr{
												pos:  position{line: 1781, col: 44, offset: 69203},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1781, col: 63, offset: 69222},
											expr: &ruleRefExpr{
												pos:  position{line: 1781, col: 64, offset: 69223},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1781, col: 68, offset: 69227},
											expr: &ruleRefExpr{
												pos:  position{line: 1781, col: 68, offset: 69227},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1781, col: 75, offset: 69234},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1781, col: 89, offset: 69248},
											expr: &ruleRefExpr{
												pos:  position{line: 1781, col: 89, offset: 69248},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1788, col: 1, offset: 69504},
			expr: &seqExpr{
				pos: position{line: 1788, col: 26, offset: 69529},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 26, offset: 69529},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1788, col: 33, offset: 69536},
						expr: &ruleRefExpr{
							pos:  position{line: 1788, col: 33, offset: 69536},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 40, offset: 69543},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1790, col: 1, offset: 69550},
			expr: &seqExpr{
				pos: position{line: 1790, col: 31, offset: 69580},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1790, col: 31, offset: 69580},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1790, col: 38, offset: 69587},
						expr: &ruleRefExpr{
							pos:  position{line: 1790, col: 38, offset: 69587},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1790, col: 45, offset: 69594},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1792, col: 1, offset: 69601},
			expr: &choiceExpr{
				pos: position{line: 1792, col: 29, offset: 69629},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1792, col: 30, offset: 69630},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1792, col: 30, offset: 69630},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1792, col: 37, offset: 69637},
								expr: &ruleRefExpr{
									pos:  position{line: 1792, col: 37, offset: 69637},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1792, col: 44, offset: 69644},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1792, col: 51, offset: 69651},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1794, col: 1, offset: 69658},
			expr: &actionExpr{
				pos: position{line: 1794, col: 17, offset: 69674},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 17, offset: 69674},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1794, col: 17, offset: 69674},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1794, col: 44, offset: 69701},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1794, col: 53, offset: 69710},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1794, col: 83, offset: 69740},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1798, col: 1, offset: 69854},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1798, col: 32, offset: 69885},
				expr: &actionExpr{
					pos: position{line: 1798, col: 33, offset: 69886},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1798, col: 33, offset: 69886},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1798, col: 33, offset: 69886},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 34, offset: 69887},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1798, col: 59, offset: 69912},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 68, offset: 69921},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1802, col: 1, offset: 70066},
			expr: &actionExpr{
				pos: position{line: 1802, col: 22, offset: 70087},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 22, offset: 70087},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1802, col: 22, offset: 70087},
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 23, offset: 70088},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1802, col: 45, offset: 70110},
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 45, offset: 70110},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1802, col: 52, offset: 70117},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 57, offset: 70122},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 66, offset: 70131},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 92, offset: 70157},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1806, col: 1, offset: 70226},
			expr: &actionExpr{
				pos: position{line: 1806, col: 29, offset: 70254},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1806, col: 29, offset: 70254},
					expr: &charClassMatcher{
						pos:        position{line: 1806, col: 29, offset: 70254},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1814, col: 1, offset: 70575},
			expr: &choiceExpr{
				pos: position{line: 1814, col: 17, offset: 70591},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1814, col: 17, offset: 70591},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 49, offset: 70623},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 78, offset: 70652},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1816, col: 1, offset: 70690},
			expr: &litMatcher{
				pos:        position{line: 1816, col: 26, offset: 70715},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1819, col: 1, offset: 70790},
			expr: &actionExpr{
				pos: position{line: 1819, col: 31, offset: 70820},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1819, col: 31, offset: 70820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1819, col: 31, offset: 70820},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1819, col: 42, offset: 70831},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 43, offset: 70832},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1819, col: 56, offset: 70845},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1819, col: 63, offset: 70852},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1824, col: 1, offset: 71087},
			expr: &actionExpr{
				pos: position{line: 1825, col: 5, offset: 71128},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1825, col: 5, offset: 71128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1825, col: 5, offset: 71128},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1825, col: 16, offset: 71139},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1825, col: 16, offset: 71139},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1825, col: 16, offset: 71139},
											expr: &ruleRefExpr{
												pos:  position{line: 1825, col: 16, offset: 71139},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1825, col: 23, offset: 71146},
											expr: &charClassMatcher{
												pos:        position{line: 1825, col: 23, offset: 71146},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1827, col: 8, offset: 71201},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1828, col: 5, offset: 71265},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1828, col: 16, offset: 71276},
								expr: &actionExpr{
									pos: position{line: 1829, col: 9, offset: 71287},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1829, col: 9, offset: 71287},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1829, col: 9, offset: 71287},
												expr: &ruleRefExpr{
													pos:  position{line: 1829, col: 10, offset: 71288},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1830, col: 9, offset: 71308},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1830, col: 20, offset: 71319},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1830, col: 20, offset: 71319},
														expr: &charClassMatcher{
															pos:        position{line: 1830, col: 20, offset: 71319},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1832, col: 12, offset: 71382},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1839, col: 1, offset: 71619},
			expr: &actionExpr{
				pos: position{line: 1839, col: 39, offset: 71657},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1839, col: 39, offset: 71657},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1839, col: 39, offset: 71657},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1839, col: 50, offset: 71668},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 51, offset: 71669},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 9, offset: 71691},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1840, col: 31, offset: 71713},
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 31, offset: 71713},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1840, col: 38, offset: 71720},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 46, offset: 71728},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 53, offset: 71735},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1840, col: 95, offset: 71777},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1840, col: 96, offset: 71778},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1840, col: 96, offset: 71778},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1840, col: 118, offset: 71800},
											expr: &ruleRefExpr{
												pos:  position{line: 1840, col: 118, offset: 71800},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1840, col: 125, offset: 71807},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1840, col: 132, offset: 71814},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1845, col: 1, offset: 71978},
			expr: &actionExpr{
				pos: position{line: 1845, col: 44, offset: 72021},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1845, col: 44, offset: 72021},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1845, col: 50, offset: 72027},
						expr: &ruleRefExpr{
							pos:  position{line: 1845, col: 51, offset: 72028},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1849, col: 1, offset: 72116},
			expr: &actionExpr{
				pos: position{line: 1850, col: 5, offset: 72172},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1850, col: 5, offset: 72172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1850, col: 5, offset: 72172},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1850, col: 11, offset: 72178},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1850, col: 11, offset: 72178},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1850, col: 11, offset: 72178},
											expr: &ruleRefExpr{
												pos:  position{line: 1850, col: 12, offset: 72179},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1850, col: 34, offset: 72201},
											expr: &charClassMatcher{
												pos:        position{line: 1850, col: 34, offset: 72201},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 8, offset: 72256},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1857, col: 1, offset: 72387},
			expr: &actionExpr{
				pos: position{line: 1858, col: 5, offset: 72426},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1858, col: 5, offset: 72426},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1858, col: 5, offset: 72426},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1858, col: 16, offset: 72437},
								expr: &ruleRefExpr{
									pos:  position{line: 1858, col: 17, offset: 72438},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1859, col: 5, offset: 72456},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1866, col: 5, offset: 72670},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1866, col: 12, offset: 72677},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1870, col: 1, offset: 72831},
			expr: &actionExpr{
				pos: position{line: 1870, col: 16, offset: 72846},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1870, col: 16, offset: 72846},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1875, col: 1, offset: 72934},
			expr: &actionExpr{
				pos: position{line: 1875, col: 39, offset: 72972},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1875, col: 39, offset: 72972},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1875, col: 45, offset: 72978},
						expr: &ruleRefExpr{
							pos:  position{line: 1875, col: 46, offset: 72979},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1879, col: 1, offset: 73063},
			expr: &actionExpr{
				pos: position{line: 1879, col: 38, offset: 73100},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 38, offset: 73100},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1879, col: 38, offset: 73100},
							expr: &ruleRefExpr{
								pos:  position{line: 1879, col: 39, offset: 73101},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1879, col: 49, offset: 73111},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1879, col: 58, offset: 73120},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1879, col: 58, offset: 73120},
									expr: &charClassMatcher{
										pos:        position{line: 1879, col: 58, offset: 73120},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1881, col: 4, offset: 73167},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1888, col: 1, offset: 73360},
			expr: &actionExpr{
				pos: position{line: 1888, col: 14, offset: 73373},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 14, offset: 73373},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1888, col: 14, offset: 73373},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1888, col: 19, offset: 73378},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1888, col: 25, offset: 73384},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1888, col: 43, offset: 73402},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1892, col: 1, offset: 73471},
			expr: &actionExpr{
				pos: position{line: 1892, col: 21, offset: 73491},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1892, col: 21, offset: 73491},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1892, col: 30, offset: 73500},
						expr: &choiceExpr{
							pos: position{line: 1892, col: 31, offset: 73501},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1892, col: 31, offset: 73501},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1892, col: 38, offset: 73508},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1892, col: 51, offset: 73521},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1892, col: 66, offset: 73536},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1892, col: 74, offset: 73544},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1892, col: 75, offset: 73545},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1892, col: 75, offset: 73545},
												expr: &litMatcher{
													pos:        position{line: 1892, col: 76, offset: 73546},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1892, col: 81, offset: 73551,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1898, col: 1, offset: 73663},
			expr: &actionExpr{
				pos: position{line: 1898, col: 23, offset: 73685},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1898, col: 23, offset: 73685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1898, col: 23, offset: 73685},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1898, col: 29, offset: 73691},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1898, col: 36, offset: 73698},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1899, col: 5, offset: 73731},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1899, col: 11, offset: 73737},
								expr: &actionExpr{
									pos: position{line: 1899, col: 12, offset: 73738},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1899, col: 12, offset: 73738},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1899, col: 12, offset: 73738},
												expr: &ruleRefExpr{
													pos:  position{line: 1899, col: 12, offset: 73738},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1899, col: 19, offset: 73745},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1899, col: 23, offset: 73749},
												expr: &ruleRefExpr{
													pos:  position{line: 1899, col: 23, offset: 73749},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1899, col: 30, offset: 73756},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1899, col: 39, offset: 73765},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 5, offset: 73824},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1900, col: 11, offset: 73830},
								expr: &actionExpr{
									pos: position{line: 1900, col: 12, offset: 73831},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1900, col: 12, offset: 73831},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1900, col: 12, offset: 73831},
												expr: &ruleRefExpr{
													pos:  position{line: 1900, col: 12, offset: 73831},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1900, col: 19, offset: 73838},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1900, col: 23, offset: 73842},
												expr: &ruleRefExpr{
													pos:  position{line: 1900, col: 23, offset: 73842},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1900, col: 30, offset: 73849},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1900, col: 39, offset: 73858},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1901, col: 5, offset: 73917},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1905, col: 1, offset: 74000},
			expr: &actionExpr{
				pos: position{line: 1905, col: 30, offset: 74029},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1905, col: 30, offset: 74029},
					expr: &choiceExpr{
						pos: position{line: 1905, col: 31, offset: 74030},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1905, col: 31, offset: 74030},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1905, col: 42, offset: 74041},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1912, col: 1, offset: 74197},
			expr: &actionExpr{
				pos: position{line: 1912, col: 14, offset: 74210},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1912, col: 14, offset: 74210},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1912, col: 14, offset: 74210},
							expr: &ruleRefExpr{
								pos:  position{line: 1912, col: 15, offset: 74211},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1912, col: 19, offset: 74215},
							expr: &ruleRefExpr{
								pos:  position{line: 1912, col: 19, offset: 74215},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1912, col: 26, offset: 74222},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1919, col: 1, offset: 74376},
			expr: &charClassMatcher{
				pos:        position{line: 1919, col: 13, offset: 74388},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1921, col: 1, offset: 74400},
			expr: &choiceExpr{
				pos: position{line: 1921, col: 16, offset: 74415},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1921, col: 16, offset: 74415},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1921, col: 22, offset: 74421},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1921, col: 28, offset: 74427},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1921, col: 34, offset: 74433},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1921, col: 40, offset: 74439},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1921, col: 46, offset: 74445},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1923, col: 1, offset: 74453},
			expr: &actionExpr{
				pos: position{line: 1923, col: 14, offset: 74466},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1923, col: 14, offset: 74466},
					expr: &charClassMatcher{
						pos:        position{line: 1923, col: 14, offset: 74466},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1927, col: 1, offset: 74516},
			expr: &choiceExpr{
				pos: position{line: 1931, col: 5, offset: 74847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1931, col: 5, offset: 74847},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1931, col: 5, offset: 74847},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1931, col: 5, offset: 74847},
									expr: &charClassMatcher{
										pos:        position{line: 1931, col: 5, offset: 74847},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1931, col: 15, offset: 74857},
									expr: &choiceExpr{
										pos: position{line: 1931, col: 17, offset: 74859},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1931, col: 17, offset: 74859},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1931, col: 30, offset: 74872},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1933, col: 9, offset: 74944},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1933, col: 9, offset: 74944},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1933, col: 9, offset: 74944},
									expr: &charClassMatcher{
										pos:        position{line: 1933, col: 9, offset: 74944},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1933, col: 19, offset: 74954},
									expr: &seqExpr{
										pos: position{line: 1933, col: 20, offset: 74955},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1933, col: 20, offset: 74955},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1933, col: 27, offset: 74962},
												expr: &charClassMatcher{
													pos:        position{line: 1933, col: 27, offset: 74962},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1937, col: 1, offset: 75042},
			expr: &choiceExpr{
				pos: position{line: 1938, col: 5, offset: 75124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1938, col: 5, offset: 75124},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1938, col: 5, offset: 75124},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1938, col: 5, offset: 75124},
									expr: &charClassMatcher{
										pos:        position{line: 1938, col: 5, offset: 75124},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1938, col: 20, offset: 75139},
									expr: &choiceExpr{
										pos: position{line: 1938, col: 22, offset: 75141},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1938, col: 22, offset: 75141},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1938, col: 32, offset: 75151},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1940, col: 9, offset: 75223},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1943, col: 1, offset: 75326},
			expr: &actionExpr{
				pos: position{line: 1943, col: 12, offset: 75337},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1943, col: 12, offset: 75337},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1947, col: 1, offset: 75406},
			expr: &actionExpr{
				pos: position{line: 1947, col: 17, offset: 75422},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1947, col: 17, offset: 75422},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1947, col: 22, offset: 75427},
						expr: &choiceExpr{
							pos: position{line: 1947, col: 23, offset: 75428},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1947, col: 23, offset: 75428},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 34, offset: 75439},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1951, col: 1, offset: 75527},
			expr: &actionExpr{
				pos: position{line: 1951, col: 25, offset: 75551},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1951, col: 25, offset: 75551},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1951, col: 30, offset: 75556},
						expr: &charClassMatcher{
							pos:        position{line: 1951, col: 31, offset: 75557},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1955, col: 1, offset: 75633},
			expr: &actionExpr{
				pos: position{line: 1955, col: 13, offset: 75645},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1955, col: 13, offset: 75645},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1955, col: 13, offset: 75645},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1955, col: 20, offset: 75652},
								expr: &ruleRefExpr{
									pos:  position{line: 1955, col: 21, offset: 75653},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1955, col: 34, offset: 75666},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1955, col: 39, offset: 75671},
								expr: &choiceExpr{
									pos: position{line: 1955, col: 40, offset: 75672},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1955, col: 40, offset: 75672},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1955, col: 51, offset: 75683},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1959, col: 1, offset: 75775},
			expr: &actionExpr{
				pos: position{line: 1959, col: 23, offset: 75797},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1959, col: 23, offset: 75797},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1959, col: 23, offset: 75797},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1959, col: 31, offset: 75805},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 43, offset: 75817},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1959, col: 48, offset: 75822},
								expr: &choiceExpr{
									pos: position{line: 1959, col: 49, offset: 75823},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1959, col: 49, offset: 75823},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1959, col: 60, offset: 75834},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1963, col: 1, offset: 75926},
			expr: &oneOrMoreExpr{
				pos: position{line: 1963, col: 13, offset: 75938},
				expr: &charClassMatcher{
					pos:        position{line: 1963, col: 14, offset: 75939},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1965, col: 1, offset: 76075},
			expr: &actionExpr{
				pos: position{line: 1965, col: 21, offset: 76095},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1965, col: 21, offset: 76095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1965, col: 21, offset: 76095},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 29, offset: 76103},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 41, offset: 76115},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 47, offset: 76121},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1970, col: 1, offset: 76374},
			expr: &oneOrMoreExpr{
				pos: position{line: 1970, col: 22, offset: 76395},
				expr: &charClassMatcher{
					pos:        position{line: 1970, col: 23, offset: 76396},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1972, col: 1, offset: 76530},
			expr: &actionExpr{
				pos: position{line: 1972, col: 9, offset: 76538},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1972, col: 9, offset: 76538},
					expr: &charClassMatcher{
						pos:        position{line: 1972, col: 9, offset: 76538},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1976, col: 1, offset: 76590},
			expr: &choiceExpr{
				pos: position{line: 1976, col: 15, offset: 76604},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1976, col: 15, offset: 76604},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1976, col: 27, offset: 76616},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1976, col: 40, offset: 76629},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1976, col: 51, offset: 76640},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1976, col: 62, offset: 76651},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1978, col: 1, offset: 76664},
			expr: &actionExpr{
				pos: position{line: 1978, col: 7, offset: 76670},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1978, col: 7, offset: 76670},
					expr: &charClassMatcher{
						pos:        position{line: 1978, col: 7, offset: 76670},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1982, col: 1, offset: 76799},
			expr: &actionExpr{
				pos: position{line: 1982, col: 10, offset: 76808},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1982, col: 10, offset: 76808},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1986, col: 1, offset: 76854},
			expr: &actionExpr{
				pos: position{line: 1986, col: 11, offset: 76864},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1986, col: 11, offset: 76864},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1986, col: 11, offset: 76864},
							expr: &litMatcher{
								pos:        position{line: 1986, col: 11, offset: 76864},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1986, col: 16, offset: 76869},
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 16, offset: 76869},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1990, col: 1, offset: 76925},
			expr: &choiceExpr{
				pos: position{line: 1990, col: 10, offset: 76934},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1990, col: 10, offset: 76934},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1990, col: 16, offset: 76940},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1990, col: 16, offset: 76940},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1994, col: 1, offset: 76985},
			expr: &choiceExpr{
				pos: position{line: 1994, col: 12, offset: 76996},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1994, col: 12, offset: 76996},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1994, col: 21, offset: 77005},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1994, col: 28, offset: 77012},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1996, col: 1, offset: 77020},
			expr: &notExpr{
				pos: position{line: 1996, col: 8, offset: 77027},
				expr: &anyMatcher{
					line: 1996, col: 9, offset: 77028,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1998, col: 1, offset: 77033},
			expr: &choiceExpr{
				pos: position{line: 1998, col: 8, offset: 77040},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1998, col: 8, offset: 77040},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1998, col: 18, offset: 77050},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {

	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onQuotedString1(qs interface{}) (interface{}, error) {

	return qs, nil
}

func (p *parser) callonQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString1(stack["qs"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.QuotedString{Kind: types.SingleQuote, Elements: elements.([]interface{})}, nil
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.QuotedString{Kind: types.DoubleQuote, Elements: elements.([]interface{})}, nil
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText19(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText19(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextStringElement1()
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextStringElement1()
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
