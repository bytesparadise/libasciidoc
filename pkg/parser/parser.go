// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "RawDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 78, offset: 412},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 22, col: 1, offset: 536},
			expr: &actionExpr{
				pos: position{line: 22, col: 12, offset: 547},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 22, col: 12, offset: 547},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 12, offset: 547},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 20, offset: 555},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 36, offset: 571},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 27, col: 1, offset: 687},
			expr: &actionExpr{
				pos: position{line: 27, col: 17, offset: 703},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 27, col: 17, offset: 703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 17, offset: 703},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 25, offset: 711},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 45, offset: 731},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawDocumentBlocks",
			pos:  position{line: 34, col: 1, offset: 912},
			expr: &actionExpr{
				pos: position{line: 34, col: 22, offset: 933},
				run: (*parser).callonRawDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 34, col: 22, offset: 933},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 34, col: 22, offset: 933},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 34, col: 30, offset: 941},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 30, offset: 941},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 47, offset: 958},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 34, col: 55, offset: 966},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 55, offset: 966},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 43, col: 1, offset: 1218},
			expr: &choiceExpr{
				pos: position{line: 44, col: 9, offset: 1247},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 44, col: 9, offset: 1247},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1312},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1333},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1362},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1414},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1432},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1457},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1481},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1509},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1533},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1559},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1588},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1614},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1649},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1673},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1705},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1731},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1768},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1793},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1824},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1838},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1875},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1875},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1875},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1876},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1885},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 9, offset: 1901},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1901},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1922},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1947},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 1998},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2022},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2050},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2074},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2100},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2129},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2155},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2190},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2214},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2246},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2272},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2309},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2334},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2375},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2397},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2404},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2405},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2426},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2447},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2447},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2447},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2448},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2457},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2464},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2464},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2476},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2625},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2640},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2658},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2677},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2677},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2677},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2698},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2706},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2707},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2732},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2812},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2837},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2837},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2843},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2843},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 2850},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 2855},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 2881},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 2881},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 2882},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 2883},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 2883},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 2884},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 2905,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3071},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3089},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3089},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3089},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3093},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3093},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3100},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3107},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3122},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3126},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3126},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3144},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3156},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3157},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 112, col: 10, offset: 3157},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 112, col: 10, offset: 3157},
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 10, offset: 3157},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 17, offset: 3164},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 37, offset: 3184},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3207},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3216},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3216},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 114, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 114, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 114, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 114, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3294},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3304},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3304},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3405},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3424},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3452},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3482},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3511},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3511},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3511},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3511},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3518},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3519},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3523},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3532},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3532},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3549},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3619},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3651},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3651},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3651},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3651},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3658},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3669},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3677},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3693},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3772},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3790},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3790},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3790},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3790},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3797},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3807},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3827},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3833},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3834},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 3856},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 3856},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 3863},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 3863},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 3868},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 3868},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4013},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4035},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4035},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4035},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4082},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4105},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4105},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4105},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4109},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4116},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4117},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4117},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4164},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4325},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4345},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4345},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4345},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4345},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4352},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4353},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4357},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4376},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4377},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4377},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4377},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4388},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4412},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4412},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4417},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4425},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4426},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4449},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4449},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4454},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4464},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4465},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4582},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4582},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4582},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4591},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4613},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4613},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4618},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4628},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4629},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4738},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 4868},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 4894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 4894},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 4894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 4894},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 4899},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 4906},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 4906},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 4954},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 4954},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 4954},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 4954},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 4960},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 4967},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 4967},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 4978},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 4978},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 4985},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 4986},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5026},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5050},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5050},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5050},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5096},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5122},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5122},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5122},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5275},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5299},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5299},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5303},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5309},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5324},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5337},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5343},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5344},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5345},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5345},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5345},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5352},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5359},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5433},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5433},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5440},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5680},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5697},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5697},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5697},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5707},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5708},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5756},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 5785},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 5785},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 5785},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 5830},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 5848},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 5848},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 5848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 5848},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 5853},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 5859},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 5874},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 5878},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 5878},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 5885},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5945},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5945},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 5945},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 5949},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5955},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 5970},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 5975},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 5975},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 5982},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6041},
			expr: &choiceExpr{
				pos: position{line: 197, col: 26, offset: 6066},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 197, col: 26, offset: 6066},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 39, offset: 6079},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 199, col: 1, offset: 6088},
			expr: &actionExpr{
				pos: position{line: 199, col: 12, offset: 6099},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 199, col: 12, offset: 6099},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 199, col: 12, offset: 6099},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 16, offset: 6103},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 21, offset: 6108},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 199, col: 35, offset: 6122},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 203, col: 1, offset: 6188},
			expr: &choiceExpr{
				pos: position{line: 203, col: 15, offset: 6202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 15, offset: 6202},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 29, offset: 6216},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 43, offset: 6230},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 61, offset: 6248},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 80, offset: 6267},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 98, offset: 6285},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 205, col: 1, offset: 6303},
			expr: &actionExpr{
				pos: position{line: 205, col: 16, offset: 6318},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 205, col: 16, offset: 6318},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 16, offset: 6318},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 28, offset: 6330},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 33, offset: 6335},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 47, offset: 6349},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 209, col: 1, offset: 6425},
			expr: &actionExpr{
				pos: position{line: 209, col: 16, offset: 6440},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 209, col: 16, offset: 6440},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 16, offset: 6440},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 29, offset: 6453},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 34, offset: 6458},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 48, offset: 6472},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 213, col: 1, offset: 6547},
			expr: &actionExpr{
				pos: position{line: 213, col: 20, offset: 6566},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 213, col: 20, offset: 6566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 6566},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 32, offset: 6578},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 37, offset: 6583},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 51, offset: 6597},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 55, offset: 6601},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 213, col: 61, offset: 6607},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 70, offset: 6616},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 217, col: 1, offset: 6694},
			expr: &actionExpr{
				pos: position{line: 217, col: 21, offset: 6714},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 217, col: 21, offset: 6714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 21, offset: 6714},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 34, offset: 6727},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 39, offset: 6732},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 53, offset: 6746},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 57, offset: 6750},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 217, col: 63, offset: 6756},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 72, offset: 6765},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 221, col: 1, offset: 6842},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 6861},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 6861},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 6861},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 6873},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 6878},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 6892},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 6896},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 221, col: 60, offset: 6901},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 60, offset: 6901},
									expr: &charClassMatcher{
										pos:        position{line: 221, col: 60, offset: 6901},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 108, offset: 6949},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 225, col: 1, offset: 7031},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7051},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7051},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 7051},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 7064},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 7069},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7083},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7087},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 225, col: 62, offset: 7092},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 225, col: 62, offset: 7092},
									expr: &charClassMatcher{
										pos:        position{line: 225, col: 62, offset: 7092},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 110, offset: 7140},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 229, col: 1, offset: 7221},
			expr: &actionExpr{
				pos: position{line: 229, col: 15, offset: 7235},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 229, col: 15, offset: 7235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 229, col: 15, offset: 7235},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 229, col: 21, offset: 7241},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 22, offset: 7242},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 41, offset: 7261},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 41, offset: 7261},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 233, col: 1, offset: 7331},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7351},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7351},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 233, col: 21, offset: 7351},
							expr: &choiceExpr{
								pos: position{line: 233, col: 23, offset: 7353},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 233, col: 23, offset: 7353},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 233, col: 29, offset: 7359},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 7436},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 234, col: 11, offset: 7442},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 11, offset: 7442},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7463},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7487},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7524},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7552},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 239, col: 9, offset: 7580},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 240, col: 9, offset: 7607},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7634},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7671},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7707},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 247, col: 1, offset: 7810},
			expr: &actionExpr{
				pos: position{line: 247, col: 14, offset: 7823},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 247, col: 14, offset: 7823},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 14, offset: 7823},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 7828},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 23, offset: 7832},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 27, offset: 7836},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 32, offset: 7841},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 7841},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 39, offset: 7848},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 251, col: 1, offset: 7891},
			expr: &actionExpr{
				pos: position{line: 251, col: 20, offset: 7910},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 251, col: 20, offset: 7910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 20, offset: 7910},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 7915},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 29, offset: 7919},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 33, offset: 7923},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 38, offset: 7928},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 38, offset: 7928},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 257, col: 1, offset: 8205},
			expr: &actionExpr{
				pos: position{line: 257, col: 17, offset: 8221},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 257, col: 17, offset: 8221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 17, offset: 8221},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 21, offset: 8225},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 28, offset: 8232},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 49, offset: 8253},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 49, offset: 8253},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 56, offset: 8260},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 261, col: 1, offset: 8318},
			expr: &actionExpr{
				pos: position{line: 261, col: 24, offset: 8341},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 261, col: 24, offset: 8341},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 261, col: 24, offset: 8341},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 32, offset: 8349},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 32, offset: 8349},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 267, col: 1, offset: 8603},
			expr: &actionExpr{
				pos: position{line: 267, col: 31, offset: 8633},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 31, offset: 8633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 31, offset: 8633},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 35, offset: 8637},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 267, col: 42, offset: 8644},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 42, offset: 8644},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 42, offset: 8644},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 57, offset: 8659},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 57, offset: 8659},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 69, offset: 8671},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 73, offset: 8675},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 73, offset: 8675},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 80, offset: 8682},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 271, col: 1, offset: 8736},
			expr: &choiceExpr{
				pos: position{line: 271, col: 15, offset: 8750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 15, offset: 8750},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 31, offset: 8766},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 46, offset: 8781},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 275, col: 1, offset: 9009},
			expr: &actionExpr{
				pos: position{line: 275, col: 18, offset: 9026},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 275, col: 18, offset: 9026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 18, offset: 9026},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 22, offset: 9030},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 29, offset: 9037},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 275, col: 29, offset: 9037},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 29, offset: 9037},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 45, offset: 9053},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 45, offset: 9053},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 60, offset: 9068},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 60, offset: 9068},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 82, offset: 9090},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 82, offset: 9090},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 104, offset: 9112},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 104, offset: 9112},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 116, offset: 9124},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 120, offset: 9128},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 279, col: 1, offset: 9182},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 9200},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 279, col: 19, offset: 9200},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 279, col: 25, offset: 9206},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 283, col: 1, offset: 9267},
			expr: &actionExpr{
				pos: position{line: 283, col: 25, offset: 9291},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 283, col: 25, offset: 9291},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 25, offset: 9291},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 25, offset: 9291},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 32, offset: 9298},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 36, offset: 9302},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 36, offset: 9302},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 43, offset: 9309},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 49, offset: 9315},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 49, offset: 9315},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 290, col: 1, offset: 9456},
			expr: &actionExpr{
				pos: position{line: 290, col: 25, offset: 9480},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 290, col: 25, offset: 9480},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 25, offset: 9480},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 25, offset: 9480},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 32, offset: 9487},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 36, offset: 9491},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 36, offset: 9491},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 43, offset: 9498},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 49, offset: 9504},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 49, offset: 9504},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 297, col: 1, offset: 9645},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9665},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9665},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9665},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 33, offset: 9677},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 33, offset: 9677},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 40, offset: 9684},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 301, col: 1, offset: 9736},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 9765},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 9765},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 9765},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 39, offset: 9774},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 39, offset: 9774},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 46, offset: 9781},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 306, col: 1, offset: 9922},
			expr: &actionExpr{
				pos: position{line: 306, col: 30, offset: 9951},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 306, col: 30, offset: 9951},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9951},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 34, offset: 9955},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 37, offset: 9958},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 306, col: 53, offset: 9974},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 57, offset: 9978},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 57, offset: 9978},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 64, offset: 9985},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 311, col: 1, offset: 10140},
			expr: &actionExpr{
				pos: position{line: 311, col: 21, offset: 10160},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 311, col: 21, offset: 10160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 21, offset: 10160},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 5, offset: 10175},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 14, offset: 10184},
								expr: &actionExpr{
									pos: position{line: 312, col: 15, offset: 10185},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 312, col: 15, offset: 10185},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 312, col: 15, offset: 10185},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 19, offset: 10189},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 312, col: 24, offset: 10194},
													expr: &ruleRefExpr{
														pos:  position{line: 312, col: 25, offset: 10195},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 5, offset: 10250},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 12, offset: 10257},
								expr: &actionExpr{
									pos: position{line: 313, col: 13, offset: 10258},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 313, col: 13, offset: 10258},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 313, col: 13, offset: 10258},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 313, col: 17, offset: 10262},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 313, col: 22, offset: 10267},
													expr: &ruleRefExpr{
														pos:  position{line: 313, col: 23, offset: 10268},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 10315},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 9, offset: 10319},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 9, offset: 10319},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 16, offset: 10326},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 319, col: 1, offset: 10477},
			expr: &actionExpr{
				pos: position{line: 319, col: 19, offset: 10495},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 319, col: 19, offset: 10495},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 19, offset: 10495},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 23, offset: 10499},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 319, col: 34, offset: 10510},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 35, offset: 10511},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 54, offset: 10530},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 58, offset: 10534},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 58, offset: 10534},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 65, offset: 10541},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 323, col: 1, offset: 10613},
			expr: &choiceExpr{
				pos: position{line: 323, col: 21, offset: 10633},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 323, col: 21, offset: 10633},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 49, offset: 10661},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 325, col: 1, offset: 10691},
			expr: &actionExpr{
				pos: position{line: 325, col: 30, offset: 10720},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 325, col: 30, offset: 10720},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 30, offset: 10720},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 35, offset: 10725},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 49, offset: 10739},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 53, offset: 10743},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 59, offset: 10749},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 60, offset: 10750},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 77, offset: 10767},
							expr: &litMatcher{
								pos:        position{line: 325, col: 77, offset: 10767},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 82, offset: 10772},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 82, offset: 10772},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 329, col: 1, offset: 10871},
			expr: &actionExpr{
				pos: position{line: 329, col: 33, offset: 10903},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 33, offset: 10903},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 33, offset: 10903},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 38, offset: 10908},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 52, offset: 10922},
							expr: &litMatcher{
								pos:        position{line: 329, col: 52, offset: 10922},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 57, offset: 10927},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 57, offset: 10927},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 333, col: 1, offset: 11015},
			expr: &actionExpr{
				pos: position{line: 333, col: 17, offset: 11031},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 333, col: 17, offset: 11031},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 333, col: 17, offset: 11031},
							expr: &litMatcher{
								pos:        position{line: 333, col: 18, offset: 11032},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 26, offset: 11040},
							expr: &litMatcher{
								pos:        position{line: 333, col: 27, offset: 11041},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 35, offset: 11049},
							expr: &litMatcher{
								pos:        position{line: 333, col: 36, offset: 11050},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 46, offset: 11060},
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 48, offset: 11062},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 48, offset: 11062},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 56, offset: 11070},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 61, offset: 11075},
								expr: &charClassMatcher{
									pos:        position{line: 333, col: 61, offset: 11075},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 75, offset: 11089},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 75, offset: 11089},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 337, col: 1, offset: 11132},
			expr: &actionExpr{
				pos: position{line: 337, col: 19, offset: 11150},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 337, col: 19, offset: 11150},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 337, col: 26, offset: 11157},
						expr: &charClassMatcher{
							pos:        position{line: 337, col: 26, offset: 11157},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 341, col: 1, offset: 11208},
			expr: &actionExpr{
				pos: position{line: 341, col: 29, offset: 11236},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 341, col: 29, offset: 11236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 341, col: 29, offset: 11236},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 36, offset: 11243},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 36, offset: 11243},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 341, col: 50, offset: 11257},
							expr: &litMatcher{
								pos:        position{line: 341, col: 51, offset: 11258},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 345, col: 1, offset: 11424},
			expr: &actionExpr{
				pos: position{line: 345, col: 20, offset: 11443},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 20, offset: 11443},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 20, offset: 11443},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 29, offset: 11452},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 29, offset: 11452},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 36, offset: 11459},
							expr: &litMatcher{
								pos:        position{line: 345, col: 36, offset: 11459},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 41, offset: 11464},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 48, offset: 11471},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 49, offset: 11472},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 66, offset: 11489},
							expr: &litMatcher{
								pos:        position{line: 345, col: 66, offset: 11489},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 71, offset: 11494},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 77, offset: 11500},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 78, offset: 11501},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 95, offset: 11518},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 99, offset: 11522},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 99, offset: 11522},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 106, offset: 11529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 349, col: 1, offset: 11598},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11617},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11617},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 20, offset: 11617},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 29, offset: 11626},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 29, offset: 11626},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 36, offset: 11633},
							expr: &litMatcher{
								pos:        position{line: 349, col: 36, offset: 11633},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 41, offset: 11638},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 48, offset: 11645},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 49, offset: 11646},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 66, offset: 11663},
							expr: &litMatcher{
								pos:        position{line: 349, col: 66, offset: 11663},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 71, offset: 11668},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 77, offset: 11674},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 78, offset: 11675},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 95, offset: 11692},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 99, offset: 11696},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 99, offset: 11696},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 106, offset: 11703},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 353, col: 1, offset: 11790},
			expr: &actionExpr{
				pos: position{line: 353, col: 19, offset: 11808},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 353, col: 20, offset: 11809},
					expr: &charClassMatcher{
						pos:        position{line: 353, col: 20, offset: 11809},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 357, col: 1, offset: 11858},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 11877},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 11877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 11877},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 24, offset: 11881},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 357, col: 31, offset: 11888},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 357, col: 31, offset: 11888},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 31, offset: 11888},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 51, offset: 11908},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 51, offset: 11908},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 66, offset: 11923},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 66, offset: 11923},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 78, offset: 11935},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 361, col: 1, offset: 11989},
			expr: &actionExpr{
				pos: position{line: 361, col: 23, offset: 12011},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 23, offset: 12011},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 361, col: 28, offset: 12016},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 365, col: 1, offset: 12075},
			expr: &actionExpr{
				pos: position{line: 365, col: 25, offset: 12099},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 365, col: 25, offset: 12099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 25, offset: 12099},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 365, col: 36, offset: 12110},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 37, offset: 12111},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 56, offset: 12130},
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 56, offset: 12130},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 67, offset: 12141},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 369, col: 1, offset: 12249},
			expr: &choiceExpr{
				pos: position{line: 369, col: 18, offset: 12266},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 369, col: 18, offset: 12266},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 36, offset: 12284},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 58, offset: 12306},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 371, col: 1, offset: 12325},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12348},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12348},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 28, offset: 12352},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 35, offset: 12359},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 371, col: 50, offset: 12374},
							expr: &charClassMatcher{
								pos:        position{line: 371, col: 51, offset: 12375},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 375, col: 1, offset: 12435},
			expr: &actionExpr{
				pos: position{line: 375, col: 20, offset: 12454},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 375, col: 20, offset: 12454},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 20, offset: 12454},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 24, offset: 12458},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 27, offset: 12461},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 375, col: 42, offset: 12476},
							expr: &charClassMatcher{
								pos:        position{line: 375, col: 43, offset: 12477},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 379, col: 1, offset: 12529},
			expr: &actionExpr{
				pos: position{line: 379, col: 22, offset: 12550},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 379, col: 22, offset: 12550},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 22, offset: 12550},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 26, offset: 12554},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 31, offset: 12559},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 46, offset: 12574},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 47, offset: 12575},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 384, col: 1, offset: 12675},
			expr: &actionExpr{
				pos: position{line: 384, col: 20, offset: 12694},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 384, col: 20, offset: 12694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 20, offset: 12694},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 26, offset: 12700},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 384, col: 41, offset: 12715},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 42, offset: 12716},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 388, col: 1, offset: 12752},
			expr: &choiceExpr{
				pos: position{line: 388, col: 14, offset: 12765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 388, col: 14, offset: 12765},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 26, offset: 12777},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 38, offset: 12789},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 50, offset: 12801},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 390, col: 1, offset: 12815},
			expr: &actionExpr{
				pos: position{line: 390, col: 15, offset: 12829},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 390, col: 15, offset: 12829},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 390, col: 21, offset: 12835},
						expr: &ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 12835},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 394, col: 1, offset: 12900},
			expr: &actionExpr{
				pos: position{line: 394, col: 18, offset: 12917},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 394, col: 18, offset: 12917},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 394, col: 18, offset: 12917},
							expr: &litMatcher{
								pos:        position{line: 394, col: 18, offset: 12917},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 23, offset: 12922},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 23, offset: 12922},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 30, offset: 12929},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 32, offset: 12931},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 45, offset: 12944},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 45, offset: 12944},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 52, offset: 12951},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 56, offset: 12955},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 394, col: 59, offset: 12958},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 59, offset: 12958},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 71, offset: 12970},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 83, offset: 12982},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 399, col: 1, offset: 13171},
			expr: &actionExpr{
				pos: position{line: 399, col: 14, offset: 13184},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 399, col: 14, offset: 13184},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 14, offset: 13184},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 14, offset: 13184},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 399, col: 21, offset: 13191},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 22, offset: 13192},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 405, col: 1, offset: 13328},
			expr: &actionExpr{
				pos: position{line: 405, col: 14, offset: 13341},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 405, col: 14, offset: 13341},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 14, offset: 13341},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 14, offset: 13341},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 21, offset: 13348},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 13352},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 29, offset: 13356},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 41, offset: 13368},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 45, offset: 13372},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 45, offset: 13372},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 405, col: 52, offset: 13379},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 53, offset: 13380},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 407, col: 1, offset: 13407},
			expr: &actionExpr{
				pos: position{line: 407, col: 16, offset: 13422},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 16, offset: 13422},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 20, offset: 13426},
						expr: &choiceExpr{
							pos: position{line: 407, col: 22, offset: 13428},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 407, col: 22, offset: 13428},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 407, col: 37, offset: 13443},
									expr: &charClassMatcher{
										pos:        position{line: 407, col: 37, offset: 13443},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 51, offset: 13457},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 409, col: 1, offset: 13497},
			expr: &actionExpr{
				pos: position{line: 409, col: 17, offset: 13513},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 409, col: 17, offset: 13513},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 412, col: 1, offset: 13573},
			expr: &actionExpr{
				pos: position{line: 412, col: 14, offset: 13586},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 412, col: 14, offset: 13586},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 14, offset: 13586},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 14, offset: 13586},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 21, offset: 13593},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 25, offset: 13597},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 29, offset: 13601},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 41, offset: 13613},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 45, offset: 13617},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 45, offset: 13617},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 414, col: 1, offset: 13645},
			expr: &actionExpr{
				pos: position{line: 414, col: 16, offset: 13660},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 16, offset: 13660},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 414, col: 20, offset: 13664},
						expr: &choiceExpr{
							pos: position{line: 414, col: 22, offset: 13666},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 414, col: 22, offset: 13666},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 414, col: 37, offset: 13681},
									expr: &charClassMatcher{
										pos:        position{line: 414, col: 37, offset: 13681},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 414, col: 51, offset: 13695},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 416, col: 1, offset: 13735},
			expr: &actionExpr{
				pos: position{line: 416, col: 17, offset: 13751},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 416, col: 17, offset: 13751},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 419, col: 1, offset: 13842},
			expr: &actionExpr{
				pos: position{line: 419, col: 17, offset: 13858},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 419, col: 17, offset: 13858},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 419, col: 17, offset: 13858},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 17, offset: 13858},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 419, col: 30, offset: 13871},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 31, offset: 13872},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 422, col: 1, offset: 13983},
			expr: &actionExpr{
				pos: position{line: 422, col: 19, offset: 14001},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 422, col: 19, offset: 14001},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 422, col: 19, offset: 14001},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 19, offset: 14001},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 422, col: 31, offset: 14013},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 32, offset: 14014},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 424, col: 1, offset: 14071},
			expr: &choiceExpr{
				pos: position{line: 424, col: 19, offset: 14089},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 19, offset: 14089},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 41, offset: 14111},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 65, offset: 14135},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 428, col: 1, offset: 14333},
			expr: &actionExpr{
				pos: position{line: 428, col: 24, offset: 14356},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 428, col: 24, offset: 14356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 24, offset: 14356},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 428, col: 31, offset: 14363},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 428, col: 31, offset: 14363},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 14449},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 13, offset: 14457},
								expr: &choiceExpr{
									pos: position{line: 431, col: 14, offset: 14458},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 14, offset: 14458},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 432, col: 12, offset: 14489},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 432, col: 12, offset: 14489},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 432, col: 34, offset: 14511},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 432, col: 34, offset: 14511},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 432, col: 34, offset: 14511},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 432, col: 39, offset: 14516},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 439, col: 1, offset: 14699},
			expr: &actionExpr{
				pos: position{line: 439, col: 13, offset: 14711},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 439, col: 13, offset: 14711},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 439, col: 13, offset: 14711},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 14713},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 439, col: 15, offset: 14713},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 439, col: 19, offset: 14717},
										expr: &ruleRefExpr{
											pos:  position{line: 439, col: 19, offset: 14717},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 29, offset: 14727},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 33, offset: 14731},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 46, offset: 14744},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 46, offset: 14744},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 439, col: 53, offset: 14751},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 57, offset: 14755},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 57, offset: 14755},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 64, offset: 14762},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 70, offset: 14768},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 85, offset: 14783},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 85, offset: 14783},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 444, col: 1, offset: 14964},
			expr: &actionExpr{
				pos: position{line: 444, col: 17, offset: 14980},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 444, col: 17, offset: 14980},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 444, col: 17, offset: 14980},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 26, offset: 14989},
							expr: &charClassMatcher{
								pos:        position{line: 444, col: 26, offset: 14989},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 448, col: 1, offset: 15037},
			expr: &choiceExpr{
				pos: position{line: 448, col: 19, offset: 15055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 19, offset: 15055},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 35, offset: 15071},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 59, offset: 15095},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 83, offset: 15119},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 450, col: 1, offset: 15135},
			expr: &actionExpr{
				pos: position{line: 450, col: 19, offset: 15153},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 450, col: 19, offset: 15153},
					expr: &charClassMatcher{
						pos:        position{line: 450, col: 19, offset: 15153},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 454, col: 1, offset: 15206},
			expr: &actionExpr{
				pos: position{line: 454, col: 26, offset: 15231},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 454, col: 26, offset: 15231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 26, offset: 15231},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 30, offset: 15235},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 454, col: 39, offset: 15244},
								expr: &choiceExpr{
									pos: position{line: 455, col: 5, offset: 15250},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 455, col: 6, offset: 15251},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 455, col: 6, offset: 15251},
												expr: &charClassMatcher{
													pos:        position{line: 455, col: 6, offset: 15251},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 10, offset: 15333},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 31, offset: 15354},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 461, col: 1, offset: 15396},
			expr: &actionExpr{
				pos: position{line: 461, col: 26, offset: 15421},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 461, col: 26, offset: 15421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 26, offset: 15421},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15426},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 461, col: 40, offset: 15435},
								expr: &choiceExpr{
									pos: position{line: 462, col: 5, offset: 15441},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 462, col: 6, offset: 15442},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 462, col: 6, offset: 15442},
												expr: &charClassMatcher{
													pos:        position{line: 462, col: 6, offset: 15442},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 464, col: 10, offset: 15524},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 31, offset: 15545},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 470, col: 1, offset: 15785},
			expr: &actionExpr{
				pos: position{line: 470, col: 18, offset: 15802},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 470, col: 18, offset: 15802},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 477, col: 1, offset: 15937},
			expr: &actionExpr{
				pos: position{line: 477, col: 12, offset: 15948},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 477, col: 12, offset: 15948},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 12, offset: 15948},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 477, col: 23, offset: 15959},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 24, offset: 15960},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 478, col: 5, offset: 15977},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 478, col: 12, offset: 15984},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 478, col: 12, offset: 15984},
									expr: &litMatcher{
										pos:        position{line: 478, col: 13, offset: 15985},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 482, col: 5, offset: 16076},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 486, col: 5, offset: 16228},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 5, offset: 16228},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 12, offset: 16235},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 16242},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 34, offset: 16257},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 486, col: 38, offset: 16261},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 38, offset: 16261},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 56, offset: 16279},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 490, col: 1, offset: 16385},
			expr: &actionExpr{
				pos: position{line: 490, col: 18, offset: 16402},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 18, offset: 16402},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 490, col: 27, offset: 16411},
						expr: &seqExpr{
							pos: position{line: 490, col: 28, offset: 16412},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 490, col: 28, offset: 16412},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 29, offset: 16413},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 490, col: 37, offset: 16421},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 38, offset: 16422},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 490, col: 54, offset: 16438},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 494, col: 1, offset: 16559},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 16575},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 494, col: 17, offset: 16575},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 494, col: 26, offset: 16584},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 494, col: 26, offset: 16584},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16599},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 496, col: 11, offset: 16644},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 11, offset: 16644},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16662},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16691},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 505, col: 1, offset: 16842},
			expr: &seqExpr{
				pos: position{line: 505, col: 31, offset: 16872},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 31, offset: 16872},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 41, offset: 16882},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 510, col: 1, offset: 16993},
			expr: &actionExpr{
				pos: position{line: 510, col: 19, offset: 17011},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 510, col: 19, offset: 17011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 19, offset: 17011},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 25, offset: 17017},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 510, col: 40, offset: 17032},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 45, offset: 17037},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 52, offset: 17044},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 68, offset: 17060},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 75, offset: 17067},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 514, col: 1, offset: 17182},
			expr: &actionExpr{
				pos: position{line: 514, col: 20, offset: 17201},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 514, col: 20, offset: 17201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 514, col: 20, offset: 17201},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 26, offset: 17207},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 514, col: 41, offset: 17222},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 45, offset: 17226},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 52, offset: 17233},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 68, offset: 17249},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 75, offset: 17256},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 518, col: 1, offset: 17372},
			expr: &actionExpr{
				pos: position{line: 518, col: 18, offset: 17389},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 518, col: 19, offset: 17390},
					expr: &charClassMatcher{
						pos:        position{line: 518, col: 19, offset: 17390},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 522, col: 1, offset: 17439},
			expr: &actionExpr{
				pos: position{line: 522, col: 19, offset: 17457},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 522, col: 19, offset: 17457},
					expr: &charClassMatcher{
						pos:        position{line: 522, col: 19, offset: 17457},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 526, col: 1, offset: 17505},
			expr: &actionExpr{
				pos: position{line: 526, col: 24, offset: 17528},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 526, col: 24, offset: 17528},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 24, offset: 17528},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 28, offset: 17532},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 526, col: 34, offset: 17538},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 35, offset: 17539},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 526, col: 54, offset: 17558},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 533, col: 1, offset: 17740},
			expr: &actionExpr{
				pos: position{line: 533, col: 18, offset: 17757},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 533, col: 18, offset: 17757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 18, offset: 17757},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 533, col: 24, offset: 17763},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 533, col: 24, offset: 17763},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 533, col: 24, offset: 17763},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 533, col: 36, offset: 17775},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 42, offset: 17781},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 533, col: 56, offset: 17795},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 74, offset: 17813},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 8, offset: 17960},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 8, offset: 17960},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 15, offset: 17967},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 539, col: 1, offset: 18019},
			expr: &actionExpr{
				pos: position{line: 539, col: 26, offset: 18044},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 539, col: 26, offset: 18044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 26, offset: 18044},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 30, offset: 18048},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 539, col: 36, offset: 18054},
								expr: &choiceExpr{
									pos: position{line: 539, col: 37, offset: 18055},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 539, col: 37, offset: 18055},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 59, offset: 18077},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 80, offset: 18098},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 99, offset: 18117},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 543, col: 1, offset: 18189},
			expr: &actionExpr{
				pos: position{line: 543, col: 24, offset: 18212},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 543, col: 24, offset: 18212},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 24, offset: 18212},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 33, offset: 18221},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 40, offset: 18228},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 543, col: 66, offset: 18254},
							expr: &litMatcher{
								pos:        position{line: 543, col: 66, offset: 18254},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 547, col: 1, offset: 18313},
			expr: &actionExpr{
				pos: position{line: 547, col: 29, offset: 18341},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 547, col: 29, offset: 18341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 29, offset: 18341},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 547, col: 36, offset: 18348},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 547, col: 36, offset: 18348},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 11, offset: 18465},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 549, col: 11, offset: 18501},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 550, col: 11, offset: 18527},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 551, col: 11, offset: 18559},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 11, offset: 18591},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 553, col: 11, offset: 18618},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 31, offset: 18638},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 31, offset: 18638},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 553, col: 39, offset: 18646},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 553, col: 39, offset: 18646},
									expr: &litMatcher{
										pos:        position{line: 553, col: 40, offset: 18647},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 553, col: 46, offset: 18653},
									expr: &litMatcher{
										pos:        position{line: 553, col: 47, offset: 18654},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 557, col: 1, offset: 18686},
			expr: &actionExpr{
				pos: position{line: 557, col: 23, offset: 18708},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 557, col: 23, offset: 18708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 23, offset: 18708},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 557, col: 30, offset: 18715},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 557, col: 30, offset: 18715},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 47, offset: 18732},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 18754},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 558, col: 12, offset: 18761},
								expr: &actionExpr{
									pos: position{line: 558, col: 13, offset: 18762},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 558, col: 13, offset: 18762},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 558, col: 13, offset: 18762},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 17, offset: 18766},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 558, col: 24, offset: 18773},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 558, col: 24, offset: 18773},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 558, col: 41, offset: 18790},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 564, col: 1, offset: 18928},
			expr: &actionExpr{
				pos: position{line: 564, col: 29, offset: 18956},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 564, col: 29, offset: 18956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 564, col: 29, offset: 18956},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 34, offset: 18961},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 564, col: 41, offset: 18968},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 564, col: 41, offset: 18968},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 564, col: 58, offset: 18985},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 19007},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 565, col: 12, offset: 19014},
								expr: &actionExpr{
									pos: position{line: 565, col: 13, offset: 19015},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 565, col: 13, offset: 19015},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 565, col: 13, offset: 19015},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 565, col: 17, offset: 19019},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 565, col: 24, offset: 19026},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 565, col: 24, offset: 19026},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 565, col: 41, offset: 19043},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 567, col: 9, offset: 19096},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 571, col: 1, offset: 19186},
			expr: &actionExpr{
				pos: position{line: 571, col: 19, offset: 19204},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 571, col: 19, offset: 19204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 19, offset: 19204},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 26, offset: 19211},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 34, offset: 19219},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 39, offset: 19224},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 44, offset: 19229},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 575, col: 1, offset: 19317},
			expr: &actionExpr{
				pos: position{line: 575, col: 25, offset: 19341},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 575, col: 25, offset: 19341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 25, offset: 19341},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 30, offset: 19346},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 37, offset: 19353},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 45, offset: 19361},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 50, offset: 19366},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 55, offset: 19371},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 63, offset: 19379},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 579, col: 1, offset: 19464},
			expr: &actionExpr{
				pos: position{line: 579, col: 20, offset: 19483},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 579, col: 20, offset: 19483},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 579, col: 32, offset: 19495},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 583, col: 1, offset: 19590},
			expr: &actionExpr{
				pos: position{line: 583, col: 26, offset: 19615},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 583, col: 26, offset: 19615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 26, offset: 19615},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 31, offset: 19620},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 43, offset: 19632},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 583, col: 51, offset: 19640},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 587, col: 1, offset: 19732},
			expr: &actionExpr{
				pos: position{line: 587, col: 23, offset: 19754},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 587, col: 23, offset: 19754},
					expr: &charClassMatcher{
						pos:        position{line: 587, col: 23, offset: 19754},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 591, col: 1, offset: 19799},
			expr: &actionExpr{
				pos: position{line: 591, col: 23, offset: 19821},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 591, col: 23, offset: 19821},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 591, col: 24, offset: 19822},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 591, col: 24, offset: 19822},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 591, col: 34, offset: 19832},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 42, offset: 19840},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 48, offset: 19846},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 591, col: 73, offset: 19871},
							expr: &litMatcher{
								pos:        position{line: 591, col: 73, offset: 19871},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 595, col: 1, offset: 20020},
			expr: &actionExpr{
				pos: position{line: 595, col: 28, offset: 20047},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 595, col: 28, offset: 20047},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 28, offset: 20047},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 35, offset: 20054},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 595, col: 54, offset: 20073},
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 54, offset: 20073},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 595, col: 62, offset: 20081},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 595, col: 62, offset: 20081},
									expr: &litMatcher{
										pos:        position{line: 595, col: 63, offset: 20082},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 595, col: 69, offset: 20088},
									expr: &litMatcher{
										pos:        position{line: 595, col: 70, offset: 20089},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 599, col: 1, offset: 20121},
			expr: &actionExpr{
				pos: position{line: 599, col: 22, offset: 20142},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 599, col: 22, offset: 20142},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 22, offset: 20142},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 29, offset: 20149},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 20163},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 12, offset: 20170},
								expr: &actionExpr{
									pos: position{line: 600, col: 13, offset: 20171},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 600, col: 13, offset: 20171},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 600, col: 13, offset: 20171},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 17, offset: 20175},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 24, offset: 20182},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 606, col: 1, offset: 20313},
			expr: &choiceExpr{
				pos: position{line: 606, col: 13, offset: 20325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 13, offset: 20325},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 13, offset: 20325},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 606, col: 18, offset: 20330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 606, col: 18, offset: 20330},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 606, col: 30, offset: 20342},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 20410},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 20410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 608, col: 5, offset: 20410},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 9, offset: 20414},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 608, col: 14, offset: 20419},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 608, col: 14, offset: 20419},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 608, col: 26, offset: 20431},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 612, col: 1, offset: 20499},
			expr: &actionExpr{
				pos: position{line: 612, col: 16, offset: 20514},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 612, col: 16, offset: 20514},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 16, offset: 20514},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 612, col: 23, offset: 20521},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 23, offset: 20521},
									expr: &litMatcher{
										pos:        position{line: 612, col: 24, offset: 20522},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 20576},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 623, col: 1, offset: 20818},
			expr: &zeroOrMoreExpr{
				pos: position{line: 623, col: 19, offset: 20836},
				expr: &choiceExpr{
					pos: position{line: 623, col: 20, offset: 20837},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 623, col: 20, offset: 20837},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 36, offset: 20853},
							name: "SingleLineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 56, offset: 20873},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 629, col: 1, offset: 21020},
			expr: &actionExpr{
				pos: position{line: 629, col: 21, offset: 21040},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 629, col: 21, offset: 21040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 21, offset: 21040},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 29, offset: 21048},
								expr: &choiceExpr{
									pos: position{line: 629, col: 30, offset: 21049},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 30, offset: 21049},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 53, offset: 21072},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 629, col: 74, offset: 21093},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 629, col: 74, offset: 21093,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 107, offset: 21126},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 633, col: 1, offset: 21197},
			expr: &actionExpr{
				pos: position{line: 633, col: 25, offset: 21221},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 633, col: 25, offset: 21221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 25, offset: 21221},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 21229},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 633, col: 38, offset: 21234},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 38, offset: 21234},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 78, offset: 21274},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 637, col: 1, offset: 21339},
			expr: &actionExpr{
				pos: position{line: 637, col: 23, offset: 21361},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 637, col: 23, offset: 21361},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 23, offset: 21361},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 31, offset: 21369},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 637, col: 36, offset: 21374},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 36, offset: 21374},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 637, col: 76, offset: 21414},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 644, col: 1, offset: 21578},
			expr: &choiceExpr{
				pos: position{line: 644, col: 18, offset: 21595},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 18, offset: 21595},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 18, offset: 21595},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 27, offset: 21604},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 9, offset: 21661},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 9, offset: 21661},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 646, col: 15, offset: 21667},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 16, offset: 21668},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 650, col: 1, offset: 21760},
			expr: &actionExpr{
				pos: position{line: 650, col: 22, offset: 21781},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 650, col: 22, offset: 21781},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 650, col: 22, offset: 21781},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 23, offset: 21782},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21790},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21791},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21806},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21807},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21829},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21830},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 21856},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 21857},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 21885},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 21886},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 21912},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 21913},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 21938},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 21939},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 21960},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 21961},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 21980},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 21981},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 22008},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 660, col: 11, offset: 22014},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 660, col: 11, offset: 22014},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 660, col: 20, offset: 22023},
										expr: &ruleRefExpr{
											pos:  position{line: 660, col: 21, offset: 22024},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 12, offset: 22123},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 666, col: 1, offset: 22162},
			expr: &seqExpr{
				pos: position{line: 666, col: 25, offset: 22186},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 666, col: 25, offset: 22186},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 666, col: 29, offset: 22190},
						expr: &ruleRefExpr{
							pos:  position{line: 666, col: 29, offset: 22190},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 36, offset: 22197},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 668, col: 1, offset: 22269},
			expr: &actionExpr{
				pos: position{line: 668, col: 29, offset: 22297},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 668, col: 29, offset: 22297},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 29, offset: 22297},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 22318},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 58, offset: 22326},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 672, col: 1, offset: 22432},
			expr: &actionExpr{
				pos: position{line: 672, col: 29, offset: 22460},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 672, col: 29, offset: 22460},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 672, col: 29, offset: 22460},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 22461},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 22470},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 673, col: 14, offset: 22479},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 673, col: 14, offset: 22479},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22504},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22528},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22549},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22577},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22601},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22628},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22657},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22722},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 22773},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22797},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22829},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 22855},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 22892},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 22917},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 695, col: 1, offset: 23083},
			expr: &actionExpr{
				pos: position{line: 695, col: 20, offset: 23102},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 695, col: 20, offset: 23102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 20, offset: 23102},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 26, offset: 23108},
								expr: &ruleRefExpr{
									pos:  position{line: 695, col: 27, offset: 23109},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 40, offset: 23122},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 48, offset: 23130},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 71, offset: 23153},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 80, offset: 23162},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 699, col: 1, offset: 23297},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 23327},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 23327},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 700, col: 5, offset: 23327},
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 5, offset: 23327},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 12, offset: 23334},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 702, col: 9, offset: 23397},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 702, col: 9, offset: 23397},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 702, col: 9, offset: 23397},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 702, col: 9, offset: 23397},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 702, col: 16, offset: 23404},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 702, col: 16, offset: 23404},
															expr: &litMatcher{
																pos:        position{line: 702, col: 17, offset: 23405},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 706, col: 9, offset: 23505},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 725, col: 11, offset: 24222},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 725, col: 11, offset: 24222},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 725, col: 11, offset: 24222},
													expr: &charClassMatcher{
														pos:        position{line: 725, col: 12, offset: 24223},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 725, col: 20, offset: 24231},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 13, offset: 24342},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 727, col: 13, offset: 24342},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 727, col: 14, offset: 24343},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 727, col: 21, offset: 24350},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 729, col: 13, offset: 24464},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 729, col: 13, offset: 24464},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 729, col: 14, offset: 24465},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 729, col: 21, offset: 24472},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 13, offset: 24586},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 731, col: 13, offset: 24586},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 731, col: 13, offset: 24586},
													expr: &charClassMatcher{
														pos:        position{line: 731, col: 14, offset: 24587},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 731, col: 22, offset: 24595},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 13, offset: 24709},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 733, col: 13, offset: 24709},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 733, col: 13, offset: 24709},
													expr: &charClassMatcher{
														pos:        position{line: 733, col: 14, offset: 24710},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 733, col: 22, offset: 24718},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 735, col: 12, offset: 24831},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 12, offset: 24831},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 739, col: 1, offset: 24866},
			expr: &actionExpr{
				pos: position{line: 739, col: 27, offset: 24892},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 27, offset: 24892},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 739, col: 37, offset: 24902},
						expr: &ruleRefExpr{
							pos:  position{line: 739, col: 37, offset: 24902},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 746, col: 1, offset: 25102},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 25123},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 25123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 22, offset: 25123},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 746, col: 28, offset: 25129},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 29, offset: 25130},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 42, offset: 25143},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 50, offset: 25151},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 75, offset: 25176},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 746, col: 86, offset: 25187},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 87, offset: 25188},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 117, offset: 25218},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 126, offset: 25227},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 750, col: 1, offset: 25380},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 25412},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 25412},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 5, offset: 25412},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 5, offset: 25412},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 12, offset: 25419},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 751, col: 20, offset: 25427},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 753, col: 9, offset: 25484},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 753, col: 9, offset: 25484},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 753, col: 9, offset: 25484},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 753, col: 16, offset: 25491},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 753, col: 16, offset: 25491},
															expr: &litMatcher{
																pos:        position{line: 753, col: 17, offset: 25492},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 757, col: 9, offset: 25592},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 774, col: 14, offset: 26299},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 774, col: 21, offset: 26306},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 774, col: 22, offset: 26307},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 776, col: 13, offset: 26393},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 13, offset: 26393},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 780, col: 1, offset: 26429},
			expr: &actionExpr{
				pos: position{line: 780, col: 32, offset: 26460},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 780, col: 32, offset: 26460},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 780, col: 32, offset: 26460},
							expr: &litMatcher{
								pos:        position{line: 780, col: 33, offset: 26461},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 37, offset: 26465},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 781, col: 7, offset: 26479},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 781, col: 7, offset: 26479},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 781, col: 7, offset: 26479},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 782, col: 7, offset: 26524},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 782, col: 7, offset: 26524},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 783, col: 7, offset: 26567},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 783, col: 7, offset: 26567},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 784, col: 7, offset: 26609},
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 7, offset: 26609},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 788, col: 1, offset: 26651},
			expr: &actionExpr{
				pos: position{line: 788, col: 29, offset: 26679},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 29, offset: 26679},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 788, col: 39, offset: 26689},
						expr: &ruleRefExpr{
							pos:  position{line: 788, col: 39, offset: 26689},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 795, col: 1, offset: 27005},
			expr: &actionExpr{
				pos: position{line: 795, col: 20, offset: 27024},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 795, col: 20, offset: 27024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 20, offset: 27024},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 795, col: 26, offset: 27030},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 27, offset: 27031},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 27044},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 46, offset: 27050},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 75, offset: 27079},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 86, offset: 27090},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 112, offset: 27116},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 795, col: 124, offset: 27128},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 125, offset: 27129},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 799, col: 1, offset: 27270},
			expr: &seqExpr{
				pos: position{line: 799, col: 26, offset: 27295},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 26, offset: 27295},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 54, offset: 27323},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 801, col: 1, offset: 27349},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 27381},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 801, col: 33, offset: 27381},
						expr: &charClassMatcher{
							pos:        position{line: 801, col: 33, offset: 27381},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 801, col: 45, offset: 27393},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 801, col: 45, offset: 27393},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 801, col: 49, offset: 27397},
								expr: &litMatcher{
									pos:        position{line: 801, col: 50, offset: 27398},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 802, col: 1, offset: 27402},
			expr: &actionExpr{
				pos: position{line: 802, col: 32, offset: 27433},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 802, col: 32, offset: 27433},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 802, col: 42, offset: 27443},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 802, col: 42, offset: 27443},
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 42, offset: 27443},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 808, col: 1, offset: 27598},
			expr: &actionExpr{
				pos: position{line: 808, col: 24, offset: 27621},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 808, col: 24, offset: 27621},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 808, col: 33, offset: 27630},
						expr: &seqExpr{
							pos: position{line: 808, col: 34, offset: 27631},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 808, col: 34, offset: 27631},
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 35, offset: 27632},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 808, col: 43, offset: 27640},
									expr: &litMatcher{
										pos:        position{line: 808, col: 44, offset: 27641},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 49, offset: 27646},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 812, col: 1, offset: 27773},
			expr: &actionExpr{
				pos: position{line: 812, col: 31, offset: 27803},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 31, offset: 27803},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 812, col: 40, offset: 27812},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 812, col: 40, offset: 27812},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 27827},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 814, col: 11, offset: 27876},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 11, offset: 27876},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 27894},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 27919},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 27948},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 27968},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28057},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28078},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28101},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28116},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 28141},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 28164},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 28185},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 28212},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 28229},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 28261},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 832, col: 1, offset: 28300},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 28333},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 28333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 28333},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 833, col: 16, offset: 28344},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 833, col: 16, offset: 28344},
									expr: &litMatcher{
										pos:        position{line: 833, col: 17, offset: 28345},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 836, col: 5, offset: 28403},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 840, col: 6, offset: 28579},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 840, col: 6, offset: 28579},
									expr: &choiceExpr{
										pos: position{line: 840, col: 7, offset: 28580},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 840, col: 7, offset: 28580},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 840, col: 15, offset: 28588},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 840, col: 27, offset: 28600},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 844, col: 1, offset: 28640},
			expr: &actionExpr{
				pos: position{line: 844, col: 31, offset: 28670},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 844, col: 31, offset: 28670},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 844, col: 40, offset: 28679},
						expr: &ruleRefExpr{
							pos:  position{line: 844, col: 41, offset: 28680},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 851, col: 1, offset: 28871},
			expr: &choiceExpr{
				pos: position{line: 851, col: 19, offset: 28889},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 19, offset: 28889},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 851, col: 19, offset: 28889},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 9, offset: 28935},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 853, col: 9, offset: 28935},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 855, col: 9, offset: 28983},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 855, col: 9, offset: 28983},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 9, offset: 29041},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 857, col: 9, offset: 29041},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 9, offset: 29095},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 859, col: 9, offset: 29095},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 870, col: 1, offset: 29411},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 29461},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 29461},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 29461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 872, col: 5, offset: 29461},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 872, col: 16, offset: 29472},
										expr: &ruleRefExpr{
											pos:  position{line: 872, col: 17, offset: 29473},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 872, col: 30, offset: 29486},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 33, offset: 29489},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 49, offset: 29505},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 872, col: 54, offset: 29510},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 872, col: 60, offset: 29516},
										expr: &choiceExpr{
											pos: position{line: 872, col: 61, offset: 29517},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 872, col: 61, offset: 29517},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 872, col: 81, offset: 29537},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 29720},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 876, col: 5, offset: 29720},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 876, col: 5, offset: 29720},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 876, col: 16, offset: 29731},
										expr: &ruleRefExpr{
											pos:  position{line: 876, col: 17, offset: 29732},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 876, col: 30, offset: 29745},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 876, col: 35, offset: 29750},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 44, offset: 29759},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 29949},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 29949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 5, offset: 29949},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 16, offset: 29960},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 17, offset: 29961},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 880, col: 30, offset: 29974},
									run: (*parser).callonRawParagraph28,
								},
								&notExpr{
									pos: position{line: 887, col: 7, offset: 30253},
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 8, offset: 30254},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 887, col: 23, offset: 30269},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 887, col: 31, offset: 30277},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 32, offset: 30278},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 30461},
						run: (*parser).callonRawParagraph34,
						expr: &seqExpr{
							pos: position{line: 891, col: 5, offset: 30461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 891, col: 5, offset: 30461},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 891, col: 16, offset: 30472},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 17, offset: 30473},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 891, col: 30, offset: 30486},
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 31, offset: 30487},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 891, col: 46, offset: 30502},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 891, col: 52, offset: 30508},
										expr: &choiceExpr{
											pos: position{line: 891, col: 53, offset: 30509},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 891, col: 53, offset: 30509},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 891, col: 73, offset: 30529},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 895, col: 1, offset: 30627},
			expr: &oneOrMoreExpr{
				pos: position{line: 895, col: 33, offset: 30659},
				expr: &actionExpr{
					pos: position{line: 895, col: 34, offset: 30660},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 895, col: 34, offset: 30660},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 895, col: 34, offset: 30660},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 35, offset: 30661},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 895, col: 45, offset: 30671},
								expr: &litMatcher{
									pos:        position{line: 895, col: 45, offset: 30671},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 895, col: 51, offset: 30677},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 60, offset: 30686},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 899, col: 1, offset: 30819},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 30844},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 30844},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 30844},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 14, offset: 30853},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 39, offset: 30878},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 900, col: 43, offset: 30882},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 910, col: 1, offset: 31117},
			expr: &actionExpr{
				pos: position{line: 910, col: 28, offset: 31144},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 910, col: 28, offset: 31144},
					expr: &charClassMatcher{
						pos:        position{line: 910, col: 28, offset: 31144},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 915, col: 1, offset: 31261},
			expr: &actionExpr{
				pos: position{line: 915, col: 23, offset: 31283},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 915, col: 23, offset: 31283},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 915, col: 23, offset: 31283},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 915, col: 34, offset: 31294},
								expr: &ruleRefExpr{
									pos:  position{line: 915, col: 35, offset: 31295},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 916, col: 5, offset: 31313},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 924, col: 5, offset: 31599},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 16, offset: 31610},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 31636},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 16, offset: 31647},
								expr: &choiceExpr{
									pos: position{line: 925, col: 17, offset: 31648},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 925, col: 17, offset: 31648},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 925, col: 37, offset: 31668},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 929, col: 1, offset: 31800},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 31830},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 31830},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 31830},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 930, col: 14, offset: 31839},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 930, col: 14, offset: 31839},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 930, col: 14, offset: 31839},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 930, col: 23, offset: 31848},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 930, col: 28, offset: 31853},
											expr: &charClassMatcher{
												pos:        position{line: 930, col: 28, offset: 31853},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 68, offset: 31893},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 936, col: 1, offset: 32101},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 32148},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 32148},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 32148},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 938, col: 5, offset: 32148},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 938, col: 16, offset: 32159},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 17, offset: 32160},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 938, col: 30, offset: 32173},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 33, offset: 32176},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 49, offset: 32192},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 54, offset: 32197},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 938, col: 60, offset: 32203},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 61, offset: 32204},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 32390},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 32390},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 32390},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 942, col: 16, offset: 32401},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 17, offset: 32402},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 942, col: 30, offset: 32415},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 949, col: 7, offset: 32694},
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 8, offset: 32695},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 949, col: 23, offset: 32710},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 949, col: 31, offset: 32718},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 32, offset: 32719},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 32899},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 32899},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 32899},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 953, col: 16, offset: 32910},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 17, offset: 32911},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 953, col: 30, offset: 32924},
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 31, offset: 32925},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 953, col: 46, offset: 32940},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 953, col: 52, offset: 32946},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 53, offset: 32947},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 957, col: 1, offset: 33042},
			expr: &ruleRefExpr{
				pos:  position{line: 957, col: 18, offset: 33059},
				name: "InlineElements",
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 964, col: 1, offset: 33269},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 33328},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 33328},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 33328},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 5, offset: 33328},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 966, col: 16, offset: 33339},
										expr: &ruleRefExpr{
											pos:  position{line: 966, col: 17, offset: 33340},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 966, col: 30, offset: 33353},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 33, offset: 33356},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 49, offset: 33372},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 54, offset: 33377},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 61, offset: 33384},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 33587},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 33587},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 970, col: 5, offset: 33587},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 970, col: 16, offset: 33598},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 17, offset: 33599},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 970, col: 30, offset: 33612},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 970, col: 37, offset: 33619},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 974, col: 1, offset: 33723},
			expr: &actionExpr{
				pos: position{line: 974, col: 31, offset: 33753},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 974, col: 31, offset: 33753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 974, col: 31, offset: 33753},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 42, offset: 33764},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 974, col: 65, offset: 33787},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 974, col: 76, offset: 33798},
								expr: &actionExpr{
									pos: position{line: 974, col: 77, offset: 33799},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 974, col: 77, offset: 33799},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 974, col: 77, offset: 33799},
												expr: &ruleRefExpr{
													pos:  position{line: 974, col: 78, offset: 33800},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 974, col: 99, offset: 33821},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 974, col: 105, offset: 33827},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 974, col: 105, offset: 33827},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 974, col: 125, offset: 33847},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 982, col: 1, offset: 34086},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 34112},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 983, col: 5, offset: 34112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 983, col: 5, offset: 34112},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 983, col: 16, offset: 34123},
								expr: &ruleRefExpr{
									pos:  position{line: 983, col: 17, offset: 34124},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 984, col: 5, offset: 34141},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 991, col: 5, offset: 34346},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 991, col: 11, offset: 34352},
								expr: &ruleRefExpr{
									pos:  position{line: 991, col: 12, offset: 34353},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 999, col: 1, offset: 34559},
			expr: &actionExpr{
				pos: position{line: 999, col: 19, offset: 34577},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 999, col: 19, offset: 34577},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 999, col: 19, offset: 34577},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 20, offset: 34578},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 5, offset: 34592},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1000, col: 15, offset: 34602},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1000, col: 15, offset: 34602},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1000, col: 15, offset: 34602},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1000, col: 24, offset: 34611},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1002, col: 9, offset: 34703},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1002, col: 9, offset: 34703},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1002, col: 9, offset: 34703},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1002, col: 18, offset: 34712},
														expr: &ruleRefExpr{
															pos:  position{line: 1002, col: 19, offset: 34713},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1002, col: 35, offset: 34729},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1008, col: 1, offset: 34846},
			expr: &actionExpr{
				pos: position{line: 1009, col: 5, offset: 34869},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1009, col: 5, offset: 34869},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1009, col: 14, offset: 34878},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1009, col: 14, offset: 34878},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 34939},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1011, col: 11, offset: 34984},
								expr: &ruleRefExpr{
									pos:  position{line: 1011, col: 11, offset: 34984},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1012, col: 11, offset: 35002},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1012, col: 11, offset: 35002},
										expr: &ruleRefExpr{
											pos:  position{line: 1012, col: 12, offset: 35003},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1013, col: 13, offset: 35021},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1013, col: 13, offset: 35021},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1014, col: 15, offset: 35048},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1015, col: 15, offset: 35073},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1016, col: 15, offset: 35098},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1017, col: 15, offset: 35125},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1018, col: 15, offset: 35145},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1019, col: 15, offset: 35238},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1020, col: 15, offset: 35268},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1021, col: 15, offset: 35336},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1022, col: 15, offset: 35367},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 15, offset: 35388},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1024, col: 15, offset: 35419},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1025, col: 15, offset: 35456},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1026, col: 15, offset: 35486},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 15, offset: 35519},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1028, col: 15, offset: 35543},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 15, offset: 35576},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1036, col: 1, offset: 35799},
			expr: &actionExpr{
				pos: position{line: 1036, col: 14, offset: 35812},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 14, offset: 35812},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1036, col: 14, offset: 35812},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1036, col: 20, offset: 35818},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1036, col: 24, offset: 35822},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 24, offset: 35822},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1036, col: 31, offset: 35829},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 32, offset: 35830},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1043, col: 1, offset: 36114},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 15, offset: 36128},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1043, col: 15, offset: 36128},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 41, offset: 36154},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 65, offset: 36178},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1045, col: 1, offset: 36197},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 32, offset: 36228},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1045, col: 32, offset: 36228},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 32, offset: 36228},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 36, offset: 36232},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 37, offset: 36233},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 43, offset: 36239},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 43, offset: 36239},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 47, offset: 36243},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 48, offset: 36244},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 54, offset: 36250},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 54, offset: 36250},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 58, offset: 36254},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 59, offset: 36255},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1045, col: 65, offset: 36261},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1045, col: 65, offset: 36261},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1045, col: 69, offset: 36265},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 70, offset: 36266},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1047, col: 1, offset: 36271},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 34, offset: 36304},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1047, col: 34, offset: 36304},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 41, offset: 36311},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 48, offset: 36318},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 55, offset: 36325},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 62, offset: 36332},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1047, col: 68, offset: 36338},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1049, col: 1, offset: 36343},
			expr: &actionExpr{
				pos: position{line: 1049, col: 26, offset: 36368},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 26, offset: 36368},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1049, col: 32, offset: 36374},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1049, col: 32, offset: 36374},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1050, col: 15, offset: 36409},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1051, col: 15, offset: 36445},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1052, col: 15, offset: 36481},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1053, col: 15, offset: 36521},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1054, col: 15, offset: 36550},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1055, col: 15, offset: 36581},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1059, col: 1, offset: 36735},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 28, offset: 36762},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 28, offset: 36762},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 15, offset: 36796},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 15, offset: 36832},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 15, offset: 36868},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1064, col: 1, offset: 36894},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 22, offset: 36915},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 22, offset: 36915},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 15, offset: 36946},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 15, offset: 36978},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 15, offset: 37010},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 15, offset: 37046},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 15, offset: 37082},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1071, col: 1, offset: 37106},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 33, offset: 37138},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1071, col: 33, offset: 37138},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1071, col: 39, offset: 37144},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1071, col: 39, offset: 37144},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1075, col: 1, offset: 37277},
			expr: &actionExpr{
				pos: position{line: 1075, col: 25, offset: 37301},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1075, col: 25, offset: 37301},
					expr: &litMatcher{
						pos:        position{line: 1075, col: 25, offset: 37301},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1079, col: 1, offset: 37342},
			expr: &actionExpr{
				pos: position{line: 1079, col: 25, offset: 37366},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 25, offset: 37366},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1079, col: 25, offset: 37366},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1079, col: 30, offset: 37371},
							expr: &litMatcher{
								pos:        position{line: 1079, col: 30, offset: 37371},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1087, col: 1, offset: 37468},
			expr: &choiceExpr{
				pos: position{line: 1087, col: 13, offset: 37480},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1087, col: 13, offset: 37480},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 35, offset: 37502},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1089, col: 1, offset: 37569},
			expr: &actionExpr{
				pos: position{line: 1089, col: 24, offset: 37592},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 24, offset: 37592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1089, col: 24, offset: 37592},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1089, col: 30, offset: 37598},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 31, offset: 37599},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1089, col: 49, offset: 37617},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 54, offset: 37622},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 64, offset: 37632},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1089, col: 93, offset: 37661},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1093, col: 1, offset: 37748},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1093, col: 32, offset: 37779},
				expr: &ruleRefExpr{
					pos:  position{line: 1093, col: 32, offset: 37779},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1095, col: 1, offset: 37810},
			expr: &actionExpr{
				pos: position{line: 1095, col: 31, offset: 37840},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 31, offset: 37840},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1095, col: 31, offset: 37840},
							expr: &litMatcher{
								pos:        position{line: 1095, col: 33, offset: 37842},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 39, offset: 37848},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1095, col: 48, offset: 37857},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1095, col: 48, offset: 37857},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1096, col: 11, offset: 37872},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1097, col: 11, offset: 37921},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1097, col: 11, offset: 37921},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1097, col: 19, offset: 37929},
												expr: &ruleRefExpr{
													pos:  position{line: 1097, col: 20, offset: 37930},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 37948},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 37978},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 38001},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 38022},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 38043},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 38067},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 38091},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 38117},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 38146},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1110, col: 1, offset: 38213},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 38257},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1111, col: 5, offset: 38257},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1112, col: 7, offset: 38354},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1112, col: 7, offset: 38354},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 7, offset: 38354},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 12, offset: 38359},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1116, col: 1, offset: 38522},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 24, offset: 38545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1116, col: 24, offset: 38545},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1116, col: 24, offset: 38545},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1116, col: 24, offset: 38545},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1116, col: 30, offset: 38551},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 31, offset: 38552},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1116, col: 51, offset: 38572},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1116, col: 51, offset: 38572},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1116, col: 55, offset: 38576},
											expr: &litMatcher{
												pos:        position{line: 1116, col: 56, offset: 38577},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 61, offset: 38582},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 71, offset: 38592},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1116, col: 100, offset: 38621},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1116, col: 104, offset: 38625},
									expr: &notExpr{
										pos: position{line: 1116, col: 106, offset: 38627},
										expr: &ruleRefExpr{
											pos:  position{line: 1116, col: 107, offset: 38628},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 38822},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 38822},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 5, offset: 38822},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1118, col: 11, offset: 38828},
										expr: &ruleRefExpr{
											pos:  position{line: 1118, col: 12, offset: 38829},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 30, offset: 38847},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 34, offset: 38851},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1118, col: 44, offset: 38861},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1118, col: 44, offset: 38861},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1118, col: 48, offset: 38865},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 77, offset: 38894},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1122, col: 1, offset: 39100},
			expr: &seqExpr{
				pos: position{line: 1122, col: 32, offset: 39131},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1122, col: 32, offset: 39131},
						expr: &ruleRefExpr{
							pos:  position{line: 1122, col: 33, offset: 39132},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1122, col: 39, offset: 39138},
						expr: &ruleRefExpr{
							pos:  position{line: 1122, col: 39, offset: 39138},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1124, col: 1, offset: 39167},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 31, offset: 39197},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1124, col: 31, offset: 39197},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1125, col: 11, offset: 39212},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1125, col: 11, offset: 39212},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1125, col: 19, offset: 39220},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 20, offset: 39221},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 39239},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 39269},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1128, col: 11, offset: 39292},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1128, col: 11, offset: 39292},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 11, offset: 39292},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1128, col: 18, offset: 39299},
								expr: &seqExpr{
									pos: position{line: 1128, col: 19, offset: 39300},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1128, col: 19, offset: 39300},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1128, col: 23, offset: 39304},
											expr: &litMatcher{
												pos:        position{line: 1128, col: 24, offset: 39305},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 39321},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 11, offset: 39342},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 39363},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 39387},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 39411},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 39437},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 39466},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1137, col: 1, offset: 39504},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 5, offset: 39548},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1138, col: 5, offset: 39548},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1139, col: 7, offset: 39645},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1139, col: 7, offset: 39645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 7, offset: 39645},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 11, offset: 39649},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1143, col: 1, offset: 39812},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 39836},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 39836},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 39836},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1144, col: 5, offset: 39836},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 18, offset: 39849},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 40, offset: 39871},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 45, offset: 39876},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 55, offset: 39886},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 84, offset: 39915},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 9, offset: 40072},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1146, col: 9, offset: 40072},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 9, offset: 40072},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 22, offset: 40085},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 44, offset: 40107},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 49, offset: 40112},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 59, offset: 40122},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 88, offset: 40151},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 9, offset: 40351},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1149, col: 9, offset: 40351},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 9, offset: 40351},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 22, offset: 40364},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 44, offset: 40386},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 48, offset: 40390},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 58, offset: 40400},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 87, offset: 40429},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1157, col: 1, offset: 40637},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 15, offset: 40651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 15, offset: 40651},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 39, offset: 40675},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1159, col: 1, offset: 40698},
			expr: &actionExpr{
				pos: position{line: 1159, col: 26, offset: 40723},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 26, offset: 40723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1159, col: 26, offset: 40723},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1159, col: 32, offset: 40729},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 33, offset: 40730},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1159, col: 51, offset: 40748},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1159, col: 56, offset: 40753},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 66, offset: 40763},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1159, col: 97, offset: 40794},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1163, col: 1, offset: 40928},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1163, col: 34, offset: 40961},
				expr: &ruleRefExpr{
					pos:  position{line: 1163, col: 34, offset: 40961},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1165, col: 1, offset: 40993},
			expr: &actionExpr{
				pos: position{line: 1165, col: 33, offset: 41025},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 33, offset: 41025},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1165, col: 33, offset: 41025},
							expr: &litMatcher{
								pos:        position{line: 1165, col: 35, offset: 41027},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 41, offset: 41033},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1165, col: 50, offset: 41042},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1165, col: 50, offset: 41042},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 41057},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1167, col: 11, offset: 41106},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1167, col: 11, offset: 41106},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1167, col: 19, offset: 41114},
												expr: &ruleRefExpr{
													pos:  position{line: 1167, col: 20, offset: 41115},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 41133},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 41165},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 41188},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1171, col: 11, offset: 41207},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 11, offset: 41228},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1173, col: 11, offset: 41252},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 41276},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 41302},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 41331},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1180, col: 1, offset: 41400},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 41446},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1181, col: 5, offset: 41446},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1182, col: 7, offset: 41545},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1182, col: 7, offset: 41545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1182, col: 7, offset: 41545},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1182, col: 12, offset: 41550},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1186, col: 1, offset: 41715},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 26, offset: 41740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1186, col: 26, offset: 41740},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1186, col: 26, offset: 41740},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 26, offset: 41740},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1186, col: 32, offset: 41746},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 33, offset: 41747},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1186, col: 52, offset: 41766},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1186, col: 52, offset: 41766},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1186, col: 56, offset: 41770},
											expr: &litMatcher{
												pos:        position{line: 1186, col: 57, offset: 41771},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 62, offset: 41776},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 72, offset: 41786},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 103, offset: 41817},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 42007},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 42007},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1188, col: 5, offset: 42007},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1188, col: 11, offset: 42013},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 12, offset: 42014},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 30, offset: 42032},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 34, offset: 42036},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1188, col: 44, offset: 42046},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1188, col: 44, offset: 42046},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1188, col: 48, offset: 42050},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 79, offset: 42081},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1192, col: 1, offset: 42291},
			expr: &seqExpr{
				pos: position{line: 1192, col: 34, offset: 42324},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1192, col: 34, offset: 42324},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 35, offset: 42325},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1192, col: 41, offset: 42331},
						expr: &ruleRefExpr{
							pos:  position{line: 1192, col: 41, offset: 42331},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1194, col: 1, offset: 42362},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 33, offset: 42394},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 33, offset: 42394},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1195, col: 11, offset: 42409},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1195, col: 11, offset: 42409},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1195, col: 19, offset: 42417},
								expr: &ruleRefExpr{
									pos:  position{line: 1195, col: 20, offset: 42418},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 42436},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 42468},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1198, col: 11, offset: 42491},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1198, col: 11, offset: 42491},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 11, offset: 42491},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1198, col: 18, offset: 42498},
								expr: &seqExpr{
									pos: position{line: 1198, col: 19, offset: 42499},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1198, col: 19, offset: 42499},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1198, col: 23, offset: 42503},
											expr: &litMatcher{
												pos:        position{line: 1198, col: 24, offset: 42504},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 42520},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 42539},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 42560},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 42584},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1203, col: 11, offset: 42608},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 42634},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42663},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1207, col: 1, offset: 42703},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 5, offset: 42749},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1208, col: 5, offset: 42749},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1209, col: 7, offset: 42848},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1209, col: 7, offset: 42848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1209, col: 7, offset: 42848},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 11, offset: 42852},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1213, col: 1, offset: 43018},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 43044},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 43044},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 43044},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 43044},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 18, offset: 43057},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 40, offset: 43079},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 45, offset: 43084},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 55, offset: 43094},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 86, offset: 43125},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 9, offset: 43282},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1216, col: 9, offset: 43282},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 9, offset: 43282},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 22, offset: 43295},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 44, offset: 43317},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 49, offset: 43322},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 59, offset: 43332},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 90, offset: 43363},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1219, col: 9, offset: 43563},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1219, col: 9, offset: 43563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1219, col: 9, offset: 43563},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 22, offset: 43576},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 44, offset: 43598},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 48, offset: 43602},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 58, offset: 43612},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 89, offset: 43643},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1226, col: 1, offset: 43853},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 18, offset: 43870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 18, offset: 43870},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 45, offset: 43897},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1228, col: 1, offset: 43923},
			expr: &actionExpr{
				pos: position{line: 1228, col: 29, offset: 43951},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 29, offset: 43951},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 29, offset: 43951},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1228, col: 35, offset: 43957},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 36, offset: 43958},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 54, offset: 43976},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 59, offset: 43981},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 69, offset: 43991},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 103, offset: 44025},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1232, col: 1, offset: 44162},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1232, col: 37, offset: 44198},
				expr: &ruleRefExpr{
					pos:  position{line: 1232, col: 37, offset: 44198},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1234, col: 1, offset: 44265},
			expr: &actionExpr{
				pos: position{line: 1234, col: 36, offset: 44300},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 36, offset: 44300},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1234, col: 36, offset: 44300},
							expr: &litMatcher{
								pos:        position{line: 1234, col: 38, offset: 44302},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 44, offset: 44308},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1234, col: 53, offset: 44317},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 53, offset: 44317},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 44332},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1236, col: 11, offset: 44381},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1236, col: 11, offset: 44381},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1236, col: 19, offset: 44389},
												expr: &ruleRefExpr{
													pos:  position{line: 1236, col: 20, offset: 44390},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 44408},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1238, col: 11, offset: 44431},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1238, col: 11, offset: 44431},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 44615},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 44650},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 44669},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 44690},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 44711},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 44735},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 44761},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 44790},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1253, col: 1, offset: 44862},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 5, offset: 44911},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1254, col: 5, offset: 44911},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1255, col: 7, offset: 45013},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1255, col: 7, offset: 45013},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1255, col: 7, offset: 45013},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1255, col: 12, offset: 45018},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1259, col: 1, offset: 45186},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 29, offset: 45214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1259, col: 29, offset: 45214},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1259, col: 29, offset: 45214},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1259, col: 29, offset: 45214},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1259, col: 35, offset: 45220},
										expr: &ruleRefExpr{
											pos:  position{line: 1259, col: 36, offset: 45221},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1259, col: 55, offset: 45240},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1259, col: 55, offset: 45240},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1259, col: 59, offset: 45244},
											expr: &litMatcher{
												pos:        position{line: 1259, col: 60, offset: 45245},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1259, col: 65, offset: 45250},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1259, col: 75, offset: 45260},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1259, col: 109, offset: 45294},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 45487},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 45487},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1261, col: 5, offset: 45487},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1261, col: 11, offset: 45493},
										expr: &ruleRefExpr{
											pos:  position{line: 1261, col: 12, offset: 45494},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 30, offset: 45512},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 34, offset: 45516},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1261, col: 44, offset: 45526},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1261, col: 44, offset: 45526},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1261, col: 48, offset: 45530},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 82, offset: 45564},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1265, col: 1, offset: 45778},
			expr: &seqExpr{
				pos: position{line: 1265, col: 37, offset: 45814},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1265, col: 37, offset: 45814},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 38, offset: 45815},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1265, col: 44, offset: 45821},
						expr: &ruleRefExpr{
							pos:  position{line: 1265, col: 44, offset: 45821},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1267, col: 1, offset: 45855},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 37, offset: 45891},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 37, offset: 45891},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1268, col: 11, offset: 45906},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1268, col: 11, offset: 45906},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1268, col: 19, offset: 45914},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 20, offset: 45915},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 45933},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 45968},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1271, col: 11, offset: 45991},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1271, col: 11, offset: 45991},
								expr: &ruleRefExpr{
									pos:  position{line: 1271, col: 11, offset: 45991},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1271, col: 18, offset: 45998},
								expr: &seqExpr{
									pos: position{line: 1271, col: 19, offset: 45999},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1271, col: 19, offset: 45999},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1271, col: 23, offset: 46003},
											expr: &litMatcher{
												pos:        position{line: 1271, col: 24, offset: 46004},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 46132},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 46151},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 46172},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 11, offset: 46193},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 46217},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1277, col: 11, offset: 46243},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1277, col: 11, offset: 46243},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 46384},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 46413},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1284, col: 1, offset: 46456},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 46505},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1285, col: 5, offset: 46505},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1286, col: 7, offset: 46607},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1286, col: 7, offset: 46607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1286, col: 7, offset: 46607},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1286, col: 11, offset: 46611},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1290, col: 1, offset: 46780},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 46809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 46809},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1291, col: 5, offset: 46809},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1291, col: 5, offset: 46809},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 18, offset: 46822},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 40, offset: 46844},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1291, col: 45, offset: 46849},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 55, offset: 46859},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1291, col: 89, offset: 46893},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 9, offset: 47050},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1293, col: 9, offset: 47050},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1293, col: 9, offset: 47050},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 22, offset: 47063},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 44, offset: 47085},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 49, offset: 47090},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 59, offset: 47100},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 93, offset: 47134},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 9, offset: 47334},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1296, col: 9, offset: 47334},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1296, col: 9, offset: 47334},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 22, offset: 47347},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 44, offset: 47369},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 48, offset: 47373},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 58, offset: 47383},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1296, col: 92, offset: 47417},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1304, col: 1, offset: 47742},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 17, offset: 47758},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1304, col: 17, offset: 47758},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 38, offset: 47779},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1306, col: 1, offset: 47799},
			expr: &actionExpr{
				pos: position{line: 1306, col: 23, offset: 47821},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 23, offset: 47821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1306, col: 23, offset: 47821},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 46, offset: 47844},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 55, offset: 47853},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1306, col: 82, offset: 47880},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1310, col: 1, offset: 47984},
			expr: &actionExpr{
				pos: position{line: 1310, col: 31, offset: 48014},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1310, col: 31, offset: 48014},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1310, col: 41, offset: 48024},
						expr: &ruleRefExpr{
							pos:  position{line: 1310, col: 41, offset: 48024},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1314, col: 1, offset: 48102},
			expr: &seqExpr{
				pos: position{line: 1314, col: 27, offset: 48128},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1314, col: 27, offset: 48128},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1314, col: 32, offset: 48133},
						expr: &charClassMatcher{
							pos:        position{line: 1314, col: 33, offset: 48134},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1316, col: 1, offset: 48145},
			expr: &litMatcher{
				pos:        position{line: 1316, col: 25, offset: 48169},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1319, col: 1, offset: 48257},
			expr: &actionExpr{
				pos: position{line: 1319, col: 30, offset: 48286},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1319, col: 30, offset: 48286},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1320, col: 9, offset: 48304},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1320, col: 9, offset: 48304},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1320, col: 9, offset: 48304},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1320, col: 19, offset: 48314},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 20, offset: 48315},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1321, col: 11, offset: 48371},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1321, col: 11, offset: 48371},
										expr: &ruleRefExpr{
											pos:  position{line: 1321, col: 11, offset: 48371},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1321, col: 18, offset: 48378},
										expr: &ruleRefExpr{
											pos:  position{line: 1321, col: 19, offset: 48379},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1322, col: 11, offset: 48410},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1322, col: 11, offset: 48410},
										expr: &litMatcher{
											pos:        position{line: 1322, col: 12, offset: 48411},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 16, offset: 48415},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1323, col: 11, offset: 48463},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1324, col: 11, offset: 48482},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1325, col: 11, offset: 48503},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1326, col: 11, offset: 48524},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1327, col: 11, offset: 48548},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1328, col: 11, offset: 48574},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1328, col: 11, offset: 48574},
										expr: &litMatcher{
											pos:        position{line: 1328, col: 12, offset: 48575},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 17, offset: 48580},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1329, col: 11, offset: 48604},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1330, col: 11, offset: 48633},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1334, col: 1, offset: 48699},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 41, offset: 48739},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1334, col: 41, offset: 48739},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1334, col: 55, offset: 48753},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1334, col: 55, offset: 48753},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 55, offset: 48753},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1334, col: 59, offset: 48757},
									expr: &litMatcher{
										pos:        position{line: 1334, col: 60, offset: 48758},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1338, col: 1, offset: 48817},
			expr: &actionExpr{
				pos: position{line: 1338, col: 23, offset: 48839},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 23, offset: 48839},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1338, col: 23, offset: 48839},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 46, offset: 48862},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 55, offset: 48871},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1338, col: 82, offset: 48898},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1342, col: 1, offset: 49002},
			expr: &actionExpr{
				pos: position{line: 1342, col: 31, offset: 49032},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1342, col: 31, offset: 49032},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1342, col: 41, offset: 49042},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 41, offset: 49042},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1347, col: 1, offset: 49202},
			expr: &actionExpr{
				pos: position{line: 1347, col: 30, offset: 49231},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1347, col: 30, offset: 49231},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1348, col: 9, offset: 49249},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1348, col: 9, offset: 49249},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1348, col: 9, offset: 49249},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1348, col: 19, offset: 49259},
										expr: &ruleRefExpr{
											pos:  position{line: 1348, col: 20, offset: 49260},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1349, col: 11, offset: 49316},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1349, col: 11, offset: 49316},
										expr: &ruleRefExpr{
											pos:  position{line: 1349, col: 11, offset: 49316},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1349, col: 18, offset: 49323},
										expr: &ruleRefExpr{
											pos:  position{line: 1349, col: 19, offset: 49324},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1350, col: 11, offset: 49355},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1351, col: 11, offset: 49374},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1352, col: 11, offset: 49395},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1353, col: 11, offset: 49416},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1354, col: 11, offset: 49440},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1355, col: 11, offset: 49466},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1355, col: 11, offset: 49466},
										expr: &litMatcher{
											pos:        position{line: 1355, col: 12, offset: 49467},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1355, col: 18, offset: 49473},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1356, col: 10, offset: 49496},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1357, col: 11, offset: 49525},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1361, col: 1, offset: 49599},
			expr: &seqExpr{
				pos: position{line: 1361, col: 27, offset: 49625},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 27, offset: 49625},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1361, col: 33, offset: 49631},
						expr: &charClassMatcher{
							pos:        position{line: 1361, col: 34, offset: 49632},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1363, col: 1, offset: 49643},
			expr: &litMatcher{
				pos:        position{line: 1363, col: 25, offset: 49667},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1365, col: 1, offset: 49674},
			expr: &actionExpr{
				pos: position{line: 1365, col: 41, offset: 49714},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1365, col: 42, offset: 49715},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1365, col: 42, offset: 49715},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1365, col: 56, offset: 49729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1365, col: 56, offset: 49729},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1365, col: 60, offset: 49733},
									expr: &litMatcher{
										pos:        position{line: 1365, col: 61, offset: 49734},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1374, col: 1, offset: 49854},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 15, offset: 49868},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 15, offset: 49868},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 39, offset: 49892},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1376, col: 1, offset: 49915},
			expr: &actionExpr{
				pos: position{line: 1376, col: 26, offset: 49940},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 26, offset: 49940},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 26, offset: 49940},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 32, offset: 49946},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 33, offset: 49947},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 51, offset: 49965},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 56, offset: 49970},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 66, offset: 49980},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 97, offset: 50011},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1380, col: 1, offset: 50145},
			expr: &seqExpr{
				pos: position{line: 1380, col: 34, offset: 50178},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 34, offset: 50178},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1380, col: 63, offset: 50207},
						expr: &seqExpr{
							pos: position{line: 1380, col: 64, offset: 50208},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1380, col: 64, offset: 50208},
									expr: &litMatcher{
										pos:        position{line: 1380, col: 66, offset: 50210},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1380, col: 73, offset: 50217},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1380, col: 73, offset: 50217},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1380, col: 81, offset: 50225},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1382, col: 1, offset: 50292},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 33, offset: 50324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1382, col: 33, offset: 50324},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 50339},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1384, col: 11, offset: 50371},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1384, col: 11, offset: 50371},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1384, col: 19, offset: 50379},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 20, offset: 50380},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 50398},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 50421},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 11, offset: 50440},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 50461},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 11, offset: 50485},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 11, offset: 50509},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 50535},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 11, offset: 50564},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1394, col: 1, offset: 50604},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 50650},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1395, col: 5, offset: 50650},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1396, col: 7, offset: 50749},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1396, col: 7, offset: 50749},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1396, col: 7, offset: 50749},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1396, col: 12, offset: 50754},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1400, col: 1, offset: 50919},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 26, offset: 50944},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1400, col: 26, offset: 50944},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1400, col: 26, offset: 50944},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1400, col: 26, offset: 50944},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1400, col: 32, offset: 50950},
										expr: &ruleRefExpr{
											pos:  position{line: 1400, col: 33, offset: 50951},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1400, col: 52, offset: 50970},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1400, col: 52, offset: 50970},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1400, col: 56, offset: 50974},
											expr: &litMatcher{
												pos:        position{line: 1400, col: 57, offset: 50975},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1400, col: 62, offset: 50980},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1400, col: 72, offset: 50990},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1400, col: 103, offset: 51021},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 51211},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1402, col: 5, offset: 51211},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1402, col: 5, offset: 51211},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1402, col: 11, offset: 51217},
										expr: &ruleRefExpr{
											pos:  position{line: 1402, col: 12, offset: 51218},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 30, offset: 51236},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 34, offset: 51240},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1402, col: 44, offset: 51250},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1402, col: 44, offset: 51250},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1402, col: 48, offset: 51254},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 79, offset: 51285},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1406, col: 1, offset: 51494},
			expr: &seqExpr{
				pos: position{line: 1406, col: 34, offset: 51527},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1406, col: 34, offset: 51527},
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 35, offset: 51528},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1406, col: 41, offset: 51534},
						expr: &ruleRefExpr{
							pos:  position{line: 1406, col: 41, offset: 51534},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1408, col: 1, offset: 51565},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 33, offset: 51597},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1408, col: 33, offset: 51597},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 51612},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1410, col: 11, offset: 51644},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1410, col: 11, offset: 51644},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1410, col: 19, offset: 51652},
								expr: &ruleRefExpr{
									pos:  position{line: 1410, col: 20, offset: 51653},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 11, offset: 51671},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1412, col: 11, offset: 51694},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1412, col: 11, offset: 51694},
								expr: &ruleRefExpr{
									pos:  position{line: 1412, col: 11, offset: 51694},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1412, col: 18, offset: 51701},
								expr: &seqExpr{
									pos: position{line: 1412, col: 19, offset: 51702},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1412, col: 19, offset: 51702},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1412, col: 23, offset: 51706},
											expr: &litMatcher{
												pos:        position{line: 1412, col: 24, offset: 51707},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 51723},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 51742},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 11, offset: 51763},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 11, offset: 51787},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 51811},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 11, offset: 51837},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 51866},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1421, col: 1, offset: 51906},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 51952},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1422, col: 5, offset: 51952},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1423, col: 7, offset: 52049},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1423, col: 7, offset: 52049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1423, col: 7, offset: 52049},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1423, col: 11, offset: 52053},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1427, col: 1, offset: 52216},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 5, offset: 52241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 52241},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1428, col: 5, offset: 52241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1428, col: 5, offset: 52241},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 18, offset: 52254},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 40, offset: 52276},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 45, offset: 52281},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 55, offset: 52291},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 86, offset: 52322},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 9, offset: 52479},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1430, col: 9, offset: 52479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1430, col: 9, offset: 52479},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1430, col: 22, offset: 52492},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 44, offset: 52514},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 49, offset: 52519},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1430, col: 59, offset: 52529},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 90, offset: 52560},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1433, col: 9, offset: 52760},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1433, col: 9, offset: 52760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1433, col: 9, offset: 52760},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 22, offset: 52773},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 44, offset: 52795},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 48, offset: 52799},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1433, col: 58, offset: 52809},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 89, offset: 52840},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1438, col: 1, offset: 52990},
			expr: &actionExpr{
				pos: position{line: 1438, col: 18, offset: 53007},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 18, offset: 53007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 18, offset: 53007},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 24, offset: 53013},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 25, offset: 53014},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 43, offset: 53032},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 47, offset: 53036},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 56, offset: 53045},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 78, offset: 53067},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1442, col: 1, offset: 53163},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 25, offset: 53187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1442, col: 25, offset: 53187},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 38, offset: 53200},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1444, col: 1, offset: 53219},
			expr: &actionExpr{
				pos: position{line: 1444, col: 21, offset: 53239},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1444, col: 21, offset: 53239},
					expr: &charClassMatcher{
						pos:        position{line: 1444, col: 21, offset: 53239},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1448, col: 1, offset: 53316},
			expr: &actionExpr{
				pos: position{line: 1448, col: 25, offset: 53340},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 25, offset: 53340},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1448, col: 25, offset: 53340},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 38, offset: 53353},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 60, offset: 53375},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 64, offset: 53379},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 73, offset: 53388},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1448, col: 95, offset: 53410},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1452, col: 1, offset: 53539},
			expr: &actionExpr{
				pos: position{line: 1452, col: 20, offset: 53558},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 20, offset: 53558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1452, col: 20, offset: 53558},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1452, col: 26, offset: 53564},
								expr: &ruleRefExpr{
									pos:  position{line: 1452, col: 27, offset: 53565},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 45, offset: 53583},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 49, offset: 53587},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 58, offset: 53596},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1452, col: 82, offset: 53620},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1456, col: 1, offset: 53718},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 27, offset: 53744},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1456, col: 27, offset: 53744},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 40, offset: 53757},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1458, col: 1, offset: 53778},
			expr: &actionExpr{
				pos: position{line: 1458, col: 23, offset: 53800},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1458, col: 23, offset: 53800},
					expr: &charClassMatcher{
						pos:        position{line: 1458, col: 23, offset: 53800},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1462, col: 1, offset: 53877},
			expr: &actionExpr{
				pos: position{line: 1462, col: 27, offset: 53903},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1462, col: 27, offset: 53903},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1462, col: 27, offset: 53903},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1462, col: 40, offset: 53916},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1462, col: 62, offset: 53938},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1462, col: 66, offset: 53942},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1462, col: 75, offset: 53951},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1462, col: 99, offset: 53975},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1469, col: 1, offset: 54217},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 22, offset: 54238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 22, offset: 54238},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 46, offset: 54262},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 70, offset: 54286},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1471, col: 1, offset: 54304},
			expr: &litMatcher{
				pos:        position{line: 1471, col: 32, offset: 54335},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1473, col: 1, offset: 54340},
			expr: &actionExpr{
				pos: position{line: 1473, col: 26, offset: 54365},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 26, offset: 54365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1473, col: 26, offset: 54365},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 54, offset: 54393},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 63, offset: 54402},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 93, offset: 54432},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1473, col: 121, offset: 54460},
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 122, offset: 54461},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1477, col: 1, offset: 54566},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 33, offset: 54598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1477, col: 34, offset: 54599},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1477, col: 34, offset: 54599},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1477, col: 35, offset: 54600},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1477, col: 35, offset: 54600},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 36, offset: 54601},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1477, col: 64, offset: 54629},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 65, offset: 54630},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1477, col: 71, offset: 54636},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 72, offset: 54637},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1477, col: 80, offset: 54645,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1477, col: 83, offset: 54648},
									expr: &seqExpr{
										pos: position{line: 1477, col: 84, offset: 54649},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1477, col: 84, offset: 54649},
												expr: &seqExpr{
													pos: position{line: 1477, col: 86, offset: 54651},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1477, col: 86, offset: 54651},
															expr: &ruleRefExpr{
																pos:  position{line: 1477, col: 86, offset: 54651},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1477, col: 93, offset: 54658},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1477, col: 122, offset: 54687},
												expr: &ruleRefExpr{
													pos:  position{line: 1477, col: 123, offset: 54688},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1477, col: 151, offset: 54716},
												expr: &ruleRefExpr{
													pos:  position{line: 1477, col: 152, offset: 54717},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1477, col: 160, offset: 54725,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1479, col: 7, offset: 54867},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1479, col: 8, offset: 54868},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1479, col: 8, offset: 54868},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 9, offset: 54869},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1479, col: 15, offset: 54875},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 16, offset: 54876},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1479, col: 24, offset: 54884},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 25, offset: 54885},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1479, col: 53, offset: 54913,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1483, col: 1, offset: 54995},
			expr: &litMatcher{
				pos:        position{line: 1483, col: 32, offset: 55026},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1485, col: 1, offset: 55033},
			expr: &actionExpr{
				pos: position{line: 1485, col: 26, offset: 55058},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 26, offset: 55058},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1485, col: 26, offset: 55058},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 54, offset: 55086},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 63, offset: 55095},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 93, offset: 55125},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1485, col: 121, offset: 55153},
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 122, offset: 55154},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1489, col: 1, offset: 55259},
			expr: &choiceExpr{
				pos: position{line: 1489, col: 33, offset: 55291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1489, col: 34, offset: 55292},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1489, col: 34, offset: 55292},
							expr: &seqExpr{
								pos: position{line: 1489, col: 35, offset: 55293},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1489, col: 35, offset: 55293},
										expr: &ruleRefExpr{
											pos:  position{line: 1489, col: 36, offset: 55294},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1489, col: 64, offset: 55322,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1491, col: 7, offset: 55487},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1491, col: 7, offset: 55487},
							expr: &seqExpr{
								pos: position{line: 1491, col: 8, offset: 55488},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1491, col: 8, offset: 55488},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 9, offset: 55489},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1491, col: 15, offset: 55495},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 16, offset: 55496},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1491, col: 24, offset: 55504},
										expr: &ruleRefExpr{
											pos:  position{line: 1491, col: 25, offset: 55505},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1491, col: 53, offset: 55533,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1495, col: 1, offset: 55616},
			expr: &choiceExpr{
				pos: position{line: 1495, col: 21, offset: 55636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1495, col: 21, offset: 55636},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1495, col: 21, offset: 55636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1495, col: 21, offset: 55636},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1495, col: 30, offset: 55645},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1495, col: 38, offset: 55653},
										expr: &ruleRefExpr{
											pos:  position{line: 1495, col: 39, offset: 55654},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1495, col: 67, offset: 55682},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1497, col: 5, offset: 55778},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1497, col: 5, offset: 55778},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1497, col: 5, offset: 55778},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1497, col: 15, offset: 55788},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1497, col: 23, offset: 55796},
										expr: &choiceExpr{
											pos: position{line: 1497, col: 24, offset: 55797},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1497, col: 24, offset: 55797},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1497, col: 37, offset: 55810},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1497, col: 65, offset: 55838},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1501, col: 1, offset: 55934},
			expr: &actionExpr{
				pos: position{line: 1501, col: 30, offset: 55963},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1501, col: 30, offset: 55963},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1508, col: 1, offset: 56136},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 19, offset: 56154},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1508, col: 19, offset: 56154},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 44, offset: 56179},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1510, col: 1, offset: 56204},
			expr: &choiceExpr{
				pos: position{line: 1510, col: 27, offset: 56230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1510, col: 27, offset: 56230},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1510, col: 27, offset: 56230},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1510, col: 27, offset: 56230},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 32, offset: 56235},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 36, offset: 56239},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1510, col: 40, offset: 56243},
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 40, offset: 56243},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 47, offset: 56250},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1510, col: 51, offset: 56254},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1510, col: 58, offset: 56261},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1510, col: 79, offset: 56282},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1512, col: 5, offset: 56365},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1512, col: 5, offset: 56365},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1512, col: 5, offset: 56365},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1512, col: 10, offset: 56370},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1512, col: 14, offset: 56374},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1512, col: 18, offset: 56378},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1516, col: 1, offset: 56450},
			expr: &actionExpr{
				pos: position{line: 1516, col: 27, offset: 56476},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 27, offset: 56476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1516, col: 27, offset: 56476},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 35, offset: 56484},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 40, offset: 56489},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 54, offset: 56503},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 72, offset: 56521},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1520, col: 1, offset: 56644},
			expr: &ruleRefExpr{
				pos:  position{line: 1520, col: 24, offset: 56667},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1525, col: 1, offset: 56789},
			expr: &choiceExpr{
				pos: position{line: 1525, col: 9, offset: 56797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1525, col: 9, offset: 56797},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1525, col: 24, offset: 56812},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1528, col: 1, offset: 56893},
			expr: &actionExpr{
				pos: position{line: 1528, col: 17, offset: 56909},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 17, offset: 56909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1528, col: 17, offset: 56909},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 25, offset: 56917},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 30, offset: 56922},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 40, offset: 56932},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 58, offset: 56950},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1532, col: 1, offset: 57061},
			expr: &actionExpr{
				pos: position{line: 1532, col: 17, offset: 57077},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 17, offset: 57077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1532, col: 17, offset: 57077},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 22, offset: 57082},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 42, offset: 57102},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 59, offset: 57119},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 60, offset: 57120},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1536, col: 1, offset: 57213},
			expr: &actionExpr{
				pos: position{line: 1536, col: 19, offset: 57231},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 19, offset: 57231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 19, offset: 57231},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 23, offset: 57235},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1536, col: 33, offset: 57245},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 34, offset: 57246},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1537, col: 5, offset: 57278},
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 5, offset: 57278},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 12, offset: 57285},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1537, col: 23, offset: 57296},
								expr: &ruleRefExpr{
									pos:  position{line: 1537, col: 24, offset: 57297},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1537, col: 43, offset: 57316},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1541, col: 1, offset: 57433},
			expr: &actionExpr{
				pos: position{line: 1541, col: 30, offset: 57462},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1541, col: 30, offset: 57462},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1543, col: 5, offset: 57513},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1543, col: 6, offset: 57514},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1543, col: 6, offset: 57514},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1543, col: 6, offset: 57514},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1543, col: 11, offset: 57519},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1543, col: 20, offset: 57528},
												expr: &choiceExpr{
													pos: position{line: 1543, col: 21, offset: 57529},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1543, col: 21, offset: 57529},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 36, offset: 57544},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 49, offset: 57557},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1543, col: 70, offset: 57578},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1543, col: 92, offset: 57600},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1543, col: 97, offset: 57605},
											expr: &notExpr{
												pos: position{line: 1543, col: 99, offset: 57607},
												expr: &litMatcher{
													pos:        position{line: 1543, col: 100, offset: 57608},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1543, col: 105, offset: 57613},
											expr: &litMatcher{
												pos:        position{line: 1543, col: 105, offset: 57613},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1547, col: 6, offset: 57740},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1547, col: 6, offset: 57740},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1547, col: 6, offset: 57740},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1547, col: 15, offset: 57749},
												expr: &choiceExpr{
													pos: position{line: 1547, col: 16, offset: 57750},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1547, col: 16, offset: 57750},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 31, offset: 57765},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 44, offset: 57778},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1547, col: 65, offset: 57799},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1547, col: 89, offset: 57823},
											expr: &notExpr{
												pos: position{line: 1547, col: 91, offset: 57825},
												expr: &litMatcher{
													pos:        position{line: 1547, col: 92, offset: 57826},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1547, col: 97, offset: 57831},
											expr: &litMatcher{
												pos:        position{line: 1547, col: 97, offset: 57831},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1553, col: 1, offset: 57945},
			expr: &actionExpr{
				pos: position{line: 1553, col: 18, offset: 57962},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1553, col: 18, offset: 57962},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1557, col: 1, offset: 58048},
			expr: &actionExpr{
				pos: position{line: 1557, col: 24, offset: 58071},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1557, col: 24, offset: 58071},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1561, col: 1, offset: 58164},
			expr: &actionExpr{
				pos: position{line: 1561, col: 26, offset: 58189},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1561, col: 26, offset: 58189},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1566, col: 1, offset: 58345},
			expr: &actionExpr{
				pos: position{line: 1567, col: 5, offset: 58364},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 5, offset: 58364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1567, col: 5, offset: 58364},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1567, col: 14, offset: 58373},
								expr: &choiceExpr{
									pos: position{line: 1567, col: 15, offset: 58374},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1567, col: 15, offset: 58374},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1568, col: 11, offset: 58389},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1569, col: 11, offset: 58416},
											expr: &ruleRefExpr{
												pos:  position{line: 1569, col: 11, offset: 58416},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1570, col: 11, offset: 58434},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1571, col: 11, offset: 58458},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1572, col: 11, offset: 58476},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1572, col: 21, offset: 58486},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1576, col: 1, offset: 58556},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 17, offset: 58572},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1576, col: 17, offset: 58572},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 40, offset: 58595},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1579, col: 1, offset: 58723},
			expr: &actionExpr{
				pos: position{line: 1579, col: 25, offset: 58747},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 25, offset: 58747},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1579, col: 25, offset: 58747},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 33, offset: 58755},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1579, col: 38, offset: 58760},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1579, col: 38, offset: 58760},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 57, offset: 58779},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1579, col: 79, offset: 58801},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1579, col: 97, offset: 58819},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1583, col: 1, offset: 58930},
			expr: &actionExpr{
				pos: position{line: 1583, col: 25, offset: 58954},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 25, offset: 58954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1583, col: 25, offset: 58954},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 30, offset: 58959},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1583, col: 48, offset: 58977},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1583, col: 65, offset: 58994},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 66, offset: 58995},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1590, col: 1, offset: 59190},
			expr: &actionExpr{
				pos: position{line: 1590, col: 15, offset: 59204},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1590, col: 15, offset: 59204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1590, col: 15, offset: 59204},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1590, col: 26, offset: 59215},
								expr: &ruleRefExpr{
									pos:  position{line: 1590, col: 27, offset: 59216},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1590, col: 45, offset: 59234},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 55, offset: 59244},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 61, offset: 59250},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 71, offset: 59260},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 84, offset: 59273},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1590, col: 102, offset: 59291},
							expr: &ruleRefExpr{
								pos:  position{line: 1590, col: 102, offset: 59291},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1590, col: 109, offset: 59298},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1595, col: 1, offset: 59508},
			expr: &actionExpr{
				pos: position{line: 1595, col: 16, offset: 59523},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 16, offset: 59523},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1595, col: 16, offset: 59523},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1595, col: 25, offset: 59532},
							expr: &litMatcher{
								pos:        position{line: 1595, col: 26, offset: 59533},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 30, offset: 59537},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 36, offset: 59543},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 46, offset: 59553},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 59, offset: 59566},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1599, col: 1, offset: 59704},
			expr: &actionExpr{
				pos: position{line: 1599, col: 21, offset: 59724},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1599, col: 21, offset: 59724},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1599, col: 21, offset: 59724},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 25, offset: 59728},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 29, offset: 59732},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 44, offset: 59747},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 46, offset: 59749},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 57, offset: 59760},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 59, offset: 59762},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 71, offset: 59774},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1599, col: 74, offset: 59777},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1599, col: 85, offset: 59788},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1603, col: 1, offset: 59850},
			expr: &choiceExpr{
				pos: position{line: 1603, col: 20, offset: 59869},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1603, col: 20, offset: 59869},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 36, offset: 59885},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1603, col: 51, offset: 59900},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1605, col: 1, offset: 59911},
			expr: &actionExpr{
				pos: position{line: 1605, col: 18, offset: 59928},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1605, col: 18, offset: 59928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1605, col: 18, offset: 59928},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 22, offset: 59932},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1605, col: 29, offset: 59939},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 29, offset: 59939},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 29, offset: 59939},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1605, col: 43, offset: 59953},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 43, offset: 59953},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 58, offset: 59968},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 58, offset: 59968},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1605, col: 74, offset: 59984},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 74, offset: 59984},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1605, col: 91, offset: 60001},
										expr: &ruleRefExpr{
											pos:  position{line: 1605, col: 91, offset: 60001},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1605, col: 103, offset: 60013},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1605, col: 107, offset: 60017},
							expr: &ruleRefExpr{
								pos:  position{line: 1605, col: 107, offset: 60017},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1605, col: 114, offset: 60024},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1609, col: 1, offset: 60078},
			expr: &actionExpr{
				pos: position{line: 1609, col: 19, offset: 60096},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1609, col: 19, offset: 60096},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1609, col: 25, offset: 60102},
						expr: &ruleRefExpr{
							pos:  position{line: 1609, col: 25, offset: 60102},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1613, col: 1, offset: 60181},
			expr: &actionExpr{
				pos: position{line: 1613, col: 15, offset: 60195},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 15, offset: 60195},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1613, col: 15, offset: 60195},
							expr: &litMatcher{
								pos:        position{line: 1613, col: 15, offset: 60195},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 20, offset: 60200},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1613, col: 26, offset: 60206},
								expr: &ruleRefExpr{
									pos:  position{line: 1613, col: 26, offset: 60206},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1617, col: 1, offset: 60282},
			expr: &actionExpr{
				pos: position{line: 1617, col: 16, offset: 60297},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 16, offset: 60297},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1617, col: 16, offset: 60297},
							expr: &litMatcher{
								pos:        position{line: 1617, col: 16, offset: 60297},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1617, col: 21, offset: 60302},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1617, col: 27, offset: 60308},
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 27, offset: 60308},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1621, col: 1, offset: 60390},
			expr: &actionExpr{
				pos: position{line: 1621, col: 17, offset: 60406},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 17, offset: 60406},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1621, col: 17, offset: 60406},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 17, offset: 60406},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 24, offset: 60413},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 30, offset: 60419},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1621, col: 46, offset: 60435},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 46, offset: 60435},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1625, col: 1, offset: 60511},
			expr: &actionExpr{
				pos: position{line: 1625, col: 19, offset: 60529},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 19, offset: 60529},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1625, col: 19, offset: 60529},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 19, offset: 60529},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1625, col: 26, offset: 60536},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1625, col: 30, offset: 60540},
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 30, offset: 60540},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1625, col: 37, offset: 60547},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1625, col: 43, offset: 60553},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 43, offset: 60553},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1632, col: 1, offset: 60688},
			expr: &actionExpr{
				pos: position{line: 1632, col: 20, offset: 60707},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1632, col: 20, offset: 60707},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1632, col: 20, offset: 60707},
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 20, offset: 60707},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1632, col: 27, offset: 60714},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1632, col: 31, offset: 60718},
							expr: &ruleRefExpr{
								pos:  position{line: 1632, col: 31, offset: 60718},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1632, col: 38, offset: 60725},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1632, col: 44, offset: 60731},
								expr: &ruleRefExpr{
									pos:  position{line: 1632, col: 44, offset: 60731},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1643, col: 1, offset: 61065},
			expr: &actionExpr{
				pos: position{line: 1643, col: 15, offset: 61079},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1643, col: 15, offset: 61079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1643, col: 15, offset: 61079},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 23, offset: 61087},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1643, col: 29, offset: 61093},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1643, col: 29, offset: 61093},
									expr: &charClassMatcher{
										pos:        position{line: 1643, col: 29, offset: 61093},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1643, col: 73, offset: 61137},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1643, col: 80, offset: 61144},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1647, col: 1, offset: 61226},
			expr: &actionExpr{
				pos: position{line: 1647, col: 14, offset: 61239},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 14, offset: 61239},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1647, col: 14, offset: 61239},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 18, offset: 61243},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 23, offset: 61248},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 32, offset: 61257},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 35, offset: 61260},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1647, col: 46, offset: 61271},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1651, col: 1, offset: 61328},
			expr: &actionExpr{
				pos: position{line: 1651, col: 13, offset: 61340},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1651, col: 13, offset: 61340},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1651, col: 19, offset: 61346},
						expr: &ruleRefExpr{
							pos:  position{line: 1651, col: 19, offset: 61346},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1658, col: 1, offset: 61622},
			expr: &choiceExpr{
				pos: position{line: 1658, col: 19, offset: 61640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1658, col: 19, offset: 61640},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1658, col: 19, offset: 61640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1658, col: 19, offset: 61640},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1658, col: 32, offset: 61653},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1658, col: 41, offset: 61662},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1658, col: 58, offset: 61679},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1660, col: 5, offset: 61747},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1660, col: 5, offset: 61747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1660, col: 5, offset: 61747},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 17, offset: 61759},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1660, col: 22, offset: 61764},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 35, offset: 61777},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1660, col: 39, offset: 61781},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1660, col: 47, offset: 61789},
										expr: &ruleRefExpr{
											pos:  position{line: 1660, col: 48, offset: 61790},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1660, col: 66, offset: 61808},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1664, col: 1, offset: 61869},
			expr: &ruleRefExpr{
				pos:  position{line: 1664, col: 16, offset: 61884},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1666, col: 1, offset: 61895},
			expr: &actionExpr{
				pos: position{line: 1666, col: 20, offset: 61914},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1666, col: 20, offset: 61914},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1666, col: 29, offset: 61923},
						expr: &seqExpr{
							pos: position{line: 1666, col: 30, offset: 61924},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1666, col: 30, offset: 61924},
									expr: &litMatcher{
										pos:        position{line: 1666, col: 31, offset: 61925},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1666, col: 35, offset: 61929},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1673, col: 1, offset: 62253},
			expr: &actionExpr{
				pos: position{line: 1673, col: 19, offset: 62271},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1673, col: 19, offset: 62271},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1673, col: 19, offset: 62271},
							expr: &ruleRefExpr{
								pos:  position{line: 1673, col: 20, offset: 62272},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1674, col: 5, offset: 62360},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1674, col: 12, offset: 62367},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1674, col: 12, offset: 62367},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1675, col: 11, offset: 62390},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1676, col: 11, offset: 62414},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1677, col: 11, offset: 62438},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1678, col: 11, offset: 62459},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1679, col: 11, offset: 62482},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1680, col: 11, offset: 62510},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1681, col: 11, offset: 62537},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1682, col: 11, offset: 62553},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1686, col: 1, offset: 62594},
			expr: &choiceExpr{
				pos: position{line: 1686, col: 19, offset: 62612},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1686, col: 19, offset: 62612},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1686, col: 19, offset: 62612},
								expr: &ruleRefExpr{
									pos:  position{line: 1686, col: 21, offset: 62614},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1686, col: 31, offset: 62624},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 19, offset: 62695},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 19, offset: 62735},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 19, offset: 62776},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1690, col: 19, offset: 62817},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 19, offset: 62858},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1692, col: 19, offset: 62896},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1693, col: 19, offset: 62936},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1695, col: 1, offset: 62963},
			expr: &choiceExpr{
				pos: position{line: 1695, col: 26, offset: 62988},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1695, col: 26, offset: 62988},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1695, col: 42, offset: 63004},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1697, col: 1, offset: 63013},
			expr: &actionExpr{
				pos: position{line: 1697, col: 12, offset: 63024},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1697, col: 12, offset: 63024},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1697, col: 12, offset: 63024},
							expr: &ruleRefExpr{
								pos:  position{line: 1697, col: 13, offset: 63025},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1697, col: 17, offset: 63029},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1697, col: 26, offset: 63038},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1697, col: 42, offset: 63054},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1701, col: 1, offset: 63134},
			expr: &actionExpr{
				pos: position{line: 1701, col: 19, offset: 63152},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1701, col: 19, offset: 63152},
					expr: &charClassMatcher{
						pos:        position{line: 1701, col: 19, offset: 63152},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1705, col: 1, offset: 63199},
			expr: &actionExpr{
				pos: position{line: 1705, col: 20, offset: 63218},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 20, offset: 63218},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1705, col: 20, offset: 63218},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 25, offset: 63223},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1705, col: 48, offset: 63246},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1705, col: 61, offset: 63259},
								expr: &ruleRefExpr{
									pos:  position{line: 1705, col: 61, offset: 63259},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1709, col: 1, offset: 63356},
			expr: &actionExpr{
				pos: position{line: 1709, col: 26, offset: 63381},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1709, col: 26, offset: 63381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1709, col: 26, offset: 63381},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 30, offset: 63385},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1709, col: 35, offset: 63390},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1709, col: 35, offset: 63390},
									expr: &charClassMatcher{
										pos:        position{line: 1709, col: 35, offset: 63390},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1709, col: 83, offset: 63438},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1709, col: 87, offset: 63442},
							expr: &ruleRefExpr{
								pos:  position{line: 1709, col: 87, offset: 63442},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1716, col: 1, offset: 63669},
			expr: &seqExpr{
				pos: position{line: 1716, col: 25, offset: 63693},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1716, col: 25, offset: 63693},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1716, col: 31, offset: 63699},
						expr: &ruleRefExpr{
							pos:  position{line: 1716, col: 31, offset: 63699},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1716, col: 38, offset: 63706},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1718, col: 1, offset: 63766},
			expr: &seqExpr{
				pos: position{line: 1718, col: 30, offset: 63795},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1718, col: 30, offset: 63795},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1718, col: 36, offset: 63801},
						expr: &ruleRefExpr{
							pos:  position{line: 1718, col: 36, offset: 63801},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1718, col: 43, offset: 63808},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1720, col: 1, offset: 63813},
			expr: &choiceExpr{
				pos: position{line: 1720, col: 28, offset: 63840},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1720, col: 29, offset: 63841},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1720, col: 29, offset: 63841},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1720, col: 35, offset: 63847},
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 35, offset: 63847},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1720, col: 42, offset: 63854},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1720, col: 49, offset: 63861},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1722, col: 1, offset: 63866},
			expr: &actionExpr{
				pos: position{line: 1722, col: 16, offset: 63881},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1722, col: 16, offset: 63881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1722, col: 16, offset: 63881},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1722, col: 27, offset: 63892},
								expr: &ruleRefExpr{
									pos:  position{line: 1722, col: 28, offset: 63893},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1722, col: 41, offset: 63906},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1722, col: 67, offset: 63932},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1722, col: 76, offset: 63941},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1722, col: 99, offset: 63964},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1726, col: 1, offset: 64079},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1726, col: 26, offset: 64104},
				expr: &actionExpr{
					pos: position{line: 1726, col: 27, offset: 64105},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1726, col: 27, offset: 64105},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1726, col: 27, offset: 64105},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 28, offset: 64106},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1726, col: 52, offset: 64130},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 58, offset: 64136},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1733, col: 1, offset: 64476},
			expr: &seqExpr{
				pos: position{line: 1733, col: 26, offset: 64501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1733, col: 26, offset: 64501},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1733, col: 33, offset: 64508},
						expr: &ruleRefExpr{
							pos:  position{line: 1733, col: 33, offset: 64508},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1733, col: 40, offset: 64515},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1735, col: 1, offset: 64520},
			expr: &seqExpr{
				pos: position{line: 1735, col: 31, offset: 64550},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1735, col: 31, offset: 64550},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1735, col: 38, offset: 64557},
						expr: &ruleRefExpr{
							pos:  position{line: 1735, col: 38, offset: 64557},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 45, offset: 64564},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1737, col: 1, offset: 64569},
			expr: &choiceExpr{
				pos: position{line: 1737, col: 29, offset: 64597},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1737, col: 30, offset: 64598},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1737, col: 30, offset: 64598},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1737, col: 37, offset: 64605},
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 37, offset: 64605},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1737, col: 44, offset: 64612},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 51, offset: 64619},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1739, col: 1, offset: 64624},
			expr: &actionExpr{
				pos: position{line: 1739, col: 17, offset: 64640},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1739, col: 17, offset: 64640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1739, col: 17, offset: 64640},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1739, col: 28, offset: 64651},
								expr: &ruleRefExpr{
									pos:  position{line: 1739, col: 29, offset: 64652},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1739, col: 42, offset: 64665},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1739, col: 69, offset: 64692},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1739, col: 78, offset: 64701},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1739, col: 102, offset: 64725},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1743, col: 1, offset: 64842},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1743, col: 27, offset: 64868},
				expr: &actionExpr{
					pos: position{line: 1743, col: 28, offset: 64869},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1743, col: 28, offset: 64869},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1743, col: 28, offset: 64869},
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 29, offset: 64870},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1743, col: 54, offset: 64895},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1743, col: 60, offset: 64901},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1750, col: 1, offset: 65241},
			expr: &seqExpr{
				pos: position{line: 1750, col: 26, offset: 65266},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1750, col: 26, offset: 65266},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1750, col: 33, offset: 65273},
						expr: &ruleRefExpr{
							pos:  position{line: 1750, col: 33, offset: 65273},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1750, col: 40, offset: 65280},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1752, col: 1, offset: 65285},
			expr: &seqExpr{
				pos: position{line: 1752, col: 31, offset: 65315},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1752, col: 31, offset: 65315},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1752, col: 38, offset: 65322},
						expr: &ruleRefExpr{
							pos:  position{line: 1752, col: 38, offset: 65322},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 45, offset: 65329},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1754, col: 1, offset: 65334},
			expr: &choiceExpr{
				pos: position{line: 1754, col: 29, offset: 65362},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1754, col: 30, offset: 65363},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1754, col: 30, offset: 65363},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1754, col: 37, offset: 65370},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 37, offset: 65370},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1754, col: 44, offset: 65377},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 51, offset: 65384},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1756, col: 1, offset: 65389},
			expr: &actionExpr{
				pos: position{line: 1756, col: 17, offset: 65405},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1756, col: 17, offset: 65405},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1756, col: 17, offset: 65405},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1756, col: 28, offset: 65416},
								expr: &ruleRefExpr{
									pos:  position{line: 1756, col: 29, offset: 65417},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1756, col: 42, offset: 65430},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1756, col: 69, offset: 65457},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1756, col: 78, offset: 65466},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1756, col: 102, offset: 65490},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1760, col: 1, offset: 65607},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1760, col: 27, offset: 65633},
				expr: &actionExpr{
					pos: position{line: 1760, col: 28, offset: 65634},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1760, col: 28, offset: 65634},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1760, col: 28, offset: 65634},
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 29, offset: 65635},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1760, col: 54, offset: 65660},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1760, col: 60, offset: 65666},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1767, col: 1, offset: 66004},
			expr: &seqExpr{
				pos: position{line: 1767, col: 24, offset: 66027},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1767, col: 24, offset: 66027},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1767, col: 31, offset: 66034},
						expr: &ruleRefExpr{
							pos:  position{line: 1767, col: 31, offset: 66034},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 38, offset: 66041},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1769, col: 1, offset: 66071},
			expr: &seqExpr{
				pos: position{line: 1769, col: 29, offset: 66099},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1769, col: 29, offset: 66099},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1769, col: 36, offset: 66106},
						expr: &ruleRefExpr{
							pos:  position{line: 1769, col: 36, offset: 66106},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 43, offset: 66113},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1771, col: 1, offset: 66143},
			expr: &choiceExpr{
				pos: position{line: 1771, col: 27, offset: 66169},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1771, col: 28, offset: 66170},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1771, col: 28, offset: 66170},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1771, col: 35, offset: 66177},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 35, offset: 66177},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1771, col: 42, offset: 66184},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 49, offset: 66191},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1773, col: 1, offset: 66221},
			expr: &actionExpr{
				pos: position{line: 1773, col: 15, offset: 66235},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 15, offset: 66235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1773, col: 15, offset: 66235},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1773, col: 26, offset: 66246},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 27, offset: 66247},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 40, offset: 66260},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 65, offset: 66285},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1773, col: 74, offset: 66294},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 101, offset: 66321},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1777, col: 1, offset: 66434},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1777, col: 30, offset: 66463},
				expr: &actionExpr{
					pos: position{line: 1777, col: 31, offset: 66464},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1777, col: 31, offset: 66464},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1777, col: 31, offset: 66464},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 32, offset: 66465},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1777, col: 55, offset: 66488},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 61, offset: 66494},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1784, col: 1, offset: 66834},
			expr: &seqExpr{
				pos: position{line: 1784, col: 26, offset: 66859},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1784, col: 26, offset: 66859},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1784, col: 33, offset: 66866},
						expr: &ruleRefExpr{
							pos:  position{line: 1784, col: 33, offset: 66866},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1784, col: 40, offset: 66873},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1786, col: 1, offset: 66878},
			expr: &seqExpr{
				pos: position{line: 1786, col: 31, offset: 66908},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1786, col: 31, offset: 66908},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1786, col: 38, offset: 66915},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 38, offset: 66915},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 45, offset: 66922},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1788, col: 1, offset: 66927},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 29, offset: 66955},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1788, col: 30, offset: 66956},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1788, col: 30, offset: 66956},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1788, col: 37, offset: 66963},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 37, offset: 66963},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1788, col: 44, offset: 66970},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 51, offset: 66977},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1790, col: 1, offset: 66982},
			expr: &actionExpr{
				pos: position{line: 1790, col: 17, offset: 66998},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1790, col: 17, offset: 66998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1790, col: 17, offset: 66998},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1790, col: 28, offset: 67009},
								expr: &ruleRefExpr{
									pos:  position{line: 1790, col: 29, offset: 67010},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 42, offset: 67023},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 69, offset: 67050},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1790, col: 78, offset: 67059},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 102, offset: 67083},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1794, col: 1, offset: 67200},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1794, col: 27, offset: 67226},
				expr: &actionExpr{
					pos: position{line: 1794, col: 28, offset: 67227},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1794, col: 28, offset: 67227},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1794, col: 28, offset: 67227},
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 29, offset: 67228},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1794, col: 54, offset: 67253},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 60, offset: 67259},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1801, col: 1, offset: 67603},
			expr: &seqExpr{
				pos: position{line: 1801, col: 30, offset: 67632},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 30, offset: 67632},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 37, offset: 67639},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 37, offset: 67639},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 44, offset: 67646},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1803, col: 1, offset: 67651},
			expr: &seqExpr{
				pos: position{line: 1803, col: 35, offset: 67685},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1803, col: 35, offset: 67685},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1803, col: 42, offset: 67692},
						expr: &ruleRefExpr{
							pos:  position{line: 1803, col: 42, offset: 67692},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 49, offset: 67699},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1805, col: 1, offset: 67704},
			expr: &choiceExpr{
				pos: position{line: 1805, col: 33, offset: 67736},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1805, col: 34, offset: 67737},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1805, col: 34, offset: 67737},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1805, col: 41, offset: 67744},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 41, offset: 67744},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1805, col: 48, offset: 67751},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1805, col: 55, offset: 67758},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1807, col: 1, offset: 67763},
			expr: &actionExpr{
				pos: position{line: 1807, col: 21, offset: 67783},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 21, offset: 67783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 21, offset: 67783},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1807, col: 32, offset: 67794},
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 33, offset: 67795},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 46, offset: 67808},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 77, offset: 67839},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 86, offset: 67848},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 114, offset: 67876},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1811, col: 1, offset: 68001},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1811, col: 31, offset: 68031},
				expr: &actionExpr{
					pos: position{line: 1811, col: 32, offset: 68032},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1811, col: 32, offset: 68032},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1811, col: 32, offset: 68032},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 33, offset: 68033},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1811, col: 62, offset: 68062},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 68, offset: 68068},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1816, col: 1, offset: 68230},
			expr: &actionExpr{
				pos: position{line: 1816, col: 18, offset: 68247},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1816, col: 18, offset: 68247},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1816, col: 19, offset: 68248},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1816, col: 19, offset: 68248},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 27, offset: 68256},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 37, offset: 68266},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 45, offset: 68274},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 55, offset: 68284},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1816, col: 63, offset: 68292},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1816, col: 72, offset: 68301},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1826, col: 1, offset: 68608},
			expr: &choiceExpr{
				pos: position{line: 1826, col: 17, offset: 68624},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1826, col: 17, offset: 68624},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 19, offset: 68653},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 19, offset: 68684},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 19, offset: 68708},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 19, offset: 68745},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 19, offset: 68779},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 19, offset: 68813},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 19, offset: 68848},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 19, offset: 68882},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 19, offset: 68919},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1837, col: 1, offset: 68930},
			expr: &actionExpr{
				pos: position{line: 1837, col: 23, offset: 68952},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1837, col: 23, offset: 68952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1837, col: 23, offset: 68952},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1837, col: 32, offset: 68961},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1837, col: 37, offset: 68966},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1837, col: 37, offset: 68966},
									expr: &charClassMatcher{
										pos:        position{line: 1837, col: 37, offset: 68966},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1837, col: 76, offset: 69005},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1842, col: 1, offset: 69157},
			expr: &seqExpr{
				pos: position{line: 1843, col: 5, offset: 69187},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1843, col: 5, offset: 69187},
						expr: &choiceExpr{
							pos: position{line: 1843, col: 6, offset: 69188},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1843, col: 6, offset: 69188},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 11, offset: 69217},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1845, col: 11, offset: 69278},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1846, col: 11, offset: 69307},
									expr: &ruleRefExpr{
										pos:  position{line: 1846, col: 11, offset: 69307},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1847, col: 11, offset: 69325},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1848, col: 11, offset: 69343},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1848, col: 21, offset: 69353},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1851, col: 1, offset: 69474},
			expr: &seqExpr{
				pos: position{line: 1852, col: 5, offset: 69503},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 5, offset: 69503},
						expr: &choiceExpr{
							pos: position{line: 1852, col: 6, offset: 69504},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1852, col: 6, offset: 69504},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 11, offset: 69565},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 11, offset: 69592},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1855, col: 11, offset: 69621},
									expr: &ruleRefExpr{
										pos:  position{line: 1855, col: 11, offset: 69621},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1856, col: 11, offset: 69638},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 69656},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1857, col: 21, offset: 69666},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1860, col: 1, offset: 69720},
			expr: &seqExpr{
				pos: position{line: 1861, col: 5, offset: 69743},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1861, col: 5, offset: 69743},
						expr: &choiceExpr{
							pos: position{line: 1861, col: 6, offset: 69744},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1861, col: 6, offset: 69744},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1862, col: 11, offset: 69805},
									expr: &ruleRefExpr{
										pos:  position{line: 1862, col: 11, offset: 69805},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 69823},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1864, col: 11, offset: 69845},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1865, col: 11, offset: 69868},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1866, col: 11, offset: 69897},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1867, col: 11, offset: 69915},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1867, col: 21, offset: 69925},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1870, col: 1, offset: 69983},
			expr: &seqExpr{
				pos: position{line: 1871, col: 5, offset: 70005},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1871, col: 5, offset: 70005},
						expr: &choiceExpr{
							pos: position{line: 1871, col: 6, offset: 70006},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1871, col: 6, offset: 70006},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1872, col: 11, offset: 70067},
									expr: &ruleRefExpr{
										pos:  position{line: 1872, col: 11, offset: 70067},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1873, col: 11, offset: 70085},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1874, col: 11, offset: 70117},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1875, col: 11, offset: 70146},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1876, col: 11, offset: 70164},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1876, col: 21, offset: 70174},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1879, col: 1, offset: 70228},
			expr: &seqExpr{
				pos: position{line: 1880, col: 5, offset: 70252},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1880, col: 5, offset: 70252},
						expr: &choiceExpr{
							pos: position{line: 1880, col: 6, offset: 70253},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1880, col: 6, offset: 70253},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1881, col: 11, offset: 70314},
									expr: &ruleRefExpr{
										pos:  position{line: 1881, col: 11, offset: 70314},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1882, col: 11, offset: 70332},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1883, col: 11, offset: 70355},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1884, col: 11, offset: 70384},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1885, col: 11, offset: 70402},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1885, col: 21, offset: 70412},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NormalBlocks",
			pos:  position{line: 1887, col: 1, offset: 70417},
			expr: &actionExpr{
				pos: position{line: 1887, col: 17, offset: 70433},
				run: (*parser).callonNormalBlocks1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 17, offset: 70433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 17, offset: 70433},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1887, col: 26, offset: 70442},
								expr: &choiceExpr{
									pos: position{line: 1887, col: 27, offset: 70443},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1887, col: 27, offset: 70443},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1888, col: 15, offset: 70468},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1889, col: 15, offset: 70496},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1890, col: 15, offset: 70521},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1891, col: 15, offset: 70549},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1892, col: 15, offset: 70580},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1893, col: 15, offset: 70613},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1894, col: 15, offset: 70644},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1895, col: 15, offset: 70683},
											name: "DelimitedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1896, col: 15, offset: 70712},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1897, col: 15, offset: 70740},
											name: "StandaloneAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1898, col: 15, offset: 70775},
											name: "RawParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1898, col: 30, offset: 70790},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerseMacroSubs",
			pos:  position{line: 1903, col: 1, offset: 70899},
			expr: &seqExpr{
				pos: position{line: 1903, col: 19, offset: 70917},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1903, col: 19, offset: 70917},
						expr: &choiceExpr{
							pos: position{line: 1904, col: 9, offset: 70927},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1904, col: 9, offset: 70927},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1905, col: 11, offset: 70988},
									expr: &ruleRefExpr{
										pos:  position{line: 1905, col: 11, offset: 70988},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1906, col: 11, offset: 71006},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 11, offset: 71035},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1908, col: 11, offset: 71053},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1908, col: 21, offset: 71063},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1911, col: 1, offset: 71144},
			expr: &actionExpr{
				pos: position{line: 1911, col: 27, offset: 71170},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1911, col: 27, offset: 71170},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1911, col: 27, offset: 71170},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1911, col: 33, offset: 71176},
								expr: &ruleRefExpr{
									pos:  position{line: 1911, col: 34, offset: 71177},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1911, col: 54, offset: 71197},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1915, col: 1, offset: 71264},
			expr: &actionExpr{
				pos: position{line: 1916, col: 5, offset: 71290},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 5, offset: 71290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1916, col: 5, offset: 71290},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1916, col: 14, offset: 71299},
								expr: &choiceExpr{
									pos: position{line: 1916, col: 15, offset: 71300},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1916, col: 15, offset: 71300},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1917, col: 11, offset: 71361},
											expr: &ruleRefExpr{
												pos:  position{line: 1917, col: 11, offset: 71361},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1918, col: 11, offset: 71379},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1919, col: 11, offset: 71402},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1920, col: 11, offset: 71431},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1920, col: 21, offset: 71441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1924, col: 1, offset: 71512},
			expr: &actionExpr{
				pos: position{line: 1924, col: 29, offset: 71540},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 29, offset: 71540},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1924, col: 29, offset: 71540},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 35, offset: 71546},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1924, col: 43, offset: 71554},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1924, col: 44, offset: 71555},
									expr: &charClassMatcher{
										pos:        position{line: 1924, col: 44, offset: 71555},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1926, col: 8, offset: 71605},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1931, col: 1, offset: 71692},
			expr: &seqExpr{
				pos: position{line: 1932, col: 5, offset: 71716},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1932, col: 5, offset: 71716},
						expr: &choiceExpr{
							pos: position{line: 1932, col: 6, offset: 71717},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1932, col: 6, offset: 71717},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1933, col: 11, offset: 71778},
									expr: &ruleRefExpr{
										pos:  position{line: 1933, col: 11, offset: 71778},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 71796},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 71814},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 71843},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 11, offset: 71861},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 21, offset: 71871},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1941, col: 1, offset: 72019},
			expr: &seqExpr{
				pos: position{line: 1941, col: 24, offset: 72042},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1941, col: 24, offset: 72042},
						expr: &choiceExpr{
							pos: position{line: 1942, col: 5, offset: 72048},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1942, col: 5, offset: 72048},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 7, offset: 72105},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 7, offset: 72130},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 7, offset: 72173},
									expr: &ruleRefExpr{
										pos:  position{line: 1945, col: 7, offset: 72173},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 7, offset: 72187},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1947, col: 7, offset: 72201},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1947, col: 17, offset: 72211},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1950, col: 1, offset: 72268},
			expr: &seqExpr{
				pos: position{line: 1951, col: 5, offset: 72288},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1951, col: 5, offset: 72288},
						expr: &choiceExpr{
							pos: position{line: 1951, col: 6, offset: 72289},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1951, col: 6, offset: 72289},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 11, offset: 72350},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1953, col: 11, offset: 72379},
									expr: &ruleRefExpr{
										pos:  position{line: 1953, col: 11, offset: 72379},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1954, col: 11, offset: 72396},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1955, col: 11, offset: 72414},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1956, col: 11, offset: 72432},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1956, col: 21, offset: 72442},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1958, col: 1, offset: 72447},
			expr: &actionExpr{
				pos: position{line: 1958, col: 12, offset: 72458},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1958, col: 12, offset: 72458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1958, col: 12, offset: 72458},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1958, col: 16, offset: 72462},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1958, col: 21, offset: 72467},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1958, col: 21, offset: 72467},
									expr: &charClassMatcher{
										pos:        position{line: 1958, col: 21, offset: 72467},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1958, col: 69, offset: 72515},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1958, col: 73, offset: 72519},
							expr: &ruleRefExpr{
								pos:  position{line: 1958, col: 73, offset: 72519},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1958, col: 80, offset: 72526},
							expr: &choiceExpr{
								pos: position{line: 1958, col: 82, offset: 72528},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1958, col: 82, offset: 72528},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1958, col: 88, offset: 72534},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1963, col: 1, offset: 72634},
			expr: &seqExpr{
				pos: position{line: 1963, col: 13, offset: 72646},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1963, col: 13, offset: 72646},
						expr: &choiceExpr{
							pos: position{line: 1964, col: 5, offset: 72652},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1964, col: 5, offset: 72652},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1965, col: 8, offset: 72679},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1965, col: 8, offset: 72679},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1965, col: 8, offset: 72679},
												expr: &ruleRefExpr{
													pos:  position{line: 1965, col: 9, offset: 72680},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1965, col: 13, offset: 72684},
												expr: &charClassMatcher{
													pos:        position{line: 1965, col: 13, offset: 72684},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1965, col: 22, offset: 72693},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1967, col: 10, offset: 72798},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1972, col: 1, offset: 72991},
			expr: &actionExpr{
				pos: position{line: 1972, col: 10, offset: 73000},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1972, col: 10, offset: 73000},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1972, col: 10, offset: 73000},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1972, col: 16, offset: 73006},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1972, col: 17, offset: 73007},
									expr: &ruleRefExpr{
										pos:  position{line: 1972, col: 17, offset: 73007},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1972, col: 31, offset: 73021},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 5, offset: 73040},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1973, col: 12, offset: 73047},
								expr: &ruleRefExpr{
									pos:  position{line: 1973, col: 13, offset: 73048},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1974, col: 5, offset: 73070},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1974, col: 11, offset: 73076},
								expr: &ruleRefExpr{
									pos:  position{line: 1974, col: 12, offset: 73077},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1975, col: 6, offset: 73094},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1975, col: 6, offset: 73094},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1975, col: 23, offset: 73111},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1979, col: 1, offset: 73221},
			expr: &seqExpr{
				pos: position{line: 1979, col: 23, offset: 73243},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1979, col: 23, offset: 73243},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1979, col: 27, offset: 73247},
						expr: &ruleRefExpr{
							pos:  position{line: 1979, col: 27, offset: 73247},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1981, col: 1, offset: 73255},
			expr: &seqExpr{
				pos: position{line: 1981, col: 19, offset: 73273},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1981, col: 19, offset: 73273},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1981, col: 26, offset: 73280},
						expr: &ruleRefExpr{
							pos:  position{line: 1981, col: 26, offset: 73280},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1981, col: 33, offset: 73287},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1984, col: 1, offset: 73355},
			expr: &actionExpr{
				pos: position{line: 1984, col: 20, offset: 73374},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1984, col: 20, offset: 73374},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1984, col: 20, offset: 73374},
							expr: &ruleRefExpr{
								pos:  position{line: 1984, col: 21, offset: 73375},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1984, col: 36, offset: 73390},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1984, col: 42, offset: 73396},
								expr: &ruleRefExpr{
									pos:  position{line: 1984, col: 43, offset: 73397},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 55, offset: 73409},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1984, col: 59, offset: 73413},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1988, col: 1, offset: 73481},
			expr: &actionExpr{
				pos: position{line: 1988, col: 14, offset: 73494},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1988, col: 14, offset: 73494},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1988, col: 14, offset: 73494},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 15, offset: 73495},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1988, col: 30, offset: 73510},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1988, col: 36, offset: 73516},
								expr: &ruleRefExpr{
									pos:  position{line: 1988, col: 37, offset: 73517},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1988, col: 49, offset: 73529},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1988, col: 53, offset: 73533},
							expr: &ruleRefExpr{
								pos:  position{line: 1988, col: 53, offset: 73533},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1992, col: 1, offset: 73602},
			expr: &actionExpr{
				pos: position{line: 1992, col: 14, offset: 73615},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 14, offset: 73615},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1992, col: 14, offset: 73615},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1992, col: 33, offset: 73634},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1992, col: 42, offset: 73643},
								expr: &seqExpr{
									pos: position{line: 1992, col: 43, offset: 73644},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1992, col: 43, offset: 73644},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 44, offset: 73645},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1992, col: 63, offset: 73664},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 64, offset: 73665},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1992, col: 68, offset: 73669},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 68, offset: 73669},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1992, col: 75, offset: 73676},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1992, col: 89, offset: 73690},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 89, offset: 73690},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1999, col: 1, offset: 73939},
			expr: &seqExpr{
				pos: position{line: 1999, col: 26, offset: 73964},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1999, col: 26, offset: 73964},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 33, offset: 73971},
						expr: &ruleRefExpr{
							pos:  position{line: 1999, col: 33, offset: 73971},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1999, col: 40, offset: 73978},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2001, col: 1, offset: 73983},
			expr: &seqExpr{
				pos: position{line: 2001, col: 31, offset: 74013},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2001, col: 31, offset: 74013},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2001, col: 38, offset: 74020},
						expr: &ruleRefExpr{
							pos:  position{line: 2001, col: 38, offset: 74020},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2001, col: 45, offset: 74027},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2003, col: 1, offset: 74032},
			expr: &choiceExpr{
				pos: position{line: 2003, col: 29, offset: 74060},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2003, col: 30, offset: 74061},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2003, col: 30, offset: 74061},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2003, col: 37, offset: 74068},
								expr: &ruleRefExpr{
									pos:  position{line: 2003, col: 37, offset: 74068},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2003, col: 44, offset: 74075},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2003, col: 51, offset: 74082},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2005, col: 1, offset: 74087},
			expr: &actionExpr{
				pos: position{line: 2005, col: 17, offset: 74103},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2005, col: 17, offset: 74103},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2005, col: 17, offset: 74103},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 44, offset: 74130},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2005, col: 53, offset: 74139},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2005, col: 78, offset: 74164},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2009, col: 1, offset: 74274},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2009, col: 27, offset: 74300},
				expr: &actionExpr{
					pos: position{line: 2009, col: 28, offset: 74301},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2009, col: 28, offset: 74301},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2009, col: 28, offset: 74301},
								expr: &ruleRefExpr{
									pos:  position{line: 2009, col: 29, offset: 74302},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2009, col: 54, offset: 74327},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2009, col: 60, offset: 74333},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2013, col: 1, offset: 74477},
			expr: &actionExpr{
				pos: position{line: 2013, col: 22, offset: 74498},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 22, offset: 74498},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2013, col: 22, offset: 74498},
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 23, offset: 74499},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2013, col: 45, offset: 74521},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 50, offset: 74526},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 59, offset: 74535},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2013, col: 85, offset: 74561},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2017, col: 1, offset: 74626},
			expr: &actionExpr{
				pos: position{line: 2017, col: 29, offset: 74654},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2017, col: 29, offset: 74654},
					expr: &charClassMatcher{
						pos:        position{line: 2017, col: 29, offset: 74654},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2025, col: 1, offset: 74967},
			expr: &choiceExpr{
				pos: position{line: 2025, col: 17, offset: 74983},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2025, col: 17, offset: 74983},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2025, col: 49, offset: 75015},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2025, col: 78, offset: 75044},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2027, col: 1, offset: 75080},
			expr: &litMatcher{
				pos:        position{line: 2027, col: 26, offset: 75105},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2030, col: 1, offset: 75177},
			expr: &actionExpr{
				pos: position{line: 2030, col: 31, offset: 75207},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 31, offset: 75207},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2030, col: 31, offset: 75207},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2030, col: 42, offset: 75218},
								expr: &ruleRefExpr{
									pos:  position{line: 2030, col: 43, offset: 75219},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 56, offset: 75232},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 63, offset: 75239},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2035, col: 1, offset: 75469},
			expr: &actionExpr{
				pos: position{line: 2036, col: 5, offset: 75509},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2036, col: 5, offset: 75509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2036, col: 5, offset: 75509},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2036, col: 16, offset: 75520},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2036, col: 16, offset: 75520},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2036, col: 16, offset: 75520},
											expr: &ruleRefExpr{
												pos:  position{line: 2036, col: 16, offset: 75520},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2036, col: 23, offset: 75527},
											expr: &charClassMatcher{
												pos:        position{line: 2036, col: 23, offset: 75527},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2038, col: 8, offset: 75580},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 5, offset: 75643},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2039, col: 16, offset: 75654},
								expr: &actionExpr{
									pos: position{line: 2040, col: 9, offset: 75664},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2040, col: 9, offset: 75664},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2040, col: 9, offset: 75664},
												expr: &ruleRefExpr{
													pos:  position{line: 2040, col: 10, offset: 75665},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2041, col: 9, offset: 75684},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2041, col: 20, offset: 75695},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2041, col: 20, offset: 75695},
														expr: &charClassMatcher{
															pos:        position{line: 2041, col: 20, offset: 75695},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2043, col: 12, offset: 75756},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2050, col: 1, offset: 75986},
			expr: &actionExpr{
				pos: position{line: 2050, col: 39, offset: 76024},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 39, offset: 76024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 39, offset: 76024},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2050, col: 50, offset: 76035},
								expr: &ruleRefExpr{
									pos:  position{line: 2050, col: 51, offset: 76036},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2051, col: 9, offset: 76057},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2051, col: 31, offset: 76079},
							expr: &ruleRefExpr{
								pos:  position{line: 2051, col: 31, offset: 76079},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2051, col: 38, offset: 76086},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2051, col: 46, offset: 76094},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2051, col: 53, offset: 76101},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2051, col: 95, offset: 76143},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2051, col: 96, offset: 76144},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2051, col: 96, offset: 76144},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2051, col: 118, offset: 76166},
											expr: &ruleRefExpr{
												pos:  position{line: 2051, col: 118, offset: 76166},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2051, col: 125, offset: 76173},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2051, col: 132, offset: 76180},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2056, col: 1, offset: 76339},
			expr: &actionExpr{
				pos: position{line: 2056, col: 44, offset: 76382},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2056, col: 44, offset: 76382},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2056, col: 50, offset: 76388},
						expr: &ruleRefExpr{
							pos:  position{line: 2056, col: 51, offset: 76389},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2060, col: 1, offset: 76473},
			expr: &actionExpr{
				pos: position{line: 2061, col: 5, offset: 76528},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2061, col: 5, offset: 76528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2061, col: 5, offset: 76528},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2061, col: 11, offset: 76534},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2061, col: 11, offset: 76534},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2061, col: 11, offset: 76534},
											expr: &ruleRefExpr{
												pos:  position{line: 2061, col: 12, offset: 76535},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2061, col: 34, offset: 76557},
											expr: &charClassMatcher{
												pos:        position{line: 2061, col: 34, offset: 76557},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 8, offset: 76610},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2068, col: 1, offset: 76736},
			expr: &actionExpr{
				pos: position{line: 2069, col: 5, offset: 76774},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2069, col: 5, offset: 76774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2069, col: 5, offset: 76774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2069, col: 16, offset: 76785},
								expr: &ruleRefExpr{
									pos:  position{line: 2069, col: 17, offset: 76786},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2070, col: 5, offset: 76803},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2077, col: 5, offset: 77010},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2077, col: 12, offset: 77017},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2081, col: 1, offset: 77167},
			expr: &actionExpr{
				pos: position{line: 2081, col: 16, offset: 77182},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2081, col: 16, offset: 77182},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2086, col: 1, offset: 77265},
			expr: &actionExpr{
				pos: position{line: 2086, col: 39, offset: 77303},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2086, col: 39, offset: 77303},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2086, col: 45, offset: 77309},
						expr: &ruleRefExpr{
							pos:  position{line: 2086, col: 46, offset: 77310},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2090, col: 1, offset: 77390},
			expr: &actionExpr{
				pos: position{line: 2090, col: 38, offset: 77427},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2090, col: 38, offset: 77427},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2090, col: 38, offset: 77427},
							expr: &ruleRefExpr{
								pos:  position{line: 2090, col: 39, offset: 77428},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2090, col: 49, offset: 77438},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2090, col: 58, offset: 77447},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2090, col: 58, offset: 77447},
									expr: &charClassMatcher{
										pos:        position{line: 2090, col: 58, offset: 77447},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2092, col: 4, offset: 77492},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2099, col: 1, offset: 77678},
			expr: &actionExpr{
				pos: position{line: 2099, col: 14, offset: 77691},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2099, col: 14, offset: 77691},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2099, col: 14, offset: 77691},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2099, col: 19, offset: 77696},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2099, col: 25, offset: 77702},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2099, col: 43, offset: 77720},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2103, col: 1, offset: 77785},
			expr: &actionExpr{
				pos: position{line: 2103, col: 21, offset: 77805},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2103, col: 21, offset: 77805},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2103, col: 30, offset: 77814},
						expr: &choiceExpr{
							pos: position{line: 2103, col: 31, offset: 77815},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2103, col: 31, offset: 77815},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 38, offset: 77822},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 53, offset: 77837},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 66, offset: 77850},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 74, offset: 77858},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2103, col: 93, offset: 77877},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2103, col: 114, offset: 77898},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2103, col: 115, offset: 77899},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2103, col: 115, offset: 77899},
												expr: &litMatcher{
													pos:        position{line: 2103, col: 116, offset: 77900},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2103, col: 121, offset: 77905,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2109, col: 1, offset: 78011},
			expr: &actionExpr{
				pos: position{line: 2109, col: 23, offset: 78033},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2109, col: 23, offset: 78033},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2109, col: 23, offset: 78033},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2109, col: 29, offset: 78039},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2109, col: 36, offset: 78046},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2110, col: 5, offset: 78078},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2110, col: 11, offset: 78084},
								expr: &actionExpr{
									pos: position{line: 2110, col: 12, offset: 78085},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2110, col: 12, offset: 78085},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 12, offset: 78085},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 12, offset: 78085},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2110, col: 19, offset: 78092},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2110, col: 23, offset: 78096},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 23, offset: 78096},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2110, col: 30, offset: 78103},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 39, offset: 78112},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2111, col: 5, offset: 78170},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2111, col: 11, offset: 78176},
								expr: &actionExpr{
									pos: position{line: 2111, col: 12, offset: 78177},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2111, col: 12, offset: 78177},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2111, col: 12, offset: 78177},
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 12, offset: 78177},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2111, col: 19, offset: 78184},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2111, col: 23, offset: 78188},
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 23, offset: 78188},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2111, col: 30, offset: 78195},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2111, col: 39, offset: 78204},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2112, col: 5, offset: 78262},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2116, col: 1, offset: 78341},
			expr: &actionExpr{
				pos: position{line: 2116, col: 30, offset: 78370},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2116, col: 30, offset: 78370},
					expr: &choiceExpr{
						pos: position{line: 2116, col: 31, offset: 78371},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2116, col: 31, offset: 78371},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2116, col: 42, offset: 78382},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2123, col: 1, offset: 78531},
			expr: &actionExpr{
				pos: position{line: 2123, col: 14, offset: 78544},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2123, col: 14, offset: 78544},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2123, col: 14, offset: 78544},
							expr: &ruleRefExpr{
								pos:  position{line: 2123, col: 15, offset: 78545},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2123, col: 19, offset: 78549},
							expr: &ruleRefExpr{
								pos:  position{line: 2123, col: 19, offset: 78549},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2123, col: 26, offset: 78556},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2131, col: 1, offset: 78701},
			expr: &choiceExpr{
				pos: position{line: 2131, col: 11, offset: 78711},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2131, col: 11, offset: 78711},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 24, offset: 78724},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 36, offset: 78736},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 48, offset: 78748},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 61, offset: 78761},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2131, col: 72, offset: 78772},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2133, col: 1, offset: 78791},
			expr: &actionExpr{
				pos: position{line: 2133, col: 15, offset: 78805},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2133, col: 15, offset: 78805},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2136, col: 1, offset: 78858},
			expr: &actionExpr{
				pos: position{line: 2136, col: 14, offset: 78871},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2136, col: 14, offset: 78871},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2139, col: 1, offset: 78925},
			expr: &actionExpr{
				pos: position{line: 2139, col: 14, offset: 78938},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2139, col: 14, offset: 78938},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2142, col: 1, offset: 78993},
			expr: &actionExpr{
				pos: position{line: 2142, col: 15, offset: 79007},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2142, col: 15, offset: 79007},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2145, col: 1, offset: 79061},
			expr: &actionExpr{
				pos: position{line: 2145, col: 13, offset: 79073},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2145, col: 13, offset: 79073},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2153, col: 1, offset: 79350},
			expr: &actionExpr{
				pos: position{line: 2153, col: 22, offset: 79371},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2153, col: 22, offset: 79371},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2153, col: 22, offset: 79371},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2153, col: 31, offset: 79380},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2153, col: 35, offset: 79384},
							expr: &charClassMatcher{
								pos:        position{line: 2153, col: 36, offset: 79385},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2162, col: 1, offset: 79747},
			expr: &choiceExpr{
				pos: position{line: 2162, col: 21, offset: 79767},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2162, col: 21, offset: 79767},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2162, col: 21, offset: 79767},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2165, col: 9, offset: 79930},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2165, col: 10, offset: 79931},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2165, col: 10, offset: 79931},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2165, col: 16, offset: 79937},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2165, col: 22, offset: 79943},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2172, col: 1, offset: 80121},
			expr: &charClassMatcher{
				pos:        position{line: 2172, col: 13, offset: 80133},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2174, col: 1, offset: 80143},
			expr: &choiceExpr{
				pos: position{line: 2174, col: 16, offset: 80158},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2174, col: 16, offset: 80158},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 22, offset: 80164},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 28, offset: 80170},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 34, offset: 80176},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 40, offset: 80182},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 46, offset: 80188},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2176, col: 1, offset: 80194},
			expr: &actionExpr{
				pos: position{line: 2176, col: 14, offset: 80207},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2176, col: 14, offset: 80207},
					expr: &charClassMatcher{
						pos:        position{line: 2176, col: 14, offset: 80207},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2180, col: 1, offset: 80253},
			expr: &choiceExpr{
				pos: position{line: 2184, col: 5, offset: 80580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2184, col: 5, offset: 80580},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2184, col: 5, offset: 80580},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2184, col: 5, offset: 80580},
									expr: &charClassMatcher{
										pos:        position{line: 2184, col: 5, offset: 80580},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2184, col: 15, offset: 80590},
									expr: &choiceExpr{
										pos: position{line: 2184, col: 17, offset: 80592},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2184, col: 17, offset: 80592},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2184, col: 30, offset: 80605},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2186, col: 9, offset: 80675},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2186, col: 9, offset: 80675},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2186, col: 9, offset: 80675},
									expr: &charClassMatcher{
										pos:        position{line: 2186, col: 9, offset: 80675},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2186, col: 19, offset: 80685},
									expr: &seqExpr{
										pos: position{line: 2186, col: 20, offset: 80686},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2186, col: 20, offset: 80686},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2186, col: 27, offset: 80693},
												expr: &charClassMatcher{
													pos:        position{line: 2186, col: 27, offset: 80693},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2190, col: 1, offset: 80769},
			expr: &choiceExpr{
				pos: position{line: 2191, col: 5, offset: 80850},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2191, col: 5, offset: 80850},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2191, col: 5, offset: 80850},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2191, col: 5, offset: 80850},
									expr: &charClassMatcher{
										pos:        position{line: 2191, col: 5, offset: 80850},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2191, col: 19, offset: 80864},
									expr: &choiceExpr{
										pos: position{line: 2191, col: 21, offset: 80866},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2191, col: 21, offset: 80866},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2191, col: 31, offset: 80876},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2193, col: 9, offset: 80945},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2196, col: 1, offset: 81045},
			expr: &actionExpr{
				pos: position{line: 2196, col: 12, offset: 81056},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2196, col: 12, offset: 81056},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2200, col: 1, offset: 81121},
			expr: &actionExpr{
				pos: position{line: 2200, col: 17, offset: 81137},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2200, col: 17, offset: 81137},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2200, col: 22, offset: 81142},
						expr: &choiceExpr{
							pos: position{line: 2200, col: 23, offset: 81143},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2200, col: 23, offset: 81143},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2200, col: 34, offset: 81154},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2204, col: 1, offset: 81235},
			expr: &actionExpr{
				pos: position{line: 2204, col: 25, offset: 81259},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2204, col: 25, offset: 81259},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2204, col: 30, offset: 81264},
						expr: &charClassMatcher{
							pos:        position{line: 2204, col: 31, offset: 81265},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2208, col: 1, offset: 81337},
			expr: &actionExpr{
				pos: position{line: 2208, col: 13, offset: 81349},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2208, col: 13, offset: 81349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2208, col: 13, offset: 81349},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2208, col: 20, offset: 81356},
								expr: &ruleRefExpr{
									pos:  position{line: 2208, col: 21, offset: 81357},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2208, col: 34, offset: 81370},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2208, col: 39, offset: 81375},
								expr: &choiceExpr{
									pos: position{line: 2208, col: 40, offset: 81376},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2208, col: 40, offset: 81376},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2208, col: 52, offset: 81388},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2212, col: 1, offset: 81473},
			expr: &actionExpr{
				pos: position{line: 2212, col: 23, offset: 81495},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2212, col: 23, offset: 81495},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2212, col: 23, offset: 81495},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2212, col: 31, offset: 81503},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2212, col: 43, offset: 81515},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2212, col: 48, offset: 81520},
								expr: &choiceExpr{
									pos: position{line: 2212, col: 49, offset: 81521},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2212, col: 49, offset: 81521},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2212, col: 60, offset: 81532},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2216, col: 1, offset: 81617},
			expr: &oneOrMoreExpr{
				pos: position{line: 2216, col: 13, offset: 81629},
				expr: &charClassMatcher{
					pos:        position{line: 2216, col: 14, offset: 81630},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2218, col: 1, offset: 81698},
			expr: &actionExpr{
				pos: position{line: 2218, col: 21, offset: 81718},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2218, col: 21, offset: 81718},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2218, col: 21, offset: 81718},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2218, col: 29, offset: 81726},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2218, col: 41, offset: 81738},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2218, col: 47, offset: 81744},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2223, col: 1, offset: 81992},
			expr: &oneOrMoreExpr{
				pos: position{line: 2223, col: 22, offset: 82013},
				expr: &charClassMatcher{
					pos:        position{line: 2223, col: 23, offset: 82014},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2225, col: 1, offset: 82146},
			expr: &actionExpr{
				pos: position{line: 2225, col: 9, offset: 82154},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2225, col: 9, offset: 82154},
					expr: &charClassMatcher{
						pos:        position{line: 2225, col: 9, offset: 82154},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2229, col: 1, offset: 82202},
			expr: &choiceExpr{
				pos: position{line: 2229, col: 15, offset: 82216},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2229, col: 15, offset: 82216},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 27, offset: 82228},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 40, offset: 82241},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 51, offset: 82252},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 62, offset: 82263},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2231, col: 1, offset: 82274},
			expr: &actionExpr{
				pos: position{line: 2231, col: 7, offset: 82280},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2231, col: 7, offset: 82280},
					expr: &charClassMatcher{
						pos:        position{line: 2231, col: 7, offset: 82280},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2235, col: 1, offset: 82405},
			expr: &actionExpr{
				pos: position{line: 2235, col: 10, offset: 82414},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2235, col: 10, offset: 82414},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2239, col: 1, offset: 82456},
			expr: &actionExpr{
				pos: position{line: 2239, col: 11, offset: 82466},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2239, col: 11, offset: 82466},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2239, col: 11, offset: 82466},
							expr: &litMatcher{
								pos:        position{line: 2239, col: 11, offset: 82466},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2239, col: 16, offset: 82471},
							expr: &ruleRefExpr{
								pos:  position{line: 2239, col: 16, offset: 82471},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2243, col: 1, offset: 82523},
			expr: &choiceExpr{
				pos: position{line: 2243, col: 10, offset: 82532},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2243, col: 10, offset: 82532},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2243, col: 16, offset: 82538},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2243, col: 16, offset: 82538},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2247, col: 1, offset: 82579},
			expr: &choiceExpr{
				pos: position{line: 2247, col: 12, offset: 82590},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2247, col: 12, offset: 82590},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2247, col: 21, offset: 82599},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2247, col: 28, offset: 82606},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2249, col: 1, offset: 82612},
			expr: &notExpr{
				pos: position{line: 2249, col: 8, offset: 82619},
				expr: &anyMatcher{
					line: 2249, col: 9, offset: 82620,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2251, col: 1, offset: 82623},
			expr: &choiceExpr{
				pos: position{line: 2251, col: 8, offset: 82630},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2251, col: 8, offset: 82630},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2251, col: 18, offset: 82640},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onRawDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph34(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph34(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onNormalBlocks1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonNormalBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlocks1(stack["elements"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
