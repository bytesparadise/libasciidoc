// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 22, col: 1, offset: 544},
			expr: &actionExpr{
				pos: position{line: 22, col: 12, offset: 555},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 22, col: 12, offset: 555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 12, offset: 555},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 20, offset: 563},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 36, offset: 579},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 27, col: 1, offset: 695},
			expr: &actionExpr{
				pos: position{line: 27, col: 17, offset: 711},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 27, col: 17, offset: 711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 17, offset: 711},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 25, offset: 719},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 45, offset: 739},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 34, col: 1, offset: 920},
			expr: &actionExpr{
				pos: position{line: 34, col: 30, offset: 949},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 34, col: 30, offset: 949},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 34, col: 30, offset: 949},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 34, col: 38, offset: 957},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 38, offset: 957},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 55, offset: 974},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 34, col: 63, offset: 982},
								expr: &ruleRefExpr{
									pos:  position{line: 34, col: 63, offset: 982},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 43, col: 1, offset: 1234},
			expr: &choiceExpr{
				pos: position{line: 44, col: 9, offset: 1263},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 44, col: 9, offset: 1263},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1328},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1349},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1378},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1430},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1448},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1473},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1497},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1525},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1549},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1575},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1604},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1630},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1665},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1689},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1721},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1747},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1784},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1809},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1840},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1854},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1891},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1891},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1891},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1892},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1901},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 9, offset: 1917},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 9, offset: 1917},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1938},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1963},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2014},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2038},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2066},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2090},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2116},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2145},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2171},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2206},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2230},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2262},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2288},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2325},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2350},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2391},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2413},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2420},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2421},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2442},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2463},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2463},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2463},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2464},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2473},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2480},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2480},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2492},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2641},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2656},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2674},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2693},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2693},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2693},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2714},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2722},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2723},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2748},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2828},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2853},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2853},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2859},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2859},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 2866},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 2871},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 2897},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 2897},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 2898},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 2899},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 2899},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 2900},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 2921,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3087},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3105},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3105},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3105},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3109},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3109},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3116},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3123},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3138},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3142},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3142},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3160},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3172},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3173},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 112, col: 10, offset: 3173},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 112, col: 10, offset: 3173},
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 10, offset: 3173},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 17, offset: 3180},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 37, offset: 3200},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3223},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3232},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3232},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3259},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3260},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 114, col: 10, offset: 3260},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 114, col: 10, offset: 3260},
												expr: &ruleRefExpr{
													pos:  position{line: 114, col: 10, offset: 3260},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 114, col: 17, offset: 3267},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 37, offset: 3287},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3310},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3320},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3320},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3421},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3440},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3440},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3468},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3498},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3527},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3527},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3527},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3527},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3534},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3535},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3539},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3548},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3548},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3565},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3635},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3667},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3667},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3667},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3667},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3674},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3685},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3693},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3709},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3788},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3806},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3806},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3806},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3806},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3813},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3823},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3843},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3849},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3850},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 3872},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 3872},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 3879},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 3879},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 3884},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 3884},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4029},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4051},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4051},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4051},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4098},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4121},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4121},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4125},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4132},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4133},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4133},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4180},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4341},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4361},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4361},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4361},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4361},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4368},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4369},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4373},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4392},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4393},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4393},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4393},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4404},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4428},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4428},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4433},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4441},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4442},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4465},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4465},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4470},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4480},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4481},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4598},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4598},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4598},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4607},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4629},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4629},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4634},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4644},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4645},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4754},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 4884},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 4910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 4910},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 4910},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 4910},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 4915},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 4922},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 4922},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 4970},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 4970},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 4970},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 4970},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 4976},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 4983},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 4983},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 4994},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 4994},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5001},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5002},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5042},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5066},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5066},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5066},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5112},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5138},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5138},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5138},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5291},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5315},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5315},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5319},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5325},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5340},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5353},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5359},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5360},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5361},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5361},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5361},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5368},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5375},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5449},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5449},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5456},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5696},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5713},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5713},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5713},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5723},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5724},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5772},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 5801},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 5801},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 5801},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 5846},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 5864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 5864},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 5864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 5864},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 5869},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 5875},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 5890},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 5894},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 5894},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 5901},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5961},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5961},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 5961},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 5965},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5971},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 5986},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 5991},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 5991},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 5998},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6057},
			expr: &choiceExpr{
				pos: position{line: 197, col: 26, offset: 6082},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 197, col: 26, offset: 6082},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 39, offset: 6095},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 199, col: 1, offset: 6104},
			expr: &actionExpr{
				pos: position{line: 199, col: 12, offset: 6115},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 199, col: 12, offset: 6115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 199, col: 12, offset: 6115},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 16, offset: 6119},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 21, offset: 6124},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 199, col: 35, offset: 6138},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 203, col: 1, offset: 6204},
			expr: &choiceExpr{
				pos: position{line: 203, col: 15, offset: 6218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 15, offset: 6218},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 29, offset: 6232},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 43, offset: 6246},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 61, offset: 6264},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 80, offset: 6283},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 98, offset: 6301},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 205, col: 1, offset: 6319},
			expr: &actionExpr{
				pos: position{line: 205, col: 16, offset: 6334},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 205, col: 16, offset: 6334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 16, offset: 6334},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 28, offset: 6346},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 33, offset: 6351},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 47, offset: 6365},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 209, col: 1, offset: 6441},
			expr: &actionExpr{
				pos: position{line: 209, col: 16, offset: 6456},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 209, col: 16, offset: 6456},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 16, offset: 6456},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 29, offset: 6469},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 34, offset: 6474},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 48, offset: 6488},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 213, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 213, col: 20, offset: 6582},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 213, col: 20, offset: 6582},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 20, offset: 6582},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 32, offset: 6594},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 37, offset: 6599},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 51, offset: 6613},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 55, offset: 6617},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 213, col: 61, offset: 6623},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 70, offset: 6632},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 217, col: 1, offset: 6710},
			expr: &actionExpr{
				pos: position{line: 217, col: 21, offset: 6730},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 217, col: 21, offset: 6730},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 21, offset: 6730},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 34, offset: 6743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 39, offset: 6748},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 53, offset: 6762},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 57, offset: 6766},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 217, col: 63, offset: 6772},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 72, offset: 6781},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 221, col: 1, offset: 6858},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 6877},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 6877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 6877},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 6889},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 6894},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 6908},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 6912},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 221, col: 60, offset: 6917},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 60, offset: 6917},
									expr: &charClassMatcher{
										pos:        position{line: 221, col: 60, offset: 6917},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 108, offset: 6965},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 225, col: 1, offset: 7047},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7067},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7067},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 7067},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 7080},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 7085},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7099},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7103},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 225, col: 62, offset: 7108},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 225, col: 62, offset: 7108},
									expr: &charClassMatcher{
										pos:        position{line: 225, col: 62, offset: 7108},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 110, offset: 7156},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 229, col: 1, offset: 7237},
			expr: &actionExpr{
				pos: position{line: 229, col: 15, offset: 7251},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 229, col: 15, offset: 7251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 229, col: 15, offset: 7251},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 229, col: 21, offset: 7257},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 22, offset: 7258},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 41, offset: 7277},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 41, offset: 7277},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 233, col: 1, offset: 7347},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7367},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7367},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 233, col: 21, offset: 7367},
							expr: &choiceExpr{
								pos: position{line: 233, col: 23, offset: 7369},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 233, col: 23, offset: 7369},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 233, col: 29, offset: 7375},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 7452},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 234, col: 11, offset: 7458},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 234, col: 11, offset: 7458},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7479},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7503},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7540},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 238, col: 9, offset: 7568},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 239, col: 9, offset: 7596},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 240, col: 9, offset: 7623},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 241, col: 9, offset: 7650},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 242, col: 9, offset: 7687},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7723},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 247, col: 1, offset: 7826},
			expr: &actionExpr{
				pos: position{line: 247, col: 14, offset: 7839},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 247, col: 14, offset: 7839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 14, offset: 7839},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 19, offset: 7844},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 23, offset: 7848},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 27, offset: 7852},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 32, offset: 7857},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 32, offset: 7857},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 39, offset: 7864},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 251, col: 1, offset: 7907},
			expr: &actionExpr{
				pos: position{line: 251, col: 20, offset: 7926},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 251, col: 20, offset: 7926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 20, offset: 7926},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 7931},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 29, offset: 7935},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 33, offset: 7939},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 38, offset: 7944},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 38, offset: 7944},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 257, col: 1, offset: 8221},
			expr: &actionExpr{
				pos: position{line: 257, col: 17, offset: 8237},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 257, col: 17, offset: 8237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 17, offset: 8237},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 21, offset: 8241},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 28, offset: 8248},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 49, offset: 8269},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 49, offset: 8269},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 56, offset: 8276},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 261, col: 1, offset: 8334},
			expr: &actionExpr{
				pos: position{line: 261, col: 24, offset: 8357},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 261, col: 24, offset: 8357},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 261, col: 24, offset: 8357},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 32, offset: 8365},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 32, offset: 8365},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 267, col: 1, offset: 8619},
			expr: &actionExpr{
				pos: position{line: 267, col: 31, offset: 8649},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 31, offset: 8649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 31, offset: 8649},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 35, offset: 8653},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 267, col: 42, offset: 8660},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 42, offset: 8660},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 42, offset: 8660},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 57, offset: 8675},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 57, offset: 8675},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 69, offset: 8687},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 73, offset: 8691},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 73, offset: 8691},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 80, offset: 8698},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 271, col: 1, offset: 8752},
			expr: &choiceExpr{
				pos: position{line: 271, col: 15, offset: 8766},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 15, offset: 8766},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 31, offset: 8782},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 46, offset: 8797},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 275, col: 1, offset: 9025},
			expr: &actionExpr{
				pos: position{line: 275, col: 18, offset: 9042},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 275, col: 18, offset: 9042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 18, offset: 9042},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 22, offset: 9046},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 29, offset: 9053},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 275, col: 29, offset: 9053},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 29, offset: 9053},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 45, offset: 9069},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 45, offset: 9069},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 60, offset: 9084},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 60, offset: 9084},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 82, offset: 9106},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 82, offset: 9106},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 104, offset: 9128},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 104, offset: 9128},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 116, offset: 9140},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 120, offset: 9144},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 279, col: 1, offset: 9198},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 9216},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 279, col: 19, offset: 9216},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 279, col: 25, offset: 9222},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 283, col: 1, offset: 9283},
			expr: &actionExpr{
				pos: position{line: 283, col: 25, offset: 9307},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 283, col: 25, offset: 9307},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 25, offset: 9307},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 25, offset: 9307},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 32, offset: 9314},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 36, offset: 9318},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 36, offset: 9318},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 43, offset: 9325},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 49, offset: 9331},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 49, offset: 9331},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 290, col: 1, offset: 9472},
			expr: &actionExpr{
				pos: position{line: 290, col: 25, offset: 9496},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 290, col: 25, offset: 9496},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 25, offset: 9496},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 25, offset: 9496},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 32, offset: 9503},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 36, offset: 9507},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 36, offset: 9507},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 43, offset: 9514},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 49, offset: 9520},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 49, offset: 9520},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 297, col: 1, offset: 9661},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9681},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9681},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9681},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 33, offset: 9693},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 33, offset: 9693},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 40, offset: 9700},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 301, col: 1, offset: 9752},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 9781},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 9781},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 9781},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 39, offset: 9790},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 39, offset: 9790},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 46, offset: 9797},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 306, col: 1, offset: 9938},
			expr: &actionExpr{
				pos: position{line: 306, col: 30, offset: 9967},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 306, col: 30, offset: 9967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 30, offset: 9967},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 34, offset: 9971},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 37, offset: 9974},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 306, col: 53, offset: 9990},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 57, offset: 9994},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 57, offset: 9994},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 64, offset: 10001},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 311, col: 1, offset: 10156},
			expr: &actionExpr{
				pos: position{line: 311, col: 21, offset: 10176},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 311, col: 21, offset: 10176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 21, offset: 10176},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 5, offset: 10191},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 14, offset: 10200},
								expr: &actionExpr{
									pos: position{line: 312, col: 15, offset: 10201},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 312, col: 15, offset: 10201},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 312, col: 15, offset: 10201},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 19, offset: 10205},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 312, col: 24, offset: 10210},
													expr: &ruleRefExpr{
														pos:  position{line: 312, col: 25, offset: 10211},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 5, offset: 10266},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 12, offset: 10273},
								expr: &actionExpr{
									pos: position{line: 313, col: 13, offset: 10274},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 313, col: 13, offset: 10274},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 313, col: 13, offset: 10274},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 313, col: 17, offset: 10278},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 313, col: 22, offset: 10283},
													expr: &ruleRefExpr{
														pos:  position{line: 313, col: 23, offset: 10284},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 10331},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 9, offset: 10335},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 9, offset: 10335},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 16, offset: 10342},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 319, col: 1, offset: 10493},
			expr: &actionExpr{
				pos: position{line: 319, col: 19, offset: 10511},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 319, col: 19, offset: 10511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 19, offset: 10511},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 23, offset: 10515},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 319, col: 34, offset: 10526},
								expr: &ruleRefExpr{
									pos:  position{line: 319, col: 35, offset: 10527},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 54, offset: 10546},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 58, offset: 10550},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 58, offset: 10550},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 65, offset: 10557},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 323, col: 1, offset: 10629},
			expr: &choiceExpr{
				pos: position{line: 323, col: 21, offset: 10649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 323, col: 21, offset: 10649},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 49, offset: 10677},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 325, col: 1, offset: 10707},
			expr: &actionExpr{
				pos: position{line: 325, col: 30, offset: 10736},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 325, col: 30, offset: 10736},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 30, offset: 10736},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 35, offset: 10741},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 49, offset: 10755},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 53, offset: 10759},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 59, offset: 10765},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 60, offset: 10766},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 77, offset: 10783},
							expr: &litMatcher{
								pos:        position{line: 325, col: 77, offset: 10783},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 82, offset: 10788},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 82, offset: 10788},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 329, col: 1, offset: 10887},
			expr: &actionExpr{
				pos: position{line: 329, col: 33, offset: 10919},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 33, offset: 10919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 33, offset: 10919},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 38, offset: 10924},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 52, offset: 10938},
							expr: &litMatcher{
								pos:        position{line: 329, col: 52, offset: 10938},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 57, offset: 10943},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 57, offset: 10943},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 333, col: 1, offset: 11031},
			expr: &actionExpr{
				pos: position{line: 333, col: 17, offset: 11047},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 333, col: 17, offset: 11047},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 333, col: 17, offset: 11047},
							expr: &litMatcher{
								pos:        position{line: 333, col: 18, offset: 11048},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 26, offset: 11056},
							expr: &litMatcher{
								pos:        position{line: 333, col: 27, offset: 11057},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 35, offset: 11065},
							expr: &litMatcher{
								pos:        position{line: 333, col: 36, offset: 11066},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 333, col: 46, offset: 11076},
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 48, offset: 11078},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 48, offset: 11078},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 56, offset: 11086},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 333, col: 61, offset: 11091},
								expr: &charClassMatcher{
									pos:        position{line: 333, col: 61, offset: 11091},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 75, offset: 11105},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 75, offset: 11105},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 337, col: 1, offset: 11148},
			expr: &actionExpr{
				pos: position{line: 337, col: 19, offset: 11166},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 337, col: 19, offset: 11166},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 337, col: 26, offset: 11173},
						expr: &charClassMatcher{
							pos:        position{line: 337, col: 26, offset: 11173},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 341, col: 1, offset: 11224},
			expr: &actionExpr{
				pos: position{line: 341, col: 29, offset: 11252},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 341, col: 29, offset: 11252},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 341, col: 29, offset: 11252},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 36, offset: 11259},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 36, offset: 11259},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 341, col: 50, offset: 11273},
							expr: &litMatcher{
								pos:        position{line: 341, col: 51, offset: 11274},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 345, col: 1, offset: 11440},
			expr: &actionExpr{
				pos: position{line: 345, col: 20, offset: 11459},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 20, offset: 11459},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 20, offset: 11459},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 29, offset: 11468},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 29, offset: 11468},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 36, offset: 11475},
							expr: &litMatcher{
								pos:        position{line: 345, col: 36, offset: 11475},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 41, offset: 11480},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 48, offset: 11487},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 49, offset: 11488},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 345, col: 66, offset: 11505},
							expr: &litMatcher{
								pos:        position{line: 345, col: 66, offset: 11505},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 71, offset: 11510},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 77, offset: 11516},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 78, offset: 11517},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 95, offset: 11534},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 99, offset: 11538},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 99, offset: 11538},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 106, offset: 11545},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 349, col: 1, offset: 11614},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11633},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 349, col: 20, offset: 11633},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 29, offset: 11642},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 29, offset: 11642},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 36, offset: 11649},
							expr: &litMatcher{
								pos:        position{line: 349, col: 36, offset: 11649},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 41, offset: 11654},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 48, offset: 11661},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 49, offset: 11662},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 349, col: 66, offset: 11679},
							expr: &litMatcher{
								pos:        position{line: 349, col: 66, offset: 11679},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 71, offset: 11684},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 77, offset: 11690},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 78, offset: 11691},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 95, offset: 11708},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 99, offset: 11712},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 99, offset: 11712},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 106, offset: 11719},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 353, col: 1, offset: 11806},
			expr: &actionExpr{
				pos: position{line: 353, col: 19, offset: 11824},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 353, col: 20, offset: 11825},
					expr: &charClassMatcher{
						pos:        position{line: 353, col: 20, offset: 11825},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 357, col: 1, offset: 11874},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 11893},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 11893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 11893},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 24, offset: 11897},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 357, col: 31, offset: 11904},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 357, col: 31, offset: 11904},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 31, offset: 11904},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 51, offset: 11924},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 51, offset: 11924},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 357, col: 66, offset: 11939},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 66, offset: 11939},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 78, offset: 11951},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 361, col: 1, offset: 12005},
			expr: &actionExpr{
				pos: position{line: 361, col: 23, offset: 12027},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 361, col: 23, offset: 12027},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 361, col: 28, offset: 12032},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 365, col: 1, offset: 12091},
			expr: &actionExpr{
				pos: position{line: 365, col: 25, offset: 12115},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 365, col: 25, offset: 12115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 25, offset: 12115},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 365, col: 36, offset: 12126},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 37, offset: 12127},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 365, col: 56, offset: 12146},
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 56, offset: 12146},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 67, offset: 12157},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 369, col: 1, offset: 12265},
			expr: &choiceExpr{
				pos: position{line: 369, col: 18, offset: 12282},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 369, col: 18, offset: 12282},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 36, offset: 12300},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 58, offset: 12322},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 371, col: 1, offset: 12341},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12364},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12364},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 371, col: 28, offset: 12368},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 35, offset: 12375},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 371, col: 50, offset: 12390},
							expr: &charClassMatcher{
								pos:        position{line: 371, col: 51, offset: 12391},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 375, col: 1, offset: 12451},
			expr: &actionExpr{
				pos: position{line: 375, col: 20, offset: 12470},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 375, col: 20, offset: 12470},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 20, offset: 12470},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 24, offset: 12474},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 27, offset: 12477},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 375, col: 42, offset: 12492},
							expr: &charClassMatcher{
								pos:        position{line: 375, col: 43, offset: 12493},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 379, col: 1, offset: 12545},
			expr: &actionExpr{
				pos: position{line: 379, col: 22, offset: 12566},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 379, col: 22, offset: 12566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 22, offset: 12566},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 26, offset: 12570},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 31, offset: 12575},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 46, offset: 12590},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 47, offset: 12591},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 384, col: 1, offset: 12691},
			expr: &actionExpr{
				pos: position{line: 384, col: 20, offset: 12710},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 384, col: 20, offset: 12710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 384, col: 20, offset: 12710},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 26, offset: 12716},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 384, col: 41, offset: 12731},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 42, offset: 12732},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 388, col: 1, offset: 12768},
			expr: &choiceExpr{
				pos: position{line: 388, col: 14, offset: 12781},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 388, col: 14, offset: 12781},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 26, offset: 12793},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 38, offset: 12805},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 388, col: 50, offset: 12817},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 390, col: 1, offset: 12831},
			expr: &actionExpr{
				pos: position{line: 390, col: 15, offset: 12845},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 390, col: 15, offset: 12845},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 390, col: 21, offset: 12851},
						expr: &ruleRefExpr{
							pos:  position{line: 390, col: 21, offset: 12851},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 394, col: 1, offset: 12916},
			expr: &actionExpr{
				pos: position{line: 394, col: 18, offset: 12933},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 394, col: 18, offset: 12933},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 394, col: 18, offset: 12933},
							expr: &litMatcher{
								pos:        position{line: 394, col: 18, offset: 12933},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 23, offset: 12938},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 23, offset: 12938},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 394, col: 30, offset: 12945},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 32, offset: 12947},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 394, col: 45, offset: 12960},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 45, offset: 12960},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 394, col: 52, offset: 12967},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 56, offset: 12971},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 394, col: 59, offset: 12974},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 59, offset: 12974},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 71, offset: 12986},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 83, offset: 12998},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 399, col: 1, offset: 13187},
			expr: &actionExpr{
				pos: position{line: 399, col: 14, offset: 13200},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 399, col: 14, offset: 13200},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 14, offset: 13200},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 14, offset: 13200},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 399, col: 21, offset: 13207},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 22, offset: 13208},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 405, col: 1, offset: 13344},
			expr: &actionExpr{
				pos: position{line: 405, col: 14, offset: 13357},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 405, col: 14, offset: 13357},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 14, offset: 13357},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 14, offset: 13357},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 21, offset: 13364},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 405, col: 25, offset: 13368},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 29, offset: 13372},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 41, offset: 13384},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 45, offset: 13388},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 45, offset: 13388},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 405, col: 52, offset: 13395},
							expr: &charClassMatcher{
								pos:        position{line: 405, col: 53, offset: 13396},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 407, col: 1, offset: 13423},
			expr: &actionExpr{
				pos: position{line: 407, col: 16, offset: 13438},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 16, offset: 13438},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 407, col: 20, offset: 13442},
						expr: &choiceExpr{
							pos: position{line: 407, col: 22, offset: 13444},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 407, col: 22, offset: 13444},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 407, col: 37, offset: 13459},
									expr: &charClassMatcher{
										pos:        position{line: 407, col: 37, offset: 13459},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 51, offset: 13473},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 409, col: 1, offset: 13513},
			expr: &actionExpr{
				pos: position{line: 409, col: 17, offset: 13529},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 409, col: 17, offset: 13529},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 412, col: 1, offset: 13589},
			expr: &actionExpr{
				pos: position{line: 412, col: 14, offset: 13602},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 412, col: 14, offset: 13602},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 14, offset: 13602},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 14, offset: 13602},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 21, offset: 13609},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 25, offset: 13613},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 29, offset: 13617},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 41, offset: 13629},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 45, offset: 13633},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 45, offset: 13633},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 414, col: 1, offset: 13661},
			expr: &actionExpr{
				pos: position{line: 414, col: 16, offset: 13676},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 16, offset: 13676},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 414, col: 20, offset: 13680},
						expr: &choiceExpr{
							pos: position{line: 414, col: 22, offset: 13682},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 414, col: 22, offset: 13682},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 414, col: 37, offset: 13697},
									expr: &charClassMatcher{
										pos:        position{line: 414, col: 37, offset: 13697},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 414, col: 51, offset: 13711},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 416, col: 1, offset: 13751},
			expr: &actionExpr{
				pos: position{line: 416, col: 17, offset: 13767},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 416, col: 17, offset: 13767},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 419, col: 1, offset: 13858},
			expr: &actionExpr{
				pos: position{line: 419, col: 17, offset: 13874},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 419, col: 17, offset: 13874},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 419, col: 17, offset: 13874},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 17, offset: 13874},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 419, col: 30, offset: 13887},
							expr: &charClassMatcher{
								pos:        position{line: 419, col: 31, offset: 13888},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 422, col: 1, offset: 13999},
			expr: &actionExpr{
				pos: position{line: 422, col: 19, offset: 14017},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 422, col: 19, offset: 14017},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 422, col: 19, offset: 14017},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 19, offset: 14017},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 422, col: 31, offset: 14029},
							expr: &charClassMatcher{
								pos:        position{line: 422, col: 32, offset: 14030},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 424, col: 1, offset: 14087},
			expr: &choiceExpr{
				pos: position{line: 424, col: 19, offset: 14105},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 19, offset: 14105},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 41, offset: 14127},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 65, offset: 14151},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 428, col: 1, offset: 14349},
			expr: &actionExpr{
				pos: position{line: 428, col: 24, offset: 14372},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 428, col: 24, offset: 14372},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 24, offset: 14372},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 428, col: 31, offset: 14379},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 428, col: 31, offset: 14379},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 14465},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 13, offset: 14473},
								expr: &choiceExpr{
									pos: position{line: 431, col: 14, offset: 14474},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 14, offset: 14474},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 432, col: 12, offset: 14505},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 432, col: 12, offset: 14505},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 432, col: 34, offset: 14527},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 432, col: 34, offset: 14527},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 432, col: 34, offset: 14527},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 432, col: 39, offset: 14532},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 439, col: 1, offset: 14715},
			expr: &actionExpr{
				pos: position{line: 439, col: 13, offset: 14727},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 439, col: 13, offset: 14727},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 439, col: 13, offset: 14727},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 14729},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 439, col: 15, offset: 14729},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 439, col: 19, offset: 14733},
										expr: &ruleRefExpr{
											pos:  position{line: 439, col: 19, offset: 14733},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 29, offset: 14743},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 33, offset: 14747},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 46, offset: 14760},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 46, offset: 14760},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 439, col: 53, offset: 14767},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 57, offset: 14771},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 57, offset: 14771},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 64, offset: 14778},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 70, offset: 14784},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 439, col: 85, offset: 14799},
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 85, offset: 14799},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 444, col: 1, offset: 14980},
			expr: &actionExpr{
				pos: position{line: 444, col: 17, offset: 14996},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 444, col: 17, offset: 14996},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 444, col: 17, offset: 14996},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 444, col: 26, offset: 15005},
							expr: &charClassMatcher{
								pos:        position{line: 444, col: 26, offset: 15005},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 448, col: 1, offset: 15053},
			expr: &choiceExpr{
				pos: position{line: 448, col: 19, offset: 15071},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 19, offset: 15071},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 35, offset: 15087},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 59, offset: 15111},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 83, offset: 15135},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 450, col: 1, offset: 15151},
			expr: &actionExpr{
				pos: position{line: 450, col: 19, offset: 15169},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 450, col: 19, offset: 15169},
					expr: &charClassMatcher{
						pos:        position{line: 450, col: 19, offset: 15169},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 454, col: 1, offset: 15222},
			expr: &actionExpr{
				pos: position{line: 454, col: 26, offset: 15247},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 454, col: 26, offset: 15247},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 26, offset: 15247},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 30, offset: 15251},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 454, col: 39, offset: 15260},
								expr: &choiceExpr{
									pos: position{line: 455, col: 5, offset: 15266},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 455, col: 6, offset: 15267},
											run: (*parser).callonAttrValueSingleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 455, col: 6, offset: 15267},
												expr: &charClassMatcher{
													pos:        position{line: 455, col: 6, offset: 15267},
													val:        "[^'\\r\\n\\uFFFD]",
													chars:      []rune{'\'', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 10, offset: 15349},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 31, offset: 15370},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 461, col: 1, offset: 15412},
			expr: &actionExpr{
				pos: position{line: 461, col: 26, offset: 15437},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 461, col: 26, offset: 15437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 26, offset: 15437},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15442},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 461, col: 40, offset: 15451},
								expr: &choiceExpr{
									pos: position{line: 462, col: 5, offset: 15457},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 462, col: 6, offset: 15458},
											run: (*parser).callonAttrValueDoubleQuoted7,
											expr: &oneOrMoreExpr{
												pos: position{line: 462, col: 6, offset: 15458},
												expr: &charClassMatcher{
													pos:        position{line: 462, col: 6, offset: 15458},
													val:        "[^\"\\r\\n\\uFFFD]",
													chars:      []rune{'"', '\r', '\n', '�'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 464, col: 10, offset: 15540},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 31, offset: 15561},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 470, col: 1, offset: 15801},
			expr: &actionExpr{
				pos: position{line: 470, col: 18, offset: 15818},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 470, col: 18, offset: 15818},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 477, col: 1, offset: 15953},
			expr: &actionExpr{
				pos: position{line: 477, col: 12, offset: 15964},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 477, col: 12, offset: 15964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 477, col: 12, offset: 15964},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 477, col: 23, offset: 15975},
								expr: &ruleRefExpr{
									pos:  position{line: 477, col: 24, offset: 15976},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 478, col: 5, offset: 15993},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 478, col: 12, offset: 16000},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 478, col: 12, offset: 16000},
									expr: &litMatcher{
										pos:        position{line: 478, col: 13, offset: 16001},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 482, col: 5, offset: 16092},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 486, col: 5, offset: 16244},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 5, offset: 16244},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 12, offset: 16251},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 16258},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 34, offset: 16273},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 486, col: 38, offset: 16277},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 38, offset: 16277},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 56, offset: 16295},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 490, col: 1, offset: 16401},
			expr: &actionExpr{
				pos: position{line: 490, col: 18, offset: 16418},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 18, offset: 16418},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 490, col: 27, offset: 16427},
						expr: &seqExpr{
							pos: position{line: 490, col: 28, offset: 16428},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 490, col: 28, offset: 16428},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 29, offset: 16429},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 490, col: 37, offset: 16437},
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 38, offset: 16438},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 490, col: 54, offset: 16454},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 494, col: 1, offset: 16575},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 16591},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 494, col: 17, offset: 16591},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 494, col: 26, offset: 16600},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 494, col: 26, offset: 16600},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16615},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 496, col: 11, offset: 16660},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 11, offset: 16660},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16678},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16707},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 505, col: 1, offset: 16858},
			expr: &seqExpr{
				pos: position{line: 505, col: 31, offset: 16888},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 505, col: 31, offset: 16888},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 41, offset: 16898},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 510, col: 1, offset: 17009},
			expr: &actionExpr{
				pos: position{line: 510, col: 19, offset: 17027},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 510, col: 19, offset: 17027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 19, offset: 17027},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 25, offset: 17033},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 510, col: 40, offset: 17048},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 45, offset: 17053},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 52, offset: 17060},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 68, offset: 17076},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 75, offset: 17083},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 514, col: 1, offset: 17198},
			expr: &actionExpr{
				pos: position{line: 514, col: 20, offset: 17217},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 514, col: 20, offset: 17217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 514, col: 20, offset: 17217},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 26, offset: 17223},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 514, col: 41, offset: 17238},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 45, offset: 17242},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 52, offset: 17249},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 68, offset: 17265},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 75, offset: 17272},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 518, col: 1, offset: 17388},
			expr: &actionExpr{
				pos: position{line: 518, col: 18, offset: 17405},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 518, col: 19, offset: 17406},
					expr: &charClassMatcher{
						pos:        position{line: 518, col: 19, offset: 17406},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 522, col: 1, offset: 17455},
			expr: &actionExpr{
				pos: position{line: 522, col: 19, offset: 17473},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 522, col: 19, offset: 17473},
					expr: &charClassMatcher{
						pos:        position{line: 522, col: 19, offset: 17473},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 526, col: 1, offset: 17521},
			expr: &actionExpr{
				pos: position{line: 526, col: 24, offset: 17544},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 526, col: 24, offset: 17544},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 526, col: 24, offset: 17544},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 28, offset: 17548},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 526, col: 34, offset: 17554},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 35, offset: 17555},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 526, col: 54, offset: 17574},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 533, col: 1, offset: 17756},
			expr: &actionExpr{
				pos: position{line: 533, col: 18, offset: 17773},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 533, col: 18, offset: 17773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 533, col: 18, offset: 17773},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 533, col: 24, offset: 17779},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 533, col: 24, offset: 17779},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 533, col: 24, offset: 17779},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 533, col: 36, offset: 17791},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 42, offset: 17797},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 533, col: 56, offset: 17811},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 533, col: 74, offset: 17829},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 8, offset: 17976},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 8, offset: 17976},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 15, offset: 17983},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 539, col: 1, offset: 18035},
			expr: &actionExpr{
				pos: position{line: 539, col: 26, offset: 18060},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 539, col: 26, offset: 18060},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 26, offset: 18060},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 30, offset: 18064},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 539, col: 36, offset: 18070},
								expr: &choiceExpr{
									pos: position{line: 539, col: 37, offset: 18071},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 539, col: 37, offset: 18071},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 59, offset: 18093},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 80, offset: 18114},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 99, offset: 18133},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 543, col: 1, offset: 18205},
			expr: &actionExpr{
				pos: position{line: 543, col: 24, offset: 18228},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 543, col: 24, offset: 18228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 24, offset: 18228},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 33, offset: 18237},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 40, offset: 18244},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 543, col: 66, offset: 18270},
							expr: &litMatcher{
								pos:        position{line: 543, col: 66, offset: 18270},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 547, col: 1, offset: 18329},
			expr: &actionExpr{
				pos: position{line: 547, col: 29, offset: 18357},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 547, col: 29, offset: 18357},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 29, offset: 18357},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 547, col: 36, offset: 18364},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 547, col: 36, offset: 18364},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 11, offset: 18481},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 549, col: 11, offset: 18517},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 550, col: 11, offset: 18543},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 551, col: 11, offset: 18575},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 11, offset: 18607},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 553, col: 11, offset: 18634},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 553, col: 31, offset: 18654},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 31, offset: 18654},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 553, col: 39, offset: 18662},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 553, col: 39, offset: 18662},
									expr: &litMatcher{
										pos:        position{line: 553, col: 40, offset: 18663},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 553, col: 46, offset: 18669},
									expr: &litMatcher{
										pos:        position{line: 553, col: 47, offset: 18670},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 557, col: 1, offset: 18702},
			expr: &actionExpr{
				pos: position{line: 557, col: 23, offset: 18724},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 557, col: 23, offset: 18724},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 23, offset: 18724},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 557, col: 30, offset: 18731},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 557, col: 30, offset: 18731},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 47, offset: 18748},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 18770},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 558, col: 12, offset: 18777},
								expr: &actionExpr{
									pos: position{line: 558, col: 13, offset: 18778},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 558, col: 13, offset: 18778},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 558, col: 13, offset: 18778},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 17, offset: 18782},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 558, col: 24, offset: 18789},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 558, col: 24, offset: 18789},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 558, col: 41, offset: 18806},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 564, col: 1, offset: 18944},
			expr: &actionExpr{
				pos: position{line: 564, col: 29, offset: 18972},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 564, col: 29, offset: 18972},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 564, col: 29, offset: 18972},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 34, offset: 18977},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 564, col: 41, offset: 18984},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 564, col: 41, offset: 18984},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 564, col: 58, offset: 19001},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 19023},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 565, col: 12, offset: 19030},
								expr: &actionExpr{
									pos: position{line: 565, col: 13, offset: 19031},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 565, col: 13, offset: 19031},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 565, col: 13, offset: 19031},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 565, col: 17, offset: 19035},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 565, col: 24, offset: 19042},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 565, col: 24, offset: 19042},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 565, col: 41, offset: 19059},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 567, col: 9, offset: 19112},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 571, col: 1, offset: 19202},
			expr: &actionExpr{
				pos: position{line: 571, col: 19, offset: 19220},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 571, col: 19, offset: 19220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 19, offset: 19220},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 26, offset: 19227},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 34, offset: 19235},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 39, offset: 19240},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 44, offset: 19245},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 575, col: 1, offset: 19333},
			expr: &actionExpr{
				pos: position{line: 575, col: 25, offset: 19357},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 575, col: 25, offset: 19357},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 575, col: 25, offset: 19357},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 30, offset: 19362},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 37, offset: 19369},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 45, offset: 19377},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 50, offset: 19382},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 55, offset: 19387},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 63, offset: 19395},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 579, col: 1, offset: 19480},
			expr: &actionExpr{
				pos: position{line: 579, col: 20, offset: 19499},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 579, col: 20, offset: 19499},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 579, col: 32, offset: 19511},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 583, col: 1, offset: 19606},
			expr: &actionExpr{
				pos: position{line: 583, col: 26, offset: 19631},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 583, col: 26, offset: 19631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 26, offset: 19631},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 31, offset: 19636},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 43, offset: 19648},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 583, col: 51, offset: 19656},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 587, col: 1, offset: 19748},
			expr: &actionExpr{
				pos: position{line: 587, col: 23, offset: 19770},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 587, col: 23, offset: 19770},
					expr: &charClassMatcher{
						pos:        position{line: 587, col: 23, offset: 19770},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 591, col: 1, offset: 19815},
			expr: &actionExpr{
				pos: position{line: 591, col: 23, offset: 19837},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 591, col: 23, offset: 19837},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 591, col: 24, offset: 19838},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 591, col: 24, offset: 19838},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 591, col: 34, offset: 19848},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 42, offset: 19856},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 48, offset: 19862},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 591, col: 73, offset: 19887},
							expr: &litMatcher{
								pos:        position{line: 591, col: 73, offset: 19887},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 595, col: 1, offset: 20036},
			expr: &actionExpr{
				pos: position{line: 595, col: 28, offset: 20063},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 595, col: 28, offset: 20063},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 28, offset: 20063},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 35, offset: 20070},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 595, col: 54, offset: 20089},
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 54, offset: 20089},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 595, col: 62, offset: 20097},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 595, col: 62, offset: 20097},
									expr: &litMatcher{
										pos:        position{line: 595, col: 63, offset: 20098},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 595, col: 69, offset: 20104},
									expr: &litMatcher{
										pos:        position{line: 595, col: 70, offset: 20105},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 599, col: 1, offset: 20137},
			expr: &actionExpr{
				pos: position{line: 599, col: 22, offset: 20158},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 599, col: 22, offset: 20158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 22, offset: 20158},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 29, offset: 20165},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 20179},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 12, offset: 20186},
								expr: &actionExpr{
									pos: position{line: 600, col: 13, offset: 20187},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 600, col: 13, offset: 20187},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 600, col: 13, offset: 20187},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 17, offset: 20191},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 24, offset: 20198},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 606, col: 1, offset: 20329},
			expr: &choiceExpr{
				pos: position{line: 606, col: 13, offset: 20341},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 606, col: 13, offset: 20341},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 13, offset: 20341},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 606, col: 18, offset: 20346},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 606, col: 18, offset: 20346},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 606, col: 30, offset: 20358},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 20426},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 20426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 608, col: 5, offset: 20426},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 9, offset: 20430},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 608, col: 14, offset: 20435},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 608, col: 14, offset: 20435},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 608, col: 26, offset: 20447},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 612, col: 1, offset: 20515},
			expr: &actionExpr{
				pos: position{line: 612, col: 16, offset: 20530},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 612, col: 16, offset: 20530},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 16, offset: 20530},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 612, col: 23, offset: 20537},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 23, offset: 20537},
									expr: &litMatcher{
										pos:        position{line: 612, col: 24, offset: 20538},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 20592},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 623, col: 1, offset: 20834},
			expr: &zeroOrMoreExpr{
				pos: position{line: 623, col: 19, offset: 20852},
				expr: &choiceExpr{
					pos: position{line: 623, col: 20, offset: 20853},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 623, col: 20, offset: 20853},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 36, offset: 20869},
							name: "SingleLineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 56, offset: 20889},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 629, col: 1, offset: 21036},
			expr: &actionExpr{
				pos: position{line: 629, col: 21, offset: 21056},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 629, col: 21, offset: 21056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 21, offset: 21056},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 29, offset: 21064},
								expr: &choiceExpr{
									pos: position{line: 629, col: 30, offset: 21065},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 30, offset: 21065},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 53, offset: 21088},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 629, col: 74, offset: 21109},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 629, col: 74, offset: 21109,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 107, offset: 21142},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 633, col: 1, offset: 21213},
			expr: &actionExpr{
				pos: position{line: 633, col: 25, offset: 21237},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 633, col: 25, offset: 21237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 633, col: 25, offset: 21237},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 33, offset: 21245},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 633, col: 38, offset: 21250},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 38, offset: 21250},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 633, col: 78, offset: 21290},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 637, col: 1, offset: 21355},
			expr: &actionExpr{
				pos: position{line: 637, col: 23, offset: 21377},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 637, col: 23, offset: 21377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 637, col: 23, offset: 21377},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 637, col: 31, offset: 21385},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 637, col: 36, offset: 21390},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 637, col: 36, offset: 21390},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 637, col: 76, offset: 21430},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 644, col: 1, offset: 21594},
			expr: &choiceExpr{
				pos: position{line: 644, col: 18, offset: 21611},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 18, offset: 21611},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 18, offset: 21611},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 27, offset: 21620},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 646, col: 9, offset: 21677},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 646, col: 9, offset: 21677},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 646, col: 15, offset: 21683},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 16, offset: 21684},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 650, col: 1, offset: 21776},
			expr: &actionExpr{
				pos: position{line: 650, col: 22, offset: 21797},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 650, col: 22, offset: 21797},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 650, col: 22, offset: 21797},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 23, offset: 21798},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21806},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21807},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21822},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21823},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 5, offset: 21845},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 6, offset: 21846},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 654, col: 5, offset: 21872},
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 6, offset: 21873},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 655, col: 5, offset: 21901},
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 6, offset: 21902},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 656, col: 5, offset: 21928},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 21929},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 657, col: 5, offset: 21954},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 6, offset: 21955},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 658, col: 5, offset: 21976},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 6, offset: 21977},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 21996},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 21997},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 22024},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 660, col: 11, offset: 22030},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 660, col: 11, offset: 22030},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 660, col: 20, offset: 22039},
										expr: &ruleRefExpr{
											pos:  position{line: 660, col: 21, offset: 22040},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 12, offset: 22139},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 666, col: 1, offset: 22178},
			expr: &seqExpr{
				pos: position{line: 666, col: 25, offset: 22202},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 666, col: 25, offset: 22202},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 666, col: 29, offset: 22206},
						expr: &ruleRefExpr{
							pos:  position{line: 666, col: 29, offset: 22206},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 666, col: 36, offset: 22213},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 668, col: 1, offset: 22285},
			expr: &actionExpr{
				pos: position{line: 668, col: 29, offset: 22313},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 668, col: 29, offset: 22313},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 29, offset: 22313},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 22334},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 58, offset: 22342},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 672, col: 1, offset: 22448},
			expr: &actionExpr{
				pos: position{line: 672, col: 29, offset: 22476},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 672, col: 29, offset: 22476},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 672, col: 29, offset: 22476},
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 22477},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 22486},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 673, col: 14, offset: 22495},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 673, col: 14, offset: 22495},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22520},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22544},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22565},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22593},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22617},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22644},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22673},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 22738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 22789},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 22813},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 22845},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 22871},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 22908},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 22933},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 695, col: 1, offset: 23099},
			expr: &actionExpr{
				pos: position{line: 695, col: 20, offset: 23118},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 695, col: 20, offset: 23118},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 20, offset: 23118},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 26, offset: 23124},
								expr: &ruleRefExpr{
									pos:  position{line: 695, col: 27, offset: 23125},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 40, offset: 23138},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 48, offset: 23146},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 71, offset: 23169},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 80, offset: 23178},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 699, col: 1, offset: 23313},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 23343},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 23343},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 700, col: 5, offset: 23343},
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 5, offset: 23343},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 12, offset: 23350},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 702, col: 9, offset: 23413},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 702, col: 9, offset: 23413},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 702, col: 9, offset: 23413},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 702, col: 9, offset: 23413},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 702, col: 16, offset: 23420},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 702, col: 16, offset: 23420},
															expr: &litMatcher{
																pos:        position{line: 702, col: 17, offset: 23421},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 706, col: 9, offset: 23521},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 725, col: 11, offset: 24238},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 725, col: 11, offset: 24238},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 725, col: 11, offset: 24238},
													expr: &charClassMatcher{
														pos:        position{line: 725, col: 12, offset: 24239},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 725, col: 20, offset: 24247},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 727, col: 13, offset: 24358},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 727, col: 13, offset: 24358},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 727, col: 14, offset: 24359},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 727, col: 21, offset: 24366},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 729, col: 13, offset: 24480},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 729, col: 13, offset: 24480},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 729, col: 14, offset: 24481},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 729, col: 21, offset: 24488},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 731, col: 13, offset: 24602},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 731, col: 13, offset: 24602},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 731, col: 13, offset: 24602},
													expr: &charClassMatcher{
														pos:        position{line: 731, col: 14, offset: 24603},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 731, col: 22, offset: 24611},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 733, col: 13, offset: 24725},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 733, col: 13, offset: 24725},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 733, col: 13, offset: 24725},
													expr: &charClassMatcher{
														pos:        position{line: 733, col: 14, offset: 24726},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 733, col: 22, offset: 24734},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 735, col: 12, offset: 24847},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 12, offset: 24847},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 739, col: 1, offset: 24882},
			expr: &actionExpr{
				pos: position{line: 739, col: 27, offset: 24908},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 739, col: 27, offset: 24908},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 739, col: 37, offset: 24918},
						expr: &ruleRefExpr{
							pos:  position{line: 739, col: 37, offset: 24918},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 746, col: 1, offset: 25118},
			expr: &actionExpr{
				pos: position{line: 746, col: 22, offset: 25139},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 746, col: 22, offset: 25139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 22, offset: 25139},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 746, col: 28, offset: 25145},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 29, offset: 25146},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 42, offset: 25159},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 50, offset: 25167},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 75, offset: 25192},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 746, col: 86, offset: 25203},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 87, offset: 25204},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 117, offset: 25234},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 126, offset: 25243},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 750, col: 1, offset: 25396},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 25428},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 25428},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 5, offset: 25428},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 5, offset: 25428},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 12, offset: 25435},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 751, col: 20, offset: 25443},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 753, col: 9, offset: 25500},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 753, col: 9, offset: 25500},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 753, col: 9, offset: 25500},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 753, col: 16, offset: 25507},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 753, col: 16, offset: 25507},
															expr: &litMatcher{
																pos:        position{line: 753, col: 17, offset: 25508},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 757, col: 9, offset: 25608},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 774, col: 14, offset: 26315},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 774, col: 21, offset: 26322},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 774, col: 22, offset: 26323},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 776, col: 13, offset: 26409},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 13, offset: 26409},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 780, col: 1, offset: 26445},
			expr: &actionExpr{
				pos: position{line: 780, col: 32, offset: 26476},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 780, col: 32, offset: 26476},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 780, col: 32, offset: 26476},
							expr: &litMatcher{
								pos:        position{line: 780, col: 33, offset: 26477},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 37, offset: 26481},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 781, col: 7, offset: 26495},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 781, col: 7, offset: 26495},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 781, col: 7, offset: 26495},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 782, col: 7, offset: 26540},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 782, col: 7, offset: 26540},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 783, col: 7, offset: 26583},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 783, col: 7, offset: 26583},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 784, col: 7, offset: 26625},
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 7, offset: 26625},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 788, col: 1, offset: 26667},
			expr: &actionExpr{
				pos: position{line: 788, col: 29, offset: 26695},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 29, offset: 26695},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 788, col: 39, offset: 26705},
						expr: &ruleRefExpr{
							pos:  position{line: 788, col: 39, offset: 26705},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 795, col: 1, offset: 27021},
			expr: &actionExpr{
				pos: position{line: 795, col: 20, offset: 27040},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 795, col: 20, offset: 27040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 20, offset: 27040},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 795, col: 26, offset: 27046},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 27, offset: 27047},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 27060},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 46, offset: 27066},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 75, offset: 27095},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 86, offset: 27106},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 112, offset: 27132},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 795, col: 124, offset: 27144},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 125, offset: 27145},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 799, col: 1, offset: 27286},
			expr: &seqExpr{
				pos: position{line: 799, col: 26, offset: 27311},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 26, offset: 27311},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 54, offset: 27339},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 801, col: 1, offset: 27365},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 27397},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 801, col: 33, offset: 27397},
						expr: &charClassMatcher{
							pos:        position{line: 801, col: 33, offset: 27397},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 801, col: 45, offset: 27409},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 801, col: 45, offset: 27409},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 801, col: 49, offset: 27413},
								expr: &litMatcher{
									pos:        position{line: 801, col: 50, offset: 27414},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 802, col: 1, offset: 27418},
			expr: &actionExpr{
				pos: position{line: 802, col: 32, offset: 27449},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 802, col: 32, offset: 27449},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 802, col: 42, offset: 27459},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 802, col: 42, offset: 27459},
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 42, offset: 27459},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 808, col: 1, offset: 27614},
			expr: &actionExpr{
				pos: position{line: 808, col: 24, offset: 27637},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 808, col: 24, offset: 27637},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 808, col: 33, offset: 27646},
						expr: &seqExpr{
							pos: position{line: 808, col: 34, offset: 27647},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 808, col: 34, offset: 27647},
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 35, offset: 27648},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 808, col: 43, offset: 27656},
									expr: &litMatcher{
										pos:        position{line: 808, col: 44, offset: 27657},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 808, col: 49, offset: 27662},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 812, col: 1, offset: 27789},
			expr: &actionExpr{
				pos: position{line: 812, col: 31, offset: 27819},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 812, col: 31, offset: 27819},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 812, col: 40, offset: 27828},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 812, col: 40, offset: 27828},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 27843},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 814, col: 11, offset: 27892},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 11, offset: 27892},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 27910},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 27935},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 27964},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 27984},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28073},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28094},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28117},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 822, col: 11, offset: 28132},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 28157},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 28180},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 28201},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 28228},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 28245},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 28277},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 28305},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 833, col: 1, offset: 28344},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 28377},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 28377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 834, col: 5, offset: 28377},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 834, col: 16, offset: 28388},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 834, col: 16, offset: 28388},
									expr: &litMatcher{
										pos:        position{line: 834, col: 17, offset: 28389},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 837, col: 5, offset: 28447},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 841, col: 6, offset: 28623},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 841, col: 6, offset: 28623},
									expr: &choiceExpr{
										pos: position{line: 841, col: 7, offset: 28624},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 841, col: 7, offset: 28624},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 841, col: 15, offset: 28632},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 27, offset: 28644},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 845, col: 1, offset: 28684},
			expr: &actionExpr{
				pos: position{line: 845, col: 31, offset: 28714},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 845, col: 31, offset: 28714},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 845, col: 40, offset: 28723},
						expr: &ruleRefExpr{
							pos:  position{line: 845, col: 41, offset: 28724},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 852, col: 1, offset: 28915},
			expr: &choiceExpr{
				pos: position{line: 852, col: 19, offset: 28933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 19, offset: 28933},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 852, col: 19, offset: 28933},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 9, offset: 28979},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 854, col: 9, offset: 28979},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 9, offset: 29027},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 856, col: 9, offset: 29027},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 9, offset: 29085},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 858, col: 9, offset: 29085},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 9, offset: 29139},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 860, col: 9, offset: 29139},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 871, col: 1, offset: 29455},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 29505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 29505},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 29505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 873, col: 5, offset: 29505},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 873, col: 16, offset: 29516},
										expr: &ruleRefExpr{
											pos:  position{line: 873, col: 17, offset: 29517},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 873, col: 30, offset: 29530},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 33, offset: 29533},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 873, col: 49, offset: 29549},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 873, col: 54, offset: 29554},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 873, col: 60, offset: 29560},
										expr: &choiceExpr{
											pos: position{line: 873, col: 61, offset: 29561},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 873, col: 61, offset: 29561},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 873, col: 81, offset: 29581},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 29764},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 29764},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 29764},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 877, col: 16, offset: 29775},
										expr: &ruleRefExpr{
											pos:  position{line: 877, col: 17, offset: 29776},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 877, col: 30, offset: 29789},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 877, col: 35, offset: 29794},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 44, offset: 29803},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 29993},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 29993},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 29993},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 881, col: 16, offset: 30004},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 17, offset: 30005},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 881, col: 30, offset: 30018},
									run: (*parser).callonRawParagraph28,
								},
								&notExpr{
									pos: position{line: 888, col: 7, offset: 30297},
									expr: &ruleRefExpr{
										pos:  position{line: 888, col: 8, offset: 30298},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 888, col: 23, offset: 30313},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 888, col: 31, offset: 30321},
										expr: &ruleRefExpr{
											pos:  position{line: 888, col: 32, offset: 30322},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 30505},
						run: (*parser).callonRawParagraph34,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 30505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 30505},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 892, col: 16, offset: 30516},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 17, offset: 30517},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 892, col: 30, offset: 30530},
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 31, offset: 30531},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 892, col: 46, offset: 30546},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 892, col: 52, offset: 30552},
										expr: &choiceExpr{
											pos: position{line: 892, col: 53, offset: 30553},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 892, col: 53, offset: 30553},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 892, col: 73, offset: 30573},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 896, col: 1, offset: 30671},
			expr: &oneOrMoreExpr{
				pos: position{line: 896, col: 33, offset: 30703},
				expr: &actionExpr{
					pos: position{line: 896, col: 34, offset: 30704},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 896, col: 34, offset: 30704},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 896, col: 34, offset: 30704},
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 35, offset: 30705},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 896, col: 45, offset: 30715},
								expr: &litMatcher{
									pos:        position{line: 896, col: 45, offset: 30715},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 896, col: 51, offset: 30721},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 60, offset: 30730},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 900, col: 1, offset: 30863},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 30888},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 30888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 30888},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 14, offset: 30897},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 39, offset: 30922},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 901, col: 43, offset: 30926},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 911, col: 1, offset: 31161},
			expr: &actionExpr{
				pos: position{line: 911, col: 28, offset: 31188},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 911, col: 28, offset: 31188},
					expr: &charClassMatcher{
						pos:        position{line: 911, col: 28, offset: 31188},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 916, col: 1, offset: 31305},
			expr: &actionExpr{
				pos: position{line: 916, col: 23, offset: 31327},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 916, col: 23, offset: 31327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 916, col: 23, offset: 31327},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 916, col: 34, offset: 31338},
								expr: &ruleRefExpr{
									pos:  position{line: 916, col: 35, offset: 31339},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 917, col: 5, offset: 31357},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 31643},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 16, offset: 31654},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 31680},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 926, col: 16, offset: 31691},
								expr: &choiceExpr{
									pos: position{line: 926, col: 17, offset: 31692},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 926, col: 17, offset: 31692},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 926, col: 37, offset: 31712},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 930, col: 1, offset: 31844},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 31874},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 31874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 31874},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 931, col: 14, offset: 31883},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 931, col: 14, offset: 31883},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 931, col: 14, offset: 31883},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 931, col: 23, offset: 31892},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 931, col: 28, offset: 31897},
											expr: &charClassMatcher{
												pos:        position{line: 931, col: 28, offset: 31897},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 68, offset: 31937},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 937, col: 1, offset: 32145},
			expr: &choiceExpr{
				pos: position{line: 939, col: 5, offset: 32192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 32192},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 32192},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 939, col: 5, offset: 32192},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 939, col: 16, offset: 32203},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 17, offset: 32204},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 30, offset: 32217},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 33, offset: 32220},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 939, col: 49, offset: 32236},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 939, col: 54, offset: 32241},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 939, col: 60, offset: 32247},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 61, offset: 32248},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 32434},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 32434},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 32434},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 943, col: 16, offset: 32445},
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 17, offset: 32446},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 943, col: 30, offset: 32459},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 950, col: 7, offset: 32738},
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 8, offset: 32739},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 950, col: 23, offset: 32754},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 950, col: 31, offset: 32762},
										expr: &ruleRefExpr{
											pos:  position{line: 950, col: 32, offset: 32763},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 32943},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 32943},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 5, offset: 32943},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 954, col: 16, offset: 32954},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 17, offset: 32955},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 954, col: 30, offset: 32968},
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 31, offset: 32969},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 954, col: 46, offset: 32984},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 954, col: 52, offset: 32990},
										expr: &ruleRefExpr{
											pos:  position{line: 954, col: 53, offset: 32991},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 958, col: 1, offset: 33086},
			expr: &ruleRefExpr{
				pos:  position{line: 958, col: 18, offset: 33103},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 960, col: 1, offset: 33119},
			expr: &actionExpr{
				pos: position{line: 960, col: 34, offset: 33152},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 960, col: 34, offset: 33152},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 960, col: 34, offset: 33152},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 40, offset: 33158},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 960, col: 48, offset: 33166},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 960, col: 49, offset: 33167},
									expr: &charClassMatcher{
										pos:        position{line: 960, col: 49, offset: 33167},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 962, col: 8, offset: 33217},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 971, col: 1, offset: 33443},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 33502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 33502},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 33502},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 973, col: 5, offset: 33502},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 973, col: 16, offset: 33513},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 17, offset: 33514},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 973, col: 30, offset: 33527},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 33, offset: 33530},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 49, offset: 33546},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 973, col: 54, offset: 33551},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 61, offset: 33558},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 33761},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 33761},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 977, col: 5, offset: 33761},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 977, col: 16, offset: 33772},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 17, offset: 33773},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 977, col: 30, offset: 33786},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 37, offset: 33793},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 981, col: 1, offset: 33897},
			expr: &actionExpr{
				pos: position{line: 981, col: 31, offset: 33927},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 981, col: 31, offset: 33927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 981, col: 31, offset: 33927},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 42, offset: 33938},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 65, offset: 33961},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 981, col: 76, offset: 33972},
								expr: &actionExpr{
									pos: position{line: 981, col: 77, offset: 33973},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 981, col: 77, offset: 33973},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 981, col: 77, offset: 33973},
												expr: &ruleRefExpr{
													pos:  position{line: 981, col: 78, offset: 33974},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 981, col: 99, offset: 33995},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 981, col: 105, offset: 34001},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 981, col: 105, offset: 34001},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 981, col: 125, offset: 34021},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 989, col: 1, offset: 34260},
			expr: &actionExpr{
				pos: position{line: 990, col: 5, offset: 34286},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 990, col: 5, offset: 34286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 990, col: 5, offset: 34286},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 990, col: 16, offset: 34297},
								expr: &ruleRefExpr{
									pos:  position{line: 990, col: 17, offset: 34298},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 991, col: 5, offset: 34315},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 998, col: 5, offset: 34520},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 998, col: 11, offset: 34526},
								expr: &ruleRefExpr{
									pos:  position{line: 998, col: 12, offset: 34527},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1006, col: 1, offset: 34733},
			expr: &actionExpr{
				pos: position{line: 1006, col: 19, offset: 34751},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 19, offset: 34751},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1006, col: 19, offset: 34751},
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 20, offset: 34752},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1007, col: 5, offset: 34766},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1007, col: 15, offset: 34776},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1007, col: 15, offset: 34776},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1007, col: 15, offset: 34776},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1007, col: 24, offset: 34785},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1009, col: 9, offset: 34877},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1009, col: 9, offset: 34877},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1009, col: 9, offset: 34877},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1009, col: 18, offset: 34886},
														expr: &ruleRefExpr{
															pos:  position{line: 1009, col: 19, offset: 34887},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1009, col: 35, offset: 34903},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1015, col: 1, offset: 35020},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 35043},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1016, col: 5, offset: 35043},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1016, col: 14, offset: 35052},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1016, col: 14, offset: 35052},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1017, col: 11, offset: 35113},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1018, col: 11, offset: 35158},
								expr: &ruleRefExpr{
									pos:  position{line: 1018, col: 11, offset: 35158},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1019, col: 11, offset: 35176},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1019, col: 11, offset: 35176},
										expr: &ruleRefExpr{
											pos:  position{line: 1019, col: 12, offset: 35177},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1020, col: 13, offset: 35195},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1020, col: 13, offset: 35195},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1021, col: 15, offset: 35222},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1022, col: 15, offset: 35247},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 15, offset: 35272},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1024, col: 15, offset: 35299},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1025, col: 15, offset: 35319},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1026, col: 15, offset: 35412},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 15, offset: 35442},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1028, col: 15, offset: 35510},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 15, offset: 35541},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1030, col: 15, offset: 35562},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1031, col: 15, offset: 35593},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1032, col: 15, offset: 35630},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1033, col: 15, offset: 35660},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1034, col: 15, offset: 35693},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1035, col: 15, offset: 35717},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1036, col: 15, offset: 35749},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 1037, col: 15, offset: 35782},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1044, col: 1, offset: 36005},
			expr: &actionExpr{
				pos: position{line: 1044, col: 14, offset: 36018},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 14, offset: 36018},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1044, col: 14, offset: 36018},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1044, col: 20, offset: 36024},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1044, col: 24, offset: 36028},
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 24, offset: 36028},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1044, col: 31, offset: 36035},
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 32, offset: 36036},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1051, col: 1, offset: 36320},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 15, offset: 36334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1051, col: 15, offset: 36334},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 41, offset: 36360},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 65, offset: 36384},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1053, col: 1, offset: 36403},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 32, offset: 36434},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1053, col: 32, offset: 36434},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1053, col: 32, offset: 36434},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1053, col: 36, offset: 36438},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 37, offset: 36439},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1053, col: 43, offset: 36445},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1053, col: 43, offset: 36445},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1053, col: 47, offset: 36449},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 48, offset: 36450},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1053, col: 54, offset: 36456},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1053, col: 54, offset: 36456},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1053, col: 58, offset: 36460},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 59, offset: 36461},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1053, col: 65, offset: 36467},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1053, col: 65, offset: 36467},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1053, col: 69, offset: 36471},
								expr: &litMatcher{
									pos:        position{line: 1053, col: 70, offset: 36472},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1055, col: 1, offset: 36477},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 34, offset: 36510},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1055, col: 34, offset: 36510},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1055, col: 41, offset: 36517},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1055, col: 48, offset: 36524},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1055, col: 55, offset: 36531},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1055, col: 62, offset: 36538},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1055, col: 68, offset: 36544},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1057, col: 1, offset: 36549},
			expr: &actionExpr{
				pos: position{line: 1057, col: 26, offset: 36574},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1057, col: 26, offset: 36574},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1057, col: 32, offset: 36580},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1057, col: 32, offset: 36580},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1058, col: 15, offset: 36615},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1059, col: 15, offset: 36651},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1060, col: 15, offset: 36687},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1061, col: 15, offset: 36727},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1062, col: 15, offset: 36756},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1063, col: 15, offset: 36787},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1067, col: 1, offset: 36941},
			expr: &choiceExpr{
				pos: position{line: 1067, col: 28, offset: 36968},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1067, col: 28, offset: 36968},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 15, offset: 37002},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 15, offset: 37038},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 15, offset: 37074},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1072, col: 1, offset: 37100},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 22, offset: 37121},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1072, col: 22, offset: 37121},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 15, offset: 37152},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 15, offset: 37184},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 15, offset: 37216},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 15, offset: 37252},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 15, offset: 37288},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1079, col: 1, offset: 37312},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 33, offset: 37344},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1079, col: 33, offset: 37344},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1079, col: 39, offset: 37350},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1079, col: 39, offset: 37350},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1083, col: 1, offset: 37483},
			expr: &actionExpr{
				pos: position{line: 1083, col: 25, offset: 37507},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1083, col: 25, offset: 37507},
					expr: &litMatcher{
						pos:        position{line: 1083, col: 25, offset: 37507},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1087, col: 1, offset: 37548},
			expr: &actionExpr{
				pos: position{line: 1087, col: 25, offset: 37572},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 25, offset: 37572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1087, col: 25, offset: 37572},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1087, col: 30, offset: 37577},
							expr: &litMatcher{
								pos:        position{line: 1087, col: 30, offset: 37577},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1095, col: 1, offset: 37674},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 13, offset: 37686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1095, col: 13, offset: 37686},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 35, offset: 37708},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1097, col: 1, offset: 37775},
			expr: &actionExpr{
				pos: position{line: 1097, col: 24, offset: 37798},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 24, offset: 37798},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1097, col: 24, offset: 37798},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1097, col: 30, offset: 37804},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 31, offset: 37805},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1097, col: 49, offset: 37823},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 54, offset: 37828},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1097, col: 64, offset: 37838},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1097, col: 93, offset: 37867},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1101, col: 1, offset: 37954},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1101, col: 32, offset: 37985},
				expr: &ruleRefExpr{
					pos:  position{line: 1101, col: 32, offset: 37985},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1103, col: 1, offset: 38016},
			expr: &actionExpr{
				pos: position{line: 1103, col: 31, offset: 38046},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 31, offset: 38046},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1103, col: 31, offset: 38046},
							expr: &litMatcher{
								pos:        position{line: 1103, col: 33, offset: 38048},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 39, offset: 38054},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1103, col: 48, offset: 38063},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1103, col: 48, offset: 38063},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 38078},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1105, col: 11, offset: 38127},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1105, col: 11, offset: 38127},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1105, col: 19, offset: 38135},
												expr: &ruleRefExpr{
													pos:  position{line: 1105, col: 20, offset: 38136},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 38154},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1107, col: 11, offset: 38184},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1108, col: 11, offset: 38207},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1109, col: 11, offset: 38228},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1110, col: 11, offset: 38249},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1111, col: 11, offset: 38273},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1112, col: 11, offset: 38297},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1113, col: 11, offset: 38323},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1114, col: 11, offset: 38352},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1118, col: 1, offset: 38419},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 38463},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1119, col: 5, offset: 38463},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1120, col: 7, offset: 38560},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1120, col: 7, offset: 38560},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 7, offset: 38560},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1120, col: 12, offset: 38565},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1124, col: 1, offset: 38728},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 24, offset: 38751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1124, col: 24, offset: 38751},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1124, col: 24, offset: 38751},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 24, offset: 38751},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1124, col: 30, offset: 38757},
										expr: &ruleRefExpr{
											pos:  position{line: 1124, col: 31, offset: 38758},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1124, col: 51, offset: 38778},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1124, col: 51, offset: 38778},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1124, col: 55, offset: 38782},
											expr: &litMatcher{
												pos:        position{line: 1124, col: 56, offset: 38783},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 61, offset: 38788},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 71, offset: 38798},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 100, offset: 38827},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1124, col: 104, offset: 38831},
									expr: &notExpr{
										pos: position{line: 1124, col: 106, offset: 38833},
										expr: &ruleRefExpr{
											pos:  position{line: 1124, col: 107, offset: 38834},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 39028},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 39028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 5, offset: 39028},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1126, col: 11, offset: 39034},
										expr: &ruleRefExpr{
											pos:  position{line: 1126, col: 12, offset: 39035},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 30, offset: 39053},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 34, offset: 39057},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1126, col: 44, offset: 39067},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1126, col: 44, offset: 39067},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 48, offset: 39071},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 77, offset: 39100},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1130, col: 1, offset: 39306},
			expr: &seqExpr{
				pos: position{line: 1130, col: 32, offset: 39337},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1130, col: 32, offset: 39337},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 33, offset: 39338},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1130, col: 39, offset: 39344},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 39, offset: 39344},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1132, col: 1, offset: 39373},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 31, offset: 39403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 31, offset: 39403},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1133, col: 11, offset: 39418},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1133, col: 11, offset: 39418},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1133, col: 19, offset: 39426},
								expr: &ruleRefExpr{
									pos:  position{line: 1133, col: 20, offset: 39427},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 39445},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 39475},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1136, col: 11, offset: 39498},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1136, col: 11, offset: 39498},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 11, offset: 39498},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1136, col: 18, offset: 39505},
								expr: &seqExpr{
									pos: position{line: 1136, col: 19, offset: 39506},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1136, col: 19, offset: 39506},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1136, col: 23, offset: 39510},
											expr: &litMatcher{
												pos:        position{line: 1136, col: 24, offset: 39511},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 39527},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 39548},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 39569},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 39593},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 39617},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 39643},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 39672},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1145, col: 1, offset: 39710},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 39754},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1146, col: 5, offset: 39754},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1147, col: 7, offset: 39851},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1147, col: 7, offset: 39851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 7, offset: 39851},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1147, col: 11, offset: 39855},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1151, col: 1, offset: 40018},
			expr: &choiceExpr{
				pos: position{line: 1152, col: 5, offset: 40042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 40042},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 40042},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1152, col: 5, offset: 40042},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 18, offset: 40055},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 40, offset: 40077},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 45, offset: 40082},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 55, offset: 40092},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1152, col: 84, offset: 40121},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1154, col: 9, offset: 40278},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1154, col: 9, offset: 40278},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1154, col: 9, offset: 40278},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 22, offset: 40291},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 44, offset: 40313},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 49, offset: 40318},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 59, offset: 40328},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 88, offset: 40357},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1157, col: 9, offset: 40557},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1157, col: 9, offset: 40557},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1157, col: 9, offset: 40557},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 22, offset: 40570},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1157, col: 44, offset: 40592},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1157, col: 48, offset: 40596},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1157, col: 58, offset: 40606},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1157, col: 87, offset: 40635},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1165, col: 1, offset: 40843},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 15, offset: 40857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1165, col: 15, offset: 40857},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 39, offset: 40881},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1167, col: 1, offset: 40904},
			expr: &actionExpr{
				pos: position{line: 1167, col: 26, offset: 40929},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 26, offset: 40929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1167, col: 26, offset: 40929},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1167, col: 32, offset: 40935},
								expr: &ruleRefExpr{
									pos:  position{line: 1167, col: 33, offset: 40936},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1167, col: 51, offset: 40954},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 56, offset: 40959},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 66, offset: 40969},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1167, col: 97, offset: 41000},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1171, col: 1, offset: 41134},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1171, col: 34, offset: 41167},
				expr: &ruleRefExpr{
					pos:  position{line: 1171, col: 34, offset: 41167},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1173, col: 1, offset: 41199},
			expr: &actionExpr{
				pos: position{line: 1173, col: 33, offset: 41231},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 33, offset: 41231},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1173, col: 33, offset: 41231},
							expr: &litMatcher{
								pos:        position{line: 1173, col: 35, offset: 41233},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1173, col: 41, offset: 41239},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1173, col: 50, offset: 41248},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1173, col: 50, offset: 41248},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 41263},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1175, col: 11, offset: 41312},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1175, col: 11, offset: 41312},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1175, col: 19, offset: 41320},
												expr: &ruleRefExpr{
													pos:  position{line: 1175, col: 20, offset: 41321},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 41339},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 11, offset: 41371},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1178, col: 11, offset: 41394},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 11, offset: 41413},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 41434},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 41458},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 11, offset: 41482},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1183, col: 11, offset: 41508},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1184, col: 11, offset: 41537},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1188, col: 1, offset: 41606},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 5, offset: 41652},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1189, col: 5, offset: 41652},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1190, col: 7, offset: 41751},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1190, col: 7, offset: 41751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1190, col: 7, offset: 41751},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 12, offset: 41756},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1194, col: 1, offset: 41921},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 26, offset: 41946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1194, col: 26, offset: 41946},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1194, col: 26, offset: 41946},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1194, col: 26, offset: 41946},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1194, col: 32, offset: 41952},
										expr: &ruleRefExpr{
											pos:  position{line: 1194, col: 33, offset: 41953},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1194, col: 52, offset: 41972},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1194, col: 52, offset: 41972},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1194, col: 56, offset: 41976},
											expr: &litMatcher{
												pos:        position{line: 1194, col: 57, offset: 41977},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 62, offset: 41982},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 72, offset: 41992},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1194, col: 103, offset: 42023},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 42213},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 42213},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 5, offset: 42213},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1196, col: 11, offset: 42219},
										expr: &ruleRefExpr{
											pos:  position{line: 1196, col: 12, offset: 42220},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 30, offset: 42238},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 34, offset: 42242},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1196, col: 44, offset: 42252},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1196, col: 44, offset: 42252},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1196, col: 48, offset: 42256},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 79, offset: 42287},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1200, col: 1, offset: 42497},
			expr: &seqExpr{
				pos: position{line: 1200, col: 34, offset: 42530},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1200, col: 34, offset: 42530},
						expr: &ruleRefExpr{
							pos:  position{line: 1200, col: 35, offset: 42531},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1200, col: 41, offset: 42537},
						expr: &ruleRefExpr{
							pos:  position{line: 1200, col: 41, offset: 42537},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1202, col: 1, offset: 42568},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 33, offset: 42600},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 33, offset: 42600},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1203, col: 11, offset: 42615},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1203, col: 11, offset: 42615},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1203, col: 19, offset: 42623},
								expr: &ruleRefExpr{
									pos:  position{line: 1203, col: 20, offset: 42624},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 42642},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42674},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1206, col: 11, offset: 42697},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1206, col: 11, offset: 42697},
								expr: &ruleRefExpr{
									pos:  position{line: 1206, col: 11, offset: 42697},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1206, col: 18, offset: 42704},
								expr: &seqExpr{
									pos: position{line: 1206, col: 19, offset: 42705},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1206, col: 19, offset: 42705},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1206, col: 23, offset: 42709},
											expr: &litMatcher{
												pos:        position{line: 1206, col: 24, offset: 42710},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 42726},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 42745},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 42766},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 42790},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 42814},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 42840},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 42869},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1215, col: 1, offset: 42909},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 5, offset: 42955},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1216, col: 5, offset: 42955},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1217, col: 7, offset: 43054},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1217, col: 7, offset: 43054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 7, offset: 43054},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1217, col: 11, offset: 43058},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1221, col: 1, offset: 43224},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 5, offset: 43250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1222, col: 5, offset: 43250},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1222, col: 5, offset: 43250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1222, col: 5, offset: 43250},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1222, col: 18, offset: 43263},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 40, offset: 43285},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1222, col: 45, offset: 43290},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1222, col: 55, offset: 43300},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 86, offset: 43331},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 9, offset: 43488},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1224, col: 9, offset: 43488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1224, col: 9, offset: 43488},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 22, offset: 43501},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 44, offset: 43523},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1224, col: 49, offset: 43528},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 59, offset: 43538},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 90, offset: 43569},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 9, offset: 43769},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1227, col: 9, offset: 43769},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1227, col: 9, offset: 43769},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 22, offset: 43782},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 44, offset: 43804},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 48, offset: 43808},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 58, offset: 43818},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 89, offset: 43849},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1234, col: 1, offset: 44059},
			expr: &choiceExpr{
				pos: position{line: 1234, col: 18, offset: 44076},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1234, col: 18, offset: 44076},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 45, offset: 44103},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1236, col: 1, offset: 44129},
			expr: &actionExpr{
				pos: position{line: 1236, col: 29, offset: 44157},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 29, offset: 44157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1236, col: 29, offset: 44157},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1236, col: 35, offset: 44163},
								expr: &ruleRefExpr{
									pos:  position{line: 1236, col: 36, offset: 44164},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1236, col: 54, offset: 44182},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 59, offset: 44187},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 69, offset: 44197},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1236, col: 103, offset: 44231},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1240, col: 1, offset: 44368},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1240, col: 37, offset: 44404},
				expr: &ruleRefExpr{
					pos:  position{line: 1240, col: 37, offset: 44404},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1242, col: 1, offset: 44471},
			expr: &actionExpr{
				pos: position{line: 1242, col: 36, offset: 44506},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1242, col: 36, offset: 44506},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1242, col: 36, offset: 44506},
							expr: &litMatcher{
								pos:        position{line: 1242, col: 38, offset: 44508},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 44, offset: 44514},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1242, col: 53, offset: 44523},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1242, col: 53, offset: 44523},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 44538},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1244, col: 11, offset: 44587},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1244, col: 11, offset: 44587},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1244, col: 19, offset: 44595},
												expr: &ruleRefExpr{
													pos:  position{line: 1244, col: 20, offset: 44596},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 44614},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1246, col: 11, offset: 44637},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1246, col: 11, offset: 44637},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 44821},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 44856},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 44875},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 11, offset: 44896},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 11, offset: 44917},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 11, offset: 44941},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 11, offset: 44967},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 11, offset: 44996},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1261, col: 1, offset: 45068},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 45117},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1262, col: 5, offset: 45117},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1263, col: 7, offset: 45219},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1263, col: 7, offset: 45219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1263, col: 7, offset: 45219},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1263, col: 12, offset: 45224},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1267, col: 1, offset: 45392},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 29, offset: 45420},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1267, col: 29, offset: 45420},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1267, col: 29, offset: 45420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1267, col: 29, offset: 45420},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1267, col: 35, offset: 45426},
										expr: &ruleRefExpr{
											pos:  position{line: 1267, col: 36, offset: 45427},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1267, col: 55, offset: 45446},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1267, col: 55, offset: 45446},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1267, col: 59, offset: 45450},
											expr: &litMatcher{
												pos:        position{line: 1267, col: 60, offset: 45451},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1267, col: 65, offset: 45456},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1267, col: 75, offset: 45466},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1267, col: 109, offset: 45500},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 45693},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1269, col: 5, offset: 45693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1269, col: 5, offset: 45693},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1269, col: 11, offset: 45699},
										expr: &ruleRefExpr{
											pos:  position{line: 1269, col: 12, offset: 45700},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 30, offset: 45718},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1269, col: 34, offset: 45722},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1269, col: 44, offset: 45732},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1269, col: 44, offset: 45732},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1269, col: 48, offset: 45736},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 82, offset: 45770},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1273, col: 1, offset: 45984},
			expr: &seqExpr{
				pos: position{line: 1273, col: 37, offset: 46020},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1273, col: 37, offset: 46020},
						expr: &ruleRefExpr{
							pos:  position{line: 1273, col: 38, offset: 46021},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1273, col: 44, offset: 46027},
						expr: &ruleRefExpr{
							pos:  position{line: 1273, col: 44, offset: 46027},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1275, col: 1, offset: 46061},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 37, offset: 46097},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1275, col: 37, offset: 46097},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1276, col: 11, offset: 46112},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1276, col: 11, offset: 46112},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1276, col: 19, offset: 46120},
								expr: &ruleRefExpr{
									pos:  position{line: 1276, col: 20, offset: 46121},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 11, offset: 46139},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 46174},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1279, col: 11, offset: 46197},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1279, col: 11, offset: 46197},
								expr: &ruleRefExpr{
									pos:  position{line: 1279, col: 11, offset: 46197},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1279, col: 18, offset: 46204},
								expr: &seqExpr{
									pos: position{line: 1279, col: 19, offset: 46205},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1279, col: 19, offset: 46205},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1279, col: 23, offset: 46209},
											expr: &litMatcher{
												pos:        position{line: 1279, col: 24, offset: 46210},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 11, offset: 46338},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 11, offset: 46357},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 11, offset: 46378},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 46399},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 46423},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1285, col: 11, offset: 46449},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1285, col: 11, offset: 46449},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 46590},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 46619},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1292, col: 1, offset: 46662},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 46711},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1293, col: 5, offset: 46711},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1294, col: 7, offset: 46813},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1294, col: 7, offset: 46813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1294, col: 7, offset: 46813},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1294, col: 11, offset: 46817},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1298, col: 1, offset: 46986},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 47015},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 47015},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1299, col: 5, offset: 47015},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1299, col: 5, offset: 47015},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 18, offset: 47028},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 40, offset: 47050},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1299, col: 45, offset: 47055},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 55, offset: 47065},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 89, offset: 47099},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 9, offset: 47256},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1301, col: 9, offset: 47256},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1301, col: 9, offset: 47256},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1301, col: 22, offset: 47269},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 44, offset: 47291},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1301, col: 49, offset: 47296},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1301, col: 59, offset: 47306},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 93, offset: 47340},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 9, offset: 47540},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1304, col: 9, offset: 47540},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1304, col: 9, offset: 47540},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 22, offset: 47553},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 44, offset: 47575},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 48, offset: 47579},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1304, col: 58, offset: 47589},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 92, offset: 47623},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1312, col: 1, offset: 47948},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 17, offset: 47964},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 17, offset: 47964},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 38, offset: 47985},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1314, col: 1, offset: 48005},
			expr: &actionExpr{
				pos: position{line: 1314, col: 23, offset: 48027},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 23, offset: 48027},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1314, col: 23, offset: 48027},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1314, col: 46, offset: 48050},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 55, offset: 48059},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1314, col: 82, offset: 48086},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1318, col: 1, offset: 48190},
			expr: &actionExpr{
				pos: position{line: 1318, col: 31, offset: 48220},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1318, col: 31, offset: 48220},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1318, col: 41, offset: 48230},
						expr: &ruleRefExpr{
							pos:  position{line: 1318, col: 41, offset: 48230},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1322, col: 1, offset: 48308},
			expr: &seqExpr{
				pos: position{line: 1322, col: 27, offset: 48334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1322, col: 27, offset: 48334},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1322, col: 32, offset: 48339},
						expr: &charClassMatcher{
							pos:        position{line: 1322, col: 33, offset: 48340},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1324, col: 1, offset: 48351},
			expr: &litMatcher{
				pos:        position{line: 1324, col: 25, offset: 48375},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1327, col: 1, offset: 48463},
			expr: &actionExpr{
				pos: position{line: 1327, col: 30, offset: 48492},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1327, col: 30, offset: 48492},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1328, col: 9, offset: 48510},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1328, col: 9, offset: 48510},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1328, col: 9, offset: 48510},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1328, col: 19, offset: 48520},
										expr: &ruleRefExpr{
											pos:  position{line: 1328, col: 20, offset: 48521},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1329, col: 11, offset: 48577},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1329, col: 11, offset: 48577},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 11, offset: 48577},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1329, col: 18, offset: 48584},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 19, offset: 48585},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1330, col: 11, offset: 48616},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1330, col: 11, offset: 48616},
										expr: &litMatcher{
											pos:        position{line: 1330, col: 12, offset: 48617},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 16, offset: 48621},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1331, col: 11, offset: 48669},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1332, col: 11, offset: 48688},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1333, col: 11, offset: 48709},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1334, col: 11, offset: 48730},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1335, col: 11, offset: 48754},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1336, col: 11, offset: 48780},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1336, col: 11, offset: 48780},
										expr: &litMatcher{
											pos:        position{line: 1336, col: 12, offset: 48781},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 17, offset: 48786},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1337, col: 11, offset: 48810},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1338, col: 11, offset: 48839},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1342, col: 1, offset: 48905},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 41, offset: 48945},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1342, col: 41, offset: 48945},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1342, col: 55, offset: 48959},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1342, col: 55, offset: 48959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1342, col: 55, offset: 48959},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1342, col: 59, offset: 48963},
									expr: &litMatcher{
										pos:        position{line: 1342, col: 60, offset: 48964},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1346, col: 1, offset: 49023},
			expr: &actionExpr{
				pos: position{line: 1346, col: 23, offset: 49045},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1346, col: 23, offset: 49045},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1346, col: 23, offset: 49045},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1346, col: 46, offset: 49068},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1346, col: 55, offset: 49077},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1346, col: 82, offset: 49104},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1350, col: 1, offset: 49208},
			expr: &actionExpr{
				pos: position{line: 1350, col: 31, offset: 49238},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1350, col: 31, offset: 49238},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1350, col: 41, offset: 49248},
						expr: &ruleRefExpr{
							pos:  position{line: 1350, col: 41, offset: 49248},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1355, col: 1, offset: 49408},
			expr: &actionExpr{
				pos: position{line: 1355, col: 30, offset: 49437},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1355, col: 30, offset: 49437},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1356, col: 9, offset: 49455},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1356, col: 9, offset: 49455},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1356, col: 9, offset: 49455},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1356, col: 19, offset: 49465},
										expr: &ruleRefExpr{
											pos:  position{line: 1356, col: 20, offset: 49466},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1357, col: 11, offset: 49522},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1357, col: 11, offset: 49522},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 11, offset: 49522},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1357, col: 18, offset: 49529},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 19, offset: 49530},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1358, col: 11, offset: 49561},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1359, col: 11, offset: 49580},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1360, col: 11, offset: 49601},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1361, col: 11, offset: 49622},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1362, col: 11, offset: 49646},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1363, col: 11, offset: 49672},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1363, col: 11, offset: 49672},
										expr: &litMatcher{
											pos:        position{line: 1363, col: 12, offset: 49673},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 18, offset: 49679},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1364, col: 10, offset: 49702},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1365, col: 11, offset: 49731},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1369, col: 1, offset: 49805},
			expr: &seqExpr{
				pos: position{line: 1369, col: 27, offset: 49831},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1369, col: 27, offset: 49831},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1369, col: 33, offset: 49837},
						expr: &charClassMatcher{
							pos:        position{line: 1369, col: 34, offset: 49838},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1371, col: 1, offset: 49849},
			expr: &litMatcher{
				pos:        position{line: 1371, col: 25, offset: 49873},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1373, col: 1, offset: 49880},
			expr: &actionExpr{
				pos: position{line: 1373, col: 41, offset: 49920},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1373, col: 42, offset: 49921},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1373, col: 42, offset: 49921},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1373, col: 56, offset: 49935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1373, col: 56, offset: 49935},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1373, col: 60, offset: 49939},
									expr: &litMatcher{
										pos:        position{line: 1373, col: 61, offset: 49940},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1382, col: 1, offset: 50060},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 15, offset: 50074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1382, col: 15, offset: 50074},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 39, offset: 50098},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1384, col: 1, offset: 50121},
			expr: &actionExpr{
				pos: position{line: 1384, col: 26, offset: 50146},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 26, offset: 50146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1384, col: 26, offset: 50146},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1384, col: 32, offset: 50152},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 33, offset: 50153},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1384, col: 51, offset: 50171},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 56, offset: 50176},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 66, offset: 50186},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1384, col: 97, offset: 50217},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1388, col: 1, offset: 50351},
			expr: &seqExpr{
				pos: position{line: 1388, col: 34, offset: 50384},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1388, col: 34, offset: 50384},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1388, col: 63, offset: 50413},
						expr: &seqExpr{
							pos: position{line: 1388, col: 64, offset: 50414},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1388, col: 64, offset: 50414},
									expr: &litMatcher{
										pos:        position{line: 1388, col: 66, offset: 50416},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1388, col: 73, offset: 50423},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1388, col: 73, offset: 50423},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1388, col: 81, offset: 50431},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1390, col: 1, offset: 50498},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 33, offset: 50530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1390, col: 33, offset: 50530},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 11, offset: 50545},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1392, col: 11, offset: 50577},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1392, col: 11, offset: 50577},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1392, col: 19, offset: 50585},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 20, offset: 50586},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 11, offset: 50604},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 11, offset: 50627},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 11, offset: 50646},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 11, offset: 50667},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 50691},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 50715},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 50741},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1400, col: 11, offset: 50770},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1402, col: 1, offset: 50810},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 50856},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1403, col: 5, offset: 50856},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1404, col: 7, offset: 50955},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1404, col: 7, offset: 50955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1404, col: 7, offset: 50955},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1404, col: 12, offset: 50960},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1408, col: 1, offset: 51125},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 26, offset: 51150},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 26, offset: 51150},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1408, col: 26, offset: 51150},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1408, col: 26, offset: 51150},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1408, col: 32, offset: 51156},
										expr: &ruleRefExpr{
											pos:  position{line: 1408, col: 33, offset: 51157},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1408, col: 52, offset: 51176},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1408, col: 52, offset: 51176},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1408, col: 56, offset: 51180},
											expr: &litMatcher{
												pos:        position{line: 1408, col: 57, offset: 51181},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1408, col: 62, offset: 51186},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1408, col: 72, offset: 51196},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1408, col: 103, offset: 51227},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 51417},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1410, col: 5, offset: 51417},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1410, col: 5, offset: 51417},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1410, col: 11, offset: 51423},
										expr: &ruleRefExpr{
											pos:  position{line: 1410, col: 12, offset: 51424},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1410, col: 30, offset: 51442},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1410, col: 34, offset: 51446},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1410, col: 44, offset: 51456},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1410, col: 44, offset: 51456},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1410, col: 48, offset: 51460},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1410, col: 79, offset: 51491},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1414, col: 1, offset: 51700},
			expr: &seqExpr{
				pos: position{line: 1414, col: 34, offset: 51733},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1414, col: 34, offset: 51733},
						expr: &ruleRefExpr{
							pos:  position{line: 1414, col: 35, offset: 51734},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1414, col: 41, offset: 51740},
						expr: &ruleRefExpr{
							pos:  position{line: 1414, col: 41, offset: 51740},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1416, col: 1, offset: 51771},
			expr: &choiceExpr{
				pos: position{line: 1416, col: 33, offset: 51803},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1416, col: 33, offset: 51803},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 51818},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1418, col: 11, offset: 51850},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1418, col: 11, offset: 51850},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1418, col: 19, offset: 51858},
								expr: &ruleRefExpr{
									pos:  position{line: 1418, col: 20, offset: 51859},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 51877},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1420, col: 11, offset: 51900},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1420, col: 11, offset: 51900},
								expr: &ruleRefExpr{
									pos:  position{line: 1420, col: 11, offset: 51900},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1420, col: 18, offset: 51907},
								expr: &seqExpr{
									pos: position{line: 1420, col: 19, offset: 51908},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1420, col: 19, offset: 51908},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1420, col: 23, offset: 51912},
											expr: &litMatcher{
												pos:        position{line: 1420, col: 24, offset: 51913},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1421, col: 11, offset: 51929},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1422, col: 11, offset: 51948},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 11, offset: 51969},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 11, offset: 51993},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 11, offset: 52017},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 11, offset: 52043},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 11, offset: 52072},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1429, col: 1, offset: 52112},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 5, offset: 52158},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1430, col: 5, offset: 52158},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1431, col: 7, offset: 52255},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1431, col: 7, offset: 52255},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1431, col: 7, offset: 52255},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1431, col: 11, offset: 52259},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1435, col: 1, offset: 52422},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 52447},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1436, col: 5, offset: 52447},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1436, col: 5, offset: 52447},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1436, col: 5, offset: 52447},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 18, offset: 52460},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 40, offset: 52482},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 45, offset: 52487},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 55, offset: 52497},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 86, offset: 52528},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1438, col: 9, offset: 52685},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1438, col: 9, offset: 52685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1438, col: 9, offset: 52685},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1438, col: 22, offset: 52698},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1438, col: 44, offset: 52720},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 49, offset: 52725},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1438, col: 59, offset: 52735},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1438, col: 90, offset: 52766},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 9, offset: 52966},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1441, col: 9, offset: 52966},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1441, col: 9, offset: 52966},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1441, col: 22, offset: 52979},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 44, offset: 53001},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 48, offset: 53005},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1441, col: 58, offset: 53015},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 89, offset: 53046},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1446, col: 1, offset: 53196},
			expr: &actionExpr{
				pos: position{line: 1446, col: 18, offset: 53213},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 18, offset: 53213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1446, col: 18, offset: 53213},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1446, col: 24, offset: 53219},
								expr: &ruleRefExpr{
									pos:  position{line: 1446, col: 25, offset: 53220},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 43, offset: 53238},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 47, offset: 53242},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 56, offset: 53251},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 78, offset: 53273},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1450, col: 1, offset: 53369},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 25, offset: 53393},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1450, col: 25, offset: 53393},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 38, offset: 53406},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1452, col: 1, offset: 53425},
			expr: &actionExpr{
				pos: position{line: 1452, col: 21, offset: 53445},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1452, col: 21, offset: 53445},
					expr: &charClassMatcher{
						pos:        position{line: 1452, col: 21, offset: 53445},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1456, col: 1, offset: 53522},
			expr: &actionExpr{
				pos: position{line: 1456, col: 25, offset: 53546},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 25, offset: 53546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1456, col: 25, offset: 53546},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 38, offset: 53559},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1456, col: 60, offset: 53581},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 64, offset: 53585},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 73, offset: 53594},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1456, col: 95, offset: 53616},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1460, col: 1, offset: 53745},
			expr: &actionExpr{
				pos: position{line: 1460, col: 20, offset: 53764},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 20, offset: 53764},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1460, col: 20, offset: 53764},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1460, col: 26, offset: 53770},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 27, offset: 53771},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1460, col: 45, offset: 53789},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 49, offset: 53793},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 58, offset: 53802},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1460, col: 82, offset: 53826},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1464, col: 1, offset: 53924},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 27, offset: 53950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1464, col: 27, offset: 53950},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 40, offset: 53963},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1466, col: 1, offset: 53984},
			expr: &actionExpr{
				pos: position{line: 1466, col: 23, offset: 54006},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1466, col: 23, offset: 54006},
					expr: &charClassMatcher{
						pos:        position{line: 1466, col: 23, offset: 54006},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1470, col: 1, offset: 54083},
			expr: &actionExpr{
				pos: position{line: 1470, col: 27, offset: 54109},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 27, offset: 54109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 27, offset: 54109},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 40, offset: 54122},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1470, col: 62, offset: 54144},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 66, offset: 54148},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 75, offset: 54157},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1470, col: 99, offset: 54181},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1477, col: 1, offset: 54423},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 22, offset: 54444},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1477, col: 22, offset: 54444},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 46, offset: 54468},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 70, offset: 54492},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1479, col: 1, offset: 54510},
			expr: &litMatcher{
				pos:        position{line: 1479, col: 32, offset: 54541},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1481, col: 1, offset: 54546},
			expr: &actionExpr{
				pos: position{line: 1481, col: 26, offset: 54571},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 26, offset: 54571},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1481, col: 26, offset: 54571},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1481, col: 54, offset: 54599},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 63, offset: 54608},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1481, col: 93, offset: 54638},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1481, col: 121, offset: 54666},
							expr: &ruleRefExpr{
								pos:  position{line: 1481, col: 122, offset: 54667},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1485, col: 1, offset: 54772},
			expr: &choiceExpr{
				pos: position{line: 1485, col: 33, offset: 54804},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1485, col: 34, offset: 54805},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1485, col: 34, offset: 54805},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1485, col: 35, offset: 54806},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1485, col: 35, offset: 54806},
											expr: &ruleRefExpr{
												pos:  position{line: 1485, col: 36, offset: 54807},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1485, col: 64, offset: 54835},
											expr: &ruleRefExpr{
												pos:  position{line: 1485, col: 65, offset: 54836},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1485, col: 71, offset: 54842},
											expr: &ruleRefExpr{
												pos:  position{line: 1485, col: 72, offset: 54843},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1485, col: 80, offset: 54851,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1485, col: 83, offset: 54854},
									expr: &seqExpr{
										pos: position{line: 1485, col: 84, offset: 54855},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1485, col: 84, offset: 54855},
												expr: &seqExpr{
													pos: position{line: 1485, col: 86, offset: 54857},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1485, col: 86, offset: 54857},
															expr: &ruleRefExpr{
																pos:  position{line: 1485, col: 86, offset: 54857},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 93, offset: 54864},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1485, col: 122, offset: 54893},
												expr: &ruleRefExpr{
													pos:  position{line: 1485, col: 123, offset: 54894},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1485, col: 151, offset: 54922},
												expr: &ruleRefExpr{
													pos:  position{line: 1485, col: 152, offset: 54923},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1485, col: 160, offset: 54931,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1487, col: 7, offset: 55073},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1487, col: 8, offset: 55074},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1487, col: 8, offset: 55074},
									expr: &ruleRefExpr{
										pos:  position{line: 1487, col: 9, offset: 55075},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1487, col: 15, offset: 55081},
									expr: &ruleRefExpr{
										pos:  position{line: 1487, col: 16, offset: 55082},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1487, col: 24, offset: 55090},
									expr: &ruleRefExpr{
										pos:  position{line: 1487, col: 25, offset: 55091},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1487, col: 53, offset: 55119,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1491, col: 1, offset: 55201},
			expr: &litMatcher{
				pos:        position{line: 1491, col: 32, offset: 55232},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1493, col: 1, offset: 55239},
			expr: &actionExpr{
				pos: position{line: 1493, col: 26, offset: 55264},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 26, offset: 55264},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1493, col: 26, offset: 55264},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 54, offset: 55292},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 63, offset: 55301},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1493, col: 93, offset: 55331},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1493, col: 121, offset: 55359},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 122, offset: 55360},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1497, col: 1, offset: 55465},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 33, offset: 55497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1497, col: 34, offset: 55498},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1497, col: 34, offset: 55498},
							expr: &seqExpr{
								pos: position{line: 1497, col: 35, offset: 55499},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1497, col: 35, offset: 55499},
										expr: &ruleRefExpr{
											pos:  position{line: 1497, col: 36, offset: 55500},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1497, col: 64, offset: 55528,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1499, col: 7, offset: 55693},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1499, col: 7, offset: 55693},
							expr: &seqExpr{
								pos: position{line: 1499, col: 8, offset: 55694},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1499, col: 8, offset: 55694},
										expr: &ruleRefExpr{
											pos:  position{line: 1499, col: 9, offset: 55695},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1499, col: 15, offset: 55701},
										expr: &ruleRefExpr{
											pos:  position{line: 1499, col: 16, offset: 55702},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1499, col: 24, offset: 55710},
										expr: &ruleRefExpr{
											pos:  position{line: 1499, col: 25, offset: 55711},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1499, col: 53, offset: 55739,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1503, col: 1, offset: 55822},
			expr: &choiceExpr{
				pos: position{line: 1503, col: 21, offset: 55842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1503, col: 21, offset: 55842},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1503, col: 21, offset: 55842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1503, col: 21, offset: 55842},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1503, col: 30, offset: 55851},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1503, col: 38, offset: 55859},
										expr: &ruleRefExpr{
											pos:  position{line: 1503, col: 39, offset: 55860},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1503, col: 67, offset: 55888},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1505, col: 5, offset: 55984},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1505, col: 5, offset: 55984},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1505, col: 5, offset: 55984},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1505, col: 15, offset: 55994},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1505, col: 23, offset: 56002},
										expr: &choiceExpr{
											pos: position{line: 1505, col: 24, offset: 56003},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1505, col: 24, offset: 56003},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1505, col: 37, offset: 56016},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1505, col: 65, offset: 56044},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1509, col: 1, offset: 56140},
			expr: &actionExpr{
				pos: position{line: 1509, col: 30, offset: 56169},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1509, col: 30, offset: 56169},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1516, col: 1, offset: 56342},
			expr: &choiceExpr{
				pos: position{line: 1516, col: 19, offset: 56360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1516, col: 19, offset: 56360},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1516, col: 44, offset: 56385},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1518, col: 1, offset: 56410},
			expr: &choiceExpr{
				pos: position{line: 1518, col: 27, offset: 56436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1518, col: 27, offset: 56436},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1518, col: 27, offset: 56436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1518, col: 27, offset: 56436},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1518, col: 32, offset: 56441},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1518, col: 36, offset: 56445},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1518, col: 40, offset: 56449},
									expr: &ruleRefExpr{
										pos:  position{line: 1518, col: 40, offset: 56449},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1518, col: 47, offset: 56456},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1518, col: 51, offset: 56460},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1518, col: 58, offset: 56467},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1518, col: 79, offset: 56488},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1520, col: 5, offset: 56571},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1520, col: 5, offset: 56571},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1520, col: 5, offset: 56571},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1520, col: 10, offset: 56576},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1520, col: 14, offset: 56580},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1520, col: 18, offset: 56584},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1524, col: 1, offset: 56656},
			expr: &actionExpr{
				pos: position{line: 1524, col: 27, offset: 56682},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 27, offset: 56682},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1524, col: 27, offset: 56682},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 35, offset: 56690},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 40, offset: 56695},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 54, offset: 56709},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 72, offset: 56727},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1528, col: 1, offset: 56850},
			expr: &ruleRefExpr{
				pos:  position{line: 1528, col: 24, offset: 56873},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1533, col: 1, offset: 56995},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 9, offset: 57003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1533, col: 9, offset: 57003},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1533, col: 24, offset: 57018},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1536, col: 1, offset: 57099},
			expr: &actionExpr{
				pos: position{line: 1536, col: 17, offset: 57115},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 17, offset: 57115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 17, offset: 57115},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 25, offset: 57123},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 30, offset: 57128},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 40, offset: 57138},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 58, offset: 57156},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1540, col: 1, offset: 57267},
			expr: &actionExpr{
				pos: position{line: 1540, col: 17, offset: 57283},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 17, offset: 57283},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1540, col: 17, offset: 57283},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 22, offset: 57288},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 42, offset: 57308},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1540, col: 59, offset: 57325},
								expr: &ruleRefExpr{
									pos:  position{line: 1540, col: 60, offset: 57326},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1544, col: 1, offset: 57419},
			expr: &actionExpr{
				pos: position{line: 1544, col: 19, offset: 57437},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 19, offset: 57437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 19, offset: 57437},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 23, offset: 57441},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1544, col: 33, offset: 57451},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 34, offset: 57452},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1545, col: 5, offset: 57484},
							expr: &ruleRefExpr{
								pos:  position{line: 1545, col: 5, offset: 57484},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 12, offset: 57491},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1545, col: 23, offset: 57502},
								expr: &ruleRefExpr{
									pos:  position{line: 1545, col: 24, offset: 57503},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1545, col: 43, offset: 57522},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1549, col: 1, offset: 57639},
			expr: &actionExpr{
				pos: position{line: 1549, col: 30, offset: 57668},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1549, col: 30, offset: 57668},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1551, col: 5, offset: 57719},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1551, col: 6, offset: 57720},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1551, col: 6, offset: 57720},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1551, col: 6, offset: 57720},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1551, col: 11, offset: 57725},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1551, col: 20, offset: 57734},
												expr: &choiceExpr{
													pos: position{line: 1551, col: 21, offset: 57735},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1551, col: 21, offset: 57735},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1551, col: 36, offset: 57750},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1551, col: 49, offset: 57763},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1551, col: 70, offset: 57784},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1551, col: 92, offset: 57806},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1551, col: 97, offset: 57811},
											expr: &notExpr{
												pos: position{line: 1551, col: 99, offset: 57813},
												expr: &litMatcher{
													pos:        position{line: 1551, col: 100, offset: 57814},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1551, col: 105, offset: 57819},
											expr: &litMatcher{
												pos:        position{line: 1551, col: 105, offset: 57819},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1555, col: 6, offset: 57946},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1555, col: 6, offset: 57946},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1555, col: 6, offset: 57946},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1555, col: 15, offset: 57955},
												expr: &choiceExpr{
													pos: position{line: 1555, col: 16, offset: 57956},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1555, col: 16, offset: 57956},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1555, col: 31, offset: 57971},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1555, col: 44, offset: 57984},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1555, col: 65, offset: 58005},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1555, col: 89, offset: 58029},
											expr: &notExpr{
												pos: position{line: 1555, col: 91, offset: 58031},
												expr: &litMatcher{
													pos:        position{line: 1555, col: 92, offset: 58032},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1555, col: 97, offset: 58037},
											expr: &litMatcher{
												pos:        position{line: 1555, col: 97, offset: 58037},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1561, col: 1, offset: 58151},
			expr: &actionExpr{
				pos: position{line: 1561, col: 18, offset: 58168},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1561, col: 18, offset: 58168},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1565, col: 1, offset: 58254},
			expr: &actionExpr{
				pos: position{line: 1565, col: 24, offset: 58277},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1565, col: 24, offset: 58277},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1569, col: 1, offset: 58370},
			expr: &actionExpr{
				pos: position{line: 1569, col: 26, offset: 58395},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1569, col: 26, offset: 58395},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1574, col: 1, offset: 58551},
			expr: &actionExpr{
				pos: position{line: 1575, col: 5, offset: 58570},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 5, offset: 58570},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 58570},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1575, col: 14, offset: 58579},
								expr: &choiceExpr{
									pos: position{line: 1575, col: 15, offset: 58580},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1575, col: 15, offset: 58580},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1576, col: 11, offset: 58595},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1577, col: 11, offset: 58622},
											expr: &ruleRefExpr{
												pos:  position{line: 1577, col: 11, offset: 58622},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1578, col: 11, offset: 58640},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1579, col: 11, offset: 58664},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1580, col: 11, offset: 58682},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1580, col: 21, offset: 58692},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1584, col: 1, offset: 58762},
			expr: &choiceExpr{
				pos: position{line: 1584, col: 17, offset: 58778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1584, col: 17, offset: 58778},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1584, col: 40, offset: 58801},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1587, col: 1, offset: 58929},
			expr: &actionExpr{
				pos: position{line: 1587, col: 25, offset: 58953},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 25, offset: 58953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1587, col: 25, offset: 58953},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 33, offset: 58961},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1587, col: 38, offset: 58966},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1587, col: 38, offset: 58966},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1587, col: 57, offset: 58985},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 79, offset: 59007},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 97, offset: 59025},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1591, col: 1, offset: 59136},
			expr: &actionExpr{
				pos: position{line: 1591, col: 25, offset: 59160},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 25, offset: 59160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1591, col: 25, offset: 59160},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 30, offset: 59165},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 48, offset: 59183},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1591, col: 65, offset: 59200},
								expr: &ruleRefExpr{
									pos:  position{line: 1591, col: 66, offset: 59201},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1598, col: 1, offset: 59396},
			expr: &actionExpr{
				pos: position{line: 1598, col: 15, offset: 59410},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1598, col: 15, offset: 59410},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1598, col: 15, offset: 59410},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1598, col: 26, offset: 59421},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 27, offset: 59422},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1598, col: 45, offset: 59440},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 55, offset: 59450},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1598, col: 61, offset: 59456},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 71, offset: 59466},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1598, col: 84, offset: 59479},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1598, col: 102, offset: 59497},
							expr: &ruleRefExpr{
								pos:  position{line: 1598, col: 102, offset: 59497},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1598, col: 109, offset: 59504},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1603, col: 1, offset: 59714},
			expr: &actionExpr{
				pos: position{line: 1603, col: 16, offset: 59729},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 16, offset: 59729},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1603, col: 16, offset: 59729},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1603, col: 25, offset: 59738},
							expr: &litMatcher{
								pos:        position{line: 1603, col: 26, offset: 59739},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 30, offset: 59743},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 36, offset: 59749},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 46, offset: 59759},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 59, offset: 59772},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1607, col: 1, offset: 59910},
			expr: &actionExpr{
				pos: position{line: 1607, col: 21, offset: 59930},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 21, offset: 59930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1607, col: 21, offset: 59930},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 25, offset: 59934},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 29, offset: 59938},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 44, offset: 59953},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 46, offset: 59955},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 57, offset: 59966},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 59, offset: 59968},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 71, offset: 59980},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 74, offset: 59983},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1607, col: 85, offset: 59994},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1611, col: 1, offset: 60056},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 20, offset: 60075},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1611, col: 20, offset: 60075},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1611, col: 36, offset: 60091},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1611, col: 51, offset: 60106},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1613, col: 1, offset: 60117},
			expr: &actionExpr{
				pos: position{line: 1613, col: 18, offset: 60134},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 18, offset: 60134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1613, col: 18, offset: 60134},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 22, offset: 60138},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1613, col: 29, offset: 60145},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1613, col: 29, offset: 60145},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 29, offset: 60145},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1613, col: 43, offset: 60159},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 43, offset: 60159},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1613, col: 58, offset: 60174},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 58, offset: 60174},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1613, col: 74, offset: 60190},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 74, offset: 60190},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1613, col: 91, offset: 60207},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 91, offset: 60207},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1613, col: 103, offset: 60219},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1613, col: 107, offset: 60223},
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 107, offset: 60223},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1613, col: 114, offset: 60230},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1617, col: 1, offset: 60284},
			expr: &actionExpr{
				pos: position{line: 1617, col: 19, offset: 60302},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1617, col: 19, offset: 60302},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1617, col: 25, offset: 60308},
						expr: &ruleRefExpr{
							pos:  position{line: 1617, col: 25, offset: 60308},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1621, col: 1, offset: 60387},
			expr: &actionExpr{
				pos: position{line: 1621, col: 15, offset: 60401},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 15, offset: 60401},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1621, col: 15, offset: 60401},
							expr: &litMatcher{
								pos:        position{line: 1621, col: 15, offset: 60401},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1621, col: 20, offset: 60406},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1621, col: 26, offset: 60412},
								expr: &ruleRefExpr{
									pos:  position{line: 1621, col: 26, offset: 60412},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1625, col: 1, offset: 60488},
			expr: &actionExpr{
				pos: position{line: 1625, col: 16, offset: 60503},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 16, offset: 60503},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1625, col: 16, offset: 60503},
							expr: &litMatcher{
								pos:        position{line: 1625, col: 16, offset: 60503},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1625, col: 21, offset: 60508},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1625, col: 27, offset: 60514},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 27, offset: 60514},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1629, col: 1, offset: 60596},
			expr: &actionExpr{
				pos: position{line: 1629, col: 17, offset: 60612},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1629, col: 17, offset: 60612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1629, col: 17, offset: 60612},
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 17, offset: 60612},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1629, col: 24, offset: 60619},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 30, offset: 60625},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1629, col: 46, offset: 60641},
							expr: &ruleRefExpr{
								pos:  position{line: 1629, col: 46, offset: 60641},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1633, col: 1, offset: 60717},
			expr: &actionExpr{
				pos: position{line: 1633, col: 19, offset: 60735},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1633, col: 19, offset: 60735},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1633, col: 19, offset: 60735},
							expr: &ruleRefExpr{
								pos:  position{line: 1633, col: 19, offset: 60735},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1633, col: 26, offset: 60742},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1633, col: 30, offset: 60746},
							expr: &ruleRefExpr{
								pos:  position{line: 1633, col: 30, offset: 60746},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1633, col: 37, offset: 60753},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1633, col: 43, offset: 60759},
								expr: &ruleRefExpr{
									pos:  position{line: 1633, col: 43, offset: 60759},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1640, col: 1, offset: 60894},
			expr: &actionExpr{
				pos: position{line: 1640, col: 20, offset: 60913},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 20, offset: 60913},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1640, col: 20, offset: 60913},
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 20, offset: 60913},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1640, col: 27, offset: 60920},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1640, col: 31, offset: 60924},
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 31, offset: 60924},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 38, offset: 60931},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1640, col: 44, offset: 60937},
								expr: &ruleRefExpr{
									pos:  position{line: 1640, col: 44, offset: 60937},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1651, col: 1, offset: 61271},
			expr: &actionExpr{
				pos: position{line: 1651, col: 15, offset: 61285},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 15, offset: 61285},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1651, col: 15, offset: 61285},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 23, offset: 61293},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1651, col: 29, offset: 61299},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1651, col: 29, offset: 61299},
									expr: &charClassMatcher{
										pos:        position{line: 1651, col: 29, offset: 61299},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1651, col: 73, offset: 61343},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1651, col: 80, offset: 61350},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1655, col: 1, offset: 61432},
			expr: &actionExpr{
				pos: position{line: 1655, col: 14, offset: 61445},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1655, col: 14, offset: 61445},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1655, col: 14, offset: 61445},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1655, col: 18, offset: 61449},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1655, col: 23, offset: 61454},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1655, col: 32, offset: 61463},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1655, col: 35, offset: 61466},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1655, col: 46, offset: 61477},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1659, col: 1, offset: 61534},
			expr: &actionExpr{
				pos: position{line: 1659, col: 13, offset: 61546},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1659, col: 13, offset: 61546},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1659, col: 19, offset: 61552},
						expr: &ruleRefExpr{
							pos:  position{line: 1659, col: 19, offset: 61552},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1666, col: 1, offset: 61828},
			expr: &choiceExpr{
				pos: position{line: 1666, col: 19, offset: 61846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1666, col: 19, offset: 61846},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1666, col: 19, offset: 61846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1666, col: 19, offset: 61846},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1666, col: 32, offset: 61859},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1666, col: 41, offset: 61868},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1666, col: 58, offset: 61885},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1668, col: 5, offset: 61953},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1668, col: 5, offset: 61953},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1668, col: 5, offset: 61953},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1668, col: 17, offset: 61965},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1668, col: 22, offset: 61970},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1668, col: 35, offset: 61983},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1668, col: 39, offset: 61987},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1668, col: 47, offset: 61995},
										expr: &ruleRefExpr{
											pos:  position{line: 1668, col: 48, offset: 61996},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1668, col: 66, offset: 62014},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1672, col: 1, offset: 62075},
			expr: &ruleRefExpr{
				pos:  position{line: 1672, col: 16, offset: 62090},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1674, col: 1, offset: 62101},
			expr: &actionExpr{
				pos: position{line: 1674, col: 20, offset: 62120},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1674, col: 20, offset: 62120},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1674, col: 29, offset: 62129},
						expr: &seqExpr{
							pos: position{line: 1674, col: 30, offset: 62130},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1674, col: 30, offset: 62130},
									expr: &litMatcher{
										pos:        position{line: 1674, col: 31, offset: 62131},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1674, col: 35, offset: 62135},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1681, col: 1, offset: 62459},
			expr: &actionExpr{
				pos: position{line: 1681, col: 19, offset: 62477},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1681, col: 19, offset: 62477},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1681, col: 19, offset: 62477},
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 20, offset: 62478},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 5, offset: 62566},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1682, col: 12, offset: 62573},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1682, col: 12, offset: 62573},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1683, col: 11, offset: 62596},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1684, col: 11, offset: 62620},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1685, col: 11, offset: 62644},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1686, col: 11, offset: 62665},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1687, col: 11, offset: 62688},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1688, col: 11, offset: 62716},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1689, col: 11, offset: 62743},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1690, col: 11, offset: 62759},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1694, col: 1, offset: 62800},
			expr: &choiceExpr{
				pos: position{line: 1694, col: 19, offset: 62818},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1694, col: 19, offset: 62818},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1694, col: 19, offset: 62818},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 21, offset: 62820},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1694, col: 31, offset: 62830},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1695, col: 19, offset: 62901},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1696, col: 19, offset: 62941},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1697, col: 19, offset: 62982},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1698, col: 19, offset: 63023},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1699, col: 19, offset: 63064},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1700, col: 19, offset: 63102},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1701, col: 19, offset: 63142},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1703, col: 1, offset: 63169},
			expr: &choiceExpr{
				pos: position{line: 1703, col: 26, offset: 63194},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1703, col: 26, offset: 63194},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1703, col: 42, offset: 63210},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1705, col: 1, offset: 63219},
			expr: &actionExpr{
				pos: position{line: 1705, col: 12, offset: 63230},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 12, offset: 63230},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1705, col: 12, offset: 63230},
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 13, offset: 63231},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1705, col: 17, offset: 63235},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 26, offset: 63244},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1705, col: 42, offset: 63260},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1709, col: 1, offset: 63340},
			expr: &actionExpr{
				pos: position{line: 1709, col: 19, offset: 63358},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1709, col: 19, offset: 63358},
					expr: &charClassMatcher{
						pos:        position{line: 1709, col: 19, offset: 63358},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1713, col: 1, offset: 63405},
			expr: &actionExpr{
				pos: position{line: 1713, col: 20, offset: 63424},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1713, col: 20, offset: 63424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1713, col: 20, offset: 63424},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1713, col: 25, offset: 63429},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1713, col: 48, offset: 63452},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1713, col: 61, offset: 63465},
								expr: &ruleRefExpr{
									pos:  position{line: 1713, col: 61, offset: 63465},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1717, col: 1, offset: 63562},
			expr: &actionExpr{
				pos: position{line: 1717, col: 26, offset: 63587},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1717, col: 26, offset: 63587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1717, col: 26, offset: 63587},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1717, col: 30, offset: 63591},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1717, col: 35, offset: 63596},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1717, col: 35, offset: 63596},
									expr: &charClassMatcher{
										pos:        position{line: 1717, col: 35, offset: 63596},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1717, col: 83, offset: 63644},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1717, col: 87, offset: 63648},
							expr: &ruleRefExpr{
								pos:  position{line: 1717, col: 87, offset: 63648},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1724, col: 1, offset: 63875},
			expr: &seqExpr{
				pos: position{line: 1724, col: 25, offset: 63899},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1724, col: 25, offset: 63899},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1724, col: 31, offset: 63905},
						expr: &ruleRefExpr{
							pos:  position{line: 1724, col: 31, offset: 63905},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 38, offset: 63912},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1726, col: 1, offset: 63972},
			expr: &seqExpr{
				pos: position{line: 1726, col: 30, offset: 64001},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1726, col: 30, offset: 64001},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1726, col: 36, offset: 64007},
						expr: &ruleRefExpr{
							pos:  position{line: 1726, col: 36, offset: 64007},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 43, offset: 64014},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1728, col: 1, offset: 64019},
			expr: &choiceExpr{
				pos: position{line: 1728, col: 28, offset: 64046},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1728, col: 29, offset: 64047},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1728, col: 29, offset: 64047},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1728, col: 35, offset: 64053},
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 35, offset: 64053},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1728, col: 42, offset: 64060},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1728, col: 49, offset: 64067},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1730, col: 1, offset: 64072},
			expr: &actionExpr{
				pos: position{line: 1730, col: 16, offset: 64087},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1730, col: 16, offset: 64087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1730, col: 16, offset: 64087},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1730, col: 27, offset: 64098},
								expr: &ruleRefExpr{
									pos:  position{line: 1730, col: 28, offset: 64099},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1730, col: 41, offset: 64112},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1730, col: 67, offset: 64138},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1730, col: 76, offset: 64147},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1730, col: 99, offset: 64170},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1734, col: 1, offset: 64285},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1734, col: 26, offset: 64310},
				expr: &actionExpr{
					pos: position{line: 1734, col: 27, offset: 64311},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1734, col: 27, offset: 64311},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1734, col: 27, offset: 64311},
								expr: &ruleRefExpr{
									pos:  position{line: 1734, col: 28, offset: 64312},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1734, col: 52, offset: 64336},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1734, col: 58, offset: 64342},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1741, col: 1, offset: 64682},
			expr: &seqExpr{
				pos: position{line: 1741, col: 26, offset: 64707},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1741, col: 26, offset: 64707},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1741, col: 33, offset: 64714},
						expr: &ruleRefExpr{
							pos:  position{line: 1741, col: 33, offset: 64714},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 40, offset: 64721},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1743, col: 1, offset: 64726},
			expr: &seqExpr{
				pos: position{line: 1743, col: 31, offset: 64756},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1743, col: 31, offset: 64756},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1743, col: 38, offset: 64763},
						expr: &ruleRefExpr{
							pos:  position{line: 1743, col: 38, offset: 64763},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 45, offset: 64770},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1745, col: 1, offset: 64775},
			expr: &choiceExpr{
				pos: position{line: 1745, col: 29, offset: 64803},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1745, col: 30, offset: 64804},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1745, col: 30, offset: 64804},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1745, col: 37, offset: 64811},
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 37, offset: 64811},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1745, col: 44, offset: 64818},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1745, col: 51, offset: 64825},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1747, col: 1, offset: 64830},
			expr: &actionExpr{
				pos: position{line: 1747, col: 17, offset: 64846},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1747, col: 17, offset: 64846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1747, col: 17, offset: 64846},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1747, col: 28, offset: 64857},
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 29, offset: 64858},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1747, col: 42, offset: 64871},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1747, col: 69, offset: 64898},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1747, col: 78, offset: 64907},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1747, col: 102, offset: 64931},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1751, col: 1, offset: 65048},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1751, col: 27, offset: 65074},
				expr: &actionExpr{
					pos: position{line: 1751, col: 28, offset: 65075},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1751, col: 28, offset: 65075},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1751, col: 28, offset: 65075},
								expr: &ruleRefExpr{
									pos:  position{line: 1751, col: 29, offset: 65076},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1751, col: 54, offset: 65101},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1751, col: 60, offset: 65107},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1758, col: 1, offset: 65447},
			expr: &seqExpr{
				pos: position{line: 1758, col: 26, offset: 65472},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1758, col: 26, offset: 65472},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1758, col: 33, offset: 65479},
						expr: &ruleRefExpr{
							pos:  position{line: 1758, col: 33, offset: 65479},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 40, offset: 65486},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1760, col: 1, offset: 65491},
			expr: &seqExpr{
				pos: position{line: 1760, col: 31, offset: 65521},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1760, col: 31, offset: 65521},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1760, col: 38, offset: 65528},
						expr: &ruleRefExpr{
							pos:  position{line: 1760, col: 38, offset: 65528},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 45, offset: 65535},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1762, col: 1, offset: 65540},
			expr: &choiceExpr{
				pos: position{line: 1762, col: 29, offset: 65568},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1762, col: 30, offset: 65569},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1762, col: 30, offset: 65569},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1762, col: 37, offset: 65576},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 37, offset: 65576},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1762, col: 44, offset: 65583},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 51, offset: 65590},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1764, col: 1, offset: 65595},
			expr: &actionExpr{
				pos: position{line: 1764, col: 17, offset: 65611},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 17, offset: 65611},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1764, col: 17, offset: 65611},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1764, col: 28, offset: 65622},
								expr: &ruleRefExpr{
									pos:  position{line: 1764, col: 29, offset: 65623},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1764, col: 42, offset: 65636},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 69, offset: 65663},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 78, offset: 65672},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1764, col: 102, offset: 65696},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1768, col: 1, offset: 65813},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1768, col: 27, offset: 65839},
				expr: &actionExpr{
					pos: position{line: 1768, col: 28, offset: 65840},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1768, col: 28, offset: 65840},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1768, col: 28, offset: 65840},
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 29, offset: 65841},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1768, col: 54, offset: 65866},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1768, col: 60, offset: 65872},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1775, col: 1, offset: 66210},
			expr: &seqExpr{
				pos: position{line: 1775, col: 24, offset: 66233},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1775, col: 24, offset: 66233},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1775, col: 31, offset: 66240},
						expr: &ruleRefExpr{
							pos:  position{line: 1775, col: 31, offset: 66240},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 38, offset: 66247},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1777, col: 1, offset: 66277},
			expr: &seqExpr{
				pos: position{line: 1777, col: 29, offset: 66305},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1777, col: 29, offset: 66305},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1777, col: 36, offset: 66312},
						expr: &ruleRefExpr{
							pos:  position{line: 1777, col: 36, offset: 66312},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1777, col: 43, offset: 66319},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1779, col: 1, offset: 66349},
			expr: &choiceExpr{
				pos: position{line: 1779, col: 27, offset: 66375},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1779, col: 28, offset: 66376},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1779, col: 28, offset: 66376},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1779, col: 35, offset: 66383},
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 35, offset: 66383},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1779, col: 42, offset: 66390},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1779, col: 49, offset: 66397},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1781, col: 1, offset: 66427},
			expr: &actionExpr{
				pos: position{line: 1781, col: 15, offset: 66441},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1781, col: 15, offset: 66441},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1781, col: 15, offset: 66441},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1781, col: 26, offset: 66452},
								expr: &ruleRefExpr{
									pos:  position{line: 1781, col: 27, offset: 66453},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 40, offset: 66466},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1781, col: 65, offset: 66491},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1781, col: 74, offset: 66500},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1781, col: 101, offset: 66527},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1785, col: 1, offset: 66640},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1785, col: 30, offset: 66669},
				expr: &actionExpr{
					pos: position{line: 1785, col: 31, offset: 66670},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1785, col: 31, offset: 66670},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1785, col: 31, offset: 66670},
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 32, offset: 66671},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1785, col: 55, offset: 66694},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 61, offset: 66700},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1792, col: 1, offset: 67040},
			expr: &seqExpr{
				pos: position{line: 1792, col: 26, offset: 67065},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1792, col: 26, offset: 67065},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1792, col: 33, offset: 67072},
						expr: &ruleRefExpr{
							pos:  position{line: 1792, col: 33, offset: 67072},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1792, col: 40, offset: 67079},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1794, col: 1, offset: 67084},
			expr: &seqExpr{
				pos: position{line: 1794, col: 31, offset: 67114},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1794, col: 31, offset: 67114},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1794, col: 38, offset: 67121},
						expr: &ruleRefExpr{
							pos:  position{line: 1794, col: 38, offset: 67121},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1794, col: 45, offset: 67128},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1796, col: 1, offset: 67133},
			expr: &choiceExpr{
				pos: position{line: 1796, col: 29, offset: 67161},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1796, col: 30, offset: 67162},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1796, col: 30, offset: 67162},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1796, col: 37, offset: 67169},
								expr: &ruleRefExpr{
									pos:  position{line: 1796, col: 37, offset: 67169},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1796, col: 44, offset: 67176},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 51, offset: 67183},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1798, col: 1, offset: 67188},
			expr: &actionExpr{
				pos: position{line: 1798, col: 17, offset: 67204},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 17, offset: 67204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1798, col: 17, offset: 67204},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1798, col: 28, offset: 67215},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 29, offset: 67216},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 42, offset: 67229},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 69, offset: 67256},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 78, offset: 67265},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 102, offset: 67289},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1802, col: 1, offset: 67406},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1802, col: 27, offset: 67432},
				expr: &actionExpr{
					pos: position{line: 1802, col: 28, offset: 67433},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1802, col: 28, offset: 67433},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1802, col: 28, offset: 67433},
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 29, offset: 67434},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1802, col: 54, offset: 67459},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 60, offset: 67465},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1809, col: 1, offset: 67809},
			expr: &seqExpr{
				pos: position{line: 1809, col: 30, offset: 67838},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1809, col: 30, offset: 67838},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 37, offset: 67845},
						expr: &ruleRefExpr{
							pos:  position{line: 1809, col: 37, offset: 67845},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 44, offset: 67852},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1811, col: 1, offset: 67857},
			expr: &seqExpr{
				pos: position{line: 1811, col: 35, offset: 67891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1811, col: 35, offset: 67891},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1811, col: 42, offset: 67898},
						expr: &ruleRefExpr{
							pos:  position{line: 1811, col: 42, offset: 67898},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 49, offset: 67905},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1813, col: 1, offset: 67910},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 33, offset: 67942},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1813, col: 34, offset: 67943},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1813, col: 34, offset: 67943},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1813, col: 41, offset: 67950},
								expr: &ruleRefExpr{
									pos:  position{line: 1813, col: 41, offset: 67950},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1813, col: 48, offset: 67957},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 55, offset: 67964},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1815, col: 1, offset: 67969},
			expr: &actionExpr{
				pos: position{line: 1815, col: 21, offset: 67989},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 21, offset: 67989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1815, col: 21, offset: 67989},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1815, col: 32, offset: 68000},
								expr: &ruleRefExpr{
									pos:  position{line: 1815, col: 33, offset: 68001},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 46, offset: 68014},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 77, offset: 68045},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 86, offset: 68054},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 114, offset: 68082},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1819, col: 1, offset: 68207},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1819, col: 31, offset: 68237},
				expr: &actionExpr{
					pos: position{line: 1819, col: 32, offset: 68238},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1819, col: 32, offset: 68238},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1819, col: 32, offset: 68238},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 33, offset: 68239},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1819, col: 62, offset: 68268},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 68, offset: 68274},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1824, col: 1, offset: 68436},
			expr: &actionExpr{
				pos: position{line: 1824, col: 18, offset: 68453},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 18, offset: 68453},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1824, col: 19, offset: 68454},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1824, col: 19, offset: 68454},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 27, offset: 68462},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 37, offset: 68472},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 45, offset: 68480},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 55, offset: 68490},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1824, col: 63, offset: 68498},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1824, col: 72, offset: 68507},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1833, col: 1, offset: 68797},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 17, offset: 68813},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1833, col: 17, offset: 68813},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 19, offset: 68842},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 19, offset: 68873},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 19, offset: 68897},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 19, offset: 68934},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 19, offset: 68968},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1839, col: 19, offset: 69002},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1840, col: 19, offset: 69037},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1841, col: 19, offset: 69071},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1842, col: 19, offset: 69108},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1844, col: 1, offset: 69119},
			expr: &actionExpr{
				pos: position{line: 1844, col: 23, offset: 69141},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1844, col: 23, offset: 69141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1844, col: 23, offset: 69141},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1844, col: 32, offset: 69150},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1844, col: 37, offset: 69155},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1844, col: 37, offset: 69155},
									expr: &charClassMatcher{
										pos:        position{line: 1844, col: 37, offset: 69155},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1844, col: 76, offset: 69194},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "ReplacementsSubstitution",
			pos:  position{line: 1848, col: 1, offset: 69261},
			expr: &seqExpr{
				pos: position{line: 1848, col: 29, offset: 69289},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1848, col: 29, offset: 69289},
						expr: &choiceExpr{
							pos: position{line: 1848, col: 30, offset: 69290},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1848, col: 30, offset: 69290},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 7, offset: 69304},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1850, col: 7, offset: 69361},
									expr: &ruleRefExpr{
										pos:  position{line: 1850, col: 7, offset: 69361},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 7, offset: 69375},
									name: "ImpliedApostrophe",
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 7, offset: 69399},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 7, offset: 69424},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 7, offset: 69438},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 17, offset: 69448},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NormalBlockContentSubstitution",
			pos:  position{line: 1857, col: 1, offset: 69500},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1857, col: 35, offset: 69534},
				expr: &ruleRefExpr{
					pos:  position{line: 1857, col: 35, offset: 69534},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1859, col: 1, offset: 69555},
			expr: &actionExpr{
				pos: position{line: 1860, col: 5, offset: 69582},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1860, col: 5, offset: 69582},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1860, col: 5, offset: 69582},
							expr: &ruleRefExpr{
								pos:  position{line: 1860, col: 6, offset: 69583},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1860, col: 10, offset: 69587},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1860, col: 19, offset: 69596},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1860, col: 19, offset: 69596},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1861, col: 15, offset: 69621},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1862, col: 15, offset: 69649},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1863, col: 15, offset: 69674},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1864, col: 15, offset: 69702},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1865, col: 15, offset: 69733},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1866, col: 15, offset: 69766},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1867, col: 15, offset: 69797},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1868, col: 15, offset: 69836},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1869, col: 15, offset: 69865},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1870, col: 15, offset: 69893},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1871, col: 15, offset: 69929},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1872, col: 15, offset: 69959},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1873, col: 15, offset: 70000},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1874, col: 15, offset: 70035},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimContentSubstitution",
			pos:  position{line: 1878, col: 1, offset: 70084},
			expr: &ruleRefExpr{
				pos:  position{line: 1878, col: 32, offset: 70115},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1880, col: 1, offset: 70129},
			expr: &actionExpr{
				pos: position{line: 1880, col: 17, offset: 70145},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 17, offset: 70145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1880, col: 17, offset: 70145},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1880, col: 26, offset: 70154},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1880, col: 47, offset: 70175},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1880, col: 56, offset: 70184},
								expr: &ruleRefExpr{
									pos:  position{line: 1880, col: 57, offset: 70185},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1880, col: 68, offset: 70196},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1884, col: 1, offset: 70266},
			expr: &actionExpr{
				pos: position{line: 1884, col: 24, offset: 70289},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1884, col: 24, offset: 70289},
					expr: &seqExpr{
						pos: position{line: 1884, col: 25, offset: 70290},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1884, col: 25, offset: 70290},
								expr: &ruleRefExpr{
									pos:  position{line: 1884, col: 26, offset: 70291},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1884, col: 36, offset: 70301},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1884, col: 36, offset: 70301},
										expr: &ruleRefExpr{
											pos:  position{line: 1884, col: 36, offset: 70301},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1884, col: 45, offset: 70310},
										expr: &charClassMatcher{
											pos:        position{line: 1884, col: 45, offset: 70310},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1888, col: 1, offset: 70360},
			expr: &oneOrMoreExpr{
				pos: position{line: 1888, col: 13, offset: 70372},
				expr: &ruleRefExpr{
					pos:  position{line: 1888, col: 13, offset: 70372},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1890, col: 1, offset: 70382},
			expr: &actionExpr{
				pos: position{line: 1890, col: 12, offset: 70393},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1890, col: 12, offset: 70393},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1890, col: 12, offset: 70393},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 16, offset: 70397},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1890, col: 21, offset: 70402},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1890, col: 21, offset: 70402},
									expr: &charClassMatcher{
										pos:        position{line: 1890, col: 21, offset: 70402},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1890, col: 69, offset: 70450},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1890, col: 73, offset: 70454},
							expr: &ruleRefExpr{
								pos:  position{line: 1890, col: 73, offset: 70454},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1890, col: 80, offset: 70461},
							expr: &choiceExpr{
								pos: position{line: 1890, col: 82, offset: 70463},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1890, col: 82, offset: 70463},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1890, col: 88, offset: 70469},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubstitution",
			pos:  position{line: 1895, col: 1, offset: 70576},
			expr: &actionExpr{
				pos: position{line: 1896, col: 5, offset: 70614},
				run: (*parser).callonInlinePassthroughSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1896, col: 5, offset: 70614},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1896, col: 14, offset: 70623},
						expr: &choiceExpr{
							pos: position{line: 1896, col: 15, offset: 70624},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1896, col: 15, offset: 70624},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1897, col: 11, offset: 70653},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1898, col: 11, offset: 70714},
									expr: &ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 70714},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1899, col: 11, offset: 70732},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 11, offset: 70750},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextSubstitution",
			pos:  position{line: 1905, col: 1, offset: 70891},
			expr: &actionExpr{
				pos: position{line: 1906, col: 5, offset: 70922},
				run: (*parser).callonQuotedTextSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1906, col: 5, offset: 70922},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1906, col: 14, offset: 70931},
						expr: &choiceExpr{
							pos: position{line: 1906, col: 15, offset: 70932},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1906, col: 15, offset: 70932},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1907, col: 11, offset: 70993},
									expr: &ruleRefExpr{
										pos:  position{line: 1907, col: 11, offset: 70993},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1908, col: 11, offset: 71011},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1909, col: 11, offset: 71033},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 11, offset: 71056},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 11, offset: 71085},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1912, col: 11, offset: 71103},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAndInlineMacrosSubstitution",
			pos:  position{line: 1918, col: 1, offset: 71270},
			expr: &actionExpr{
				pos: position{line: 1919, col: 5, offset: 71316},
				run: (*parser).callonQuotedTextAndInlineMacrosSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1919, col: 5, offset: 71316},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1919, col: 14, offset: 71325},
						expr: &choiceExpr{
							pos: position{line: 1919, col: 15, offset: 71326},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1919, col: 15, offset: 71326},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1920, col: 11, offset: 71387},
									expr: &ruleRefExpr{
										pos:  position{line: 1920, col: 11, offset: 71387},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1921, col: 11, offset: 71405},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1922, col: 11, offset: 71426},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1923, col: 11, offset: 71449},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 11, offset: 71467},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacrosSubstitution",
			pos:  position{line: 1929, col: 1, offset: 71608},
			expr: &actionExpr{
				pos: position{line: 1930, col: 5, offset: 71641},
				run: (*parser).callonInlineMacrosSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1930, col: 5, offset: 71641},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1930, col: 14, offset: 71650},
						expr: &choiceExpr{
							pos: position{line: 1930, col: 15, offset: 71651},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1930, col: 15, offset: 71651},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1931, col: 11, offset: 71712},
									expr: &ruleRefExpr{
										pos:  position{line: 1931, col: 11, offset: 71712},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1932, col: 11, offset: 71730},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 71753},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1934, col: 11, offset: 71782},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 71800},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesSubstitution",
			pos:  position{line: 1940, col: 1, offset: 71945},
			expr: &actionExpr{
				pos: position{line: 1941, col: 5, offset: 71976},
				run: (*parser).callonAttributesSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1941, col: 5, offset: 71976},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1941, col: 14, offset: 71985},
						expr: &choiceExpr{
							pos: position{line: 1941, col: 15, offset: 71986},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1941, col: 15, offset: 71986},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1942, col: 11, offset: 72047},
									expr: &ruleRefExpr{
										pos:  position{line: 1942, col: 11, offset: 72047},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1943, col: 11, offset: 72065},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1944, col: 11, offset: 72097},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1945, col: 11, offset: 72126},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1946, col: 11, offset: 72144},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersSubstitution",
			pos:  position{line: 1950, col: 1, offset: 72235},
			expr: &actionExpr{
				pos: position{line: 1951, col: 5, offset: 72273},
				run: (*parser).callonSpecialCharactersSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1951, col: 5, offset: 72273},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1951, col: 14, offset: 72282},
						expr: &choiceExpr{
							pos: position{line: 1951, col: 15, offset: 72283},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1951, col: 15, offset: 72283},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 11, offset: 72310},
									name: "Word",
								},
								&oneOrMoreExpr{
									pos: position{line: 1953, col: 11, offset: 72325},
									expr: &ruleRefExpr{
										pos:  position{line: 1953, col: 11, offset: 72325},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1954, col: 11, offset: 72342},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1955, col: 11, offset: 72360},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PostReplacementsSubstitution",
			pos:  position{line: 1960, col: 1, offset: 72453},
			expr: &seqExpr{
				pos: position{line: 1960, col: 33, offset: 72485},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1960, col: 33, offset: 72485},
						expr: &choiceExpr{
							pos: position{line: 1961, col: 5, offset: 72491},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1961, col: 5, offset: 72491},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1962, col: 7, offset: 72548},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1963, col: 7, offset: 72573},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1964, col: 7, offset: 72589},
									expr: &ruleRefExpr{
										pos:  position{line: 1964, col: 7, offset: 72589},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1965, col: 7, offset: 72603},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1966, col: 7, offset: 72617},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1966, col: 17, offset: 72627},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubstitution",
			pos:  position{line: 1969, col: 1, offset: 72679},
			expr: &oneOrMoreExpr{
				pos: position{line: 1969, col: 21, offset: 72699},
				expr: &actionExpr{
					pos: position{line: 1970, col: 6, offset: 72706},
					run: (*parser).callonNoneSubstitution2,
					expr: &seqExpr{
						pos: position{line: 1970, col: 6, offset: 72706},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1970, col: 6, offset: 72706},
								expr: &charClassMatcher{
									pos:        position{line: 1970, col: 6, offset: 72706},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1970, col: 15, offset: 72715},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContentSubstitution",
			pos:  position{line: 1975, col: 1, offset: 72862},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1975, col: 34, offset: 72895},
				expr: &ruleRefExpr{
					pos:  position{line: 1975, col: 34, offset: 72895},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1977, col: 1, offset: 72915},
			expr: &actionExpr{
				pos: position{line: 1977, col: 22, offset: 72936},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1977, col: 22, offset: 72936},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1977, col: 22, offset: 72936},
							expr: &ruleRefExpr{
								pos:  position{line: 1977, col: 23, offset: 72937},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1977, col: 27, offset: 72941},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1977, col: 36, offset: 72950},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1977, col: 36, offset: 72950},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1977, col: 48, offset: 72962},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1981, col: 1, offset: 73012},
			expr: &actionExpr{
				pos: position{line: 1981, col: 24, offset: 73035},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1981, col: 24, offset: 73035},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1981, col: 30, offset: 73041},
						expr: &ruleRefExpr{
							pos:  position{line: 1981, col: 31, offset: 73042},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1985, col: 1, offset: 73132},
			expr: &actionExpr{
				pos: position{line: 1985, col: 28, offset: 73159},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1985, col: 28, offset: 73159},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1985, col: 28, offset: 73159},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1985, col: 37, offset: 73168},
								expr: &ruleRefExpr{
									pos:  position{line: 1985, col: 38, offset: 73169},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1985, col: 54, offset: 73185},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1992, col: 1, offset: 73427},
			expr: &actionExpr{
				pos: position{line: 1992, col: 10, offset: 73436},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 10, offset: 73436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1992, col: 10, offset: 73436},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1992, col: 16, offset: 73442},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1992, col: 17, offset: 73443},
									expr: &ruleRefExpr{
										pos:  position{line: 1992, col: 17, offset: 73443},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1992, col: 31, offset: 73457},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1993, col: 5, offset: 73476},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1993, col: 12, offset: 73483},
								expr: &ruleRefExpr{
									pos:  position{line: 1993, col: 13, offset: 73484},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1994, col: 5, offset: 73506},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1994, col: 11, offset: 73512},
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 12, offset: 73513},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1995, col: 6, offset: 73530},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1995, col: 6, offset: 73530},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1995, col: 23, offset: 73547},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1999, col: 1, offset: 73657},
			expr: &seqExpr{
				pos: position{line: 1999, col: 23, offset: 73679},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1999, col: 23, offset: 73679},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1999, col: 27, offset: 73683},
						expr: &ruleRefExpr{
							pos:  position{line: 1999, col: 27, offset: 73683},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2001, col: 1, offset: 73691},
			expr: &seqExpr{
				pos: position{line: 2001, col: 19, offset: 73709},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2001, col: 19, offset: 73709},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2001, col: 26, offset: 73716},
						expr: &ruleRefExpr{
							pos:  position{line: 2001, col: 26, offset: 73716},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2001, col: 33, offset: 73723},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2004, col: 1, offset: 73791},
			expr: &actionExpr{
				pos: position{line: 2004, col: 20, offset: 73810},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 20, offset: 73810},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2004, col: 20, offset: 73810},
							expr: &ruleRefExpr{
								pos:  position{line: 2004, col: 21, offset: 73811},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 36, offset: 73826},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2004, col: 42, offset: 73832},
								expr: &ruleRefExpr{
									pos:  position{line: 2004, col: 43, offset: 73833},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2004, col: 55, offset: 73845},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2004, col: 59, offset: 73849},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2008, col: 1, offset: 73917},
			expr: &actionExpr{
				pos: position{line: 2008, col: 14, offset: 73930},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2008, col: 14, offset: 73930},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2008, col: 14, offset: 73930},
							expr: &ruleRefExpr{
								pos:  position{line: 2008, col: 15, offset: 73931},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2008, col: 30, offset: 73946},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2008, col: 36, offset: 73952},
								expr: &ruleRefExpr{
									pos:  position{line: 2008, col: 37, offset: 73953},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2008, col: 49, offset: 73965},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2008, col: 53, offset: 73969},
							expr: &ruleRefExpr{
								pos:  position{line: 2008, col: 53, offset: 73969},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2012, col: 1, offset: 74038},
			expr: &actionExpr{
				pos: position{line: 2012, col: 14, offset: 74051},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 14, offset: 74051},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2012, col: 14, offset: 74051},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2012, col: 33, offset: 74070},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2012, col: 42, offset: 74079},
								expr: &seqExpr{
									pos: position{line: 2012, col: 43, offset: 74080},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2012, col: 43, offset: 74080},
											expr: &ruleRefExpr{
												pos:  position{line: 2012, col: 44, offset: 74081},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2012, col: 63, offset: 74100},
											expr: &ruleRefExpr{
												pos:  position{line: 2012, col: 64, offset: 74101},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2012, col: 68, offset: 74105},
											expr: &ruleRefExpr{
												pos:  position{line: 2012, col: 68, offset: 74105},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2012, col: 75, offset: 74112},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2012, col: 89, offset: 74126},
											expr: &ruleRefExpr{
												pos:  position{line: 2012, col: 89, offset: 74126},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 2019, col: 1, offset: 74375},
			expr: &seqExpr{
				pos: position{line: 2019, col: 26, offset: 74400},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2019, col: 26, offset: 74400},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2019, col: 33, offset: 74407},
						expr: &ruleRefExpr{
							pos:  position{line: 2019, col: 33, offset: 74407},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2019, col: 40, offset: 74414},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2021, col: 1, offset: 74419},
			expr: &seqExpr{
				pos: position{line: 2021, col: 31, offset: 74449},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2021, col: 31, offset: 74449},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2021, col: 38, offset: 74456},
						expr: &ruleRefExpr{
							pos:  position{line: 2021, col: 38, offset: 74456},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2021, col: 45, offset: 74463},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2023, col: 1, offset: 74468},
			expr: &choiceExpr{
				pos: position{line: 2023, col: 29, offset: 74496},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2023, col: 30, offset: 74497},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2023, col: 30, offset: 74497},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2023, col: 37, offset: 74504},
								expr: &ruleRefExpr{
									pos:  position{line: 2023, col: 37, offset: 74504},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2023, col: 44, offset: 74511},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2023, col: 51, offset: 74518},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2025, col: 1, offset: 74523},
			expr: &actionExpr{
				pos: position{line: 2025, col: 17, offset: 74539},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 17, offset: 74539},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2025, col: 17, offset: 74539},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2025, col: 44, offset: 74566},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2025, col: 53, offset: 74575},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2025, col: 78, offset: 74600},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2029, col: 1, offset: 74710},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2029, col: 27, offset: 74736},
				expr: &actionExpr{
					pos: position{line: 2029, col: 28, offset: 74737},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2029, col: 28, offset: 74737},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2029, col: 28, offset: 74737},
								expr: &ruleRefExpr{
									pos:  position{line: 2029, col: 29, offset: 74738},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2029, col: 54, offset: 74763},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2029, col: 60, offset: 74769},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2033, col: 1, offset: 74913},
			expr: &actionExpr{
				pos: position{line: 2033, col: 22, offset: 74934},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2033, col: 22, offset: 74934},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2033, col: 22, offset: 74934},
							expr: &ruleRefExpr{
								pos:  position{line: 2033, col: 23, offset: 74935},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2033, col: 45, offset: 74957},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 50, offset: 74962},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2033, col: 59, offset: 74971},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2033, col: 85, offset: 74997},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2037, col: 1, offset: 75062},
			expr: &actionExpr{
				pos: position{line: 2037, col: 29, offset: 75090},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2037, col: 29, offset: 75090},
					expr: &charClassMatcher{
						pos:        position{line: 2037, col: 29, offset: 75090},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2045, col: 1, offset: 75403},
			expr: &choiceExpr{
				pos: position{line: 2045, col: 17, offset: 75419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2045, col: 17, offset: 75419},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 49, offset: 75451},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2045, col: 78, offset: 75480},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2047, col: 1, offset: 75516},
			expr: &litMatcher{
				pos:        position{line: 2047, col: 26, offset: 75541},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2050, col: 1, offset: 75613},
			expr: &actionExpr{
				pos: position{line: 2050, col: 31, offset: 75643},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2050, col: 31, offset: 75643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2050, col: 31, offset: 75643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2050, col: 42, offset: 75654},
								expr: &ruleRefExpr{
									pos:  position{line: 2050, col: 43, offset: 75655},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2050, col: 56, offset: 75668},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2050, col: 63, offset: 75675},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2055, col: 1, offset: 75905},
			expr: &actionExpr{
				pos: position{line: 2056, col: 5, offset: 75945},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2056, col: 5, offset: 75945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2056, col: 5, offset: 75945},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2056, col: 16, offset: 75956},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2056, col: 16, offset: 75956},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2056, col: 16, offset: 75956},
											expr: &ruleRefExpr{
												pos:  position{line: 2056, col: 16, offset: 75956},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2056, col: 23, offset: 75963},
											expr: &charClassMatcher{
												pos:        position{line: 2056, col: 23, offset: 75963},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2058, col: 8, offset: 76016},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2059, col: 5, offset: 76079},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2059, col: 16, offset: 76090},
								expr: &actionExpr{
									pos: position{line: 2060, col: 9, offset: 76100},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2060, col: 9, offset: 76100},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2060, col: 9, offset: 76100},
												expr: &ruleRefExpr{
													pos:  position{line: 2060, col: 10, offset: 76101},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2061, col: 9, offset: 76120},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2061, col: 20, offset: 76131},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2061, col: 20, offset: 76131},
														expr: &charClassMatcher{
															pos:        position{line: 2061, col: 20, offset: 76131},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2063, col: 12, offset: 76192},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2070, col: 1, offset: 76422},
			expr: &actionExpr{
				pos: position{line: 2070, col: 39, offset: 76460},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2070, col: 39, offset: 76460},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2070, col: 39, offset: 76460},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2070, col: 50, offset: 76471},
								expr: &ruleRefExpr{
									pos:  position{line: 2070, col: 51, offset: 76472},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2071, col: 9, offset: 76493},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2071, col: 31, offset: 76515},
							expr: &ruleRefExpr{
								pos:  position{line: 2071, col: 31, offset: 76515},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2071, col: 38, offset: 76522},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2071, col: 46, offset: 76530},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2071, col: 53, offset: 76537},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2071, col: 95, offset: 76579},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2071, col: 96, offset: 76580},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2071, col: 96, offset: 76580},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2071, col: 118, offset: 76602},
											expr: &ruleRefExpr{
												pos:  position{line: 2071, col: 118, offset: 76602},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2071, col: 125, offset: 76609},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2071, col: 132, offset: 76616},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2076, col: 1, offset: 76775},
			expr: &actionExpr{
				pos: position{line: 2076, col: 44, offset: 76818},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2076, col: 44, offset: 76818},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2076, col: 50, offset: 76824},
						expr: &ruleRefExpr{
							pos:  position{line: 2076, col: 51, offset: 76825},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2080, col: 1, offset: 76909},
			expr: &actionExpr{
				pos: position{line: 2081, col: 5, offset: 76964},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2081, col: 5, offset: 76964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2081, col: 5, offset: 76964},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2081, col: 11, offset: 76970},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2081, col: 11, offset: 76970},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2081, col: 11, offset: 76970},
											expr: &ruleRefExpr{
												pos:  position{line: 2081, col: 12, offset: 76971},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2081, col: 34, offset: 76993},
											expr: &charClassMatcher{
												pos:        position{line: 2081, col: 34, offset: 76993},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2083, col: 8, offset: 77046},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2088, col: 1, offset: 77172},
			expr: &actionExpr{
				pos: position{line: 2089, col: 5, offset: 77210},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2089, col: 5, offset: 77210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2089, col: 5, offset: 77210},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2089, col: 16, offset: 77221},
								expr: &ruleRefExpr{
									pos:  position{line: 2089, col: 17, offset: 77222},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2090, col: 5, offset: 77239},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2097, col: 5, offset: 77446},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2097, col: 12, offset: 77453},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2101, col: 1, offset: 77603},
			expr: &actionExpr{
				pos: position{line: 2101, col: 16, offset: 77618},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2101, col: 16, offset: 77618},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2106, col: 1, offset: 77701},
			expr: &actionExpr{
				pos: position{line: 2106, col: 39, offset: 77739},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2106, col: 39, offset: 77739},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2106, col: 45, offset: 77745},
						expr: &ruleRefExpr{
							pos:  position{line: 2106, col: 46, offset: 77746},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2110, col: 1, offset: 77826},
			expr: &actionExpr{
				pos: position{line: 2110, col: 38, offset: 77863},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2110, col: 38, offset: 77863},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2110, col: 38, offset: 77863},
							expr: &ruleRefExpr{
								pos:  position{line: 2110, col: 39, offset: 77864},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2110, col: 49, offset: 77874},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2110, col: 58, offset: 77883},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2110, col: 58, offset: 77883},
									expr: &charClassMatcher{
										pos:        position{line: 2110, col: 58, offset: 77883},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2112, col: 4, offset: 77928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2119, col: 1, offset: 78114},
			expr: &actionExpr{
				pos: position{line: 2119, col: 14, offset: 78127},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2119, col: 14, offset: 78127},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2119, col: 14, offset: 78127},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2119, col: 19, offset: 78132},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2119, col: 25, offset: 78138},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2119, col: 43, offset: 78156},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2123, col: 1, offset: 78221},
			expr: &actionExpr{
				pos: position{line: 2123, col: 21, offset: 78241},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2123, col: 21, offset: 78241},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2123, col: 30, offset: 78250},
						expr: &choiceExpr{
							pos: position{line: 2123, col: 31, offset: 78251},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2123, col: 31, offset: 78251},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 38, offset: 78258},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 53, offset: 78273},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 66, offset: 78286},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 74, offset: 78294},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 93, offset: 78313},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2123, col: 114, offset: 78334},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2123, col: 115, offset: 78335},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2123, col: 115, offset: 78335},
												expr: &litMatcher{
													pos:        position{line: 2123, col: 116, offset: 78336},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2123, col: 121, offset: 78341,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2129, col: 1, offset: 78447},
			expr: &actionExpr{
				pos: position{line: 2129, col: 23, offset: 78469},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2129, col: 23, offset: 78469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2129, col: 23, offset: 78469},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2129, col: 29, offset: 78475},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2129, col: 36, offset: 78482},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2130, col: 5, offset: 78514},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2130, col: 11, offset: 78520},
								expr: &actionExpr{
									pos: position{line: 2130, col: 12, offset: 78521},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2130, col: 12, offset: 78521},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2130, col: 12, offset: 78521},
												expr: &ruleRefExpr{
													pos:  position{line: 2130, col: 12, offset: 78521},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2130, col: 19, offset: 78528},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2130, col: 23, offset: 78532},
												expr: &ruleRefExpr{
													pos:  position{line: 2130, col: 23, offset: 78532},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2130, col: 30, offset: 78539},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2130, col: 39, offset: 78548},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2131, col: 5, offset: 78606},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2131, col: 11, offset: 78612},
								expr: &actionExpr{
									pos: position{line: 2131, col: 12, offset: 78613},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2131, col: 12, offset: 78613},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2131, col: 12, offset: 78613},
												expr: &ruleRefExpr{
													pos:  position{line: 2131, col: 12, offset: 78613},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2131, col: 19, offset: 78620},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2131, col: 23, offset: 78624},
												expr: &ruleRefExpr{
													pos:  position{line: 2131, col: 23, offset: 78624},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2131, col: 30, offset: 78631},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2131, col: 39, offset: 78640},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2132, col: 5, offset: 78698},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2136, col: 1, offset: 78777},
			expr: &actionExpr{
				pos: position{line: 2136, col: 30, offset: 78806},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2136, col: 30, offset: 78806},
					expr: &choiceExpr{
						pos: position{line: 2136, col: 31, offset: 78807},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2136, col: 31, offset: 78807},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2136, col: 42, offset: 78818},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2143, col: 1, offset: 78967},
			expr: &actionExpr{
				pos: position{line: 2143, col: 14, offset: 78980},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2143, col: 14, offset: 78980},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2143, col: 14, offset: 78980},
							expr: &ruleRefExpr{
								pos:  position{line: 2143, col: 15, offset: 78981},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2143, col: 19, offset: 78985},
							expr: &ruleRefExpr{
								pos:  position{line: 2143, col: 19, offset: 78985},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2143, col: 26, offset: 78992},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2151, col: 1, offset: 79137},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 11, offset: 79147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2151, col: 11, offset: 79147},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2151, col: 24, offset: 79160},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2151, col: 36, offset: 79172},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2151, col: 48, offset: 79184},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2151, col: 61, offset: 79197},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2153, col: 1, offset: 79207},
			expr: &actionExpr{
				pos: position{line: 2153, col: 15, offset: 79221},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2153, col: 15, offset: 79221},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2156, col: 1, offset: 79274},
			expr: &actionExpr{
				pos: position{line: 2156, col: 14, offset: 79287},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2156, col: 14, offset: 79287},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2159, col: 1, offset: 79341},
			expr: &actionExpr{
				pos: position{line: 2159, col: 14, offset: 79354},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2159, col: 14, offset: 79354},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2162, col: 1, offset: 79409},
			expr: &actionExpr{
				pos: position{line: 2162, col: 15, offset: 79423},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2162, col: 15, offset: 79423},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2165, col: 1, offset: 79477},
			expr: &actionExpr{
				pos: position{line: 2165, col: 13, offset: 79489},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2165, col: 13, offset: 79489},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2173, col: 1, offset: 79766},
			expr: &actionExpr{
				pos: position{line: 2173, col: 22, offset: 79787},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2173, col: 22, offset: 79787},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2173, col: 22, offset: 79787},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2173, col: 31, offset: 79796},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2173, col: 35, offset: 79800},
							expr: &charClassMatcher{
								pos:        position{line: 2173, col: 36, offset: 79801},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2182, col: 1, offset: 80163},
			expr: &choiceExpr{
				pos: position{line: 2182, col: 21, offset: 80183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2182, col: 21, offset: 80183},
						name: "InternalCrossReference",
					},
					&actionExpr{
						pos: position{line: 2182, col: 46, offset: 80208},
						run: (*parser).callonSpecialCharacter3,
						expr: &ruleRefExpr{
							pos:  position{line: 2182, col: 46, offset: 80208},
							name: "Callout",
						},
					},
					&actionExpr{
						pos: position{line: 2185, col: 9, offset: 80370},
						run: (*parser).callonSpecialCharacter5,
						expr: &choiceExpr{
							pos: position{line: 2185, col: 10, offset: 80371},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2185, col: 10, offset: 80371},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2185, col: 16, offset: 80377},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2185, col: 22, offset: 80383},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2192, col: 1, offset: 80561},
			expr: &charClassMatcher{
				pos:        position{line: 2192, col: 13, offset: 80573},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2194, col: 1, offset: 80583},
			expr: &choiceExpr{
				pos: position{line: 2194, col: 16, offset: 80598},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2194, col: 16, offset: 80598},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2194, col: 22, offset: 80604},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2194, col: 28, offset: 80610},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2194, col: 34, offset: 80616},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2194, col: 40, offset: 80622},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2194, col: 46, offset: 80628},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2196, col: 1, offset: 80634},
			expr: &actionExpr{
				pos: position{line: 2196, col: 14, offset: 80647},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2196, col: 14, offset: 80647},
					expr: &charClassMatcher{
						pos:        position{line: 2196, col: 14, offset: 80647},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2200, col: 1, offset: 80693},
			expr: &choiceExpr{
				pos: position{line: 2204, col: 5, offset: 81020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2204, col: 5, offset: 81020},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2204, col: 5, offset: 81020},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2204, col: 5, offset: 81020},
									expr: &charClassMatcher{
										pos:        position{line: 2204, col: 5, offset: 81020},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2204, col: 15, offset: 81030},
									expr: &choiceExpr{
										pos: position{line: 2204, col: 17, offset: 81032},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2204, col: 17, offset: 81032},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2204, col: 30, offset: 81045},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2206, col: 9, offset: 81115},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2206, col: 9, offset: 81115},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2206, col: 9, offset: 81115},
									expr: &charClassMatcher{
										pos:        position{line: 2206, col: 9, offset: 81115},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2206, col: 19, offset: 81125},
									expr: &seqExpr{
										pos: position{line: 2206, col: 20, offset: 81126},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2206, col: 20, offset: 81126},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2206, col: 27, offset: 81133},
												expr: &charClassMatcher{
													pos:        position{line: 2206, col: 27, offset: 81133},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2210, col: 1, offset: 81209},
			expr: &choiceExpr{
				pos: position{line: 2211, col: 5, offset: 81290},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2211, col: 5, offset: 81290},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2211, col: 5, offset: 81290},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2211, col: 5, offset: 81290},
									expr: &charClassMatcher{
										pos:        position{line: 2211, col: 5, offset: 81290},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2211, col: 19, offset: 81304},
									expr: &choiceExpr{
										pos: position{line: 2211, col: 21, offset: 81306},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2211, col: 21, offset: 81306},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2211, col: 31, offset: 81316},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2213, col: 9, offset: 81385},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2216, col: 1, offset: 81485},
			expr: &actionExpr{
				pos: position{line: 2216, col: 12, offset: 81496},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2216, col: 12, offset: 81496},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2220, col: 1, offset: 81561},
			expr: &actionExpr{
				pos: position{line: 2220, col: 17, offset: 81577},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2220, col: 17, offset: 81577},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2220, col: 22, offset: 81582},
						expr: &choiceExpr{
							pos: position{line: 2220, col: 23, offset: 81583},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2220, col: 23, offset: 81583},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2220, col: 34, offset: 81594},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2224, col: 1, offset: 81675},
			expr: &actionExpr{
				pos: position{line: 2224, col: 25, offset: 81699},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2224, col: 25, offset: 81699},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2224, col: 30, offset: 81704},
						expr: &charClassMatcher{
							pos:        position{line: 2224, col: 31, offset: 81705},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2228, col: 1, offset: 81777},
			expr: &actionExpr{
				pos: position{line: 2228, col: 13, offset: 81789},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2228, col: 13, offset: 81789},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2228, col: 13, offset: 81789},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2228, col: 20, offset: 81796},
								expr: &ruleRefExpr{
									pos:  position{line: 2228, col: 21, offset: 81797},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2228, col: 34, offset: 81810},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2228, col: 39, offset: 81815},
								expr: &choiceExpr{
									pos: position{line: 2228, col: 40, offset: 81816},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2228, col: 40, offset: 81816},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2228, col: 52, offset: 81828},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2232, col: 1, offset: 81913},
			expr: &actionExpr{
				pos: position{line: 2232, col: 23, offset: 81935},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2232, col: 23, offset: 81935},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2232, col: 23, offset: 81935},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2232, col: 31, offset: 81943},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2232, col: 43, offset: 81955},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2232, col: 48, offset: 81960},
								expr: &choiceExpr{
									pos: position{line: 2232, col: 49, offset: 81961},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2232, col: 49, offset: 81961},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2232, col: 60, offset: 81972},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2236, col: 1, offset: 82057},
			expr: &oneOrMoreExpr{
				pos: position{line: 2236, col: 13, offset: 82069},
				expr: &charClassMatcher{
					pos:        position{line: 2236, col: 14, offset: 82070},
					val:        "[^\\r\\n[\\]\\uFFFD ]",
					chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2238, col: 1, offset: 82138},
			expr: &actionExpr{
				pos: position{line: 2238, col: 21, offset: 82158},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2238, col: 21, offset: 82158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2238, col: 21, offset: 82158},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2238, col: 29, offset: 82166},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2238, col: 41, offset: 82178},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2238, col: 47, offset: 82184},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2243, col: 1, offset: 82432},
			expr: &oneOrMoreExpr{
				pos: position{line: 2243, col: 22, offset: 82453},
				expr: &charClassMatcher{
					pos:        position{line: 2243, col: 23, offset: 82454},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2245, col: 1, offset: 82586},
			expr: &actionExpr{
				pos: position{line: 2245, col: 9, offset: 82594},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2245, col: 9, offset: 82594},
					expr: &charClassMatcher{
						pos:        position{line: 2245, col: 9, offset: 82594},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2249, col: 1, offset: 82642},
			expr: &choiceExpr{
				pos: position{line: 2249, col: 15, offset: 82656},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2249, col: 15, offset: 82656},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 27, offset: 82668},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 40, offset: 82681},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 51, offset: 82692},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2249, col: 62, offset: 82703},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2251, col: 1, offset: 82714},
			expr: &actionExpr{
				pos: position{line: 2251, col: 7, offset: 82720},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2251, col: 7, offset: 82720},
					expr: &charClassMatcher{
						pos:        position{line: 2251, col: 7, offset: 82720},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2255, col: 1, offset: 82845},
			expr: &actionExpr{
				pos: position{line: 2255, col: 10, offset: 82854},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2255, col: 10, offset: 82854},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2259, col: 1, offset: 82896},
			expr: &actionExpr{
				pos: position{line: 2259, col: 11, offset: 82906},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2259, col: 11, offset: 82906},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2259, col: 11, offset: 82906},
							expr: &litMatcher{
								pos:        position{line: 2259, col: 11, offset: 82906},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2259, col: 16, offset: 82911},
							expr: &ruleRefExpr{
								pos:  position{line: 2259, col: 16, offset: 82911},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2263, col: 1, offset: 82963},
			expr: &choiceExpr{
				pos: position{line: 2263, col: 10, offset: 82972},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2263, col: 10, offset: 82972},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2263, col: 16, offset: 82978},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2263, col: 16, offset: 82978},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2267, col: 1, offset: 83019},
			expr: &choiceExpr{
				pos: position{line: 2267, col: 12, offset: 83030},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2267, col: 12, offset: 83030},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2267, col: 21, offset: 83039},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2267, col: 28, offset: 83046},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2269, col: 1, offset: 83052},
			expr: &notExpr{
				pos: position{line: 2269, col: 8, offset: 83059},
				expr: &anyMatcher{
					line: 2269, col: 9, offset: 83060,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2271, col: 1, offset: 83063},
			expr: &choiceExpr{
				pos: position{line: 2271, col: 8, offset: 83070},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2271, col: 8, offset: 83070},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2271, col: 18, offset: 83080},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value)
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueSingleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted7()
}

func (c *current) onAttrValueSingleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1(stack["elements"])
}

func (c *current) onAttrValueDoubleQuoted7() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttrValueDoubleQuoted7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted7()
}

func (c *current) onAttrValueDoubleQuoted1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1(stack["elements"])
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph34(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph34(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value)
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value)
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onInlinePassthroughSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlinePassthroughSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthroughSubstitution1(stack["elements"])
}

func (c *current) onQuotedTextSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonQuotedTextSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubstitution1(stack["elements"])
}

func (c *current) onQuotedTextAndInlineMacrosSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonQuotedTextAndInlineMacrosSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAndInlineMacrosSubstitution1(stack["elements"])
}

func (c *current) onInlineMacrosSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineMacrosSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacrosSubstitution1(stack["elements"])
}

func (c *current) onAttributesSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonAttributesSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesSubstitution1(stack["elements"])
}

func (c *current) onSpecialCharactersSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonSpecialCharactersSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersSubstitution1(stack["elements"])
}

func (c *current) onNoneSubstitution2() (interface{}, error) {
	// just text
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubstitution2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubstitution2()
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter3() (interface{}, error) {
	// if we have a InternalCrossReference or a Callout, we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter3()
}

func (c *current) onSpecialCharacter5() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter5()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
