// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1331},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1358},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1411},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1430},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1456},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1481},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1507},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1532},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1559},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1589},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1616},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1652},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1677},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1710},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1737},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1775},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1801},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1833},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1846},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1892},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1899},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1900},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1939},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 1976},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 1976},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 1976},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 1977},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 1987},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 68, col: 9, offset: 2004},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 68, col: 9, offset: 2004},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2026},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2052},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2104},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2129},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2180},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2207},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2264},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2300},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2325},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2358},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2385},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2423},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2449},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 87, col: 1, offset: 2491},
			expr: &labeledExpr{
				pos:   position{line: 87, col: 23, offset: 2513},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 87, col: 30, offset: 2520},
					expr: &ruleRefExpr{
						pos:  position{line: 87, col: 31, offset: 2521},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 89, col: 1, offset: 2544},
			expr: &actionExpr{
				pos: position{line: 89, col: 22, offset: 2565},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 89, col: 22, offset: 2565},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 89, col: 22, offset: 2565},
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 23, offset: 2566},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 5, offset: 2576},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 90, col: 12, offset: 2583},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 90, col: 12, offset: 2583},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2595},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 97, col: 1, offset: 2748},
			expr: &ruleRefExpr{
				pos:  position{line: 97, col: 16, offset: 2763},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 99, col: 1, offset: 2783},
			expr: &actionExpr{
				pos: position{line: 99, col: 20, offset: 2802},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 99, col: 20, offset: 2802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 20, offset: 2802},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 41, offset: 2823},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 99, col: 49, offset: 2831},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 50, offset: 2832},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 75, offset: 2857},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 103, col: 1, offset: 2941},
			expr: &seqExpr{
				pos: position{line: 103, col: 26, offset: 2966},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 103, col: 26, offset: 2966},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 103, col: 32, offset: 2972},
						expr: &ruleRefExpr{
							pos:  position{line: 103, col: 32, offset: 2972},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 39, offset: 2979},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 105, col: 1, offset: 2986},
			expr: &actionExpr{
				pos: position{line: 105, col: 27, offset: 3012},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 105, col: 27, offset: 3012},
					expr: &oneOrMoreExpr{
						pos: position{line: 105, col: 28, offset: 3013},
						expr: &seqExpr{
							pos: position{line: 105, col: 29, offset: 3014},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 105, col: 29, offset: 3014},
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3015},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 105, col: 51, offset: 3036,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 112, col: 1, offset: 3209},
			expr: &actionExpr{
				pos: position{line: 112, col: 19, offset: 3227},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 112, col: 19, offset: 3227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 112, col: 19, offset: 3227},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 112, col: 23, offset: 3231},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 23, offset: 3231},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 30, offset: 3238},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 37, offset: 3245},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 52, offset: 3260},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 56, offset: 3264},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 56, offset: 3264},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 74, offset: 3282},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 113, col: 9, offset: 3295},
							expr: &choiceExpr{
								pos: position{line: 113, col: 10, offset: 3296},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3296},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 113, col: 30, offset: 3316},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 9, offset: 3340},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 18, offset: 3349},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 18, offset: 3349},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 9, offset: 3377},
							expr: &choiceExpr{
								pos: position{line: 115, col: 10, offset: 3378},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 115, col: 10, offset: 3378},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 115, col: 30, offset: 3398},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 9, offset: 3422},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 116, col: 19, offset: 3432},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 19, offset: 3432},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 120, col: 1, offset: 3537},
			expr: &choiceExpr{
				pos: position{line: 120, col: 20, offset: 3556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 20, offset: 3556},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 48, offset: 3584},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 122, col: 1, offset: 3616},
			expr: &actionExpr{
				pos: position{line: 122, col: 30, offset: 3645},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 30, offset: 3645},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 30, offset: 3645},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 30, offset: 3645},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 122, col: 37, offset: 3652},
							expr: &litMatcher{
								pos:        position{line: 122, col: 38, offset: 3653},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 42, offset: 3657},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 122, col: 51, offset: 3666},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 51, offset: 3666},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 68, offset: 3683},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 126, col: 1, offset: 3757},
			expr: &actionExpr{
				pos: position{line: 126, col: 33, offset: 3789},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 126, col: 33, offset: 3789},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 33, offset: 3789},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 33, offset: 3789},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 40, offset: 3796},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 51, offset: 3807},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 59, offset: 3815},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 75, offset: 3831},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 130, col: 1, offset: 3914},
			expr: &actionExpr{
				pos: position{line: 130, col: 19, offset: 3932},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 130, col: 19, offset: 3932},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 19, offset: 3932},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 19, offset: 3932},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 26, offset: 3939},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 36, offset: 3949},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 56, offset: 3969},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 130, col: 62, offset: 3975},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 63, offset: 3976},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 85, offset: 3998},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 85, offset: 3998},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 130, col: 92, offset: 4005},
							expr: &litMatcher{
								pos:        position{line: 130, col: 92, offset: 4005},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 97, offset: 4010},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 97, offset: 4010},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 135, col: 1, offset: 4160},
			expr: &actionExpr{
				pos: position{line: 135, col: 23, offset: 4182},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 135, col: 23, offset: 4182},
					expr: &charClassMatcher{
						pos:        position{line: 135, col: 23, offset: 4182},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 139, col: 1, offset: 4233},
			expr: &actionExpr{
				pos: position{line: 139, col: 24, offset: 4256},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 139, col: 24, offset: 4256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 139, col: 24, offset: 4256},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 28, offset: 4260},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 139, col: 35, offset: 4267},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 139, col: 36, offset: 4268},
									expr: &charClassMatcher{
										pos:        position{line: 139, col: 36, offset: 4268},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 141, col: 4, offset: 4317},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 147, col: 1, offset: 4484},
			expr: &actionExpr{
				pos: position{line: 147, col: 21, offset: 4504},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 147, col: 21, offset: 4504},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 147, col: 21, offset: 4504},
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 21, offset: 4504},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 147, col: 28, offset: 4511},
							expr: &litMatcher{
								pos:        position{line: 147, col: 29, offset: 4512},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 33, offset: 4516},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 148, col: 9, offset: 4536},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 148, col: 10, offset: 4537},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 148, col: 10, offset: 4537},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 148, col: 10, offset: 4537},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 148, col: 21, offset: 4548},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 45, offset: 4572},
													expr: &litMatcher{
														pos:        position{line: 148, col: 45, offset: 4572},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 50, offset: 4577},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 58, offset: 4585},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 59, offset: 4586},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 148, col: 82, offset: 4609},
													expr: &litMatcher{
														pos:        position{line: 148, col: 82, offset: 4609},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 148, col: 87, offset: 4614},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 148, col: 97, offset: 4624},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 98, offset: 4625},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 150, col: 15, offset: 4744},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 150, col: 15, offset: 4744},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 150, col: 15, offset: 4744},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 150, col: 24, offset: 4753},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 150, col: 46, offset: 4775},
													expr: &litMatcher{
														pos:        position{line: 150, col: 46, offset: 4775},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 150, col: 51, offset: 4780},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 150, col: 61, offset: 4790},
														expr: &ruleRefExpr{
															pos:  position{line: 150, col: 62, offset: 4791},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 13, offset: 4902},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 157, col: 1, offset: 5037},
			expr: &choiceExpr{
				pos: position{line: 157, col: 27, offset: 5063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 27, offset: 5063},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 157, col: 27, offset: 5063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 157, col: 27, offset: 5063},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 32, offset: 5068},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 157, col: 39, offset: 5075},
									expr: &charClassMatcher{
										pos:        position{line: 157, col: 39, offset: 5075},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 5125},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 5125},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 159, col: 5, offset: 5125},
									expr: &litMatcher{
										pos:        position{line: 159, col: 5, offset: 5125},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 159, col: 11, offset: 5131},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 159, col: 18, offset: 5138},
									expr: &charClassMatcher{
										pos:        position{line: 159, col: 18, offset: 5138},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 159, col: 29, offset: 5149},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 29, offset: 5149},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 159, col: 36, offset: 5156},
									expr: &litMatcher{
										pos:        position{line: 159, col: 37, offset: 5157},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 163, col: 1, offset: 5201},
			expr: &actionExpr{
				pos: position{line: 163, col: 25, offset: 5225},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 25, offset: 5225},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 25, offset: 5225},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 167, col: 1, offset: 5275},
			expr: &actionExpr{
				pos: position{line: 167, col: 27, offset: 5301},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 167, col: 27, offset: 5301},
					expr: &charClassMatcher{
						pos:        position{line: 167, col: 27, offset: 5301},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 174, col: 1, offset: 5461},
			expr: &actionExpr{
				pos: position{line: 174, col: 25, offset: 5485},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 174, col: 25, offset: 5485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 174, col: 25, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 29, offset: 5489},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 35, offset: 5495},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 174, col: 50, offset: 5510},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 9, offset: 5524},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 175, col: 15, offset: 5530},
								expr: &actionExpr{
									pos: position{line: 175, col: 16, offset: 5531},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 175, col: 17, offset: 5532},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 175, col: 17, offset: 5532},
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 17, offset: 5532},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 175, col: 24, offset: 5539},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 175, col: 31, offset: 5546},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 13, offset: 5622},
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 13, offset: 5622},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 20, offset: 5629},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 184, col: 1, offset: 5876},
			expr: &actionExpr{
				pos: position{line: 184, col: 18, offset: 5893},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 184, col: 18, offset: 5893},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 184, col: 18, offset: 5893},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 28, offset: 5903},
							expr: &charClassMatcher{
								pos:        position{line: 184, col: 29, offset: 5904},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 188, col: 1, offset: 5956},
			expr: &actionExpr{
				pos: position{line: 188, col: 30, offset: 5985},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 188, col: 30, offset: 5985},
					expr: &charClassMatcher{
						pos:        position{line: 188, col: 30, offset: 5985},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 192, col: 1, offset: 6034},
			expr: &choiceExpr{
				pos: position{line: 192, col: 19, offset: 6052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 192, col: 19, offset: 6052},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 192, col: 19, offset: 6052},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 192, col: 19, offset: 6052},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 192, col: 24, offset: 6057},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 30, offset: 6063},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 192, col: 45, offset: 6078},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 192, col: 49, offset: 6082},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 49, offset: 6082},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 192, col: 56, offset: 6089},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 6151},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 6151},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 194, col: 5, offset: 6151},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 9, offset: 6155},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 15, offset: 6161},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 194, col: 30, offset: 6176},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 194, col: 35, offset: 6181},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 35, offset: 6181},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 6188},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 198, col: 1, offset: 6251},
			expr: &actionExpr{
				pos: position{line: 198, col: 26, offset: 6276},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 198, col: 26, offset: 6276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 198, col: 26, offset: 6276},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 30, offset: 6280},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 36, offset: 6286},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 51, offset: 6301},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 202, col: 1, offset: 6371},
			expr: &actionExpr{
				pos: position{line: 202, col: 15, offset: 6385},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 202, col: 15, offset: 6385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 15, offset: 6385},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 202, col: 21, offset: 6391},
								expr: &ruleRefExpr{
									pos:  position{line: 202, col: 22, offset: 6392},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 202, col: 41, offset: 6411},
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 41, offset: 6411},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 206, col: 1, offset: 6485},
			expr: &actionExpr{
				pos: position{line: 206, col: 21, offset: 6505},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 206, col: 21, offset: 6505},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 206, col: 21, offset: 6505},
							expr: &choiceExpr{
								pos: position{line: 206, col: 23, offset: 6507},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 206, col: 23, offset: 6507},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 29, offset: 6513},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 206, col: 35, offset: 6519},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 5, offset: 6596},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 207, col: 11, offset: 6602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 207, col: 11, offset: 6602},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6624},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6649},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6687},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6716},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6745},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6773},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6801},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6839},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6876},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 220, col: 1, offset: 6983},
			expr: &actionExpr{
				pos: position{line: 220, col: 14, offset: 6996},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 220, col: 14, offset: 6996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 14, offset: 6996},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 19, offset: 7001},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 23, offset: 7005},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 27, offset: 7009},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 220, col: 32, offset: 7014},
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 32, offset: 7014},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 39, offset: 7021},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 224, col: 1, offset: 7077},
			expr: &actionExpr{
				pos: position{line: 224, col: 20, offset: 7096},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 224, col: 20, offset: 7096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 20, offset: 7096},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 25, offset: 7101},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 29, offset: 7105},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 33, offset: 7109},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 224, col: 38, offset: 7114},
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 38, offset: 7114},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 230, col: 1, offset: 7397},
			expr: &actionExpr{
				pos: position{line: 230, col: 17, offset: 7413},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 230, col: 17, offset: 7413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 230, col: 17, offset: 7413},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 21, offset: 7417},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 28, offset: 7424},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 230, col: 49, offset: 7445},
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 49, offset: 7445},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 56, offset: 7452},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 234, col: 1, offset: 7514},
			expr: &actionExpr{
				pos: position{line: 234, col: 24, offset: 7537},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 234, col: 24, offset: 7537},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 234, col: 24, offset: 7537},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 234, col: 32, offset: 7545},
							expr: &charClassMatcher{
								pos:        position{line: 234, col: 32, offset: 7545},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 240, col: 1, offset: 7804},
			expr: &actionExpr{
				pos: position{line: 240, col: 31, offset: 7834},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 240, col: 31, offset: 7834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 240, col: 31, offset: 7834},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 240, col: 35, offset: 7838},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 240, col: 42, offset: 7845},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 240, col: 42, offset: 7845},
										expr: &ruleRefExpr{
											pos:  position{line: 240, col: 42, offset: 7845},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 240, col: 57, offset: 7860},
										expr: &ruleRefExpr{
											pos:  position{line: 240, col: 57, offset: 7860},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 240, col: 69, offset: 7872},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 240, col: 73, offset: 7876},
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 73, offset: 7876},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 240, col: 80, offset: 7883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 244, col: 1, offset: 7941},
			expr: &choiceExpr{
				pos: position{line: 244, col: 15, offset: 7955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 15, offset: 7955},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 31, offset: 7971},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 46, offset: 7986},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 248, col: 1, offset: 8218},
			expr: &actionExpr{
				pos: position{line: 248, col: 18, offset: 8235},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 248, col: 18, offset: 8235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 18, offset: 8235},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 22, offset: 8239},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 248, col: 29, offset: 8246},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 248, col: 29, offset: 8246},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 29, offset: 8246},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 248, col: 45, offset: 8262},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 45, offset: 8262},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 248, col: 60, offset: 8277},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 60, offset: 8277},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 248, col: 82, offset: 8299},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 82, offset: 8299},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 248, col: 104, offset: 8321},
										expr: &ruleRefExpr{
											pos:  position{line: 248, col: 104, offset: 8321},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 116, offset: 8333},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 120, offset: 8337},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 252, col: 1, offset: 8395},
			expr: &actionExpr{
				pos: position{line: 252, col: 19, offset: 8413},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 252, col: 19, offset: 8413},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 252, col: 25, offset: 8419},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 256, col: 1, offset: 8493},
			expr: &actionExpr{
				pos: position{line: 256, col: 25, offset: 8517},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 256, col: 25, offset: 8517},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 25, offset: 8517},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 25, offset: 8517},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 32, offset: 8524},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 36, offset: 8528},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 36, offset: 8528},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 43, offset: 8535},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 256, col: 49, offset: 8541},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 49, offset: 8541},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 263, col: 1, offset: 8698},
			expr: &actionExpr{
				pos: position{line: 263, col: 25, offset: 8722},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 263, col: 25, offset: 8722},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 25, offset: 8722},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 25, offset: 8722},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 32, offset: 8729},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 36, offset: 8733},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 36, offset: 8733},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 263, col: 43, offset: 8740},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 49, offset: 8746},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 49, offset: 8746},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 270, col: 1, offset: 8903},
			expr: &actionExpr{
				pos: position{line: 270, col: 21, offset: 8923},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 270, col: 21, offset: 8923},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 21, offset: 8923},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 33, offset: 8935},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 33, offset: 8935},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 40, offset: 8942},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 274, col: 1, offset: 8998},
			expr: &actionExpr{
				pos: position{line: 274, col: 30, offset: 9027},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 274, col: 30, offset: 9027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 30, offset: 9027},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 274, col: 39, offset: 9036},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 39, offset: 9036},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 274, col: 46, offset: 9043},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 279, col: 1, offset: 9189},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9218},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9218},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 30, offset: 9218},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 34, offset: 9222},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 37, offset: 9225},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 53, offset: 9241},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 57, offset: 9245},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 57, offset: 9245},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 64, offset: 9252},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 284, col: 1, offset: 9412},
			expr: &actionExpr{
				pos: position{line: 284, col: 21, offset: 9432},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 284, col: 21, offset: 9432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 21, offset: 9432},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 5, offset: 9448},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 14, offset: 9457},
								expr: &actionExpr{
									pos: position{line: 285, col: 15, offset: 9458},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 285, col: 15, offset: 9458},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 285, col: 15, offset: 9458},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 285, col: 19, offset: 9462},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 285, col: 24, offset: 9467},
													expr: &ruleRefExpr{
														pos:  position{line: 285, col: 25, offset: 9468},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 9524},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 12, offset: 9531},
								expr: &actionExpr{
									pos: position{line: 286, col: 13, offset: 9532},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 286, col: 13, offset: 9532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 286, col: 13, offset: 9532},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 286, col: 17, offset: 9536},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 286, col: 22, offset: 9541},
													expr: &ruleRefExpr{
														pos:  position{line: 286, col: 23, offset: 9542},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 9590},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 9, offset: 9594},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 9, offset: 9594},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 287, col: 16, offset: 9601},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 292, col: 1, offset: 9757},
			expr: &actionExpr{
				pos: position{line: 292, col: 19, offset: 9775},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 292, col: 19, offset: 9775},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 19, offset: 9775},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 23, offset: 9779},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 34, offset: 9790},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 35, offset: 9791},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 54, offset: 9810},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 58, offset: 9814},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 58, offset: 9814},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 65, offset: 9821},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 296, col: 1, offset: 9897},
			expr: &choiceExpr{
				pos: position{line: 296, col: 21, offset: 9917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 296, col: 21, offset: 9917},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 49, offset: 9945},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 298, col: 1, offset: 9977},
			expr: &actionExpr{
				pos: position{line: 298, col: 30, offset: 10006},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 298, col: 30, offset: 10006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 30, offset: 10006},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 35, offset: 10011},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 49, offset: 10025},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 53, offset: 10029},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 59, offset: 10035},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 60, offset: 10036},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 77, offset: 10053},
							expr: &litMatcher{
								pos:        position{line: 298, col: 77, offset: 10053},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 82, offset: 10058},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 82, offset: 10058},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 302, col: 1, offset: 10161},
			expr: &actionExpr{
				pos: position{line: 302, col: 33, offset: 10193},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 302, col: 33, offset: 10193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 302, col: 33, offset: 10193},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 38, offset: 10198},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 52, offset: 10212},
							expr: &litMatcher{
								pos:        position{line: 302, col: 52, offset: 10212},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 57, offset: 10217},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 57, offset: 10217},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 306, col: 1, offset: 10309},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10325},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 306, col: 17, offset: 10325},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 306, col: 17, offset: 10325},
							expr: &litMatcher{
								pos:        position{line: 306, col: 18, offset: 10326},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 26, offset: 10334},
							expr: &litMatcher{
								pos:        position{line: 306, col: 27, offset: 10335},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 35, offset: 10343},
							expr: &litMatcher{
								pos:        position{line: 306, col: 36, offset: 10344},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 306, col: 46, offset: 10354},
							expr: &oneOrMoreExpr{
								pos: position{line: 306, col: 48, offset: 10356},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 48, offset: 10356},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 56, offset: 10364},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 306, col: 61, offset: 10369},
								expr: &charClassMatcher{
									pos:        position{line: 306, col: 61, offset: 10369},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 75, offset: 10383},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 75, offset: 10383},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 310, col: 1, offset: 10430},
			expr: &actionExpr{
				pos: position{line: 310, col: 19, offset: 10448},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 310, col: 19, offset: 10448},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 310, col: 26, offset: 10455},
						expr: &charClassMatcher{
							pos:        position{line: 310, col: 26, offset: 10455},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 314, col: 1, offset: 10510},
			expr: &actionExpr{
				pos: position{line: 314, col: 29, offset: 10538},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 314, col: 29, offset: 10538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 314, col: 29, offset: 10538},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 314, col: 36, offset: 10545},
								expr: &charClassMatcher{
									pos:        position{line: 314, col: 36, offset: 10545},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 314, col: 50, offset: 10559},
							expr: &litMatcher{
								pos:        position{line: 314, col: 51, offset: 10560},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 318, col: 1, offset: 10730},
			expr: &actionExpr{
				pos: position{line: 318, col: 20, offset: 10749},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 318, col: 20, offset: 10749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 20, offset: 10749},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 29, offset: 10758},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 29, offset: 10758},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 36, offset: 10765},
							expr: &litMatcher{
								pos:        position{line: 318, col: 36, offset: 10765},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 41, offset: 10770},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 48, offset: 10777},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 49, offset: 10778},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 318, col: 66, offset: 10795},
							expr: &litMatcher{
								pos:        position{line: 318, col: 66, offset: 10795},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 10800},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 77, offset: 10806},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 78, offset: 10807},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 318, col: 95, offset: 10824},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 99, offset: 10828},
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 99, offset: 10828},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 106, offset: 10835},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 322, col: 1, offset: 10908},
			expr: &actionExpr{
				pos: position{line: 322, col: 20, offset: 10927},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 322, col: 20, offset: 10927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 20, offset: 10927},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 29, offset: 10936},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 29, offset: 10936},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 36, offset: 10943},
							expr: &litMatcher{
								pos:        position{line: 322, col: 36, offset: 10943},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 41, offset: 10948},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 48, offset: 10955},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 49, offset: 10956},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 322, col: 66, offset: 10973},
							expr: &litMatcher{
								pos:        position{line: 322, col: 66, offset: 10973},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 71, offset: 10978},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 77, offset: 10984},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 78, offset: 10985},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 95, offset: 11002},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 99, offset: 11006},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 99, offset: 11006},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 106, offset: 11013},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 326, col: 1, offset: 11104},
			expr: &actionExpr{
				pos: position{line: 326, col: 19, offset: 11122},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 326, col: 20, offset: 11123},
					expr: &charClassMatcher{
						pos:        position{line: 326, col: 20, offset: 11123},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 330, col: 1, offset: 11176},
			expr: &actionExpr{
				pos: position{line: 330, col: 21, offset: 11196},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 330, col: 21, offset: 11196},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 21, offset: 11196},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 25, offset: 11200},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 31, offset: 11206},
								expr: &ruleRefExpr{
									pos:  position{line: 330, col: 32, offset: 11207},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 51, offset: 11226},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 334, col: 1, offset: 11302},
			expr: &actionExpr{
				pos: position{line: 334, col: 20, offset: 11321},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 334, col: 20, offset: 11321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 20, offset: 11321},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 24, offset: 11325},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 334, col: 31, offset: 11332},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 334, col: 31, offset: 11332},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 31, offset: 11332},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 334, col: 51, offset: 11352},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 51, offset: 11352},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 334, col: 66, offset: 11367},
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 66, offset: 11367},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 78, offset: 11379},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 338, col: 1, offset: 11437},
			expr: &actionExpr{
				pos: position{line: 338, col: 23, offset: 11459},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 338, col: 23, offset: 11459},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 338, col: 28, offset: 11464},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 342, col: 1, offset: 11536},
			expr: &actionExpr{
				pos: position{line: 342, col: 25, offset: 11560},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 342, col: 25, offset: 11560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 25, offset: 11560},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 36, offset: 11571},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 37, offset: 11572},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 56, offset: 11591},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 56, offset: 11591},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 67, offset: 11602},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 346, col: 1, offset: 11714},
			expr: &choiceExpr{
				pos: position{line: 346, col: 18, offset: 11731},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 346, col: 18, offset: 11731},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 36, offset: 11749},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 58, offset: 11771},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 348, col: 1, offset: 11792},
			expr: &actionExpr{
				pos: position{line: 348, col: 24, offset: 11815},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 348, col: 24, offset: 11815},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 24, offset: 11815},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 28, offset: 11819},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 35, offset: 11826},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 348, col: 50, offset: 11841},
							expr: &charClassMatcher{
								pos:        position{line: 348, col: 51, offset: 11842},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 352, col: 1, offset: 11915},
			expr: &actionExpr{
				pos: position{line: 352, col: 20, offset: 11934},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 352, col: 20, offset: 11934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 20, offset: 11934},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 24, offset: 11938},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 27, offset: 11941},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 352, col: 42, offset: 11956},
							expr: &charClassMatcher{
								pos:        position{line: 352, col: 43, offset: 11957},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 356, col: 1, offset: 12022},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 12043},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 12043},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 12043},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 12047},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 31, offset: 12052},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 356, col: 46, offset: 12067},
							expr: &charClassMatcher{
								pos:        position{line: 356, col: 47, offset: 12068},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 361, col: 1, offset: 12182},
			expr: &actionExpr{
				pos: position{line: 361, col: 20, offset: 12201},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 361, col: 20, offset: 12201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 20, offset: 12201},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 26, offset: 12207},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 361, col: 41, offset: 12222},
							expr: &charClassMatcher{
								pos:        position{line: 361, col: 42, offset: 12223},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePositionalValue",
			pos:  position{line: 366, col: 1, offset: 12323},
			expr: &actionExpr{
				pos: position{line: 366, col: 26, offset: 12348},
				run: (*parser).callonInlinePositionalValue1,
				expr: &seqExpr{
					pos: position{line: 366, col: 26, offset: 12348},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 366, col: 26, offset: 12348},
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 26, offset: 12348},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 366, col: 33, offset: 12355},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 366, col: 40, offset: 12362},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 366, col: 40, offset: 12362},
										name: "InlineValuePlain",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 59, offset: 12381},
										name: "AttrValueSingleQuoted",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 83, offset: 12405},
										name: "AttrValueDoubleQuoted",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 366, col: 106, offset: 12428},
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 106, offset: 12428},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 366, col: 113, offset: 12435},
							expr: &charClassMatcher{
								pos:        position{line: 366, col: 114, offset: 12436},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineValuePlain",
			pos:  position{line: 372, col: 1, offset: 12630},
			expr: &actionExpr{
				pos: position{line: 372, col: 21, offset: 12650},
				run: (*parser).callonInlineValuePlain1,
				expr: &seqExpr{
					pos: position{line: 372, col: 21, offset: 12650},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 372, col: 21, offset: 12650},
							val:        "[^,\\r\\n\"' \\t=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 372, col: 39, offset: 12668},
							expr: &choiceExpr{
								pos: position{line: 372, col: 40, offset: 12669},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 372, col: 40, offset: 12669},
										val:        "[^, \\t\\r\\n\"'=\\]]",
										chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 372, col: 59, offset: 12688},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 372, col: 59, offset: 12688},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 372, col: 64, offset: 12693},
												val:        "[^, \\t\\r\\n\"'=\\]]",
												chars:      []rune{',', ' ', '\t', '\r', '\n', '"', '\'', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 376, col: 1, offset: 12752},
			expr: &choiceExpr{
				pos: position{line: 376, col: 19, offset: 12770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 376, col: 19, offset: 12770},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 41, offset: 12792},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 65, offset: 12816},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 380, col: 1, offset: 13018},
			expr: &actionExpr{
				pos: position{line: 380, col: 24, offset: 13041},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 380, col: 24, offset: 13041},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 380, col: 24, offset: 13041},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 380, col: 45, offset: 13062},
							expr: &choiceExpr{
								pos: position{line: 380, col: 46, offset: 13063},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 380, col: 46, offset: 13063},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 380, col: 68, offset: 13085},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 380, col: 68, offset: 13085},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 380, col: 73, offset: 13090},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 384, col: 1, offset: 13152},
			expr: &actionExpr{
				pos: position{line: 384, col: 13, offset: 13164},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 384, col: 13, offset: 13164},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 384, col: 13, offset: 13164},
							expr: &seqExpr{
								pos: position{line: 384, col: 15, offset: 13166},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 384, col: 15, offset: 13166},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 384, col: 19, offset: 13170},
										expr: &ruleRefExpr{
											pos:  position{line: 384, col: 19, offset: 13170},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 384, col: 29, offset: 13180},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 33, offset: 13184},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 384, col: 46, offset: 13197},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 46, offset: 13197},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 384, col: 53, offset: 13204},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 384, col: 57, offset: 13208},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 57, offset: 13208},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 384, col: 64, offset: 13215},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 70, offset: 13221},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 384, col: 85, offset: 13236},
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 85, offset: 13236},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 389, col: 1, offset: 13431},
			expr: &actionExpr{
				pos: position{line: 389, col: 17, offset: 13447},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 389, col: 17, offset: 13447},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 389, col: 17, offset: 13447},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 389, col: 26, offset: 13456},
							expr: &charClassMatcher{
								pos:        position{line: 389, col: 26, offset: 13456},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 393, col: 1, offset: 13508},
			expr: &choiceExpr{
				pos: position{line: 393, col: 19, offset: 13526},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 393, col: 19, offset: 13526},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 35, offset: 13542},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 59, offset: 13566},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 83, offset: 13590},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 395, col: 1, offset: 13608},
			expr: &actionExpr{
				pos: position{line: 395, col: 19, offset: 13626},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 395, col: 19, offset: 13626},
					expr: &charClassMatcher{
						pos:        position{line: 395, col: 19, offset: 13626},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 399, col: 1, offset: 13683},
			expr: &actionExpr{
				pos: position{line: 399, col: 26, offset: 13708},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 399, col: 26, offset: 13708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 26, offset: 13708},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 399, col: 30, offset: 13712},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 30, offset: 13712},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 40, offset: 13722},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 403, col: 1, offset: 13783},
			expr: &actionExpr{
				pos: position{line: 403, col: 26, offset: 13808},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 403, col: 26, offset: 13808},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 26, offset: 13808},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 403, col: 31, offset: 13813},
							expr: &charClassMatcher{
								pos:        position{line: 403, col: 31, offset: 13813},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 41, offset: 13823},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 409, col: 1, offset: 14083},
			expr: &actionExpr{
				pos: position{line: 409, col: 18, offset: 14100},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 409, col: 18, offset: 14100},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 417, col: 1, offset: 14290},
			expr: &choiceExpr{
				pos: position{line: 417, col: 17, offset: 14306},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 417, col: 17, offset: 14306},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 417, col: 38, offset: 14327},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 419, col: 1, offset: 14349},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14371},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14371},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 419, col: 23, offset: 14371},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 419, col: 46, offset: 14394},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 55, offset: 14403},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 419, col: 82, offset: 14430},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 423, col: 1, offset: 14538},
			expr: &actionExpr{
				pos: position{line: 423, col: 31, offset: 14568},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 423, col: 31, offset: 14568},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 423, col: 41, offset: 14578},
						expr: &ruleRefExpr{
							pos:  position{line: 423, col: 41, offset: 14578},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 427, col: 1, offset: 14660},
			expr: &seqExpr{
				pos: position{line: 427, col: 27, offset: 14686},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 427, col: 27, offset: 14686},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 427, col: 32, offset: 14691},
						expr: &charClassMatcher{
							pos:        position{line: 427, col: 33, offset: 14692},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 429, col: 1, offset: 14705},
			expr: &litMatcher{
				pos:        position{line: 429, col: 25, offset: 14729},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 432, col: 1, offset: 14820},
			expr: &actionExpr{
				pos: position{line: 432, col: 30, offset: 14849},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 432, col: 30, offset: 14849},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 433, col: 9, offset: 14868},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 433, col: 9, offset: 14868},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 433, col: 9, offset: 14868},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 433, col: 19, offset: 14878},
										expr: &ruleRefExpr{
											pos:  position{line: 433, col: 20, offset: 14879},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 434, col: 11, offset: 14936},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 434, col: 11, offset: 14936},
										expr: &ruleRefExpr{
											pos:  position{line: 434, col: 11, offset: 14936},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 434, col: 18, offset: 14943},
										expr: &ruleRefExpr{
											pos:  position{line: 434, col: 19, offset: 14944},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 435, col: 11, offset: 14976},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 435, col: 11, offset: 14976},
										expr: &litMatcher{
											pos:        position{line: 435, col: 12, offset: 14977},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 435, col: 16, offset: 14981},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 15030},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 437, col: 11, offset: 15052},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 438, col: 11, offset: 15075},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 15101},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 11, offset: 15130},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 441, col: 11, offset: 15146},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 442, col: 11, offset: 15179},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 443, col: 11, offset: 15199},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 444, col: 11, offset: 15221},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 445, col: 11, offset: 15243},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 446, col: 11, offset: 15268},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 447, col: 11, offset: 15295},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 447, col: 11, offset: 15295},
										expr: &litMatcher{
											pos:        position{line: 447, col: 12, offset: 15296},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 447, col: 17, offset: 15301},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 448, col: 11, offset: 15326},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 449, col: 11, offset: 15356},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 11, offset: 15385},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 454, col: 1, offset: 15455},
			expr: &choiceExpr{
				pos: position{line: 454, col: 41, offset: 15495},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 454, col: 41, offset: 15495},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 454, col: 55, offset: 15509},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 454, col: 55, offset: 15509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 454, col: 55, offset: 15509},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 454, col: 59, offset: 15513},
									expr: &litMatcher{
										pos:        position{line: 454, col: 60, offset: 15514},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 458, col: 1, offset: 15577},
			expr: &actionExpr{
				pos: position{line: 458, col: 23, offset: 15599},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 458, col: 23, offset: 15599},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 458, col: 23, offset: 15599},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 46, offset: 15622},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 55, offset: 15631},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 458, col: 82, offset: 15658},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 462, col: 1, offset: 15766},
			expr: &actionExpr{
				pos: position{line: 462, col: 31, offset: 15796},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 31, offset: 15796},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 462, col: 41, offset: 15806},
						expr: &ruleRefExpr{
							pos:  position{line: 462, col: 41, offset: 15806},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 467, col: 1, offset: 15971},
			expr: &actionExpr{
				pos: position{line: 467, col: 30, offset: 16000},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 467, col: 30, offset: 16000},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 468, col: 9, offset: 16019},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 468, col: 9, offset: 16019},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 468, col: 9, offset: 16019},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 468, col: 19, offset: 16029},
										expr: &ruleRefExpr{
											pos:  position{line: 468, col: 20, offset: 16030},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 469, col: 11, offset: 16087},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 469, col: 11, offset: 16087},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 11, offset: 16087},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 469, col: 18, offset: 16094},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 19, offset: 16095},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 16127},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 16145},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 16167},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 16190},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 16216},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 16245},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16261},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16294},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16314},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16336},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16358},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16383},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 482, col: 11, offset: 16410},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 482, col: 11, offset: 16410},
										expr: &litMatcher{
											pos:        position{line: 482, col: 12, offset: 16411},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 482, col: 18, offset: 16417},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 16442},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 16472},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 485, col: 11, offset: 16501},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 489, col: 1, offset: 16579},
			expr: &seqExpr{
				pos: position{line: 489, col: 27, offset: 16605},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 489, col: 27, offset: 16605},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 489, col: 33, offset: 16611},
						expr: &charClassMatcher{
							pos:        position{line: 489, col: 34, offset: 16612},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 491, col: 1, offset: 16625},
			expr: &litMatcher{
				pos:        position{line: 491, col: 25, offset: 16649},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 493, col: 1, offset: 16658},
			expr: &actionExpr{
				pos: position{line: 493, col: 41, offset: 16698},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 493, col: 42, offset: 16699},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 493, col: 42, offset: 16699},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 493, col: 56, offset: 16713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 493, col: 56, offset: 16713},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 493, col: 60, offset: 16717},
									expr: &litMatcher{
										pos:        position{line: 493, col: 61, offset: 16718},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 500, col: 1, offset: 16890},
			expr: &actionExpr{
				pos: position{line: 500, col: 12, offset: 16901},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 500, col: 12, offset: 16901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 500, col: 12, offset: 16901},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 500, col: 23, offset: 16912},
								expr: &ruleRefExpr{
									pos:  position{line: 500, col: 24, offset: 16913},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 5, offset: 16931},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 501, col: 12, offset: 16938},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 501, col: 12, offset: 16938},
									expr: &litMatcher{
										pos:        position{line: 501, col: 13, offset: 16939},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 505, col: 5, offset: 17034},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 509, col: 5, offset: 17190},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 5, offset: 17190},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 12, offset: 17197},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 19, offset: 17204},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 34, offset: 17219},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 509, col: 38, offset: 17223},
								expr: &ruleRefExpr{
									pos:  position{line: 509, col: 38, offset: 17223},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 509, col: 56, offset: 17241},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 513, col: 1, offset: 17351},
			expr: &actionExpr{
				pos: position{line: 513, col: 18, offset: 17368},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 513, col: 18, offset: 17368},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 513, col: 27, offset: 17377},
						expr: &seqExpr{
							pos: position{line: 513, col: 28, offset: 17378},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 513, col: 28, offset: 17378},
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 29, offset: 17379},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 513, col: 37, offset: 17387},
									expr: &ruleRefExpr{
										pos:  position{line: 513, col: 38, offset: 17388},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 513, col: 54, offset: 17404},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 517, col: 1, offset: 17529},
			expr: &actionExpr{
				pos: position{line: 517, col: 17, offset: 17545},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 517, col: 17, offset: 17545},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 517, col: 26, offset: 17554},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 517, col: 26, offset: 17554},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 518, col: 11, offset: 17570},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 519, col: 11, offset: 17616},
								expr: &ruleRefExpr{
									pos:  position{line: 519, col: 11, offset: 17616},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 520, col: 11, offset: 17635},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 521, col: 11, offset: 17661},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 522, col: 11, offset: 17690},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 523, col: 11, offset: 17712},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 524, col: 11, offset: 17735},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 525, col: 11, offset: 17751},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 526, col: 11, offset: 17777},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 17801},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17823},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17841},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17874},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17903},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 538, col: 1, offset: 18061},
			expr: &seqExpr{
				pos: position{line: 538, col: 31, offset: 18091},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 538, col: 31, offset: 18091},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 41, offset: 18101},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 543, col: 1, offset: 18217},
			expr: &actionExpr{
				pos: position{line: 543, col: 19, offset: 18235},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 543, col: 19, offset: 18235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 543, col: 19, offset: 18235},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 25, offset: 18241},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 543, col: 40, offset: 18256},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 45, offset: 18261},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 52, offset: 18268},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 68, offset: 18284},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 75, offset: 18291},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 547, col: 1, offset: 18410},
			expr: &actionExpr{
				pos: position{line: 547, col: 20, offset: 18429},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 547, col: 20, offset: 18429},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 20, offset: 18429},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 26, offset: 18435},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 547, col: 41, offset: 18450},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 547, col: 45, offset: 18454},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 52, offset: 18461},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 68, offset: 18477},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 75, offset: 18484},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 551, col: 1, offset: 18604},
			expr: &actionExpr{
				pos: position{line: 551, col: 18, offset: 18621},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 551, col: 19, offset: 18622},
					expr: &charClassMatcher{
						pos:        position{line: 551, col: 19, offset: 18622},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 555, col: 1, offset: 18675},
			expr: &actionExpr{
				pos: position{line: 555, col: 19, offset: 18693},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 555, col: 19, offset: 18693},
					expr: &charClassMatcher{
						pos:        position{line: 555, col: 19, offset: 18693},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 559, col: 1, offset: 18745},
			expr: &actionExpr{
				pos: position{line: 559, col: 24, offset: 18768},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 559, col: 24, offset: 18768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 24, offset: 18768},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 28, offset: 18772},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 559, col: 34, offset: 18778},
								expr: &ruleRefExpr{
									pos:  position{line: 559, col: 35, offset: 18779},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 559, col: 54, offset: 18798},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 566, col: 1, offset: 18987},
			expr: &actionExpr{
				pos: position{line: 566, col: 18, offset: 19004},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 566, col: 18, offset: 19004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 18, offset: 19004},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 566, col: 24, offset: 19010},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 566, col: 24, offset: 19010},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 566, col: 24, offset: 19010},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 566, col: 36, offset: 19022},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 566, col: 42, offset: 19028},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 566, col: 56, offset: 19042},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 566, col: 74, offset: 19060},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 568, col: 8, offset: 19209},
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 8, offset: 19209},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 15, offset: 19216},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 572, col: 1, offset: 19272},
			expr: &actionExpr{
				pos: position{line: 572, col: 26, offset: 19297},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 572, col: 26, offset: 19297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 26, offset: 19297},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 30, offset: 19301},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 36, offset: 19307},
								expr: &choiceExpr{
									pos: position{line: 572, col: 37, offset: 19308},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 572, col: 37, offset: 19308},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 572, col: 59, offset: 19330},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 572, col: 80, offset: 19351},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 572, col: 99, offset: 19370},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 576, col: 1, offset: 19446},
			expr: &actionExpr{
				pos: position{line: 576, col: 24, offset: 19469},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 576, col: 24, offset: 19469},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 576, col: 24, offset: 19469},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 33, offset: 19478},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 40, offset: 19485},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 576, col: 66, offset: 19511},
							expr: &litMatcher{
								pos:        position{line: 576, col: 66, offset: 19511},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 580, col: 1, offset: 19574},
			expr: &actionExpr{
				pos: position{line: 580, col: 29, offset: 19602},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 580, col: 29, offset: 19602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 580, col: 29, offset: 19602},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 580, col: 36, offset: 19609},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 580, col: 36, offset: 19609},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 11, offset: 19727},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 582, col: 11, offset: 19764},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 583, col: 11, offset: 19791},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 584, col: 11, offset: 19824},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 19857},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 11, offset: 19885},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 586, col: 31, offset: 19905},
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 31, offset: 19905},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 586, col: 39, offset: 19913},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 586, col: 39, offset: 19913},
									expr: &litMatcher{
										pos:        position{line: 586, col: 40, offset: 19914},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 586, col: 46, offset: 19920},
									expr: &litMatcher{
										pos:        position{line: 586, col: 47, offset: 19921},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 590, col: 1, offset: 19957},
			expr: &actionExpr{
				pos: position{line: 590, col: 23, offset: 19979},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 590, col: 23, offset: 19979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 23, offset: 19979},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 590, col: 30, offset: 19986},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 590, col: 30, offset: 19986},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 590, col: 47, offset: 20003},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 20026},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 591, col: 12, offset: 20033},
								expr: &actionExpr{
									pos: position{line: 591, col: 13, offset: 20034},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 591, col: 13, offset: 20034},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 591, col: 13, offset: 20034},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 17, offset: 20038},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 591, col: 24, offset: 20045},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 591, col: 24, offset: 20045},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 591, col: 41, offset: 20062},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 597, col: 1, offset: 20206},
			expr: &actionExpr{
				pos: position{line: 597, col: 29, offset: 20234},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 597, col: 29, offset: 20234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 597, col: 29, offset: 20234},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 34, offset: 20239},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 597, col: 41, offset: 20246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 597, col: 41, offset: 20246},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 597, col: 58, offset: 20263},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 20286},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 598, col: 12, offset: 20293},
								expr: &actionExpr{
									pos: position{line: 598, col: 13, offset: 20294},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 598, col: 13, offset: 20294},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 598, col: 13, offset: 20294},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 598, col: 17, offset: 20298},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 598, col: 24, offset: 20305},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 598, col: 24, offset: 20305},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 598, col: 41, offset: 20322},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 9, offset: 20377},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 604, col: 1, offset: 20471},
			expr: &actionExpr{
				pos: position{line: 604, col: 19, offset: 20489},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 604, col: 19, offset: 20489},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 19, offset: 20489},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 26, offset: 20496},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 604, col: 34, offset: 20504},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 39, offset: 20509},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 44, offset: 20514},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 608, col: 1, offset: 20606},
			expr: &actionExpr{
				pos: position{line: 608, col: 25, offset: 20630},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 608, col: 25, offset: 20630},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 25, offset: 20630},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 30, offset: 20635},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 37, offset: 20642},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 608, col: 45, offset: 20650},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 50, offset: 20655},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 55, offset: 20660},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 608, col: 63, offset: 20668},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 612, col: 1, offset: 20757},
			expr: &actionExpr{
				pos: position{line: 612, col: 20, offset: 20776},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 612, col: 20, offset: 20776},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 612, col: 32, offset: 20788},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 616, col: 1, offset: 20887},
			expr: &actionExpr{
				pos: position{line: 616, col: 26, offset: 20912},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 616, col: 26, offset: 20912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 616, col: 26, offset: 20912},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 31, offset: 20917},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 43, offset: 20929},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 616, col: 51, offset: 20937},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 620, col: 1, offset: 21033},
			expr: &actionExpr{
				pos: position{line: 620, col: 23, offset: 21055},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 620, col: 23, offset: 21055},
					expr: &charClassMatcher{
						pos:        position{line: 620, col: 23, offset: 21055},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 624, col: 1, offset: 21104},
			expr: &actionExpr{
				pos: position{line: 624, col: 23, offset: 21126},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 624, col: 23, offset: 21126},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 624, col: 24, offset: 21127},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 624, col: 24, offset: 21127},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 624, col: 34, offset: 21137},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 624, col: 42, offset: 21145},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 48, offset: 21151},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 624, col: 73, offset: 21176},
							expr: &litMatcher{
								pos:        position{line: 624, col: 73, offset: 21176},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 628, col: 1, offset: 21329},
			expr: &actionExpr{
				pos: position{line: 628, col: 28, offset: 21356},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 628, col: 28, offset: 21356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 628, col: 28, offset: 21356},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 35, offset: 21363},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 628, col: 54, offset: 21382},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 54, offset: 21382},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 628, col: 62, offset: 21390},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 628, col: 62, offset: 21390},
									expr: &litMatcher{
										pos:        position{line: 628, col: 63, offset: 21391},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 628, col: 69, offset: 21397},
									expr: &litMatcher{
										pos:        position{line: 628, col: 70, offset: 21398},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 632, col: 1, offset: 21434},
			expr: &actionExpr{
				pos: position{line: 632, col: 22, offset: 21455},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 632, col: 22, offset: 21455},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 22, offset: 21455},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 29, offset: 21462},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 21477},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 12, offset: 21484},
								expr: &actionExpr{
									pos: position{line: 633, col: 13, offset: 21485},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 633, col: 13, offset: 21485},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 633, col: 13, offset: 21485},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 633, col: 17, offset: 21489},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 24, offset: 21496},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 639, col: 1, offset: 21633},
			expr: &choiceExpr{
				pos: position{line: 639, col: 13, offset: 21645},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 13, offset: 21645},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 639, col: 13, offset: 21645},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 639, col: 18, offset: 21650},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 639, col: 18, offset: 21650},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 639, col: 30, offset: 21662},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 21732},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 21732},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 641, col: 5, offset: 21732},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 641, col: 9, offset: 21736},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 641, col: 14, offset: 21741},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 641, col: 14, offset: 21741},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 641, col: 26, offset: 21753},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 645, col: 1, offset: 21825},
			expr: &actionExpr{
				pos: position{line: 645, col: 16, offset: 21840},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 645, col: 16, offset: 21840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 645, col: 16, offset: 21840},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 645, col: 23, offset: 21847},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 645, col: 23, offset: 21847},
									expr: &litMatcher{
										pos:        position{line: 645, col: 24, offset: 21848},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 648, col: 5, offset: 21905},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 656, col: 1, offset: 22155},
			expr: &zeroOrMoreExpr{
				pos: position{line: 656, col: 24, offset: 22178},
				expr: &choiceExpr{
					pos: position{line: 656, col: 25, offset: 22179},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 656, col: 25, offset: 22179},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 41, offset: 22195},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 658, col: 1, offset: 22217},
			expr: &actionExpr{
				pos: position{line: 658, col: 21, offset: 22237},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 658, col: 21, offset: 22237},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 658, col: 21, offset: 22237},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 22, offset: 22238},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 26, offset: 22242},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 658, col: 35, offset: 22251},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 658, col: 35, offset: 22251},
									expr: &charClassMatcher{
										pos:        position{line: 658, col: 35, offset: 22251},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 660, col: 12, offset: 22315},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 667, col: 1, offset: 22521},
			expr: &actionExpr{
				pos: position{line: 667, col: 21, offset: 22541},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 667, col: 21, offset: 22541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 21, offset: 22541},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 667, col: 29, offset: 22549},
								expr: &choiceExpr{
									pos: position{line: 667, col: 30, offset: 22550},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 667, col: 30, offset: 22550},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 667, col: 53, offset: 22573},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 667, col: 74, offset: 22594},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 667, col: 74, offset: 22594,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 107, offset: 22627},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 671, col: 1, offset: 22702},
			expr: &actionExpr{
				pos: position{line: 671, col: 25, offset: 22726},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 671, col: 25, offset: 22726},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 671, col: 25, offset: 22726},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 671, col: 33, offset: 22734},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 671, col: 38, offset: 22739},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 671, col: 38, offset: 22739},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 671, col: 78, offset: 22779},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 675, col: 1, offset: 22848},
			expr: &actionExpr{
				pos: position{line: 675, col: 23, offset: 22870},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 675, col: 23, offset: 22870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 675, col: 23, offset: 22870},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 31, offset: 22878},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 675, col: 36, offset: 22883},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 675, col: 36, offset: 22883},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 675, col: 76, offset: 22923},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 682, col: 1, offset: 23094},
			expr: &choiceExpr{
				pos: position{line: 682, col: 18, offset: 23111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 18, offset: 23111},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 682, col: 18, offset: 23111},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 27, offset: 23120},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 684, col: 9, offset: 23179},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 684, col: 9, offset: 23179},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 684, col: 15, offset: 23185},
								expr: &ruleRefExpr{
									pos:  position{line: 684, col: 16, offset: 23186},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 688, col: 1, offset: 23282},
			expr: &actionExpr{
				pos: position{line: 688, col: 22, offset: 23303},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 688, col: 22, offset: 23303},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 688, col: 22, offset: 23303},
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 23, offset: 23304},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 689, col: 5, offset: 23313},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 6, offset: 23314},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 690, col: 5, offset: 23330},
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 6, offset: 23331},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 691, col: 5, offset: 23354},
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 6, offset: 23355},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 692, col: 5, offset: 23382},
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 6, offset: 23383},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 693, col: 5, offset: 23412},
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 6, offset: 23413},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 694, col: 5, offset: 23440},
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 6, offset: 23441},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 695, col: 5, offset: 23467},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 6, offset: 23468},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 696, col: 5, offset: 23490},
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 6, offset: 23491},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 697, col: 5, offset: 23511},
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 6, offset: 23512},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 23540},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 698, col: 11, offset: 23546},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 698, col: 11, offset: 23546},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 698, col: 20, offset: 23555},
										expr: &ruleRefExpr{
											pos:  position{line: 698, col: 21, offset: 23556},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 12, offset: 23657},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 704, col: 1, offset: 23700},
			expr: &seqExpr{
				pos: position{line: 704, col: 25, offset: 23724},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 704, col: 25, offset: 23724},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 704, col: 29, offset: 23728},
						expr: &ruleRefExpr{
							pos:  position{line: 704, col: 29, offset: 23728},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 704, col: 36, offset: 23735},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 706, col: 1, offset: 23809},
			expr: &actionExpr{
				pos: position{line: 706, col: 29, offset: 23837},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 706, col: 29, offset: 23837},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 706, col: 29, offset: 23837},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 50, offset: 23858},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 58, offset: 23866},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 710, col: 1, offset: 23976},
			expr: &actionExpr{
				pos: position{line: 710, col: 29, offset: 24004},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 710, col: 29, offset: 24004},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 710, col: 29, offset: 24004},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 30, offset: 24005},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 711, col: 5, offset: 24015},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 24024},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 711, col: 14, offset: 24024},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 712, col: 11, offset: 24050},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 24075},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 714, col: 11, offset: 24097},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 24123},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 24148},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 717, col: 11, offset: 24176},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 24206},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 11, offset: 24273},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 721, col: 11, offset: 24325},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 24350},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 24383},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 24410},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 24448},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 24474},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 733, col: 1, offset: 24644},
			expr: &actionExpr{
				pos: position{line: 733, col: 20, offset: 24663},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 733, col: 20, offset: 24663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 733, col: 20, offset: 24663},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 733, col: 26, offset: 24669},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 27, offset: 24670},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 40, offset: 24683},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 48, offset: 24691},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 71, offset: 24714},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 80, offset: 24723},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 737, col: 1, offset: 24862},
			expr: &actionExpr{
				pos: position{line: 738, col: 5, offset: 24893},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 738, col: 5, offset: 24893},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 738, col: 5, offset: 24893},
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 5, offset: 24893},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 738, col: 12, offset: 24900},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 740, col: 9, offset: 24965},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 740, col: 9, offset: 24965},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 740, col: 9, offset: 24965},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 740, col: 9, offset: 24965},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 740, col: 16, offset: 24972},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 740, col: 16, offset: 24972},
															expr: &litMatcher{
																pos:        position{line: 740, col: 17, offset: 24973},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 744, col: 9, offset: 25077},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 763, col: 11, offset: 25813},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 763, col: 11, offset: 25813},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 763, col: 11, offset: 25813},
													expr: &charClassMatcher{
														pos:        position{line: 763, col: 12, offset: 25814},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 763, col: 20, offset: 25822},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 765, col: 13, offset: 25935},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 765, col: 13, offset: 25935},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 765, col: 14, offset: 25936},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 765, col: 21, offset: 25943},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 767, col: 13, offset: 26059},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 767, col: 13, offset: 26059},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 767, col: 14, offset: 26060},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 767, col: 21, offset: 26067},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 769, col: 13, offset: 26183},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 769, col: 13, offset: 26183},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 769, col: 13, offset: 26183},
													expr: &charClassMatcher{
														pos:        position{line: 769, col: 14, offset: 26184},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 769, col: 22, offset: 26192},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 771, col: 13, offset: 26308},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 771, col: 13, offset: 26308},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 771, col: 13, offset: 26308},
													expr: &charClassMatcher{
														pos:        position{line: 771, col: 14, offset: 26309},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 771, col: 22, offset: 26317},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 773, col: 12, offset: 26432},
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 12, offset: 26432},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 777, col: 1, offset: 26471},
			expr: &actionExpr{
				pos: position{line: 777, col: 27, offset: 26497},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 777, col: 27, offset: 26497},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 777, col: 37, offset: 26507},
						expr: &ruleRefExpr{
							pos:  position{line: 777, col: 37, offset: 26507},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 784, col: 1, offset: 26714},
			expr: &actionExpr{
				pos: position{line: 784, col: 22, offset: 26735},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 784, col: 22, offset: 26735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 784, col: 22, offset: 26735},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 784, col: 28, offset: 26741},
								expr: &ruleRefExpr{
									pos:  position{line: 784, col: 29, offset: 26742},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 42, offset: 26755},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 50, offset: 26763},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 75, offset: 26788},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 784, col: 86, offset: 26799},
								expr: &ruleRefExpr{
									pos:  position{line: 784, col: 87, offset: 26800},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 117, offset: 26830},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 126, offset: 26839},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 788, col: 1, offset: 26996},
			expr: &actionExpr{
				pos: position{line: 789, col: 5, offset: 27029},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 789, col: 5, offset: 27029},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 789, col: 5, offset: 27029},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 5, offset: 27029},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 12, offset: 27036},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 789, col: 20, offset: 27044},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 791, col: 9, offset: 27103},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 791, col: 9, offset: 27103},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 791, col: 9, offset: 27103},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 791, col: 16, offset: 27110},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 791, col: 16, offset: 27110},
															expr: &litMatcher{
																pos:        position{line: 791, col: 17, offset: 27111},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 795, col: 9, offset: 27215},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 812, col: 14, offset: 27939},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 812, col: 21, offset: 27946},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 812, col: 22, offset: 27947},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 814, col: 13, offset: 28035},
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 13, offset: 28035},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 818, col: 1, offset: 28075},
			expr: &actionExpr{
				pos: position{line: 818, col: 32, offset: 28106},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 818, col: 32, offset: 28106},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 818, col: 32, offset: 28106},
							expr: &litMatcher{
								pos:        position{line: 818, col: 33, offset: 28107},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 37, offset: 28111},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 819, col: 7, offset: 28126},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 819, col: 7, offset: 28126},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 819, col: 7, offset: 28126},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 820, col: 7, offset: 28172},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 820, col: 7, offset: 28172},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 821, col: 7, offset: 28216},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 821, col: 7, offset: 28216},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 822, col: 7, offset: 28259},
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 7, offset: 28259},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 826, col: 1, offset: 28305},
			expr: &actionExpr{
				pos: position{line: 826, col: 29, offset: 28333},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 826, col: 29, offset: 28333},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 826, col: 39, offset: 28343},
						expr: &ruleRefExpr{
							pos:  position{line: 826, col: 39, offset: 28343},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 833, col: 1, offset: 28666},
			expr: &actionExpr{
				pos: position{line: 833, col: 20, offset: 28685},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 833, col: 20, offset: 28685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 833, col: 20, offset: 28685},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 833, col: 26, offset: 28691},
								expr: &ruleRefExpr{
									pos:  position{line: 833, col: 27, offset: 28692},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 833, col: 40, offset: 28705},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 46, offset: 28711},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 833, col: 75, offset: 28740},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 86, offset: 28751},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 833, col: 112, offset: 28777},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 833, col: 124, offset: 28789},
								expr: &ruleRefExpr{
									pos:  position{line: 833, col: 125, offset: 28790},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 837, col: 1, offset: 28935},
			expr: &seqExpr{
				pos: position{line: 837, col: 26, offset: 28960},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 837, col: 26, offset: 28960},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 837, col: 54, offset: 28988},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 839, col: 1, offset: 29016},
			expr: &choiceExpr{
				pos: position{line: 839, col: 33, offset: 29048},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 839, col: 33, offset: 29048},
						expr: &charClassMatcher{
							pos:        position{line: 839, col: 33, offset: 29048},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 839, col: 45, offset: 29060},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 839, col: 45, offset: 29060},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 839, col: 49, offset: 29064},
								expr: &litMatcher{
									pos:        position{line: 839, col: 50, offset: 29065},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 840, col: 1, offset: 29070},
			expr: &actionExpr{
				pos: position{line: 840, col: 32, offset: 29101},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 840, col: 32, offset: 29101},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 840, col: 42, offset: 29111},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 840, col: 42, offset: 29111},
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 42, offset: 29111},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 846, col: 1, offset: 29272},
			expr: &actionExpr{
				pos: position{line: 846, col: 24, offset: 29295},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 846, col: 24, offset: 29295},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 846, col: 33, offset: 29304},
						expr: &seqExpr{
							pos: position{line: 846, col: 34, offset: 29305},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 846, col: 34, offset: 29305},
									expr: &ruleRefExpr{
										pos:  position{line: 846, col: 35, offset: 29306},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 846, col: 43, offset: 29314},
									expr: &litMatcher{
										pos:        position{line: 846, col: 44, offset: 29315},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 846, col: 49, offset: 29320},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 850, col: 1, offset: 29451},
			expr: &actionExpr{
				pos: position{line: 850, col: 31, offset: 29481},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 850, col: 31, offset: 29481},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 850, col: 40, offset: 29490},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 850, col: 40, offset: 29490},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 851, col: 11, offset: 29506},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 852, col: 11, offset: 29556},
								expr: &ruleRefExpr{
									pos:  position{line: 852, col: 11, offset: 29556},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 853, col: 11, offset: 29575},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 854, col: 11, offset: 29601},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 855, col: 11, offset: 29631},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 856, col: 11, offset: 29652},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 857, col: 11, offset: 29681},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 858, col: 11, offset: 29703},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 859, col: 11, offset: 29727},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 860, col: 11, offset: 29743},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 861, col: 11, offset: 29769},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 862, col: 11, offset: 29793},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 863, col: 11, offset: 29815},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 864, col: 11, offset: 29833},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 865, col: 11, offset: 29866},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 866, col: 11, offset: 29895},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 870, col: 1, offset: 29938},
			expr: &actionExpr{
				pos: position{line: 871, col: 5, offset: 29972},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 871, col: 5, offset: 29972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 871, col: 5, offset: 29972},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 871, col: 16, offset: 29983},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 871, col: 16, offset: 29983},
									expr: &litMatcher{
										pos:        position{line: 871, col: 17, offset: 29984},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 874, col: 5, offset: 30045},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 878, col: 6, offset: 30225},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 878, col: 6, offset: 30225},
									expr: &choiceExpr{
										pos: position{line: 878, col: 7, offset: 30226},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 878, col: 7, offset: 30226},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 878, col: 15, offset: 30234},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 27, offset: 30246},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 882, col: 1, offset: 30290},
			expr: &actionExpr{
				pos: position{line: 882, col: 31, offset: 30320},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 882, col: 31, offset: 30320},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 882, col: 40, offset: 30329},
						expr: &ruleRefExpr{
							pos:  position{line: 882, col: 41, offset: 30330},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 889, col: 1, offset: 30528},
			expr: &choiceExpr{
				pos: position{line: 889, col: 19, offset: 30546},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 889, col: 19, offset: 30546},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 889, col: 19, offset: 30546},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 891, col: 9, offset: 30594},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 891, col: 9, offset: 30594},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 9, offset: 30644},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 893, col: 9, offset: 30644},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 9, offset: 30704},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 895, col: 9, offset: 30704},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 9, offset: 30760},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 897, col: 9, offset: 30760},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 906, col: 1, offset: 31076},
			expr: &choiceExpr{
				pos: position{line: 908, col: 5, offset: 31125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 31125},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 31125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 908, col: 5, offset: 31125},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 908, col: 16, offset: 31136},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 17, offset: 31137},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 908, col: 30, offset: 31150},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 33, offset: 31153},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 908, col: 49, offset: 31169},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 908, col: 54, offset: 31174},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 908, col: 60, offset: 31180},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 61, offset: 31181},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 31366},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 31366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 912, col: 5, offset: 31366},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 912, col: 16, offset: 31377},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 17, offset: 31378},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 912, col: 30, offset: 31391},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 912, col: 35, offset: 31396},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 44, offset: 31405},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 31604},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 31604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 916, col: 5, offset: 31604},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 916, col: 16, offset: 31615},
										expr: &ruleRefExpr{
											pos:  position{line: 916, col: 17, offset: 31616},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 916, col: 30, offset: 31629},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 923, col: 7, offset: 31915},
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 8, offset: 31916},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 23, offset: 31931},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 32, offset: 31940},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 32141},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 927, col: 5, offset: 32141},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 927, col: 5, offset: 32141},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 927, col: 16, offset: 32152},
										expr: &ruleRefExpr{
											pos:  position{line: 927, col: 17, offset: 32153},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 927, col: 30, offset: 32166},
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 31, offset: 32167},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 927, col: 46, offset: 32182},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 927, col: 52, offset: 32188},
										expr: &ruleRefExpr{
											pos:  position{line: 927, col: 53, offset: 32189},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 931, col: 1, offset: 32289},
			expr: &oneOrMoreExpr{
				pos: position{line: 931, col: 38, offset: 32326},
				expr: &actionExpr{
					pos: position{line: 931, col: 39, offset: 32327},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 931, col: 39, offset: 32327},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 931, col: 39, offset: 32327},
								expr: &ruleRefExpr{
									pos:  position{line: 931, col: 40, offset: 32328},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 931, col: 50, offset: 32338},
								expr: &litMatcher{
									pos:        position{line: 931, col: 50, offset: 32338},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 931, col: 56, offset: 32344},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 931, col: 65, offset: 32353},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 935, col: 1, offset: 32498},
			expr: &actionExpr{
				pos: position{line: 935, col: 34, offset: 32531},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 935, col: 34, offset: 32531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 935, col: 34, offset: 32531},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 935, col: 40, offset: 32537},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 935, col: 48, offset: 32545},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 935, col: 49, offset: 32546},
									expr: &charClassMatcher{
										pos:        position{line: 935, col: 49, offset: 32546},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 8, offset: 32598},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 941, col: 1, offset: 32634},
			expr: &oneOrMoreExpr{
				pos: position{line: 941, col: 36, offset: 32669},
				expr: &actionExpr{
					pos: position{line: 941, col: 37, offset: 32670},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 941, col: 37, offset: 32670},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 941, col: 37, offset: 32670},
								expr: &ruleRefExpr{
									pos:  position{line: 941, col: 38, offset: 32671},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 941, col: 48, offset: 32681},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 941, col: 57, offset: 32690},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 946, col: 1, offset: 32908},
			expr: &actionExpr{
				pos: position{line: 946, col: 20, offset: 32927},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 946, col: 20, offset: 32927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 946, col: 20, offset: 32927},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 946, col: 31, offset: 32938},
								expr: &ruleRefExpr{
									pos:  position{line: 946, col: 32, offset: 32939},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 947, col: 5, offset: 32958},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 955, col: 5, offset: 33252},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 955, col: 16, offset: 33263},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 956, col: 5, offset: 33287},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 956, col: 16, offset: 33298},
								expr: &ruleRefExpr{
									pos:  position{line: 956, col: 17, offset: 33299},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 960, col: 1, offset: 33437},
			expr: &actionExpr{
				pos: position{line: 961, col: 5, offset: 33465},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 961, col: 5, offset: 33465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 961, col: 5, offset: 33465},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 961, col: 15, offset: 33475},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 961, col: 15, offset: 33475},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 961, col: 20, offset: 33480},
										expr: &ruleRefExpr{
											pos:  position{line: 961, col: 20, offset: 33480},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 36, offset: 33496},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 965, col: 1, offset: 33571},
			expr: &actionExpr{
				pos: position{line: 965, col: 23, offset: 33593},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 965, col: 23, offset: 33593},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 965, col: 33, offset: 33603},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 970, col: 1, offset: 33728},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 33786},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 33786},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 33786},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 33786},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 972, col: 16, offset: 33797},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 17, offset: 33798},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 972, col: 30, offset: 33811},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 33, offset: 33814},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 49, offset: 33830},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 54, offset: 33835},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 61, offset: 33842},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 34046},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 34046},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 34046},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 976, col: 16, offset: 34057},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 17, offset: 34058},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 976, col: 30, offset: 34071},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 37, offset: 34078},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 980, col: 1, offset: 34183},
			expr: &actionExpr{
				pos: position{line: 980, col: 28, offset: 34210},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 980, col: 28, offset: 34210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 980, col: 28, offset: 34210},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 39, offset: 34221},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 980, col: 59, offset: 34241},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 980, col: 70, offset: 34252},
								expr: &seqExpr{
									pos: position{line: 980, col: 71, offset: 34253},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 980, col: 71, offset: 34253},
											expr: &ruleRefExpr{
												pos:  position{line: 980, col: 72, offset: 34254},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 980, col: 93, offset: 34275},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 984, col: 1, offset: 34385},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 34439},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 34439},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 34439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 986, col: 5, offset: 34439},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 986, col: 16, offset: 34450},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 17, offset: 34451},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 987, col: 5, offset: 34469},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 994, col: 5, offset: 34681},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 8, offset: 34684},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 994, col: 24, offset: 34700},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 994, col: 29, offset: 34705},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 994, col: 35, offset: 34711},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 36, offset: 34712},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 998, col: 5, offset: 34908},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 998, col: 5, offset: 34908},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 998, col: 5, offset: 34908},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 998, col: 16, offset: 34919},
										expr: &ruleRefExpr{
											pos:  position{line: 998, col: 17, offset: 34920},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 999, col: 5, offset: 34938},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 1006, col: 5, offset: 35150},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1006, col: 11, offset: 35156},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 12, offset: 35157},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1010, col: 1, offset: 35262},
			expr: &actionExpr{
				pos: position{line: 1010, col: 19, offset: 35280},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1010, col: 19, offset: 35280},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1010, col: 19, offset: 35280},
							expr: &ruleRefExpr{
								pos:  position{line: 1010, col: 20, offset: 35281},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 5, offset: 35296},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1011, col: 15, offset: 35306},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1011, col: 15, offset: 35306},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1011, col: 15, offset: 35306},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1011, col: 24, offset: 35315},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1013, col: 9, offset: 35409},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1013, col: 9, offset: 35409},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1013, col: 9, offset: 35409},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1013, col: 18, offset: 35418},
														expr: &ruleRefExpr{
															pos:  position{line: 1013, col: 19, offset: 35419},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1013, col: 35, offset: 35435},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1019, col: 1, offset: 35558},
			expr: &actionExpr{
				pos: position{line: 1020, col: 5, offset: 35582},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1020, col: 5, offset: 35582},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1020, col: 14, offset: 35591},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1020, col: 14, offset: 35591},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1021, col: 11, offset: 35643},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1022, col: 11, offset: 35689},
								expr: &ruleRefExpr{
									pos:  position{line: 1022, col: 11, offset: 35689},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1023, col: 11, offset: 35708},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1023, col: 11, offset: 35708},
										expr: &ruleRefExpr{
											pos:  position{line: 1023, col: 12, offset: 35709},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1024, col: 13, offset: 35728},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1024, col: 13, offset: 35728},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1025, col: 15, offset: 35756},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1026, col: 15, offset: 35782},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1027, col: 15, offset: 35804},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1028, col: 15, offset: 35830},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1029, col: 15, offset: 35858},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1030, col: 15, offset: 35879},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1031, col: 15, offset: 35913},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1032, col: 15, offset: 35944},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1033, col: 15, offset: 35975},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1034, col: 15, offset: 36007},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1035, col: 15, offset: 36045},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1036, col: 15, offset: 36076},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1037, col: 15, offset: 36110},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1038, col: 15, offset: 36135},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1039, col: 15, offset: 36168},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1046, col: 1, offset: 36398},
			expr: &actionExpr{
				pos: position{line: 1046, col: 14, offset: 36411},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 14, offset: 36411},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1046, col: 14, offset: 36411},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1046, col: 20, offset: 36417},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1046, col: 24, offset: 36421},
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 24, offset: 36421},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1046, col: 31, offset: 36428},
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 32, offset: 36429},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1053, col: 1, offset: 36720},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 15, offset: 36734},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1053, col: 15, offset: 36734},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 41, offset: 36760},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 65, offset: 36784},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1055, col: 1, offset: 36805},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 32, offset: 36836},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1055, col: 32, offset: 36836},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1055, col: 32, offset: 36836},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1055, col: 36, offset: 36840},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 37, offset: 36841},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1055, col: 43, offset: 36847},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1055, col: 43, offset: 36847},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1055, col: 47, offset: 36851},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 48, offset: 36852},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1055, col: 54, offset: 36858},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1055, col: 54, offset: 36858},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1055, col: 58, offset: 36862},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 59, offset: 36863},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1055, col: 65, offset: 36869},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1055, col: 65, offset: 36869},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1055, col: 69, offset: 36873},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 70, offset: 36874},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1057, col: 1, offset: 36881},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 34, offset: 36914},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1057, col: 34, offset: 36914},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1057, col: 41, offset: 36921},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1057, col: 48, offset: 36928},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1057, col: 55, offset: 36935},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1057, col: 62, offset: 36942},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1057, col: 68, offset: 36948},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1059, col: 1, offset: 36955},
			expr: &actionExpr{
				pos: position{line: 1059, col: 26, offset: 36980},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 26, offset: 36980},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1059, col: 32, offset: 36986},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1059, col: 32, offset: 36986},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1060, col: 15, offset: 37022},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1061, col: 15, offset: 37059},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1062, col: 15, offset: 37096},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1063, col: 15, offset: 37137},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1064, col: 15, offset: 37167},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1065, col: 15, offset: 37199},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1069, col: 1, offset: 37357},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 28, offset: 37384},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1069, col: 28, offset: 37384},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 15, offset: 37419},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 15, offset: 37456},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 15, offset: 37493},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1074, col: 1, offset: 37521},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 22, offset: 37542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 22, offset: 37542},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 15, offset: 37574},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 15, offset: 37607},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 15, offset: 37640},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 15, offset: 37677},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 15, offset: 37714},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1081, col: 1, offset: 37740},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 33, offset: 37772},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1081, col: 33, offset: 37772},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1081, col: 39, offset: 37778},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1081, col: 39, offset: 37778},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1085, col: 1, offset: 37915},
			expr: &actionExpr{
				pos: position{line: 1085, col: 25, offset: 37939},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1085, col: 25, offset: 37939},
					expr: &litMatcher{
						pos:        position{line: 1085, col: 25, offset: 37939},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1089, col: 1, offset: 37984},
			expr: &actionExpr{
				pos: position{line: 1089, col: 25, offset: 38008},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 25, offset: 38008},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1089, col: 25, offset: 38008},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1089, col: 30, offset: 38013},
							expr: &litMatcher{
								pos:        position{line: 1089, col: 30, offset: 38013},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1097, col: 1, offset: 38118},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 13, offset: 38130},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 13, offset: 38130},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 35, offset: 38152},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1099, col: 1, offset: 38221},
			expr: &actionExpr{
				pos: position{line: 1099, col: 24, offset: 38244},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 24, offset: 38244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1099, col: 24, offset: 38244},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1099, col: 30, offset: 38250},
								expr: &ruleRefExpr{
									pos:  position{line: 1099, col: 31, offset: 38251},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1099, col: 49, offset: 38269},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 54, offset: 38274},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 64, offset: 38284},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1099, col: 93, offset: 38313},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1103, col: 1, offset: 38404},
			expr: &seqExpr{
				pos: position{line: 1103, col: 32, offset: 38435},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 32, offset: 38435},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1103, col: 59, offset: 38462},
						expr: &seqExpr{
							pos: position{line: 1103, col: 60, offset: 38463},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1103, col: 60, offset: 38463},
									expr: &litMatcher{
										pos:        position{line: 1103, col: 62, offset: 38465},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1103, col: 69, offset: 38472},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1103, col: 69, offset: 38472},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1103, col: 77, offset: 38480},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1105, col: 1, offset: 38547},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 31, offset: 38577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1105, col: 31, offset: 38577},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1106, col: 11, offset: 38593},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1106, col: 11, offset: 38593},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1106, col: 19, offset: 38601},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 20, offset: 38602},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 11, offset: 38621},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 11, offset: 38652},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 11, offset: 38676},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 38698},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 11, offset: 38720},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 38745},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 11, offset: 38770},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 11, offset: 38797},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 11, offset: 38815},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 38837},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1117, col: 11, offset: 38860},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 11, offset: 38876},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 11, offset: 38905},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 38938},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 38967},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1124, col: 1, offset: 39009},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 5, offset: 39054},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1125, col: 5, offset: 39054},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1126, col: 7, offset: 39152},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1126, col: 7, offset: 39152},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1126, col: 7, offset: 39152},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1126, col: 12, offset: 39157},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1130, col: 1, offset: 39324},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 24, offset: 39347},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1130, col: 24, offset: 39347},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1130, col: 24, offset: 39347},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1130, col: 24, offset: 39347},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1130, col: 30, offset: 39353},
										expr: &ruleRefExpr{
											pos:  position{line: 1130, col: 31, offset: 39354},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1130, col: 51, offset: 39374},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1130, col: 51, offset: 39374},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1130, col: 55, offset: 39378},
											expr: &litMatcher{
												pos:        position{line: 1130, col: 56, offset: 39379},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 61, offset: 39384},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 71, offset: 39394},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 100, offset: 39423},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1130, col: 104, offset: 39427},
									expr: &notExpr{
										pos: position{line: 1130, col: 106, offset: 39429},
										expr: &ruleRefExpr{
											pos:  position{line: 1130, col: 107, offset: 39430},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1132, col: 5, offset: 39626},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1132, col: 5, offset: 39626},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1132, col: 5, offset: 39626},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1132, col: 11, offset: 39632},
										expr: &ruleRefExpr{
											pos:  position{line: 1132, col: 12, offset: 39633},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1132, col: 30, offset: 39651},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 34, offset: 39655},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1132, col: 44, offset: 39665},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1132, col: 44, offset: 39665},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 48, offset: 39669},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1132, col: 77, offset: 39698},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1136, col: 1, offset: 39908},
			expr: &seqExpr{
				pos: position{line: 1136, col: 32, offset: 39939},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1136, col: 32, offset: 39939},
						expr: &ruleRefExpr{
							pos:  position{line: 1136, col: 33, offset: 39940},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1136, col: 39, offset: 39946},
						expr: &ruleRefExpr{
							pos:  position{line: 1136, col: 39, offset: 39946},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1138, col: 1, offset: 39977},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 31, offset: 40007},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1138, col: 31, offset: 40007},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1139, col: 11, offset: 40023},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1139, col: 11, offset: 40023},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1139, col: 19, offset: 40031},
								expr: &ruleRefExpr{
									pos:  position{line: 1139, col: 20, offset: 40032},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 40051},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 40082},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1142, col: 11, offset: 40106},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1142, col: 11, offset: 40106},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 11, offset: 40106},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1142, col: 18, offset: 40113},
								expr: &seqExpr{
									pos: position{line: 1142, col: 19, offset: 40114},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1142, col: 19, offset: 40114},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1142, col: 23, offset: 40118},
											expr: &litMatcher{
												pos:        position{line: 1142, col: 24, offset: 40119},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40136},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 40158},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 40180},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40205},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40230},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 40257},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40275},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40297},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40321},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40339},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 40368},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 40401},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 40430},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1157, col: 1, offset: 40470},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 40515},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1158, col: 5, offset: 40515},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1159, col: 7, offset: 40613},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1159, col: 7, offset: 40613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 7, offset: 40613},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1159, col: 11, offset: 40617},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1163, col: 1, offset: 40784},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 40809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 40809},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 40809},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1164, col: 5, offset: 40809},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 18, offset: 40822},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 40, offset: 40844},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 45, offset: 40849},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 55, offset: 40859},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 84, offset: 40888},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 9, offset: 41047},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1166, col: 9, offset: 41047},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1166, col: 9, offset: 41047},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 22, offset: 41060},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 44, offset: 41082},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 49, offset: 41087},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 59, offset: 41097},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 88, offset: 41126},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 9, offset: 41329},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1169, col: 9, offset: 41329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 9, offset: 41329},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 22, offset: 41342},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 44, offset: 41364},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 48, offset: 41368},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 58, offset: 41378},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 87, offset: 41407},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1177, col: 1, offset: 41623},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 15, offset: 41637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1177, col: 15, offset: 41637},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 39, offset: 41661},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1179, col: 1, offset: 41686},
			expr: &actionExpr{
				pos: position{line: 1179, col: 26, offset: 41711},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 26, offset: 41711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1179, col: 26, offset: 41711},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1179, col: 32, offset: 41717},
								expr: &ruleRefExpr{
									pos:  position{line: 1179, col: 33, offset: 41718},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1179, col: 51, offset: 41736},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 56, offset: 41741},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 66, offset: 41751},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1179, col: 97, offset: 41782},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1183, col: 1, offset: 41920},
			expr: &seqExpr{
				pos: position{line: 1183, col: 34, offset: 41953},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1183, col: 34, offset: 41953},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1183, col: 63, offset: 41982},
						expr: &seqExpr{
							pos: position{line: 1183, col: 64, offset: 41983},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1183, col: 64, offset: 41983},
									expr: &litMatcher{
										pos:        position{line: 1183, col: 66, offset: 41985},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1183, col: 73, offset: 41992},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1183, col: 73, offset: 41992},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1183, col: 81, offset: 42000},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1185, col: 1, offset: 42069},
			expr: &choiceExpr{
				pos: position{line: 1185, col: 33, offset: 42101},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1185, col: 33, offset: 42101},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1186, col: 11, offset: 42117},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1186, col: 11, offset: 42117},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1186, col: 19, offset: 42125},
								expr: &ruleRefExpr{
									pos:  position{line: 1186, col: 20, offset: 42126},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 11, offset: 42145},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 11, offset: 42178},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 11, offset: 42202},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 11, offset: 42222},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 11, offset: 42244},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 11, offset: 42269},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 11, offset: 42294},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 11, offset: 42321},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 11, offset: 42339},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1196, col: 11, offset: 42361},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 11, offset: 42385},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 11, offset: 42402},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 11, offset: 42431},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 11, offset: 42460},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1202, col: 1, offset: 42502},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 5, offset: 42549},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1203, col: 5, offset: 42549},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1204, col: 7, offset: 42649},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1204, col: 7, offset: 42649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1204, col: 7, offset: 42649},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1204, col: 12, offset: 42654},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1208, col: 1, offset: 42823},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 26, offset: 42848},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1208, col: 26, offset: 42848},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1208, col: 26, offset: 42848},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1208, col: 26, offset: 42848},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1208, col: 32, offset: 42854},
										expr: &ruleRefExpr{
											pos:  position{line: 1208, col: 33, offset: 42855},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1208, col: 52, offset: 42874},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1208, col: 52, offset: 42874},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1208, col: 56, offset: 42878},
											expr: &litMatcher{
												pos:        position{line: 1208, col: 57, offset: 42879},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1208, col: 62, offset: 42884},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1208, col: 72, offset: 42894},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1208, col: 103, offset: 42925},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 43117},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1210, col: 5, offset: 43117},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1210, col: 5, offset: 43117},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1210, col: 11, offset: 43123},
										expr: &ruleRefExpr{
											pos:  position{line: 1210, col: 12, offset: 43124},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 30, offset: 43142},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 34, offset: 43146},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1210, col: 44, offset: 43156},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1210, col: 44, offset: 43156},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1210, col: 48, offset: 43160},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 79, offset: 43191},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1214, col: 1, offset: 43405},
			expr: &seqExpr{
				pos: position{line: 1214, col: 34, offset: 43438},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1214, col: 34, offset: 43438},
						expr: &ruleRefExpr{
							pos:  position{line: 1214, col: 35, offset: 43439},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1214, col: 41, offset: 43445},
						expr: &ruleRefExpr{
							pos:  position{line: 1214, col: 41, offset: 43445},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1216, col: 1, offset: 43478},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 33, offset: 43510},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1216, col: 33, offset: 43510},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1217, col: 11, offset: 43526},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1217, col: 11, offset: 43526},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1217, col: 19, offset: 43534},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 20, offset: 43535},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 43554},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 43587},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1220, col: 11, offset: 43611},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1220, col: 11, offset: 43611},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 11, offset: 43611},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1220, col: 18, offset: 43618},
								expr: &seqExpr{
									pos: position{line: 1220, col: 19, offset: 43619},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1220, col: 19, offset: 43619},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1220, col: 23, offset: 43623},
											expr: &litMatcher{
												pos:        position{line: 1220, col: 24, offset: 43624},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 43641},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 43661},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 43683},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 43708},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 43733},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 43760},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 43778},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 43800},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 43824},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43842},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 43872},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 43905},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43934},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1235, col: 1, offset: 43976},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 44023},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1236, col: 5, offset: 44023},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1237, col: 7, offset: 44123},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1237, col: 7, offset: 44123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1237, col: 7, offset: 44123},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1237, col: 11, offset: 44127},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1241, col: 1, offset: 44297},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 44324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 44324},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 44324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 44324},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 18, offset: 44337},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 40, offset: 44359},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 45, offset: 44364},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 55, offset: 44374},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 86, offset: 44405},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1244, col: 9, offset: 44564},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1244, col: 9, offset: 44564},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1244, col: 9, offset: 44564},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1244, col: 22, offset: 44577},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1244, col: 44, offset: 44599},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1244, col: 49, offset: 44604},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1244, col: 59, offset: 44614},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1244, col: 90, offset: 44645},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1247, col: 9, offset: 44848},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1247, col: 9, offset: 44848},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1247, col: 9, offset: 44848},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 22, offset: 44861},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 44, offset: 44883},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1247, col: 48, offset: 44887},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 58, offset: 44897},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 89, offset: 44928},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1254, col: 1, offset: 45145},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 18, offset: 45162},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 18, offset: 45162},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 45, offset: 45189},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1256, col: 1, offset: 45217},
			expr: &actionExpr{
				pos: position{line: 1256, col: 29, offset: 45245},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 29, offset: 45245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1256, col: 29, offset: 45245},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1256, col: 35, offset: 45251},
								expr: &ruleRefExpr{
									pos:  position{line: 1256, col: 36, offset: 45252},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1256, col: 54, offset: 45270},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 59, offset: 45275},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1256, col: 69, offset: 45285},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1256, col: 103, offset: 45319},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1260, col: 1, offset: 45460},
			expr: &seqExpr{
				pos: position{line: 1260, col: 37, offset: 45496},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1260, col: 37, offset: 45496},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1260, col: 69, offset: 45528},
						expr: &seqExpr{
							pos: position{line: 1260, col: 70, offset: 45529},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1260, col: 70, offset: 45529},
									expr: &litMatcher{
										pos:        position{line: 1260, col: 72, offset: 45531},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1260, col: 79, offset: 45538},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1260, col: 79, offset: 45538},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1260, col: 87, offset: 45546},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1262, col: 1, offset: 45617},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 36, offset: 45652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 36, offset: 45652},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1263, col: 11, offset: 45668},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1263, col: 11, offset: 45668},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1263, col: 19, offset: 45676},
								expr: &ruleRefExpr{
									pos:  position{line: 1263, col: 20, offset: 45677},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 45696},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 45714},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 11, offset: 45750},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 45774},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 45794},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 45816},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 11, offset: 45838},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 11, offset: 45863},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 11, offset: 45890},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 11, offset: 45912},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 11, offset: 45935},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1275, col: 11, offset: 45951},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 11, offset: 45981},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 11, offset: 46010},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1279, col: 1, offset: 46055},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 5, offset: 46105},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1280, col: 5, offset: 46105},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1281, col: 7, offset: 46208},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1281, col: 7, offset: 46208},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1281, col: 7, offset: 46208},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1281, col: 12, offset: 46213},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1285, col: 1, offset: 46385},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 29, offset: 46413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1285, col: 29, offset: 46413},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1285, col: 29, offset: 46413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1285, col: 29, offset: 46413},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1285, col: 35, offset: 46419},
										expr: &ruleRefExpr{
											pos:  position{line: 1285, col: 36, offset: 46420},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1285, col: 55, offset: 46439},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1285, col: 55, offset: 46439},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1285, col: 59, offset: 46443},
											expr: &litMatcher{
												pos:        position{line: 1285, col: 60, offset: 46444},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 65, offset: 46449},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1285, col: 75, offset: 46459},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1285, col: 109, offset: 46493},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 46688},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1287, col: 5, offset: 46688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1287, col: 5, offset: 46688},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1287, col: 11, offset: 46694},
										expr: &ruleRefExpr{
											pos:  position{line: 1287, col: 12, offset: 46695},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 30, offset: 46713},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 34, offset: 46717},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1287, col: 44, offset: 46727},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1287, col: 44, offset: 46727},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1287, col: 48, offset: 46731},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 82, offset: 46765},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1291, col: 1, offset: 46983},
			expr: &seqExpr{
				pos: position{line: 1291, col: 37, offset: 47019},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1291, col: 37, offset: 47019},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 38, offset: 47020},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1291, col: 44, offset: 47026},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 44, offset: 47026},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1293, col: 1, offset: 47062},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 37, offset: 47098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 37, offset: 47098},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1294, col: 11, offset: 47114},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1294, col: 11, offset: 47114},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1294, col: 19, offset: 47122},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 20, offset: 47123},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 47142},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 47178},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1297, col: 11, offset: 47202},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1297, col: 11, offset: 47202},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 11, offset: 47202},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1297, col: 18, offset: 47209},
								expr: &seqExpr{
									pos: position{line: 1297, col: 19, offset: 47210},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1297, col: 19, offset: 47210},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1297, col: 23, offset: 47214},
											expr: &litMatcher{
												pos:        position{line: 1297, col: 24, offset: 47215},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 47344},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 47364},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 47386},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 47408},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 47433},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1303, col: 11, offset: 47460},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1303, col: 11, offset: 47460},
								expr: &litMatcher{
									pos:        position{line: 1303, col: 12, offset: 47461},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1303, col: 16, offset: 47465},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 47483},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 47505},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 47529},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 47546},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 47576},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 47609},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 47638},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1312, col: 1, offset: 47683},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 5, offset: 47733},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1313, col: 5, offset: 47733},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 7, offset: 47836},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1314, col: 7, offset: 47836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 7, offset: 47836},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1314, col: 11, offset: 47840},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1318, col: 1, offset: 48013},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 48043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 48043},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1319, col: 5, offset: 48043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1319, col: 5, offset: 48043},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 18, offset: 48056},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 40, offset: 48078},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1319, col: 45, offset: 48083},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 55, offset: 48093},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 89, offset: 48127},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 9, offset: 48286},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1321, col: 9, offset: 48286},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1321, col: 9, offset: 48286},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 22, offset: 48299},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 44, offset: 48321},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 49, offset: 48326},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 59, offset: 48336},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 93, offset: 48370},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 9, offset: 48573},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1324, col: 9, offset: 48573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1324, col: 9, offset: 48573},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 22, offset: 48586},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 44, offset: 48608},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 48, offset: 48612},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 58, offset: 48622},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 92, offset: 48656},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1332, col: 1, offset: 48872},
			expr: &choiceExpr{
				pos: position{line: 1332, col: 15, offset: 48886},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1332, col: 15, offset: 48886},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 39, offset: 48910},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1334, col: 1, offset: 48935},
			expr: &actionExpr{
				pos: position{line: 1334, col: 26, offset: 48960},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1334, col: 26, offset: 48960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1334, col: 26, offset: 48960},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1334, col: 32, offset: 48966},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 33, offset: 48967},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1334, col: 51, offset: 48985},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1334, col: 56, offset: 48990},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1334, col: 66, offset: 49000},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1334, col: 97, offset: 49031},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1338, col: 1, offset: 49169},
			expr: &seqExpr{
				pos: position{line: 1338, col: 34, offset: 49202},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1338, col: 34, offset: 49202},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1338, col: 63, offset: 49231},
						expr: &seqExpr{
							pos: position{line: 1338, col: 64, offset: 49232},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1338, col: 64, offset: 49232},
									expr: &litMatcher{
										pos:        position{line: 1338, col: 66, offset: 49234},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1338, col: 73, offset: 49241},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1338, col: 73, offset: 49241},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1338, col: 81, offset: 49249},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1340, col: 1, offset: 49318},
			expr: &choiceExpr{
				pos: position{line: 1340, col: 33, offset: 49350},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 33, offset: 49350},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 49366},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1342, col: 11, offset: 49399},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1342, col: 11, offset: 49399},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1342, col: 19, offset: 49407},
								expr: &ruleRefExpr{
									pos:  position{line: 1342, col: 20, offset: 49408},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 49427},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 49451},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 49471},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 49493},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 49518},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 49543},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 49570},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 49588},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 49610},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 49633},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 49649},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 11, offset: 49678},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 11, offset: 49707},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1357, col: 1, offset: 49749},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 49796},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1358, col: 5, offset: 49796},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1359, col: 7, offset: 49896},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1359, col: 7, offset: 49896},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1359, col: 7, offset: 49896},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 12, offset: 49901},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1363, col: 1, offset: 50070},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 26, offset: 50095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1363, col: 26, offset: 50095},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1363, col: 26, offset: 50095},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 26, offset: 50095},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1363, col: 32, offset: 50101},
										expr: &ruleRefExpr{
											pos:  position{line: 1363, col: 33, offset: 50102},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1363, col: 52, offset: 50121},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1363, col: 52, offset: 50121},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1363, col: 56, offset: 50125},
											expr: &litMatcher{
												pos:        position{line: 1363, col: 57, offset: 50126},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 62, offset: 50131},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 72, offset: 50141},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 103, offset: 50172},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 50364},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1365, col: 5, offset: 50364},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1365, col: 5, offset: 50364},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1365, col: 11, offset: 50370},
										expr: &ruleRefExpr{
											pos:  position{line: 1365, col: 12, offset: 50371},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 30, offset: 50389},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1365, col: 34, offset: 50393},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1365, col: 44, offset: 50403},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1365, col: 44, offset: 50403},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1365, col: 48, offset: 50407},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 79, offset: 50438},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1369, col: 1, offset: 50651},
			expr: &seqExpr{
				pos: position{line: 1369, col: 34, offset: 50684},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1369, col: 34, offset: 50684},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 35, offset: 50685},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1369, col: 41, offset: 50691},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 41, offset: 50691},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1371, col: 1, offset: 50724},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 33, offset: 50756},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1371, col: 33, offset: 50756},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 50772},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1373, col: 11, offset: 50805},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1373, col: 11, offset: 50805},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1373, col: 19, offset: 50813},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 20, offset: 50814},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 50833},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1375, col: 11, offset: 50857},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1375, col: 11, offset: 50857},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 11, offset: 50857},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1375, col: 18, offset: 50864},
								expr: &seqExpr{
									pos: position{line: 1375, col: 19, offset: 50865},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1375, col: 19, offset: 50865},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1375, col: 23, offset: 50869},
											expr: &litMatcher{
												pos:        position{line: 1375, col: 24, offset: 50870},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 50887},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 50907},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 50929},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 50954},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 50979},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 51006},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 51024},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 51046},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 11, offset: 51069},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 11, offset: 51085},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 11, offset: 51114},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 11, offset: 51147},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 11, offset: 51176},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1390, col: 1, offset: 51218},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 5, offset: 51265},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1391, col: 5, offset: 51265},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1392, col: 7, offset: 51363},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1392, col: 7, offset: 51363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1392, col: 7, offset: 51363},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1392, col: 11, offset: 51367},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1396, col: 1, offset: 51534},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 51560},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1397, col: 5, offset: 51560},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1397, col: 5, offset: 51560},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1397, col: 5, offset: 51560},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 18, offset: 51573},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 40, offset: 51595},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1397, col: 45, offset: 51600},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1397, col: 55, offset: 51610},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1397, col: 86, offset: 51641},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1399, col: 9, offset: 51800},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1399, col: 9, offset: 51800},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1399, col: 9, offset: 51800},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1399, col: 22, offset: 51813},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1399, col: 44, offset: 51835},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1399, col: 49, offset: 51840},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1399, col: 59, offset: 51850},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1399, col: 90, offset: 51881},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 9, offset: 52084},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1402, col: 9, offset: 52084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1402, col: 9, offset: 52084},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 22, offset: 52097},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 44, offset: 52119},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1402, col: 48, offset: 52123},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1402, col: 58, offset: 52133},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1402, col: 89, offset: 52164},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1407, col: 1, offset: 52319},
			expr: &actionExpr{
				pos: position{line: 1407, col: 18, offset: 52336},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 18, offset: 52336},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1407, col: 18, offset: 52336},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1407, col: 24, offset: 52342},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 25, offset: 52343},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1407, col: 43, offset: 52361},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1407, col: 47, offset: 52365},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 56, offset: 52374},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1407, col: 78, offset: 52396},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1411, col: 1, offset: 52496},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 25, offset: 52520},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1411, col: 25, offset: 52520},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 38, offset: 52533},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1413, col: 1, offset: 52554},
			expr: &actionExpr{
				pos: position{line: 1413, col: 21, offset: 52574},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1413, col: 21, offset: 52574},
					expr: &charClassMatcher{
						pos:        position{line: 1413, col: 21, offset: 52574},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1417, col: 1, offset: 52655},
			expr: &actionExpr{
				pos: position{line: 1417, col: 25, offset: 52679},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 25, offset: 52679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1417, col: 25, offset: 52679},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 38, offset: 52692},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1417, col: 60, offset: 52714},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 64, offset: 52718},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 73, offset: 52727},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1417, col: 95, offset: 52749},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1421, col: 1, offset: 52882},
			expr: &actionExpr{
				pos: position{line: 1421, col: 20, offset: 52901},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 20, offset: 52901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1421, col: 20, offset: 52901},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1421, col: 26, offset: 52907},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 27, offset: 52908},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1421, col: 45, offset: 52926},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 49, offset: 52930},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 58, offset: 52939},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1421, col: 82, offset: 52963},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1425, col: 1, offset: 53065},
			expr: &choiceExpr{
				pos: position{line: 1425, col: 27, offset: 53091},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1425, col: 27, offset: 53091},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 40, offset: 53104},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1427, col: 1, offset: 53127},
			expr: &actionExpr{
				pos: position{line: 1427, col: 23, offset: 53149},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1427, col: 23, offset: 53149},
					expr: &charClassMatcher{
						pos:        position{line: 1427, col: 23, offset: 53149},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1431, col: 1, offset: 53230},
			expr: &actionExpr{
				pos: position{line: 1431, col: 27, offset: 53256},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 27, offset: 53256},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 27, offset: 53256},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1431, col: 40, offset: 53269},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1431, col: 62, offset: 53291},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1431, col: 66, offset: 53295},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1431, col: 75, offset: 53304},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1431, col: 99, offset: 53328},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1438, col: 1, offset: 53577},
			expr: &choiceExpr{
				pos: position{line: 1438, col: 22, offset: 53598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1438, col: 22, offset: 53598},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 46, offset: 53622},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 70, offset: 53646},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1440, col: 1, offset: 53666},
			expr: &litMatcher{
				pos:        position{line: 1440, col: 32, offset: 53697},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1442, col: 1, offset: 53704},
			expr: &actionExpr{
				pos: position{line: 1442, col: 26, offset: 53729},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 26, offset: 53729},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1442, col: 26, offset: 53729},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 54, offset: 53757},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 63, offset: 53766},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1442, col: 93, offset: 53796},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1442, col: 121, offset: 53824},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 122, offset: 53825},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1446, col: 1, offset: 53934},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 33, offset: 53966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1446, col: 34, offset: 53967},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1446, col: 34, offset: 53967},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1446, col: 35, offset: 53968},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1446, col: 35, offset: 53968},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 36, offset: 53969},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1446, col: 64, offset: 53997},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 65, offset: 53998},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1446, col: 71, offset: 54004},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 72, offset: 54005},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1446, col: 80, offset: 54013,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1446, col: 83, offset: 54016},
									expr: &seqExpr{
										pos: position{line: 1446, col: 84, offset: 54017},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1446, col: 84, offset: 54017},
												expr: &seqExpr{
													pos: position{line: 1446, col: 86, offset: 54019},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1446, col: 86, offset: 54019},
															expr: &ruleRefExpr{
																pos:  position{line: 1446, col: 86, offset: 54019},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1446, col: 93, offset: 54026},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1446, col: 122, offset: 54055},
												expr: &ruleRefExpr{
													pos:  position{line: 1446, col: 123, offset: 54056},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1446, col: 151, offset: 54084},
												expr: &ruleRefExpr{
													pos:  position{line: 1446, col: 152, offset: 54085},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1446, col: 160, offset: 54093,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1448, col: 7, offset: 54237},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1448, col: 8, offset: 54238},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1448, col: 8, offset: 54238},
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 9, offset: 54239},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1448, col: 15, offset: 54245},
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 16, offset: 54246},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1448, col: 24, offset: 54254},
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 25, offset: 54255},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1448, col: 53, offset: 54283,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1452, col: 1, offset: 54369},
			expr: &litMatcher{
				pos:        position{line: 1452, col: 32, offset: 54400},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1454, col: 1, offset: 54409},
			expr: &actionExpr{
				pos: position{line: 1454, col: 26, offset: 54434},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 26, offset: 54434},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1454, col: 26, offset: 54434},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 54, offset: 54462},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 63, offset: 54471},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1454, col: 93, offset: 54501},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1454, col: 121, offset: 54529},
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 122, offset: 54530},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1458, col: 1, offset: 54639},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 33, offset: 54671},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1458, col: 34, offset: 54672},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1458, col: 34, offset: 54672},
							expr: &seqExpr{
								pos: position{line: 1458, col: 35, offset: 54673},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1458, col: 35, offset: 54673},
										expr: &ruleRefExpr{
											pos:  position{line: 1458, col: 36, offset: 54674},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1458, col: 64, offset: 54702,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1460, col: 7, offset: 54869},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1460, col: 7, offset: 54869},
							expr: &seqExpr{
								pos: position{line: 1460, col: 8, offset: 54870},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1460, col: 8, offset: 54870},
										expr: &ruleRefExpr{
											pos:  position{line: 1460, col: 9, offset: 54871},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1460, col: 15, offset: 54877},
										expr: &ruleRefExpr{
											pos:  position{line: 1460, col: 16, offset: 54878},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1460, col: 24, offset: 54886},
										expr: &ruleRefExpr{
											pos:  position{line: 1460, col: 25, offset: 54887},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1460, col: 53, offset: 54915,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1464, col: 1, offset: 55002},
			expr: &choiceExpr{
				pos: position{line: 1464, col: 21, offset: 55022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1464, col: 21, offset: 55022},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1464, col: 21, offset: 55022},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1464, col: 21, offset: 55022},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 30, offset: 55031},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1464, col: 38, offset: 55039},
										expr: &ruleRefExpr{
											pos:  position{line: 1464, col: 39, offset: 55040},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 67, offset: 55068},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1466, col: 5, offset: 55166},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1466, col: 5, offset: 55166},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1466, col: 5, offset: 55166},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1466, col: 15, offset: 55176},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1466, col: 23, offset: 55184},
										expr: &choiceExpr{
											pos: position{line: 1466, col: 24, offset: 55185},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1466, col: 24, offset: 55185},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1466, col: 37, offset: 55198},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1466, col: 65, offset: 55226},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1470, col: 1, offset: 55326},
			expr: &actionExpr{
				pos: position{line: 1470, col: 30, offset: 55355},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1470, col: 30, offset: 55355},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1477, col: 1, offset: 55535},
			expr: &choiceExpr{
				pos: position{line: 1477, col: 19, offset: 55553},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1477, col: 19, offset: 55553},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 44, offset: 55578},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1479, col: 1, offset: 55605},
			expr: &choiceExpr{
				pos: position{line: 1479, col: 27, offset: 55631},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1479, col: 27, offset: 55631},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1479, col: 27, offset: 55631},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1479, col: 27, offset: 55631},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1479, col: 32, offset: 55636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 36, offset: 55640},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1479, col: 40, offset: 55644},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 40, offset: 55644},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1479, col: 47, offset: 55651},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1479, col: 51, offset: 55655},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 58, offset: 55662},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1479, col: 79, offset: 55683},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1481, col: 5, offset: 55768},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1481, col: 5, offset: 55768},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1481, col: 5, offset: 55768},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1481, col: 10, offset: 55773},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1481, col: 14, offset: 55777},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1481, col: 18, offset: 55781},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1485, col: 1, offset: 55857},
			expr: &actionExpr{
				pos: position{line: 1485, col: 27, offset: 55883},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 27, offset: 55883},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1485, col: 27, offset: 55883},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 35, offset: 55891},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 40, offset: 55896},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 54, offset: 55910},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 72, offset: 55928},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1489, col: 1, offset: 56055},
			expr: &ruleRefExpr{
				pos:  position{line: 1489, col: 24, offset: 56078},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1494, col: 1, offset: 56205},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 9, offset: 56213},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1494, col: 9, offset: 56213},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 24, offset: 56228},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1497, col: 1, offset: 56312},
			expr: &actionExpr{
				pos: position{line: 1497, col: 17, offset: 56328},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 17, offset: 56328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1497, col: 17, offset: 56328},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 25, offset: 56336},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 30, offset: 56341},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 40, offset: 56351},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 58, offset: 56369},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1501, col: 1, offset: 56484},
			expr: &actionExpr{
				pos: position{line: 1501, col: 17, offset: 56500},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1501, col: 17, offset: 56500},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1501, col: 17, offset: 56500},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 22, offset: 56505},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 42, offset: 56525},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1501, col: 59, offset: 56542},
								expr: &ruleRefExpr{
									pos:  position{line: 1501, col: 60, offset: 56543},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1505, col: 1, offset: 56640},
			expr: &actionExpr{
				pos: position{line: 1505, col: 19, offset: 56658},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1505, col: 19, offset: 56658},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1505, col: 19, offset: 56658},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1505, col: 23, offset: 56662},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1505, col: 33, offset: 56672},
								expr: &ruleRefExpr{
									pos:  position{line: 1505, col: 34, offset: 56673},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1506, col: 5, offset: 56706},
							expr: &ruleRefExpr{
								pos:  position{line: 1506, col: 5, offset: 56706},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1506, col: 12, offset: 56713},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1506, col: 23, offset: 56724},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 24, offset: 56725},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1506, col: 43, offset: 56744},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1510, col: 1, offset: 56865},
			expr: &actionExpr{
				pos: position{line: 1510, col: 30, offset: 56894},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1510, col: 30, offset: 56894},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1512, col: 5, offset: 56947},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1512, col: 6, offset: 56948},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1512, col: 6, offset: 56948},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1512, col: 6, offset: 56948},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1512, col: 11, offset: 56953},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1512, col: 20, offset: 56962},
												expr: &choiceExpr{
													pos: position{line: 1512, col: 21, offset: 56963},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1512, col: 21, offset: 56963},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1512, col: 36, offset: 56978},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1512, col: 49, offset: 56991},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1512, col: 71, offset: 57013},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1512, col: 76, offset: 57018},
											expr: &notExpr{
												pos: position{line: 1512, col: 78, offset: 57020},
												expr: &litMatcher{
													pos:        position{line: 1512, col: 79, offset: 57021},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1512, col: 84, offset: 57026},
											expr: &litMatcher{
												pos:        position{line: 1512, col: 84, offset: 57026},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1516, col: 6, offset: 57157},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1516, col: 6, offset: 57157},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1516, col: 6, offset: 57157},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1516, col: 15, offset: 57166},
												expr: &choiceExpr{
													pos: position{line: 1516, col: 16, offset: 57167},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1516, col: 16, offset: 57167},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1516, col: 31, offset: 57182},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1516, col: 44, offset: 57195},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1516, col: 68, offset: 57219},
											expr: &notExpr{
												pos: position{line: 1516, col: 70, offset: 57221},
												expr: &litMatcher{
													pos:        position{line: 1516, col: 71, offset: 57222},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1516, col: 76, offset: 57227},
											expr: &litMatcher{
												pos:        position{line: 1516, col: 76, offset: 57227},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1522, col: 1, offset: 57347},
			expr: &actionExpr{
				pos: position{line: 1522, col: 18, offset: 57364},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1522, col: 18, offset: 57364},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1526, col: 1, offset: 57454},
			expr: &actionExpr{
				pos: position{line: 1526, col: 24, offset: 57477},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1526, col: 24, offset: 57477},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1530, col: 1, offset: 57574},
			expr: &actionExpr{
				pos: position{line: 1530, col: 26, offset: 57599},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1530, col: 26, offset: 57599},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1535, col: 1, offset: 57760},
			expr: &actionExpr{
				pos: position{line: 1536, col: 5, offset: 57780},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 5, offset: 57780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1536, col: 5, offset: 57780},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1536, col: 14, offset: 57789},
								expr: &choiceExpr{
									pos: position{line: 1536, col: 15, offset: 57790},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1536, col: 15, offset: 57790},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1537, col: 11, offset: 57806},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1538, col: 11, offset: 57824},
											expr: &ruleRefExpr{
												pos:  position{line: 1538, col: 11, offset: 57824},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1539, col: 11, offset: 57843},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1540, col: 11, offset: 57868},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1541, col: 11, offset: 57891},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1542, col: 11, offset: 57920},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1543, col: 11, offset: 57939},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1543, col: 21, offset: 57949},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1547, col: 1, offset: 58023},
			expr: &choiceExpr{
				pos: position{line: 1547, col: 17, offset: 58039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1547, col: 17, offset: 58039},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1547, col: 40, offset: 58062},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1550, col: 1, offset: 58193},
			expr: &actionExpr{
				pos: position{line: 1550, col: 25, offset: 58217},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 25, offset: 58217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1550, col: 25, offset: 58217},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 33, offset: 58225},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1550, col: 38, offset: 58230},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1550, col: 38, offset: 58230},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1550, col: 57, offset: 58249},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 79, offset: 58271},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 97, offset: 58289},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1554, col: 1, offset: 58404},
			expr: &actionExpr{
				pos: position{line: 1554, col: 25, offset: 58428},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1554, col: 25, offset: 58428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1554, col: 25, offset: 58428},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1554, col: 30, offset: 58433},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1554, col: 48, offset: 58451},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1554, col: 65, offset: 58468},
								expr: &ruleRefExpr{
									pos:  position{line: 1554, col: 66, offset: 58469},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1561, col: 1, offset: 58671},
			expr: &actionExpr{
				pos: position{line: 1561, col: 15, offset: 58685},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1561, col: 15, offset: 58685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1561, col: 15, offset: 58685},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1561, col: 26, offset: 58696},
								expr: &ruleRefExpr{
									pos:  position{line: 1561, col: 27, offset: 58697},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1561, col: 45, offset: 58715},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 55, offset: 58725},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 61, offset: 58731},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 71, offset: 58741},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 84, offset: 58754},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1561, col: 102, offset: 58772},
							expr: &ruleRefExpr{
								pos:  position{line: 1561, col: 102, offset: 58772},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1561, col: 109, offset: 58779},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1565, col: 1, offset: 58890},
			expr: &actionExpr{
				pos: position{line: 1565, col: 16, offset: 58905},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1565, col: 16, offset: 58905},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1565, col: 16, offset: 58905},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1565, col: 25, offset: 58914},
							expr: &litMatcher{
								pos:        position{line: 1565, col: 26, offset: 58915},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 30, offset: 58919},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 36, offset: 58925},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1565, col: 46, offset: 58935},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1565, col: 59, offset: 58948},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1569, col: 1, offset: 59062},
			expr: &actionExpr{
				pos: position{line: 1569, col: 21, offset: 59082},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 21, offset: 59082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1569, col: 21, offset: 59082},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1569, col: 25, offset: 59086},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1569, col: 32, offset: 59093},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1569, col: 32, offset: 59093},
										expr: &ruleRefExpr{
											pos:  position{line: 1569, col: 32, offset: 59093},
											name: "ImageAltAttrInline",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1569, col: 52, offset: 59113},
										expr: &ruleRefExpr{
											pos:  position{line: 1569, col: 52, offset: 59113},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1569, col: 68, offset: 59129},
										expr: &ruleRefExpr{
											pos:  position{line: 1569, col: 68, offset: 59129},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1569, col: 85, offset: 59146},
										expr: &ruleRefExpr{
											pos:  position{line: 1569, col: 85, offset: 59146},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1569, col: 97, offset: 59158},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1573, col: 1, offset: 59216},
			expr: &choiceExpr{
				pos: position{line: 1573, col: 20, offset: 59235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1573, col: 20, offset: 59235},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1573, col: 36, offset: 59251},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1573, col: 51, offset: 59266},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1575, col: 1, offset: 59279},
			expr: &actionExpr{
				pos: position{line: 1575, col: 18, offset: 59296},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1575, col: 18, offset: 59296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1575, col: 18, offset: 59296},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 22, offset: 59300},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1575, col: 29, offset: 59307},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1575, col: 29, offset: 59307},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 29, offset: 59307},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1575, col: 43, offset: 59321},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 43, offset: 59321},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1575, col: 58, offset: 59336},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 58, offset: 59336},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1575, col: 74, offset: 59352},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 74, offset: 59352},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1575, col: 91, offset: 59369},
										expr: &ruleRefExpr{
											pos:  position{line: 1575, col: 91, offset: 59369},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1575, col: 103, offset: 59381},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1575, col: 107, offset: 59385},
							expr: &ruleRefExpr{
								pos:  position{line: 1575, col: 107, offset: 59385},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1575, col: 114, offset: 59392},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttrInline",
			pos:  position{line: 1579, col: 1, offset: 59450},
			expr: &actionExpr{
				pos: position{line: 1579, col: 23, offset: 59472},
				run: (*parser).callonImageAltAttrInline1,
				expr: &labeledExpr{
					pos:   position{line: 1579, col: 23, offset: 59472},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1579, col: 29, offset: 59478},
						name: "InlinePositionalValue",
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1583, col: 1, offset: 59582},
			expr: &actionExpr{
				pos: position{line: 1583, col: 17, offset: 59598},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 17, offset: 59598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1583, col: 17, offset: 59598},
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 17, offset: 59598},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1583, col: 24, offset: 59605},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 30, offset: 59611},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1583, col: 46, offset: 59627},
							expr: &ruleRefExpr{
								pos:  position{line: 1583, col: 46, offset: 59627},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1587, col: 1, offset: 59716},
			expr: &actionExpr{
				pos: position{line: 1587, col: 19, offset: 59734},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1587, col: 19, offset: 59734},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1587, col: 19, offset: 59734},
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 19, offset: 59734},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1587, col: 26, offset: 59741},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1587, col: 30, offset: 59745},
							expr: &ruleRefExpr{
								pos:  position{line: 1587, col: 30, offset: 59745},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1587, col: 37, offset: 59752},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1587, col: 43, offset: 59758},
								expr: &ruleRefExpr{
									pos:  position{line: 1587, col: 43, offset: 59758},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1594, col: 1, offset: 59914},
			expr: &actionExpr{
				pos: position{line: 1594, col: 20, offset: 59933},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 20, offset: 59933},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1594, col: 20, offset: 59933},
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 20, offset: 59933},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1594, col: 27, offset: 59940},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1594, col: 31, offset: 59944},
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 31, offset: 59944},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 38, offset: 59951},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1594, col: 44, offset: 59957},
								expr: &ruleRefExpr{
									pos:  position{line: 1594, col: 44, offset: 59957},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1605, col: 1, offset: 60311},
			expr: &actionExpr{
				pos: position{line: 1605, col: 15, offset: 60325},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1605, col: 15, offset: 60325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1605, col: 15, offset: 60325},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 23, offset: 60333},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1605, col: 34, offset: 60344},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1605, col: 34, offset: 60344},
									expr: &charClassMatcher{
										pos:        position{line: 1605, col: 34, offset: 60344},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 78, offset: 60388},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1605, col: 96, offset: 60406},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1609, col: 1, offset: 60513},
			expr: &actionExpr{
				pos: position{line: 1609, col: 19, offset: 60531},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1609, col: 19, offset: 60531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1609, col: 19, offset: 60531},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1609, col: 23, offset: 60535},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1609, col: 28, offset: 60540},
								expr: &ruleRefExpr{
									pos:  position{line: 1609, col: 28, offset: 60540},
									name: "IconSizeAttr",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1609, col: 42, offset: 60554},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1609, col: 49, offset: 60561},
								expr: &ruleRefExpr{
									pos:  position{line: 1609, col: 49, offset: 60561},
									name: "NamedAttr",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1609, col: 60, offset: 60572},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSizeAttr",
			pos:  position{line: 1613, col: 1, offset: 60637},
			expr: &actionExpr{
				pos: position{line: 1613, col: 17, offset: 60653},
				run: (*parser).callonIconSizeAttr1,
				expr: &labeledExpr{
					pos:   position{line: 1613, col: 17, offset: 60653},
					label: "size",
					expr: &ruleRefExpr{
						pos:  position{line: 1613, col: 22, offset: 60658},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1620, col: 1, offset: 60955},
			expr: &choiceExpr{
				pos: position{line: 1620, col: 19, offset: 60973},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1620, col: 19, offset: 60973},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1620, col: 19, offset: 60973},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1620, col: 19, offset: 60973},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1620, col: 32, offset: 60986},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1620, col: 41, offset: 60995},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1620, col: 58, offset: 61012},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1622, col: 5, offset: 61082},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1622, col: 5, offset: 61082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1622, col: 5, offset: 61082},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1622, col: 17, offset: 61094},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1622, col: 22, offset: 61099},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1622, col: 35, offset: 61112},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1622, col: 39, offset: 61116},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1622, col: 47, offset: 61124},
										expr: &ruleRefExpr{
											pos:  position{line: 1622, col: 48, offset: 61125},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1622, col: 66, offset: 61143},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1626, col: 1, offset: 61208},
			expr: &ruleRefExpr{
				pos:  position{line: 1626, col: 16, offset: 61223},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1628, col: 1, offset: 61236},
			expr: &actionExpr{
				pos: position{line: 1628, col: 20, offset: 61255},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1628, col: 20, offset: 61255},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1628, col: 29, offset: 61264},
						expr: &seqExpr{
							pos: position{line: 1628, col: 30, offset: 61265},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1628, col: 30, offset: 61265},
									expr: &litMatcher{
										pos:        position{line: 1628, col: 31, offset: 61266},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1628, col: 35, offset: 61270},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1635, col: 1, offset: 61601},
			expr: &actionExpr{
				pos: position{line: 1635, col: 19, offset: 61619},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1635, col: 19, offset: 61619},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1635, col: 19, offset: 61619},
							expr: &ruleRefExpr{
								pos:  position{line: 1635, col: 20, offset: 61620},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1636, col: 5, offset: 61709},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1636, col: 12, offset: 61716},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1636, col: 12, offset: 61716},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1637, col: 11, offset: 61740},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1638, col: 11, offset: 61765},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1639, col: 11, offset: 61790},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1640, col: 11, offset: 61812},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1641, col: 11, offset: 61836},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1642, col: 11, offset: 61865},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1643, col: 11, offset: 61893},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1644, col: 11, offset: 61910},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1648, col: 1, offset: 61955},
			expr: &choiceExpr{
				pos: position{line: 1648, col: 19, offset: 61973},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1648, col: 19, offset: 61973},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1648, col: 19, offset: 61973},
								expr: &ruleRefExpr{
									pos:  position{line: 1648, col: 21, offset: 61975},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1648, col: 31, offset: 61985},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1649, col: 19, offset: 62057},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1650, col: 19, offset: 62098},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1651, col: 19, offset: 62140},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 19, offset: 62182},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 19, offset: 62224},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 19, offset: 62263},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 19, offset: 62304},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1657, col: 1, offset: 62333},
			expr: &choiceExpr{
				pos: position{line: 1657, col: 20, offset: 62352},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1657, col: 20, offset: 62352},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 36, offset: 62368},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1659, col: 1, offset: 62384},
			expr: &actionExpr{
				pos: position{line: 1659, col: 17, offset: 62400},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1659, col: 17, offset: 62400},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1659, col: 17, offset: 62400},
							expr: &ruleRefExpr{
								pos:  position{line: 1659, col: 18, offset: 62401},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1659, col: 22, offset: 62405},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1659, col: 31, offset: 62414},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1659, col: 52, offset: 62435},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1659, col: 61, offset: 62444},
								expr: &ruleRefExpr{
									pos:  position{line: 1659, col: 62, offset: 62445},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1659, col: 73, offset: 62456},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1663, col: 1, offset: 62530},
			expr: &actionExpr{
				pos: position{line: 1663, col: 24, offset: 62553},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1663, col: 24, offset: 62553},
					expr: &seqExpr{
						pos: position{line: 1663, col: 25, offset: 62554},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1663, col: 25, offset: 62554},
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 26, offset: 62555},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1663, col: 36, offset: 62565},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1663, col: 36, offset: 62565},
										expr: &ruleRefExpr{
											pos:  position{line: 1663, col: 36, offset: 62565},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1663, col: 45, offset: 62574},
										expr: &charClassMatcher{
											pos:        position{line: 1663, col: 45, offset: 62574},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1667, col: 1, offset: 62628},
			expr: &oneOrMoreExpr{
				pos: position{line: 1667, col: 13, offset: 62640},
				expr: &ruleRefExpr{
					pos:  position{line: 1667, col: 13, offset: 62640},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1669, col: 1, offset: 62652},
			expr: &actionExpr{
				pos: position{line: 1669, col: 12, offset: 62663},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1669, col: 12, offset: 62663},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1669, col: 12, offset: 62663},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1669, col: 16, offset: 62667},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1669, col: 21, offset: 62672},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1669, col: 21, offset: 62672},
									expr: &charClassMatcher{
										pos:        position{line: 1669, col: 21, offset: 62672},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1669, col: 69, offset: 62720},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1669, col: 73, offset: 62724},
							expr: &ruleRefExpr{
								pos:  position{line: 1669, col: 73, offset: 62724},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1669, col: 80, offset: 62731},
							expr: &choiceExpr{
								pos: position{line: 1669, col: 82, offset: 62733},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1669, col: 82, offset: 62733},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1669, col: 88, offset: 62739},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1673, col: 1, offset: 62796},
			expr: &actionExpr{
				pos: position{line: 1673, col: 20, offset: 62815},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1673, col: 20, offset: 62815},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1673, col: 20, offset: 62815},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1673, col: 25, offset: 62820},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1673, col: 48, offset: 62843},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1673, col: 61, offset: 62856},
								expr: &ruleRefExpr{
									pos:  position{line: 1673, col: 61, offset: 62856},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1677, col: 1, offset: 62957},
			expr: &actionExpr{
				pos: position{line: 1677, col: 26, offset: 62982},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1677, col: 26, offset: 62982},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1677, col: 26, offset: 62982},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1677, col: 30, offset: 62986},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1677, col: 35, offset: 62991},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1677, col: 35, offset: 62991},
									expr: &charClassMatcher{
										pos:        position{line: 1677, col: 35, offset: 62991},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1677, col: 83, offset: 63039},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1677, col: 87, offset: 63043},
							expr: &ruleRefExpr{
								pos:  position{line: 1677, col: 87, offset: 63043},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1684, col: 1, offset: 63277},
			expr: &seqExpr{
				pos: position{line: 1684, col: 25, offset: 63301},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1684, col: 25, offset: 63301},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1684, col: 31, offset: 63307},
						expr: &ruleRefExpr{
							pos:  position{line: 1684, col: 31, offset: 63307},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1684, col: 38, offset: 63314},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1686, col: 1, offset: 63376},
			expr: &seqExpr{
				pos: position{line: 1686, col: 30, offset: 63405},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1686, col: 30, offset: 63405},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1686, col: 36, offset: 63411},
						expr: &ruleRefExpr{
							pos:  position{line: 1686, col: 36, offset: 63411},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1686, col: 43, offset: 63418},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1688, col: 1, offset: 63425},
			expr: &choiceExpr{
				pos: position{line: 1688, col: 28, offset: 63452},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1688, col: 29, offset: 63453},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1688, col: 29, offset: 63453},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1688, col: 35, offset: 63459},
								expr: &ruleRefExpr{
									pos:  position{line: 1688, col: 35, offset: 63459},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1688, col: 42, offset: 63466},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1688, col: 49, offset: 63473},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1690, col: 1, offset: 63480},
			expr: &actionExpr{
				pos: position{line: 1690, col: 16, offset: 63495},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1690, col: 16, offset: 63495},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1690, col: 16, offset: 63495},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1690, col: 27, offset: 63506},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 28, offset: 63507},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1690, col: 41, offset: 63520},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 67, offset: 63546},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1690, col: 76, offset: 63555},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1690, col: 104, offset: 63583},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1694, col: 1, offset: 63702},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1694, col: 31, offset: 63732},
				expr: &actionExpr{
					pos: position{line: 1694, col: 32, offset: 63733},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1694, col: 32, offset: 63733},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1694, col: 32, offset: 63733},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 33, offset: 63734},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1694, col: 57, offset: 63758},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 66, offset: 63767},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1701, col: 1, offset: 64111},
			expr: &seqExpr{
				pos: position{line: 1701, col: 26, offset: 64136},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1701, col: 26, offset: 64136},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1701, col: 33, offset: 64143},
						expr: &ruleRefExpr{
							pos:  position{line: 1701, col: 33, offset: 64143},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1701, col: 40, offset: 64150},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1703, col: 1, offset: 64157},
			expr: &seqExpr{
				pos: position{line: 1703, col: 31, offset: 64187},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1703, col: 31, offset: 64187},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1703, col: 38, offset: 64194},
						expr: &ruleRefExpr{
							pos:  position{line: 1703, col: 38, offset: 64194},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1703, col: 45, offset: 64201},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1705, col: 1, offset: 64208},
			expr: &choiceExpr{
				pos: position{line: 1705, col: 29, offset: 64236},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1705, col: 30, offset: 64237},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1705, col: 30, offset: 64237},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1705, col: 37, offset: 64244},
								expr: &ruleRefExpr{
									pos:  position{line: 1705, col: 37, offset: 64244},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1705, col: 44, offset: 64251},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1705, col: 51, offset: 64258},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1707, col: 1, offset: 64265},
			expr: &actionExpr{
				pos: position{line: 1707, col: 17, offset: 64281},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1707, col: 17, offset: 64281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1707, col: 17, offset: 64281},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1707, col: 28, offset: 64292},
								expr: &ruleRefExpr{
									pos:  position{line: 1707, col: 29, offset: 64293},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1707, col: 42, offset: 64306},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1707, col: 69, offset: 64333},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1707, col: 78, offset: 64342},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1707, col: 107, offset: 64371},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1711, col: 1, offset: 64492},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1711, col: 32, offset: 64523},
				expr: &actionExpr{
					pos: position{line: 1711, col: 33, offset: 64524},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1711, col: 33, offset: 64524},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1711, col: 33, offset: 64524},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 34, offset: 64525},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1711, col: 59, offset: 64550},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 68, offset: 64559},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1718, col: 1, offset: 64903},
			expr: &seqExpr{
				pos: position{line: 1718, col: 26, offset: 64928},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1718, col: 26, offset: 64928},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1718, col: 33, offset: 64935},
						expr: &ruleRefExpr{
							pos:  position{line: 1718, col: 33, offset: 64935},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1718, col: 40, offset: 64942},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1720, col: 1, offset: 64949},
			expr: &seqExpr{
				pos: position{line: 1720, col: 31, offset: 64979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1720, col: 31, offset: 64979},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1720, col: 38, offset: 64986},
						expr: &ruleRefExpr{
							pos:  position{line: 1720, col: 38, offset: 64986},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1720, col: 45, offset: 64993},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1722, col: 1, offset: 65000},
			expr: &choiceExpr{
				pos: position{line: 1722, col: 29, offset: 65028},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1722, col: 30, offset: 65029},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1722, col: 30, offset: 65029},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1722, col: 37, offset: 65036},
								expr: &ruleRefExpr{
									pos:  position{line: 1722, col: 37, offset: 65036},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1722, col: 44, offset: 65043},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1722, col: 51, offset: 65050},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1724, col: 1, offset: 65057},
			expr: &actionExpr{
				pos: position{line: 1724, col: 17, offset: 65073},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1724, col: 17, offset: 65073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1724, col: 17, offset: 65073},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1724, col: 28, offset: 65084},
								expr: &ruleRefExpr{
									pos:  position{line: 1724, col: 29, offset: 65085},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1724, col: 42, offset: 65098},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1724, col: 69, offset: 65125},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 78, offset: 65134},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1724, col: 107, offset: 65163},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1728, col: 1, offset: 65284},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1728, col: 32, offset: 65315},
				expr: &actionExpr{
					pos: position{line: 1728, col: 33, offset: 65316},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1728, col: 33, offset: 65316},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1728, col: 33, offset: 65316},
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 34, offset: 65317},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1728, col: 59, offset: 65342},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 68, offset: 65351},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1735, col: 1, offset: 65693},
			expr: &seqExpr{
				pos: position{line: 1735, col: 24, offset: 65716},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1735, col: 24, offset: 65716},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1735, col: 31, offset: 65723},
						expr: &ruleRefExpr{
							pos:  position{line: 1735, col: 31, offset: 65723},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1735, col: 38, offset: 65730},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1737, col: 1, offset: 65762},
			expr: &seqExpr{
				pos: position{line: 1737, col: 29, offset: 65790},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1737, col: 29, offset: 65790},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1737, col: 36, offset: 65797},
						expr: &ruleRefExpr{
							pos:  position{line: 1737, col: 36, offset: 65797},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1737, col: 43, offset: 65804},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1739, col: 1, offset: 65836},
			expr: &choiceExpr{
				pos: position{line: 1739, col: 27, offset: 65862},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1739, col: 28, offset: 65863},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1739, col: 28, offset: 65863},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1739, col: 35, offset: 65870},
								expr: &ruleRefExpr{
									pos:  position{line: 1739, col: 35, offset: 65870},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1739, col: 42, offset: 65877},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1739, col: 49, offset: 65884},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1741, col: 1, offset: 65916},
			expr: &actionExpr{
				pos: position{line: 1741, col: 15, offset: 65930},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1741, col: 15, offset: 65930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1741, col: 15, offset: 65930},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1741, col: 26, offset: 65941},
								expr: &ruleRefExpr{
									pos:  position{line: 1741, col: 27, offset: 65942},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1741, col: 40, offset: 65955},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1741, col: 65, offset: 65980},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1741, col: 74, offset: 65989},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1741, col: 101, offset: 66016},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1745, col: 1, offset: 66133},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1745, col: 30, offset: 66162},
				expr: &actionExpr{
					pos: position{line: 1745, col: 31, offset: 66163},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1745, col: 31, offset: 66163},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1745, col: 31, offset: 66163},
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 32, offset: 66164},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1745, col: 55, offset: 66187},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 64, offset: 66196},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1752, col: 1, offset: 66540},
			expr: &seqExpr{
				pos: position{line: 1752, col: 26, offset: 66565},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1752, col: 26, offset: 66565},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1752, col: 33, offset: 66572},
						expr: &ruleRefExpr{
							pos:  position{line: 1752, col: 33, offset: 66572},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 40, offset: 66579},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1754, col: 1, offset: 66586},
			expr: &seqExpr{
				pos: position{line: 1754, col: 31, offset: 66616},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1754, col: 31, offset: 66616},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1754, col: 38, offset: 66623},
						expr: &ruleRefExpr{
							pos:  position{line: 1754, col: 38, offset: 66623},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1754, col: 45, offset: 66630},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1756, col: 1, offset: 66637},
			expr: &choiceExpr{
				pos: position{line: 1756, col: 29, offset: 66665},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1756, col: 30, offset: 66666},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1756, col: 30, offset: 66666},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1756, col: 37, offset: 66673},
								expr: &ruleRefExpr{
									pos:  position{line: 1756, col: 37, offset: 66673},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1756, col: 44, offset: 66680},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1756, col: 51, offset: 66687},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1758, col: 1, offset: 66694},
			expr: &actionExpr{
				pos: position{line: 1758, col: 17, offset: 66710},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1758, col: 17, offset: 66710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1758, col: 17, offset: 66710},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1758, col: 28, offset: 66721},
								expr: &ruleRefExpr{
									pos:  position{line: 1758, col: 29, offset: 66722},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1758, col: 42, offset: 66735},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 69, offset: 66762},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 78, offset: 66771},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1758, col: 107, offset: 66800},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1762, col: 1, offset: 66921},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1762, col: 32, offset: 66952},
				expr: &actionExpr{
					pos: position{line: 1762, col: 33, offset: 66953},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1762, col: 33, offset: 66953},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1762, col: 33, offset: 66953},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 34, offset: 66954},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1762, col: 59, offset: 66979},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 68, offset: 66988},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1769, col: 1, offset: 67336},
			expr: &seqExpr{
				pos: position{line: 1769, col: 30, offset: 67365},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1769, col: 30, offset: 67365},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1769, col: 37, offset: 67372},
						expr: &ruleRefExpr{
							pos:  position{line: 1769, col: 37, offset: 67372},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 44, offset: 67379},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1771, col: 1, offset: 67386},
			expr: &seqExpr{
				pos: position{line: 1771, col: 35, offset: 67420},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1771, col: 35, offset: 67420},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1771, col: 42, offset: 67427},
						expr: &ruleRefExpr{
							pos:  position{line: 1771, col: 42, offset: 67427},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 49, offset: 67434},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1773, col: 1, offset: 67441},
			expr: &choiceExpr{
				pos: position{line: 1773, col: 33, offset: 67473},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1773, col: 34, offset: 67474},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1773, col: 34, offset: 67474},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1773, col: 41, offset: 67481},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 41, offset: 67481},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1773, col: 48, offset: 67488},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1773, col: 55, offset: 67495},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1775, col: 1, offset: 67502},
			expr: &actionExpr{
				pos: position{line: 1775, col: 21, offset: 67522},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1775, col: 21, offset: 67522},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1775, col: 21, offset: 67522},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1775, col: 32, offset: 67533},
								expr: &ruleRefExpr{
									pos:  position{line: 1775, col: 33, offset: 67534},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1775, col: 46, offset: 67547},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1775, col: 77, offset: 67578},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1775, col: 86, offset: 67587},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1775, col: 119, offset: 67620},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1779, col: 1, offset: 67749},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1779, col: 36, offset: 67784},
				expr: &actionExpr{
					pos: position{line: 1779, col: 37, offset: 67785},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1779, col: 37, offset: 67785},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1779, col: 37, offset: 67785},
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 38, offset: 67786},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1779, col: 67, offset: 67815},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1779, col: 76, offset: 67824},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1784, col: 1, offset: 67988},
			expr: &actionExpr{
				pos: position{line: 1784, col: 18, offset: 68005},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 18, offset: 68005},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1784, col: 19, offset: 68006},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1784, col: 19, offset: 68006},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 27, offset: 68014},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 37, offset: 68024},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 45, offset: 68032},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 55, offset: 68042},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1784, col: 63, offset: 68050},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1784, col: 72, offset: 68059},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1792, col: 1, offset: 68317},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1792, col: 23, offset: 68339},
				expr: &ruleRefExpr{
					pos:  position{line: 1792, col: 23, offset: 68339},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1794, col: 1, offset: 68362},
			expr: &actionExpr{
				pos: position{line: 1795, col: 5, offset: 68390},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1795, col: 5, offset: 68390},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1795, col: 5, offset: 68390},
							expr: &ruleRefExpr{
								pos:  position{line: 1795, col: 6, offset: 68391},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1795, col: 10, offset: 68395},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1795, col: 19, offset: 68404},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1795, col: 19, offset: 68404},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1796, col: 15, offset: 68430},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1797, col: 15, offset: 68459},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1798, col: 15, offset: 68485},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1799, col: 15, offset: 68514},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1800, col: 15, offset: 68546},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1801, col: 15, offset: 68580},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1802, col: 15, offset: 68612},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1803, col: 15, offset: 68652},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1804, col: 15, offset: 68682},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1805, col: 15, offset: 68711},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1806, col: 15, offset: 68748},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1807, col: 15, offset: 68779},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1808, col: 15, offset: 68821},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1812, col: 1, offset: 68874},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1812, col: 22, offset: 68895},
				expr: &ruleRefExpr{
					pos:  position{line: 1812, col: 22, offset: 68895},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1814, col: 1, offset: 68917},
			expr: &actionExpr{
				pos: position{line: 1814, col: 22, offset: 68938},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 22, offset: 68938},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1814, col: 22, offset: 68938},
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 23, offset: 68939},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 27, offset: 68943},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1814, col: 36, offset: 68952},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1814, col: 36, offset: 68952},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1814, col: 48, offset: 68964},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1818, col: 1, offset: 69018},
			expr: &actionExpr{
				pos: position{line: 1818, col: 24, offset: 69041},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1818, col: 24, offset: 69041},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1818, col: 30, offset: 69047},
						expr: &ruleRefExpr{
							pos:  position{line: 1818, col: 31, offset: 69048},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1822, col: 1, offset: 69142},
			expr: &actionExpr{
				pos: position{line: 1822, col: 28, offset: 69169},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1822, col: 28, offset: 69169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1822, col: 28, offset: 69169},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1822, col: 37, offset: 69178},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 38, offset: 69179},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1822, col: 54, offset: 69195},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1829, col: 1, offset: 69444},
			expr: &actionExpr{
				pos: position{line: 1829, col: 10, offset: 69453},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1829, col: 10, offset: 69453},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1829, col: 10, offset: 69453},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1829, col: 16, offset: 69459},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1829, col: 17, offset: 69460},
									expr: &ruleRefExpr{
										pos:  position{line: 1829, col: 17, offset: 69460},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1829, col: 31, offset: 69474},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1830, col: 5, offset: 69494},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1830, col: 12, offset: 69501},
								expr: &ruleRefExpr{
									pos:  position{line: 1830, col: 13, offset: 69502},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1831, col: 5, offset: 69525},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1831, col: 11, offset: 69531},
								expr: &ruleRefExpr{
									pos:  position{line: 1831, col: 12, offset: 69532},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1832, col: 6, offset: 69550},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1832, col: 6, offset: 69550},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1832, col: 23, offset: 69567},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1836, col: 1, offset: 69681},
			expr: &seqExpr{
				pos: position{line: 1836, col: 23, offset: 69703},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1836, col: 23, offset: 69703},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1836, col: 27, offset: 69707},
						expr: &ruleRefExpr{
							pos:  position{line: 1836, col: 27, offset: 69707},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1838, col: 1, offset: 69717},
			expr: &seqExpr{
				pos: position{line: 1838, col: 19, offset: 69735},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1838, col: 19, offset: 69735},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1838, col: 26, offset: 69742},
						expr: &ruleRefExpr{
							pos:  position{line: 1838, col: 26, offset: 69742},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 33, offset: 69749},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1841, col: 1, offset: 69820},
			expr: &actionExpr{
				pos: position{line: 1841, col: 20, offset: 69839},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 20, offset: 69839},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1841, col: 20, offset: 69839},
							expr: &ruleRefExpr{
								pos:  position{line: 1841, col: 21, offset: 69840},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 36, offset: 69855},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1841, col: 42, offset: 69861},
								expr: &ruleRefExpr{
									pos:  position{line: 1841, col: 43, offset: 69862},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 55, offset: 69874},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 59, offset: 69878},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1845, col: 1, offset: 69950},
			expr: &actionExpr{
				pos: position{line: 1845, col: 14, offset: 69963},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1845, col: 14, offset: 69963},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1845, col: 14, offset: 69963},
							expr: &ruleRefExpr{
								pos:  position{line: 1845, col: 15, offset: 69964},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1845, col: 30, offset: 69979},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1845, col: 36, offset: 69985},
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 37, offset: 69986},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1845, col: 49, offset: 69998},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1845, col: 53, offset: 70002},
							expr: &ruleRefExpr{
								pos:  position{line: 1845, col: 53, offset: 70002},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1849, col: 1, offset: 70075},
			expr: &actionExpr{
				pos: position{line: 1849, col: 14, offset: 70088},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1849, col: 14, offset: 70088},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1849, col: 14, offset: 70088},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1849, col: 33, offset: 70107},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1849, col: 42, offset: 70116},
								expr: &seqExpr{
									pos: position{line: 1849, col: 43, offset: 70117},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1849, col: 43, offset: 70117},
											expr: &ruleRefExpr{
												pos:  position{line: 1849, col: 44, offset: 70118},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1849, col: 63, offset: 70137},
											expr: &ruleRefExpr{
												pos:  position{line: 1849, col: 64, offset: 70138},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1849, col: 68, offset: 70142},
											expr: &ruleRefExpr{
												pos:  position{line: 1849, col: 68, offset: 70142},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1849, col: 75, offset: 70149},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1849, col: 89, offset: 70163},
											expr: &ruleRefExpr{
												pos:  position{line: 1849, col: 89, offset: 70163},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1856, col: 1, offset: 70419},
			expr: &seqExpr{
				pos: position{line: 1856, col: 26, offset: 70444},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1856, col: 26, offset: 70444},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1856, col: 33, offset: 70451},
						expr: &ruleRefExpr{
							pos:  position{line: 1856, col: 33, offset: 70451},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1856, col: 40, offset: 70458},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1858, col: 1, offset: 70465},
			expr: &seqExpr{
				pos: position{line: 1858, col: 31, offset: 70495},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1858, col: 31, offset: 70495},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 38, offset: 70502},
						expr: &ruleRefExpr{
							pos:  position{line: 1858, col: 38, offset: 70502},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1858, col: 45, offset: 70509},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1860, col: 1, offset: 70516},
			expr: &choiceExpr{
				pos: position{line: 1860, col: 29, offset: 70544},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1860, col: 30, offset: 70545},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1860, col: 30, offset: 70545},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1860, col: 37, offset: 70552},
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 37, offset: 70552},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1860, col: 44, offset: 70559},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 51, offset: 70566},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1862, col: 1, offset: 70573},
			expr: &actionExpr{
				pos: position{line: 1862, col: 17, offset: 70589},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1862, col: 17, offset: 70589},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1862, col: 17, offset: 70589},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1862, col: 44, offset: 70616},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1862, col: 53, offset: 70625},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1862, col: 83, offset: 70655},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1866, col: 1, offset: 70769},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1866, col: 32, offset: 70800},
				expr: &actionExpr{
					pos: position{line: 1866, col: 33, offset: 70801},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1866, col: 33, offset: 70801},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1866, col: 33, offset: 70801},
								expr: &ruleRefExpr{
									pos:  position{line: 1866, col: 34, offset: 70802},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1866, col: 59, offset: 70827},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1866, col: 68, offset: 70836},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1870, col: 1, offset: 70981},
			expr: &actionExpr{
				pos: position{line: 1870, col: 22, offset: 71002},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 22, offset: 71002},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1870, col: 22, offset: 71002},
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 23, offset: 71003},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1870, col: 45, offset: 71025},
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 45, offset: 71025},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1870, col: 52, offset: 71032},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1870, col: 57, offset: 71037},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 66, offset: 71046},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1870, col: 92, offset: 71072},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1874, col: 1, offset: 71141},
			expr: &actionExpr{
				pos: position{line: 1874, col: 29, offset: 71169},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1874, col: 29, offset: 71169},
					expr: &charClassMatcher{
						pos:        position{line: 1874, col: 29, offset: 71169},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1882, col: 1, offset: 71490},
			expr: &choiceExpr{
				pos: position{line: 1882, col: 17, offset: 71506},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1882, col: 17, offset: 71506},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1882, col: 49, offset: 71538},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1882, col: 78, offset: 71567},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1884, col: 1, offset: 71605},
			expr: &litMatcher{
				pos:        position{line: 1884, col: 26, offset: 71630},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1887, col: 1, offset: 71705},
			expr: &actionExpr{
				pos: position{line: 1887, col: 31, offset: 71735},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 31, offset: 71735},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 31, offset: 71735},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1887, col: 42, offset: 71746},
								expr: &ruleRefExpr{
									pos:  position{line: 1887, col: 43, offset: 71747},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1887, col: 56, offset: 71760},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1887, col: 63, offset: 71767},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1892, col: 1, offset: 72002},
			expr: &actionExpr{
				pos: position{line: 1893, col: 5, offset: 72043},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1893, col: 5, offset: 72043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1893, col: 5, offset: 72043},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1893, col: 16, offset: 72054},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1893, col: 16, offset: 72054},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1893, col: 16, offset: 72054},
											expr: &ruleRefExpr{
												pos:  position{line: 1893, col: 16, offset: 72054},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1893, col: 23, offset: 72061},
											expr: &charClassMatcher{
												pos:        position{line: 1893, col: 23, offset: 72061},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1895, col: 8, offset: 72116},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1896, col: 5, offset: 72180},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1896, col: 16, offset: 72191},
								expr: &actionExpr{
									pos: position{line: 1897, col: 9, offset: 72202},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1897, col: 9, offset: 72202},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1897, col: 9, offset: 72202},
												expr: &ruleRefExpr{
													pos:  position{line: 1897, col: 10, offset: 72203},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1898, col: 9, offset: 72223},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1898, col: 20, offset: 72234},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1898, col: 20, offset: 72234},
														expr: &charClassMatcher{
															pos:        position{line: 1898, col: 20, offset: 72234},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1900, col: 12, offset: 72297},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1907, col: 1, offset: 72534},
			expr: &actionExpr{
				pos: position{line: 1907, col: 39, offset: 72572},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1907, col: 39, offset: 72572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1907, col: 39, offset: 72572},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1907, col: 50, offset: 72583},
								expr: &ruleRefExpr{
									pos:  position{line: 1907, col: 51, offset: 72584},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1908, col: 9, offset: 72606},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1908, col: 31, offset: 72628},
							expr: &ruleRefExpr{
								pos:  position{line: 1908, col: 31, offset: 72628},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1908, col: 38, offset: 72635},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1908, col: 46, offset: 72643},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1908, col: 53, offset: 72650},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1908, col: 95, offset: 72692},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1908, col: 96, offset: 72693},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1908, col: 96, offset: 72693},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1908, col: 118, offset: 72715},
											expr: &ruleRefExpr{
												pos:  position{line: 1908, col: 118, offset: 72715},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1908, col: 125, offset: 72722},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1908, col: 132, offset: 72729},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1913, col: 1, offset: 72893},
			expr: &actionExpr{
				pos: position{line: 1913, col: 44, offset: 72936},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1913, col: 44, offset: 72936},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1913, col: 50, offset: 72942},
						expr: &ruleRefExpr{
							pos:  position{line: 1913, col: 51, offset: 72943},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1917, col: 1, offset: 73031},
			expr: &actionExpr{
				pos: position{line: 1918, col: 5, offset: 73087},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1918, col: 5, offset: 73087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1918, col: 5, offset: 73087},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1918, col: 11, offset: 73093},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1918, col: 11, offset: 73093},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1918, col: 11, offset: 73093},
											expr: &ruleRefExpr{
												pos:  position{line: 1918, col: 12, offset: 73094},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1918, col: 34, offset: 73116},
											expr: &charClassMatcher{
												pos:        position{line: 1918, col: 34, offset: 73116},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1920, col: 8, offset: 73171},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1925, col: 1, offset: 73302},
			expr: &actionExpr{
				pos: position{line: 1926, col: 5, offset: 73341},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1926, col: 5, offset: 73341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1926, col: 5, offset: 73341},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1926, col: 16, offset: 73352},
								expr: &ruleRefExpr{
									pos:  position{line: 1926, col: 17, offset: 73353},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1927, col: 5, offset: 73371},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1934, col: 5, offset: 73585},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1934, col: 12, offset: 73592},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1938, col: 1, offset: 73746},
			expr: &actionExpr{
				pos: position{line: 1938, col: 16, offset: 73761},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1938, col: 16, offset: 73761},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1943, col: 1, offset: 73849},
			expr: &actionExpr{
				pos: position{line: 1943, col: 39, offset: 73887},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1943, col: 39, offset: 73887},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1943, col: 45, offset: 73893},
						expr: &ruleRefExpr{
							pos:  position{line: 1943, col: 46, offset: 73894},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1947, col: 1, offset: 73978},
			expr: &actionExpr{
				pos: position{line: 1947, col: 38, offset: 74015},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1947, col: 38, offset: 74015},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1947, col: 38, offset: 74015},
							expr: &ruleRefExpr{
								pos:  position{line: 1947, col: 39, offset: 74016},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1947, col: 49, offset: 74026},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1947, col: 58, offset: 74035},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1947, col: 58, offset: 74035},
									expr: &charClassMatcher{
										pos:        position{line: 1947, col: 58, offset: 74035},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1949, col: 4, offset: 74082},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1956, col: 1, offset: 74275},
			expr: &actionExpr{
				pos: position{line: 1956, col: 14, offset: 74288},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1956, col: 14, offset: 74288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1956, col: 14, offset: 74288},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1956, col: 19, offset: 74293},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1956, col: 25, offset: 74299},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1956, col: 43, offset: 74317},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1960, col: 1, offset: 74386},
			expr: &actionExpr{
				pos: position{line: 1960, col: 21, offset: 74406},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1960, col: 21, offset: 74406},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1960, col: 30, offset: 74415},
						expr: &choiceExpr{
							pos: position{line: 1960, col: 31, offset: 74416},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1960, col: 31, offset: 74416},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1960, col: 38, offset: 74423},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1960, col: 53, offset: 74438},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1960, col: 66, offset: 74451},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1960, col: 74, offset: 74459},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1960, col: 75, offset: 74460},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1960, col: 75, offset: 74460},
												expr: &litMatcher{
													pos:        position{line: 1960, col: 76, offset: 74461},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1960, col: 81, offset: 74466,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1966, col: 1, offset: 74578},
			expr: &actionExpr{
				pos: position{line: 1966, col: 23, offset: 74600},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1966, col: 23, offset: 74600},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1966, col: 23, offset: 74600},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1966, col: 29, offset: 74606},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1966, col: 36, offset: 74613},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 5, offset: 74646},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1967, col: 11, offset: 74652},
								expr: &actionExpr{
									pos: position{line: 1967, col: 12, offset: 74653},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1967, col: 12, offset: 74653},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1967, col: 12, offset: 74653},
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 12, offset: 74653},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1967, col: 19, offset: 74660},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1967, col: 23, offset: 74664},
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 23, offset: 74664},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1967, col: 30, offset: 74671},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1967, col: 39, offset: 74680},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1968, col: 5, offset: 74739},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1968, col: 11, offset: 74745},
								expr: &actionExpr{
									pos: position{line: 1968, col: 12, offset: 74746},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1968, col: 12, offset: 74746},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1968, col: 12, offset: 74746},
												expr: &ruleRefExpr{
													pos:  position{line: 1968, col: 12, offset: 74746},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1968, col: 19, offset: 74753},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1968, col: 23, offset: 74757},
												expr: &ruleRefExpr{
													pos:  position{line: 1968, col: 23, offset: 74757},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1968, col: 30, offset: 74764},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1968, col: 39, offset: 74773},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1969, col: 5, offset: 74832},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1973, col: 1, offset: 74915},
			expr: &actionExpr{
				pos: position{line: 1973, col: 30, offset: 74944},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1973, col: 30, offset: 74944},
					expr: &choiceExpr{
						pos: position{line: 1973, col: 31, offset: 74945},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1973, col: 31, offset: 74945},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1973, col: 42, offset: 74956},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1980, col: 1, offset: 75112},
			expr: &actionExpr{
				pos: position{line: 1980, col: 14, offset: 75125},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1980, col: 14, offset: 75125},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1980, col: 14, offset: 75125},
							expr: &ruleRefExpr{
								pos:  position{line: 1980, col: 15, offset: 75126},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1980, col: 19, offset: 75130},
							expr: &ruleRefExpr{
								pos:  position{line: 1980, col: 19, offset: 75130},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1980, col: 26, offset: 75137},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1988, col: 1, offset: 75290},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 11, offset: 75300},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1988, col: 11, offset: 75300},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 24, offset: 75313},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 36, offset: 75325},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 48, offset: 75337},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 61, offset: 75350},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1990, col: 1, offset: 75362},
			expr: &actionExpr{
				pos: position{line: 1990, col: 15, offset: 75376},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1990, col: 15, offset: 75376},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1993, col: 1, offset: 75432},
			expr: &actionExpr{
				pos: position{line: 1993, col: 14, offset: 75445},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1993, col: 14, offset: 75445},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1996, col: 1, offset: 75502},
			expr: &actionExpr{
				pos: position{line: 1996, col: 14, offset: 75515},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1996, col: 14, offset: 75515},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1999, col: 1, offset: 75573},
			expr: &actionExpr{
				pos: position{line: 1999, col: 15, offset: 75587},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1999, col: 15, offset: 75587},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2002, col: 1, offset: 75644},
			expr: &actionExpr{
				pos: position{line: 2002, col: 13, offset: 75656},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2002, col: 13, offset: 75656},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2010, col: 1, offset: 75939},
			expr: &actionExpr{
				pos: position{line: 2010, col: 22, offset: 75960},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2010, col: 22, offset: 75960},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2010, col: 22, offset: 75960},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2010, col: 31, offset: 75969},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2010, col: 35, offset: 75973},
							expr: &charClassMatcher{
								pos:        position{line: 2010, col: 36, offset: 75974},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2017, col: 1, offset: 76161},
			expr: &charClassMatcher{
				pos:        position{line: 2017, col: 13, offset: 76173},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2019, col: 1, offset: 76185},
			expr: &choiceExpr{
				pos: position{line: 2019, col: 16, offset: 76200},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2019, col: 16, offset: 76200},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2019, col: 22, offset: 76206},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2019, col: 28, offset: 76212},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2019, col: 34, offset: 76218},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2019, col: 40, offset: 76224},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2019, col: 46, offset: 76230},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2021, col: 1, offset: 76238},
			expr: &actionExpr{
				pos: position{line: 2021, col: 14, offset: 76251},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2021, col: 14, offset: 76251},
					expr: &charClassMatcher{
						pos:        position{line: 2021, col: 14, offset: 76251},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2025, col: 1, offset: 76301},
			expr: &choiceExpr{
				pos: position{line: 2029, col: 5, offset: 76632},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2029, col: 5, offset: 76632},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2029, col: 5, offset: 76632},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2029, col: 5, offset: 76632},
									expr: &charClassMatcher{
										pos:        position{line: 2029, col: 5, offset: 76632},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2029, col: 15, offset: 76642},
									expr: &choiceExpr{
										pos: position{line: 2029, col: 17, offset: 76644},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2029, col: 17, offset: 76644},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2029, col: 30, offset: 76657},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2031, col: 9, offset: 76729},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2031, col: 9, offset: 76729},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2031, col: 9, offset: 76729},
									expr: &charClassMatcher{
										pos:        position{line: 2031, col: 9, offset: 76729},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2031, col: 19, offset: 76739},
									expr: &seqExpr{
										pos: position{line: 2031, col: 20, offset: 76740},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2031, col: 20, offset: 76740},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2031, col: 27, offset: 76747},
												expr: &charClassMatcher{
													pos:        position{line: 2031, col: 27, offset: 76747},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2035, col: 1, offset: 76827},
			expr: &choiceExpr{
				pos: position{line: 2036, col: 5, offset: 76909},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2036, col: 5, offset: 76909},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2036, col: 5, offset: 76909},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2036, col: 5, offset: 76909},
									expr: &charClassMatcher{
										pos:        position{line: 2036, col: 5, offset: 76909},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2036, col: 19, offset: 76923},
									expr: &choiceExpr{
										pos: position{line: 2036, col: 21, offset: 76925},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2036, col: 21, offset: 76925},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2036, col: 31, offset: 76935},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2038, col: 9, offset: 77006},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2041, col: 1, offset: 77109},
			expr: &actionExpr{
				pos: position{line: 2041, col: 12, offset: 77120},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2041, col: 12, offset: 77120},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2045, col: 1, offset: 77189},
			expr: &actionExpr{
				pos: position{line: 2045, col: 17, offset: 77205},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2045, col: 17, offset: 77205},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2045, col: 22, offset: 77210},
						expr: &choiceExpr{
							pos: position{line: 2045, col: 23, offset: 77211},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2045, col: 23, offset: 77211},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2045, col: 34, offset: 77222},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2049, col: 1, offset: 77310},
			expr: &actionExpr{
				pos: position{line: 2049, col: 25, offset: 77334},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2049, col: 25, offset: 77334},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2049, col: 30, offset: 77339},
						expr: &charClassMatcher{
							pos:        position{line: 2049, col: 31, offset: 77340},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2053, col: 1, offset: 77416},
			expr: &actionExpr{
				pos: position{line: 2053, col: 13, offset: 77428},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2053, col: 13, offset: 77428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2053, col: 13, offset: 77428},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2053, col: 20, offset: 77435},
								expr: &ruleRefExpr{
									pos:  position{line: 2053, col: 21, offset: 77436},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 34, offset: 77449},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2053, col: 39, offset: 77454},
								expr: &choiceExpr{
									pos: position{line: 2053, col: 40, offset: 77455},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2053, col: 40, offset: 77455},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2053, col: 51, offset: 77466},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2057, col: 1, offset: 77558},
			expr: &actionExpr{
				pos: position{line: 2057, col: 23, offset: 77580},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2057, col: 23, offset: 77580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2057, col: 23, offset: 77580},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2057, col: 31, offset: 77588},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2057, col: 43, offset: 77600},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2057, col: 48, offset: 77605},
								expr: &choiceExpr{
									pos: position{line: 2057, col: 49, offset: 77606},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2057, col: 49, offset: 77606},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2057, col: 60, offset: 77617},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2061, col: 1, offset: 77709},
			expr: &oneOrMoreExpr{
				pos: position{line: 2061, col: 13, offset: 77721},
				expr: &charClassMatcher{
					pos:        position{line: 2061, col: 14, offset: 77722},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2063, col: 1, offset: 77858},
			expr: &actionExpr{
				pos: position{line: 2063, col: 21, offset: 77878},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2063, col: 21, offset: 77878},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2063, col: 21, offset: 77878},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 29, offset: 77886},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2063, col: 41, offset: 77898},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 47, offset: 77904},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2068, col: 1, offset: 78157},
			expr: &oneOrMoreExpr{
				pos: position{line: 2068, col: 22, offset: 78178},
				expr: &charClassMatcher{
					pos:        position{line: 2068, col: 23, offset: 78179},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2070, col: 1, offset: 78313},
			expr: &actionExpr{
				pos: position{line: 2070, col: 9, offset: 78321},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2070, col: 9, offset: 78321},
					expr: &charClassMatcher{
						pos:        position{line: 2070, col: 9, offset: 78321},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2074, col: 1, offset: 78373},
			expr: &choiceExpr{
				pos: position{line: 2074, col: 15, offset: 78387},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2074, col: 15, offset: 78387},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2074, col: 27, offset: 78399},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2074, col: 40, offset: 78412},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2074, col: 51, offset: 78423},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2074, col: 62, offset: 78434},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2076, col: 1, offset: 78447},
			expr: &actionExpr{
				pos: position{line: 2076, col: 7, offset: 78453},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2076, col: 7, offset: 78453},
					expr: &charClassMatcher{
						pos:        position{line: 2076, col: 7, offset: 78453},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2080, col: 1, offset: 78582},
			expr: &actionExpr{
				pos: position{line: 2080, col: 10, offset: 78591},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2080, col: 10, offset: 78591},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2084, col: 1, offset: 78637},
			expr: &actionExpr{
				pos: position{line: 2084, col: 11, offset: 78647},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2084, col: 11, offset: 78647},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2084, col: 11, offset: 78647},
							expr: &litMatcher{
								pos:        position{line: 2084, col: 11, offset: 78647},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2084, col: 16, offset: 78652},
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 16, offset: 78652},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2088, col: 1, offset: 78708},
			expr: &choiceExpr{
				pos: position{line: 2088, col: 10, offset: 78717},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2088, col: 10, offset: 78717},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2088, col: 16, offset: 78723},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2088, col: 16, offset: 78723},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2092, col: 1, offset: 78768},
			expr: &choiceExpr{
				pos: position{line: 2092, col: 12, offset: 78779},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2092, col: 12, offset: 78779},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2092, col: 21, offset: 78788},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2092, col: 28, offset: 78795},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2094, col: 1, offset: 78803},
			expr: &notExpr{
				pos: position{line: 2094, col: 8, offset: 78810},
				expr: &anyMatcher{
					line: 2094, col: 9, offset: 78811,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2096, col: 1, offset: 78816},
			expr: &choiceExpr{
				pos: position{line: 2096, col: 8, offset: 78823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2096, col: 8, offset: 78823},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2096, col: 18, offset: 78833},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onInlinePositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonInlinePositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePositionalValue1(stack["value"])
}

func (c *current) onInlineValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonInlineValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineValuePlain1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["attrs"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltAttrInline1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttrInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttrInline1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewElementAttributes(size, others)
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onIconSizeAttr1(size interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrIconSize, size.(string))
}

func (p *parser) callonIconSizeAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSizeAttr1(stack["size"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
