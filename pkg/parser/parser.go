// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 8315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 8315},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 249, col: 5, offset: 8315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 249, col: 5, offset: 8315},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 10, offset: 8320},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 249, col: 24, offset: 8334},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 249, col: 28, offset: 8338},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 249, col: 34, offset: 8344},
										expr: &ruleRefExpr{
											pos:  position{line: 249, col: 35, offset: 8345},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 249, col: 52, offset: 8362},
									expr: &litMatcher{
										pos:        position{line: 249, col: 52, offset: 8362},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 249, col: 57, offset: 8367},
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 57, offset: 8367},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 9, offset: 8472},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 251, col: 9, offset: 8472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 9, offset: 8472},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 14, offset: 8477},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 251, col: 28, offset: 8491},
									expr: &litMatcher{
										pos:        position{line: 251, col: 28, offset: 8491},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 251, col: 33, offset: 8496},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 33, offset: 8496},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 255, col: 1, offset: 8589},
			expr: &actionExpr{
				pos: position{line: 255, col: 17, offset: 8605},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 255, col: 17, offset: 8605},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 255, col: 17, offset: 8605},
							expr: &litMatcher{
								pos:        position{line: 255, col: 18, offset: 8606},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 26, offset: 8614},
							expr: &litMatcher{
								pos:        position{line: 255, col: 27, offset: 8615},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 35, offset: 8623},
							expr: &litMatcher{
								pos:        position{line: 255, col: 36, offset: 8624},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 46, offset: 8634},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 47, offset: 8635},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 54, offset: 8642},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 255, col: 58, offset: 8646},
								expr: &choiceExpr{
									pos: position{line: 255, col: 59, offset: 8647},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 255, col: 59, offset: 8647},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 71, offset: 8659},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 92, offset: 8680},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 92, offset: 8680},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 259, col: 1, offset: 8720},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8738},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 259, col: 19, offset: 8738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 259, col: 19, offset: 8738},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 259, col: 25, offset: 8744},
								expr: &choiceExpr{
									pos: position{line: 259, col: 26, offset: 8745},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 259, col: 26, offset: 8745},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 38, offset: 8757},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 47, offset: 8766},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 259, col: 68, offset: 8787},
							expr: &litMatcher{
								pos:        position{line: 259, col: 69, offset: 8788},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 263, col: 1, offset: 8943},
			expr: &seqExpr{
				pos: position{line: 263, col: 24, offset: 8966},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 263, col: 24, offset: 8966},
						expr: &litMatcher{
							pos:        position{line: 263, col: 25, offset: 8967},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 29, offset: 8971},
						expr: &litMatcher{
							pos:        position{line: 263, col: 30, offset: 8972},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 34, offset: 8976},
						expr: &litMatcher{
							pos:        position{line: 263, col: 35, offset: 8977},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 263, col: 39, offset: 8981,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 265, col: 1, offset: 8985},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 9005},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 9005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 9005},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 36, offset: 9020},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 269, col: 1, offset: 9094},
			expr: &actionExpr{
				pos: position{line: 269, col: 20, offset: 9113},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 269, col: 20, offset: 9113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 20, offset: 9113},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 29, offset: 9122},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 29, offset: 9122},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 33, offset: 9126},
							expr: &litMatcher{
								pos:        position{line: 269, col: 33, offset: 9126},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 38, offset: 9131},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 45, offset: 9138},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 46, offset: 9139},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 63, offset: 9156},
							expr: &litMatcher{
								pos:        position{line: 269, col: 63, offset: 9156},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 68, offset: 9161},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 9167},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 75, offset: 9168},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 92, offset: 9185},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 96, offset: 9189},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 273, col: 1, offset: 9259},
			expr: &actionExpr{
				pos: position{line: 273, col: 20, offset: 9278},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 20, offset: 9278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 20, offset: 9278},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 29, offset: 9287},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 29, offset: 9287},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 33, offset: 9291},
							expr: &litMatcher{
								pos:        position{line: 273, col: 33, offset: 9291},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 38, offset: 9296},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 45, offset: 9303},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 46, offset: 9304},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 63, offset: 9321},
							expr: &litMatcher{
								pos:        position{line: 273, col: 63, offset: 9321},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 68, offset: 9326},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 74, offset: 9332},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 75, offset: 9333},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 92, offset: 9350},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 96, offset: 9354},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 277, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 277, col: 19, offset: 9460},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 277, col: 19, offset: 9460},
					expr: &choiceExpr{
						pos: position{line: 277, col: 20, offset: 9461},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 277, col: 20, offset: 9461},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 277, col: 32, offset: 9473},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 277, col: 42, offset: 9483},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 277, col: 42, offset: 9483},
										expr: &litMatcher{
											pos:        position{line: 277, col: 43, offset: 9484},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 47, offset: 9488},
										expr: &litMatcher{
											pos:        position{line: 277, col: 48, offset: 9489},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 52, offset: 9493},
										expr: &ruleRefExpr{
											pos:  position{line: 277, col: 53, offset: 9494},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 277, col: 57, offset: 9498,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 281, col: 1, offset: 9539},
			expr: &actionExpr{
				pos: position{line: 281, col: 21, offset: 9559},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 21, offset: 9559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 21, offset: 9559},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 25, offset: 9563},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 31, offset: 9569},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 32, offset: 9570},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 51, offset: 9589},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 288, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 288, col: 12, offset: 9774},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 288, col: 12, offset: 9774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 12, offset: 9774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 23, offset: 9785},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 24, offset: 9786},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9810},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 289, col: 12, offset: 9817},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 289, col: 12, offset: 9817},
									expr: &litMatcher{
										pos:        position{line: 289, col: 13, offset: 9818},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 293, col: 5, offset: 9909},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 297, col: 5, offset: 10061},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 5, offset: 10061},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 9, offset: 10065},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 16, offset: 10072},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 31, offset: 10087},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 35, offset: 10091},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 35, offset: 10091},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 53, offset: 10109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 302, col: 1, offset: 10223},
			expr: &actionExpr{
				pos: position{line: 302, col: 18, offset: 10240},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 302, col: 18, offset: 10240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 302, col: 27, offset: 10249},
						expr: &seqExpr{
							pos: position{line: 302, col: 28, offset: 10250},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 302, col: 28, offset: 10250},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 29, offset: 10251},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 302, col: 37, offset: 10259},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 38, offset: 10260},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 54, offset: 10276},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 306, col: 1, offset: 10397},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10413},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 17, offset: 10413},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 306, col: 26, offset: 10422},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 306, col: 26, offset: 10422},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10443},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10461},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10486},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10508},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10531},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10546},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10571},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 314, col: 11, offset: 10592},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 315, col: 11, offset: 10632},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10652},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 323, col: 1, offset: 10805},
			expr: &seqExpr{
				pos: position{line: 323, col: 25, offset: 10829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 323, col: 25, offset: 10829},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 35, offset: 10839},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 328, col: 1, offset: 10950},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10968},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 10968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 25, offset: 10974},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 40, offset: 10989},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 45, offset: 10994},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 52, offset: 11001},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 68, offset: 11017},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 75, offset: 11024},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 332, col: 1, offset: 11165},
			expr: &actionExpr{
				pos: position{line: 332, col: 20, offset: 11184},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 332, col: 20, offset: 11184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 332, col: 20, offset: 11184},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 26, offset: 11190},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 41, offset: 11205},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 45, offset: 11209},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 52, offset: 11216},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 68, offset: 11232},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 75, offset: 11239},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 336, col: 1, offset: 11381},
			expr: &actionExpr{
				pos: position{line: 336, col: 18, offset: 11398},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 336, col: 18, offset: 11398},
					expr: &choiceExpr{
						pos: position{line: 336, col: 19, offset: 11399},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 336, col: 19, offset: 11399},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 33, offset: 11413},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 39, offset: 11419},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 340, col: 1, offset: 11461},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11479},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 340, col: 19, offset: 11479},
					expr: &choiceExpr{
						pos: position{line: 340, col: 20, offset: 11480},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 340, col: 20, offset: 11480},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 340, col: 33, offset: 11493},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 340, col: 33, offset: 11493},
										expr: &litMatcher{
											pos:        position{line: 340, col: 34, offset: 11494},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 38, offset: 11498},
										expr: &litMatcher{
											pos:        position{line: 340, col: 39, offset: 11499},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 43, offset: 11503},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 44, offset: 11504},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 340, col: 48, offset: 11508,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 344, col: 1, offset: 11549},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11572},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11572},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11576},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 344, col: 34, offset: 11582},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 35, offset: 11583},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 54, offset: 11602},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 351, col: 1, offset: 11782},
			expr: &actionExpr{
				pos: position{line: 351, col: 18, offset: 11799},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 351, col: 18, offset: 11799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 18, offset: 11799},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 351, col: 24, offset: 11805},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 351, col: 24, offset: 11805},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 351, col: 24, offset: 11805},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 351, col: 36, offset: 11817},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 42, offset: 11823},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 351, col: 56, offset: 11837},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 74, offset: 11855},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 8, offset: 12009},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 357, col: 1, offset: 12062},
			expr: &actionExpr{
				pos: position{line: 357, col: 26, offset: 12087},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 26, offset: 12087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 26, offset: 12087},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 30, offset: 12091},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 36, offset: 12097},
								expr: &choiceExpr{
									pos: position{line: 357, col: 37, offset: 12098},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 357, col: 37, offset: 12098},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 59, offset: 12120},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 80, offset: 12141},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 99, offset: 12160},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 361, col: 1, offset: 12230},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12253},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12253},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 33, offset: 12262},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 40, offset: 12269},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 66, offset: 12295},
							expr: &litMatcher{
								pos:        position{line: 361, col: 66, offset: 12295},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 365, col: 1, offset: 12354},
			expr: &actionExpr{
				pos: position{line: 365, col: 29, offset: 12382},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 365, col: 29, offset: 12382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 29, offset: 12382},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 365, col: 36, offset: 12389},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 365, col: 36, offset: 12389},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12506},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12542},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12568},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12600},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 11, offset: 12632},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 11, offset: 12659},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 371, col: 31, offset: 12679},
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 31, offset: 12679},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 371, col: 36, offset: 12684},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 371, col: 36, offset: 12684},
									expr: &litMatcher{
										pos:        position{line: 371, col: 37, offset: 12685},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 371, col: 43, offset: 12691},
									expr: &litMatcher{
										pos:        position{line: 371, col: 44, offset: 12692},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 375, col: 1, offset: 12724},
			expr: &actionExpr{
				pos: position{line: 375, col: 23, offset: 12746},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 375, col: 23, offset: 12746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 23, offset: 12746},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 375, col: 30, offset: 12753},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 30, offset: 12753},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 375, col: 47, offset: 12770},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 376, col: 5, offset: 12792},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 376, col: 12, offset: 12799},
								expr: &actionExpr{
									pos: position{line: 376, col: 13, offset: 12800},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 376, col: 13, offset: 12800},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 376, col: 13, offset: 12800},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 376, col: 17, offset: 12804},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 376, col: 24, offset: 12811},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 376, col: 24, offset: 12811},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 376, col: 41, offset: 12828},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 382, col: 1, offset: 12966},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 12994},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 12994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 29, offset: 12994},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 382, col: 34, offset: 12999},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 382, col: 41, offset: 13006},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 41, offset: 13006},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 382, col: 58, offset: 13023},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 5, offset: 13045},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 383, col: 12, offset: 13052},
								expr: &actionExpr{
									pos: position{line: 383, col: 13, offset: 13053},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 383, col: 13, offset: 13053},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 383, col: 13, offset: 13053},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 383, col: 17, offset: 13057},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 383, col: 24, offset: 13064},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 383, col: 24, offset: 13064},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 383, col: 41, offset: 13081},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 9, offset: 13134},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 389, col: 1, offset: 13224},
			expr: &actionExpr{
				pos: position{line: 389, col: 19, offset: 13242},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 389, col: 19, offset: 13242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 389, col: 19, offset: 13242},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 26, offset: 13249},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 34, offset: 13257},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 39, offset: 13262},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 44, offset: 13267},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 393, col: 1, offset: 13355},
			expr: &actionExpr{
				pos: position{line: 393, col: 25, offset: 13379},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 393, col: 25, offset: 13379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 25, offset: 13379},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 30, offset: 13384},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 37, offset: 13391},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 45, offset: 13399},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 50, offset: 13404},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 55, offset: 13409},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 63, offset: 13417},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 397, col: 1, offset: 13502},
			expr: &actionExpr{
				pos: position{line: 397, col: 20, offset: 13521},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 397, col: 20, offset: 13521},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 397, col: 32, offset: 13533},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 401, col: 1, offset: 13628},
			expr: &actionExpr{
				pos: position{line: 401, col: 26, offset: 13653},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 401, col: 26, offset: 13653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 26, offset: 13653},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 31, offset: 13658},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 43, offset: 13670},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 51, offset: 13678},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 405, col: 1, offset: 13770},
			expr: &actionExpr{
				pos: position{line: 405, col: 23, offset: 13792},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 405, col: 23, offset: 13792},
					expr: &seqExpr{
						pos: position{line: 405, col: 24, offset: 13793},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 405, col: 24, offset: 13793},
								expr: &litMatcher{
									pos:        position{line: 405, col: 25, offset: 13794},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 29, offset: 13798},
								expr: &litMatcher{
									pos:        position{line: 405, col: 30, offset: 13799},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 34, offset: 13803},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 35, offset: 13804},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 405, col: 38, offset: 13807,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 409, col: 1, offset: 13847},
			expr: &actionExpr{
				pos: position{line: 409, col: 23, offset: 13869},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 409, col: 23, offset: 13869},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 409, col: 24, offset: 13870},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 24, offset: 13870},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 409, col: 34, offset: 13880},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 42, offset: 13888},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 48, offset: 13894},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 409, col: 73, offset: 13919},
							expr: &litMatcher{
								pos:        position{line: 409, col: 73, offset: 13919},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 413, col: 1, offset: 14052},
			expr: &actionExpr{
				pos: position{line: 413, col: 28, offset: 14079},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 413, col: 28, offset: 14079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 413, col: 28, offset: 14079},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 35, offset: 14086},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 54, offset: 14105},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 54, offset: 14105},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 413, col: 59, offset: 14110},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 413, col: 59, offset: 14110},
									expr: &litMatcher{
										pos:        position{line: 413, col: 60, offset: 14111},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 413, col: 66, offset: 14117},
									expr: &litMatcher{
										pos:        position{line: 413, col: 67, offset: 14118},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 417, col: 1, offset: 14150},
			expr: &actionExpr{
				pos: position{line: 417, col: 22, offset: 14171},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 417, col: 22, offset: 14171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 22, offset: 14171},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 417, col: 29, offset: 14178},
								run: (*parser).callonMultipleTagRanges4,
								expr: &ruleRefExpr{
									pos:  position{line: 417, col: 29, offset: 14178},
									name: "Alphanums",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 420, col: 5, offset: 14236},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 420, col: 12, offset: 14243},
								expr: &actionExpr{
									pos: position{line: 420, col: 13, offset: 14244},
									run: (*parser).callonMultipleTagRanges8,
									expr: &seqExpr{
										pos: position{line: 420, col: 13, offset: 14244},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 420, col: 13, offset: 14244},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 420, col: 17, offset: 14248},
												label: "other",
												expr: &actionExpr{
													pos: position{line: 420, col: 24, offset: 14255},
													run: (*parser).callonMultipleTagRanges12,
													expr: &ruleRefExpr{
														pos:  position{line: 420, col: 24, offset: 14255},
														name: "Alphanums",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 431, col: 1, offset: 14565},
			expr: &actionExpr{
				pos: position{line: 431, col: 21, offset: 14585},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 431, col: 21, offset: 14585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 21, offset: 14585},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 29, offset: 14593},
								expr: &choiceExpr{
									pos: position{line: 431, col: 30, offset: 14594},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 30, offset: 14594},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 431, col: 53, offset: 14617},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 431, col: 74, offset: 14638},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 431, col: 74, offset: 14638,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 107, offset: 14671},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 435, col: 1, offset: 14742},
			expr: &actionExpr{
				pos: position{line: 435, col: 25, offset: 14766},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 435, col: 25, offset: 14766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 25, offset: 14766},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 435, col: 33, offset: 14774},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 435, col: 38, offset: 14779},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 38, offset: 14779},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 435, col: 78, offset: 14819},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 439, col: 1, offset: 14884},
			expr: &actionExpr{
				pos: position{line: 439, col: 23, offset: 14906},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 439, col: 23, offset: 14906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 23, offset: 14906},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 439, col: 31, offset: 14914},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 439, col: 36, offset: 14919},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 36, offset: 14919},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 439, col: 76, offset: 14959},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 446, col: 1, offset: 15123},
			expr: &oneOrMoreExpr{
				pos: position{line: 446, col: 14, offset: 15136},
				expr: &ruleRefExpr{
					pos:  position{line: 446, col: 14, offset: 15136},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 448, col: 1, offset: 15147},
			expr: &choiceExpr{
				pos: position{line: 448, col: 13, offset: 15159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 13, offset: 15159},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 31, offset: 15177},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 51, offset: 15197},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 69, offset: 15215},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 450, col: 1, offset: 15241},
			expr: &choiceExpr{
				pos: position{line: 450, col: 18, offset: 15258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 450, col: 18, offset: 15258},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 450, col: 18, offset: 15258},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 27, offset: 15267},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 9, offset: 15324},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 452, col: 9, offset: 15324},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 15, offset: 15330},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 16, offset: 15331},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 456, col: 1, offset: 15423},
			expr: &actionExpr{
				pos: position{line: 456, col: 22, offset: 15444},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 456, col: 22, offset: 15444},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 456, col: 22, offset: 15444},
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 23, offset: 15445},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 457, col: 5, offset: 15453},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 6, offset: 15454},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 458, col: 5, offset: 15469},
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 6, offset: 15470},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 459, col: 5, offset: 15492},
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 6, offset: 15493},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 460, col: 5, offset: 15519},
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 6, offset: 15520},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 461, col: 5, offset: 15548},
							expr: &seqExpr{
								pos: position{line: 461, col: 7, offset: 15550},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 461, col: 7, offset: 15550},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 461, col: 27, offset: 15570},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 462, col: 5, offset: 15601},
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 6, offset: 15602},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 463, col: 5, offset: 15627},
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 6, offset: 15628},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 464, col: 5, offset: 15649},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 6, offset: 15650},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 15669},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 466, col: 9, offset: 15684},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 466, col: 9, offset: 15684},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 466, col: 9, offset: 15684},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 466, col: 18, offset: 15693},
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 19, offset: 15694},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 466, col: 35, offset: 15710},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 466, col: 45, offset: 15720},
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 46, offset: 15721},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 12, offset: 15873},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 472, col: 1, offset: 15920},
			expr: &seqExpr{
				pos: position{line: 472, col: 25, offset: 15944},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 472, col: 25, offset: 15944},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 29, offset: 15948},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 474, col: 1, offset: 15955},
			expr: &actionExpr{
				pos: position{line: 474, col: 29, offset: 15983},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 474, col: 29, offset: 15983},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 29, offset: 15983},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 41, offset: 15995},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 41, offset: 15995},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 53, offset: 16007},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 74, offset: 16028},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 82, offset: 16036},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 481, col: 1, offset: 16278},
			expr: &actionExpr{
				pos: position{line: 481, col: 20, offset: 16297},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 481, col: 20, offset: 16297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 481, col: 20, offset: 16297},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 31, offset: 16308},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 32, offset: 16309},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 52, offset: 16329},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 60, offset: 16337},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 83, offset: 16360},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 92, offset: 16369},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 485, col: 1, offset: 16509},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 16539},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 16539},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 486, col: 5, offset: 16539},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 5, offset: 16539},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 9, offset: 16543},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 488, col: 9, offset: 16606},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 488, col: 9, offset: 16606},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 488, col: 9, offset: 16606},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 488, col: 9, offset: 16606},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 488, col: 16, offset: 16613},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 488, col: 16, offset: 16613},
															expr: &litMatcher{
																pos:        position{line: 488, col: 17, offset: 16614},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 492, col: 9, offset: 16714},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 511, col: 11, offset: 17431},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 511, col: 11, offset: 17431},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 511, col: 11, offset: 17431},
													expr: &charClassMatcher{
														pos:        position{line: 511, col: 12, offset: 17432},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 511, col: 20, offset: 17440},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 513, col: 13, offset: 17551},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 513, col: 13, offset: 17551},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 513, col: 14, offset: 17552},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 513, col: 21, offset: 17559},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 515, col: 13, offset: 17673},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 515, col: 13, offset: 17673},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 515, col: 14, offset: 17674},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 515, col: 21, offset: 17681},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 517, col: 13, offset: 17795},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 517, col: 13, offset: 17795},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 517, col: 13, offset: 17795},
													expr: &charClassMatcher{
														pos:        position{line: 517, col: 14, offset: 17796},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 517, col: 22, offset: 17804},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 519, col: 13, offset: 17918},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 519, col: 13, offset: 17918},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 519, col: 13, offset: 17918},
													expr: &charClassMatcher{
														pos:        position{line: 519, col: 14, offset: 17919},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 519, col: 22, offset: 17927},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 12, offset: 18040},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 12, offset: 18040},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 525, col: 1, offset: 18072},
			expr: &actionExpr{
				pos: position{line: 525, col: 27, offset: 18098},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 525, col: 27, offset: 18098},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 525, col: 37, offset: 18108},
						expr: &ruleRefExpr{
							pos:  position{line: 525, col: 37, offset: 18108},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 532, col: 1, offset: 18308},
			expr: &actionExpr{
				pos: position{line: 532, col: 22, offset: 18329},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 532, col: 22, offset: 18329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 22, offset: 18329},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 532, col: 33, offset: 18340},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 34, offset: 18341},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 54, offset: 18361},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 62, offset: 18369},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 87, offset: 18394},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 532, col: 98, offset: 18405},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 99, offset: 18406},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 129, offset: 18436},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 138, offset: 18445},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 536, col: 1, offset: 18603},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 18635},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 18635},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 5, offset: 18635},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 5, offset: 18635},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 9, offset: 18639},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 537, col: 17, offset: 18647},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 539, col: 9, offset: 18704},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 539, col: 9, offset: 18704},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 539, col: 9, offset: 18704},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 539, col: 16, offset: 18711},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 539, col: 16, offset: 18711},
															expr: &litMatcher{
																pos:        position{line: 539, col: 17, offset: 18712},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 543, col: 9, offset: 18812},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 560, col: 14, offset: 19519},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 560, col: 21, offset: 19526},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 560, col: 22, offset: 19527},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 562, col: 13, offset: 19613},
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 13, offset: 19613},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 566, col: 1, offset: 19646},
			expr: &actionExpr{
				pos: position{line: 566, col: 32, offset: 19677},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 566, col: 32, offset: 19677},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 566, col: 32, offset: 19677},
							expr: &litMatcher{
								pos:        position{line: 566, col: 33, offset: 19678},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 37, offset: 19682},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 567, col: 7, offset: 19696},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 567, col: 7, offset: 19696},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 567, col: 7, offset: 19696},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 568, col: 7, offset: 19741},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 568, col: 7, offset: 19741},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 569, col: 7, offset: 19784},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 569, col: 7, offset: 19784},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 570, col: 7, offset: 19826},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 7, offset: 19826},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 574, col: 1, offset: 19865},
			expr: &actionExpr{
				pos: position{line: 574, col: 29, offset: 19893},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 29, offset: 19893},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 574, col: 39, offset: 19903},
						expr: &ruleRefExpr{
							pos:  position{line: 574, col: 39, offset: 19903},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 581, col: 1, offset: 20219},
			expr: &actionExpr{
				pos: position{line: 581, col: 20, offset: 20238},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 581, col: 20, offset: 20238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 20, offset: 20238},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 31, offset: 20249},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 32, offset: 20250},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 52, offset: 20270},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 58, offset: 20276},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 79, offset: 20297},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 90, offset: 20308},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 116, offset: 20334},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 128, offset: 20346},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 129, offset: 20347},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 585, col: 1, offset: 20486},
			expr: &actionExpr{
				pos: position{line: 585, col: 24, offset: 20509},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 585, col: 24, offset: 20509},
					expr: &choiceExpr{
						pos: position{line: 585, col: 25, offset: 20510},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 20510},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 37, offset: 20522},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 585, col: 47, offset: 20532},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 585, col: 47, offset: 20532},
										expr: &ruleRefExpr{
											pos:  position{line: 585, col: 48, offset: 20533},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 585, col: 56, offset: 20541},
										expr: &litMatcher{
											pos:        position{line: 585, col: 57, offset: 20542},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 585, col: 62, offset: 20547,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 589, col: 1, offset: 20589},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 20622},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 20622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 20622},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 590, col: 16, offset: 20633},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 590, col: 16, offset: 20633},
									expr: &litMatcher{
										pos:        position{line: 590, col: 17, offset: 20634},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 593, col: 5, offset: 20692},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 597, col: 6, offset: 20868},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 597, col: 6, offset: 20868},
									expr: &choiceExpr{
										pos: position{line: 597, col: 7, offset: 20869},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 597, col: 7, offset: 20869},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 597, col: 12, offset: 20874},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 24, offset: 20886},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 601, col: 1, offset: 20926},
			expr: &actionExpr{
				pos: position{line: 601, col: 31, offset: 20956},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 601, col: 31, offset: 20956},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 601, col: 40, offset: 20965},
						expr: &ruleRefExpr{
							pos:  position{line: 601, col: 41, offset: 20966},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 608, col: 1, offset: 21157},
			expr: &choiceExpr{
				pos: position{line: 608, col: 19, offset: 21175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 608, col: 19, offset: 21175},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 608, col: 19, offset: 21175},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 9, offset: 21221},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 610, col: 9, offset: 21221},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 9, offset: 21269},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 612, col: 9, offset: 21269},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 614, col: 9, offset: 21327},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 614, col: 9, offset: 21327},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 9, offset: 21381},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 616, col: 9, offset: 21381},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 625, col: 1, offset: 21688},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 21735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 21735},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 21735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 21735},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 627, col: 16, offset: 21746},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 17, offset: 21747},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 627, col: 37, offset: 21767},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 40, offset: 21770},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 627, col: 56, offset: 21786},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 627, col: 61, offset: 21791},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 627, col: 67, offset: 21797},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 68, offset: 21798},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 21990},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 631, col: 5, offset: 21990},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 21990},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 631, col: 16, offset: 22001},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 17, offset: 22002},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 631, col: 37, offset: 22022},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 631, col: 43, offset: 22028},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 44, offset: 22029},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 636, col: 1, offset: 22194},
			expr: &actionExpr{
				pos: position{line: 636, col: 20, offset: 22213},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 636, col: 20, offset: 22213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 20, offset: 22213},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 31, offset: 22224},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 32, offset: 22225},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 637, col: 5, offset: 22250},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 22541},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 16, offset: 22552},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 22575},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 646, col: 16, offset: 22586},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 17, offset: 22587},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 650, col: 1, offset: 22721},
			expr: &actionExpr{
				pos: position{line: 650, col: 19, offset: 22739},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 650, col: 19, offset: 22739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 19, offset: 22739},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 30, offset: 22750},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 50, offset: 22770},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 61, offset: 22781},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 62, offset: 22782},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 654, col: 1, offset: 22888},
			expr: &actionExpr{
				pos: position{line: 654, col: 23, offset: 22910},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 654, col: 23, offset: 22910},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 654, col: 23, offset: 22910},
							expr: &seqExpr{
								pos: position{line: 654, col: 25, offset: 22912},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 654, col: 25, offset: 22912},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 45, offset: 22932},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 22962},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 655, col: 15, offset: 22972},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 655, col: 15, offset: 22972},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 655, col: 26, offset: 22983},
										expr: &ruleRefExpr{
											pos:  position{line: 655, col: 26, offset: 22983},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 42, offset: 22999},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 655, col: 52, offset: 23009},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 53, offset: 23010},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 65, offset: 23022},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 659, col: 1, offset: 23112},
			expr: &actionExpr{
				pos: position{line: 659, col: 23, offset: 23134},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 659, col: 23, offset: 23134},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 659, col: 33, offset: 23144},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 663, col: 1, offset: 23190},
			expr: &choiceExpr{
				pos: position{line: 665, col: 5, offset: 23242},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 23242},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 23242},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 665, col: 5, offset: 23242},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 665, col: 16, offset: 23253},
										expr: &ruleRefExpr{
											pos:  position{line: 665, col: 17, offset: 23254},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 666, col: 5, offset: 23278},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 5, offset: 23490},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 8, offset: 23493},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 673, col: 24, offset: 23509},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 29, offset: 23514},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 673, col: 35, offset: 23520},
										expr: &ruleRefExpr{
											pos:  position{line: 673, col: 36, offset: 23521},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 23713},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 23713},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 23713},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 677, col: 16, offset: 23724},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 17, offset: 23725},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 678, col: 5, offset: 23749},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 685, col: 5, offset: 23961},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 685, col: 11, offset: 23967},
										expr: &ruleRefExpr{
											pos:  position{line: 685, col: 12, offset: 23968},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 689, col: 1, offset: 24069},
			expr: &actionExpr{
				pos: position{line: 689, col: 19, offset: 24087},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 689, col: 19, offset: 24087},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 689, col: 19, offset: 24087},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 20, offset: 24088},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 689, col: 24, offset: 24092},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 25, offset: 24093},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 24107},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 690, col: 15, offset: 24117},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 690, col: 15, offset: 24117},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 690, col: 15, offset: 24117},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 690, col: 24, offset: 24126},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 692, col: 9, offset: 24218},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 692, col: 9, offset: 24218},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 692, col: 9, offset: 24218},
													expr: &ruleRefExpr{
														pos:  position{line: 692, col: 10, offset: 24219},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 692, col: 25, offset: 24234},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 692, col: 34, offset: 24243},
														expr: &ruleRefExpr{
															pos:  position{line: 692, col: 35, offset: 24244},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 24260},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 692, col: 61, offset: 24270},
														expr: &ruleRefExpr{
															pos:  position{line: 692, col: 62, offset: 24271},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 692, col: 74, offset: 24283},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 698, col: 1, offset: 24419},
			expr: &actionExpr{
				pos: position{line: 698, col: 18, offset: 24436},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 698, col: 18, offset: 24436},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 698, col: 18, offset: 24436},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 19, offset: 24437},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 698, col: 23, offset: 24441},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 24, offset: 24442},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 5, offset: 24457},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 699, col: 14, offset: 24466},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 14, offset: 24466},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 700, col: 11, offset: 24487},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 701, col: 11, offset: 24505},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 702, col: 11, offset: 24528},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 11, offset: 24544},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 11, offset: 24567},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 11, offset: 24593},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 24620},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 24642},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 24668},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 24709},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 24736},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 717, col: 1, offset: 24996},
			expr: &actionExpr{
				pos: position{line: 717, col: 37, offset: 25032},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 717, col: 37, offset: 25032},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 717, col: 37, offset: 25032},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 38, offset: 25033},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 717, col: 48, offset: 25043},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 49, offset: 25044},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 64, offset: 25059},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 717, col: 73, offset: 25068},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 74, offset: 25069},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 108, offset: 25103},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 717, col: 118, offset: 25113},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 119, offset: 25114},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 131, offset: 25126},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 721, col: 1, offset: 25217},
			expr: &actionExpr{
				pos: position{line: 721, col: 36, offset: 25252},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 721, col: 36, offset: 25252},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 721, col: 36, offset: 25252},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 37, offset: 25253},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 721, col: 41, offset: 25257},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 42, offset: 25258},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 5, offset: 25273},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 722, col: 14, offset: 25282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 722, col: 14, offset: 25282},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25303},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25321},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25344},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25360},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25383},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25405},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25431},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25457},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 735, col: 1, offset: 25591},
			expr: &actionExpr{
				pos: position{line: 735, col: 18, offset: 25608},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 735, col: 18, offset: 25608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 735, col: 18, offset: 25608},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 735, col: 27, offset: 25617},
								expr: &choiceExpr{
									pos: position{line: 735, col: 28, offset: 25618},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 735, col: 28, offset: 25618},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 735, col: 40, offset: 25630},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 735, col: 56, offset: 25646},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 76, offset: 25666},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 739, col: 1, offset: 25700},
			expr: &actionExpr{
				pos: position{line: 739, col: 22, offset: 25721},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 739, col: 22, offset: 25721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 22, offset: 25721},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 33, offset: 25732},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 34, offset: 25733},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 54, offset: 25753},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 739, col: 60, offset: 25759},
								expr: &actionExpr{
									pos: position{line: 739, col: 61, offset: 25760},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 739, col: 61, offset: 25760},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 739, col: 61, offset: 25760},
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 62, offset: 25761},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 739, col: 66, offset: 25765},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 72, offset: 25771},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 745, col: 1, offset: 25891},
			expr: &actionExpr{
				pos: position{line: 745, col: 26, offset: 25916},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 745, col: 26, offset: 25916},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 745, col: 26, offset: 25916},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 27, offset: 25917},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 745, col: 42, offset: 25932},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 43, offset: 25933},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 53, offset: 25943},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 745, col: 62, offset: 25952},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 63, offset: 25953},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 94, offset: 25984},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 745, col: 104, offset: 25994},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 105, offset: 25995},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 117, offset: 26007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 749, col: 1, offset: 26098},
			expr: &actionExpr{
				pos: position{line: 749, col: 33, offset: 26130},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 749, col: 33, offset: 26130},
					expr: &seqExpr{
						pos: position{line: 749, col: 34, offset: 26131},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 749, col: 34, offset: 26131},
								expr: &ruleRefExpr{
									pos:  position{line: 749, col: 35, offset: 26132},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 749, col: 39, offset: 26136},
								expr: &ruleRefExpr{
									pos:  position{line: 749, col: 40, offset: 26137},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 749, col: 50, offset: 26147,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 756, col: 1, offset: 26371},
			expr: &actionExpr{
				pos: position{line: 756, col: 14, offset: 26384},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 756, col: 14, offset: 26384},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 756, col: 14, offset: 26384},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 756, col: 17, offset: 26387},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 756, col: 21, offset: 26391},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 21, offset: 26391},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 756, col: 25, offset: 26395},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 26, offset: 26396},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 763, col: 1, offset: 26680},
			expr: &actionExpr{
				pos: position{line: 763, col: 15, offset: 26694},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 763, col: 15, offset: 26694},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 763, col: 15, offset: 26694},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 16, offset: 26695},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 19, offset: 26698},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 763, col: 25, offset: 26704},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 763, col: 25, offset: 26704},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 764, col: 15, offset: 26728},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 765, col: 15, offset: 26754},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 766, col: 15, offset: 26783},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 767, col: 15, offset: 26812},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 768, col: 15, offset: 26843},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 769, col: 15, offset: 26874},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 15, offset: 26907},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 15, offset: 26943},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 15, offset: 26979},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 15, offset: 27016},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 777, col: 1, offset: 27170},
			expr: &choiceExpr{
				pos: position{line: 777, col: 21, offset: 27190},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 777, col: 21, offset: 27190},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 28, offset: 27197},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 34, offset: 27203},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 41, offset: 27210},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 47, offset: 27216},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 54, offset: 27223},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 60, offset: 27229},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 66, offset: 27235},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 779, col: 1, offset: 27240},
			expr: &choiceExpr{
				pos: position{line: 779, col: 33, offset: 27272},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 779, col: 33, offset: 27272},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 779, col: 39, offset: 27278},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 779, col: 39, offset: 27278},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 783, col: 1, offset: 27411},
			expr: &actionExpr{
				pos: position{line: 783, col: 25, offset: 27435},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 783, col: 25, offset: 27435},
					expr: &litMatcher{
						pos:        position{line: 783, col: 25, offset: 27435},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 787, col: 1, offset: 27476},
			expr: &actionExpr{
				pos: position{line: 787, col: 25, offset: 27500},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 787, col: 25, offset: 27500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 787, col: 25, offset: 27500},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 787, col: 30, offset: 27505},
							expr: &litMatcher{
								pos:        position{line: 787, col: 30, offset: 27505},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 795, col: 1, offset: 27602},
			expr: &choiceExpr{
				pos: position{line: 795, col: 13, offset: 27614},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 795, col: 13, offset: 27614},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 795, col: 35, offset: 27636},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 797, col: 1, offset: 27657},
			expr: &actionExpr{
				pos: position{line: 797, col: 24, offset: 27680},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 797, col: 24, offset: 27680},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 797, col: 24, offset: 27680},
							expr: &litMatcher{
								pos:        position{line: 797, col: 25, offset: 27681},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 797, col: 30, offset: 27686},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 797, col: 35, offset: 27691},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 44, offset: 27700},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 797, col: 72, offset: 27728},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 801, col: 1, offset: 27853},
			expr: &seqExpr{
				pos: position{line: 801, col: 31, offset: 27883},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 801, col: 31, offset: 27883},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 801, col: 58, offset: 27910},
						expr: &actionExpr{
							pos: position{line: 801, col: 59, offset: 27911},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 801, col: 59, offset: 27911},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 801, col: 59, offset: 27911},
										expr: &litMatcher{
											pos:        position{line: 801, col: 61, offset: 27913},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 801, col: 67, offset: 27919},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 801, col: 76, offset: 27928},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 801, col: 76, offset: 27928},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 801, col: 81, offset: 27933},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 805, col: 1, offset: 28025},
			expr: &actionExpr{
				pos: position{line: 805, col: 31, offset: 28055},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 805, col: 31, offset: 28055},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 805, col: 31, offset: 28055},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 32, offset: 28056},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 40, offset: 28064},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 805, col: 49, offset: 28073},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 805, col: 49, offset: 28073},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 11, offset: 28104},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 11, offset: 28126},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 11, offset: 28150},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 11, offset: 28174},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 11, offset: 28200},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 11, offset: 28223},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 11, offset: 28239},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 11, offset: 28262},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 817, col: 1, offset: 28418},
			expr: &actionExpr{
				pos: position{line: 817, col: 27, offset: 28444},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 817, col: 27, offset: 28444},
					exprs: []interface{}{
						&anyMatcher{
							line: 817, col: 28, offset: 28445,
						},
						&zeroOrMoreExpr{
							pos: position{line: 817, col: 31, offset: 28448},
							expr: &seqExpr{
								pos: position{line: 817, col: 32, offset: 28449},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 817, col: 32, offset: 28449},
										expr: &litMatcher{
											pos:        position{line: 817, col: 33, offset: 28450},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 38, offset: 28455},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 39, offset: 28456},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 817, col: 42, offset: 28459},
										expr: &litMatcher{
											pos:        position{line: 817, col: 43, offset: 28460},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 47, offset: 28464},
										expr: &litMatcher{
											pos:        position{line: 817, col: 48, offset: 28465},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 52, offset: 28469},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 53, offset: 28470},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 817, col: 61, offset: 28478,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 821, col: 1, offset: 28538},
			expr: &choiceExpr{
				pos: position{line: 821, col: 24, offset: 28561},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 821, col: 24, offset: 28561},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 821, col: 24, offset: 28561},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 821, col: 24, offset: 28561},
									expr: &litMatcher{
										pos:        position{line: 821, col: 25, offset: 28562},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 821, col: 29, offset: 28566},
									expr: &litMatcher{
										pos:        position{line: 821, col: 30, offset: 28567},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 35, offset: 28572},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 39, offset: 28576},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 48, offset: 28585},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 76, offset: 28613},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 28793},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 28793},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 823, col: 5, offset: 28793},
									expr: &litMatcher{
										pos:        position{line: 823, col: 6, offset: 28794},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 11, offset: 28799},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 823, col: 16, offset: 28804},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 25, offset: 28813},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 53, offset: 28841},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 827, col: 1, offset: 29099},
			expr: &seqExpr{
				pos: position{line: 827, col: 31, offset: 29129},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 827, col: 31, offset: 29129},
						expr: &ruleRefExpr{
							pos:  position{line: 827, col: 32, offset: 29130},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 35, offset: 29133},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 827, col: 62, offset: 29160},
						expr: &actionExpr{
							pos: position{line: 827, col: 63, offset: 29161},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 827, col: 63, offset: 29161},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 827, col: 63, offset: 29161},
										expr: &seqExpr{
											pos: position{line: 827, col: 65, offset: 29163},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 827, col: 65, offset: 29163},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 827, col: 69, offset: 29167},
													expr: &ruleRefExpr{
														pos:  position{line: 827, col: 70, offset: 29168},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 827, col: 80, offset: 29178},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 827, col: 88, offset: 29186},
											expr: &ruleRefExpr{
												pos:  position{line: 827, col: 88, offset: 29186},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 827, col: 93, offset: 29191},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 102, offset: 29200},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 831, col: 1, offset: 29291},
			expr: &actionExpr{
				pos: position{line: 831, col: 31, offset: 29321},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 831, col: 31, offset: 29321},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 831, col: 31, offset: 29321},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 32, offset: 29322},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 831, col: 40, offset: 29330},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 831, col: 49, offset: 29339},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 831, col: 49, offset: 29339},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 29369},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 29391},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 29415},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 29439},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 29465},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 29488},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 29504},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29527},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 843, col: 1, offset: 29683},
			expr: &actionExpr{
				pos: position{line: 843, col: 27, offset: 29709},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 843, col: 27, offset: 29709},
					exprs: []interface{}{
						&anyMatcher{
							line: 843, col: 28, offset: 29710,
						},
						&zeroOrMoreExpr{
							pos: position{line: 843, col: 31, offset: 29713},
							expr: &seqExpr{
								pos: position{line: 843, col: 32, offset: 29714},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 843, col: 32, offset: 29714},
										expr: &litMatcher{
											pos:        position{line: 843, col: 33, offset: 29715},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 37, offset: 29719},
										expr: &ruleRefExpr{
											pos:  position{line: 843, col: 38, offset: 29720},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 843, col: 41, offset: 29723},
										expr: &litMatcher{
											pos:        position{line: 843, col: 42, offset: 29724},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 46, offset: 29728},
										expr: &litMatcher{
											pos:        position{line: 843, col: 47, offset: 29729},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 51, offset: 29733},
										expr: &ruleRefExpr{
											pos:  position{line: 843, col: 52, offset: 29734},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 843, col: 60, offset: 29742,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 847, col: 1, offset: 29802},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 29826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 29826},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 29826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 848, col: 5, offset: 29826},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 18, offset: 29839},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 40, offset: 29861},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 848, col: 45, offset: 29866},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 54, offset: 29875},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 82, offset: 29903},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 9, offset: 30059},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 850, col: 9, offset: 30059},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 850, col: 9, offset: 30059},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 22, offset: 30072},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 850, col: 44, offset: 30094},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 850, col: 49, offset: 30099},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 58, offset: 30108},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 850, col: 86, offset: 30136},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 9, offset: 30335},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 853, col: 9, offset: 30335},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 853, col: 9, offset: 30335},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 22, offset: 30348},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 44, offset: 30370},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 853, col: 48, offset: 30374},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 57, offset: 30383},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 85, offset: 30411},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 861, col: 1, offset: 30618},
			expr: &choiceExpr{
				pos: position{line: 861, col: 15, offset: 30632},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 15, offset: 30632},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 39, offset: 30656},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 863, col: 1, offset: 30679},
			expr: &actionExpr{
				pos: position{line: 863, col: 26, offset: 30704},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 863, col: 26, offset: 30704},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 863, col: 26, offset: 30704},
							expr: &litMatcher{
								pos:        position{line: 863, col: 27, offset: 30705},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 863, col: 32, offset: 30710},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 863, col: 37, offset: 30715},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 46, offset: 30724},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 863, col: 76, offset: 30754},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 867, col: 1, offset: 30880},
			expr: &seqExpr{
				pos: position{line: 867, col: 33, offset: 30912},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 867, col: 33, offset: 30912},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 867, col: 62, offset: 30941},
						expr: &actionExpr{
							pos: position{line: 867, col: 63, offset: 30942},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 867, col: 63, offset: 30942},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 867, col: 63, offset: 30942},
										expr: &litMatcher{
											pos:        position{line: 867, col: 65, offset: 30944},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 867, col: 71, offset: 30950},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 867, col: 80, offset: 30959},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 867, col: 80, offset: 30959},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 867, col: 85, offset: 30964},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 871, col: 1, offset: 31058},
			expr: &actionExpr{
				pos: position{line: 871, col: 33, offset: 31090},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 871, col: 33, offset: 31090},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 871, col: 33, offset: 31090},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 34, offset: 31091},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 42, offset: 31099},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 871, col: 51, offset: 31108},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 871, col: 51, offset: 31108},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 872, col: 11, offset: 31141},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 873, col: 11, offset: 31161},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 874, col: 11, offset: 31185},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 875, col: 11, offset: 31209},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 31235},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 31258},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 31274},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 31297},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 883, col: 1, offset: 31455},
			expr: &actionExpr{
				pos: position{line: 883, col: 29, offset: 31483},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 883, col: 29, offset: 31483},
					exprs: []interface{}{
						&anyMatcher{
							line: 883, col: 30, offset: 31484,
						},
						&zeroOrMoreExpr{
							pos: position{line: 883, col: 33, offset: 31487},
							expr: &seqExpr{
								pos: position{line: 883, col: 34, offset: 31488},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 883, col: 34, offset: 31488},
										expr: &litMatcher{
											pos:        position{line: 883, col: 35, offset: 31489},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 40, offset: 31494},
										expr: &litMatcher{
											pos:        position{line: 883, col: 41, offset: 31495},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 45, offset: 31499},
										expr: &litMatcher{
											pos:        position{line: 883, col: 46, offset: 31500},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 50, offset: 31504},
										expr: &ruleRefExpr{
											pos:  position{line: 883, col: 51, offset: 31505},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 883, col: 59, offset: 31513,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 887, col: 1, offset: 31573},
			expr: &choiceExpr{
				pos: position{line: 887, col: 26, offset: 31598},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 26, offset: 31598},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 887, col: 26, offset: 31598},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 887, col: 26, offset: 31598},
									expr: &litMatcher{
										pos:        position{line: 887, col: 27, offset: 31599},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 887, col: 31, offset: 31603},
									expr: &litMatcher{
										pos:        position{line: 887, col: 32, offset: 31604},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 37, offset: 31609},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 887, col: 41, offset: 31613},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 50, offset: 31622},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 80, offset: 31652},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 31834},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 31834},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 889, col: 5, offset: 31834},
									expr: &litMatcher{
										pos:        position{line: 889, col: 6, offset: 31835},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 889, col: 11, offset: 31840},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 889, col: 16, offset: 31845},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 25, offset: 31854},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 889, col: 55, offset: 31884},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 893, col: 1, offset: 32146},
			expr: &seqExpr{
				pos: position{line: 893, col: 33, offset: 32178},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 893, col: 33, offset: 32178},
						expr: &ruleRefExpr{
							pos:  position{line: 893, col: 34, offset: 32179},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 37, offset: 32182},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 893, col: 66, offset: 32211},
						expr: &actionExpr{
							pos: position{line: 893, col: 67, offset: 32212},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 893, col: 67, offset: 32212},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 893, col: 67, offset: 32212},
										expr: &seqExpr{
											pos: position{line: 893, col: 69, offset: 32214},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 893, col: 69, offset: 32214},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 893, col: 73, offset: 32218},
													expr: &ruleRefExpr{
														pos:  position{line: 893, col: 74, offset: 32219},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 893, col: 84, offset: 32229},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 893, col: 92, offset: 32237},
											expr: &ruleRefExpr{
												pos:  position{line: 893, col: 92, offset: 32237},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 893, col: 97, offset: 32242},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 106, offset: 32251},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 897, col: 1, offset: 32344},
			expr: &actionExpr{
				pos: position{line: 897, col: 33, offset: 32376},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 897, col: 33, offset: 32376},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 897, col: 33, offset: 32376},
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 34, offset: 32377},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 897, col: 42, offset: 32385},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 897, col: 51, offset: 32394},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 897, col: 51, offset: 32394},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 32426},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 32446},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 32470},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32494},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 32520},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 32543},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32559},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 32582},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 909, col: 1, offset: 32740},
			expr: &actionExpr{
				pos: position{line: 909, col: 29, offset: 32768},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 909, col: 29, offset: 32768},
					exprs: []interface{}{
						&anyMatcher{
							line: 909, col: 30, offset: 32769,
						},
						&zeroOrMoreExpr{
							pos: position{line: 909, col: 33, offset: 32772},
							expr: &seqExpr{
								pos: position{line: 909, col: 34, offset: 32773},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 909, col: 34, offset: 32773},
										expr: &litMatcher{
											pos:        position{line: 909, col: 35, offset: 32774},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 39, offset: 32778},
										expr: &ruleRefExpr{
											pos:  position{line: 909, col: 40, offset: 32779},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 909, col: 43, offset: 32782},
										expr: &litMatcher{
											pos:        position{line: 909, col: 44, offset: 32783},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 48, offset: 32787},
										expr: &litMatcher{
											pos:        position{line: 909, col: 49, offset: 32788},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 53, offset: 32792},
										expr: &ruleRefExpr{
											pos:  position{line: 909, col: 54, offset: 32793},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 909, col: 62, offset: 32801,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 913, col: 1, offset: 32861},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 32887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 32887},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 32887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 914, col: 5, offset: 32887},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 18, offset: 32900},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 40, offset: 32922},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 914, col: 45, offset: 32927},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 54, offset: 32936},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 84, offset: 32966},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 9, offset: 33122},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 916, col: 9, offset: 33122},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 916, col: 9, offset: 33122},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 22, offset: 33135},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 44, offset: 33157},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 916, col: 49, offset: 33162},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 58, offset: 33171},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 88, offset: 33201},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 9, offset: 33400},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 919, col: 9, offset: 33400},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 9, offset: 33400},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 22, offset: 33413},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 44, offset: 33435},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 919, col: 48, offset: 33439},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 57, offset: 33448},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 87, offset: 33478},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 926, col: 1, offset: 33687},
			expr: &choiceExpr{
				pos: position{line: 926, col: 18, offset: 33704},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 926, col: 18, offset: 33704},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 45, offset: 33731},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 928, col: 1, offset: 33757},
			expr: &actionExpr{
				pos: position{line: 928, col: 29, offset: 33785},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 928, col: 29, offset: 33785},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 928, col: 29, offset: 33785},
							expr: &litMatcher{
								pos:        position{line: 928, col: 30, offset: 33786},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 928, col: 35, offset: 33791},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 928, col: 40, offset: 33796},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 49, offset: 33805},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 928, col: 82, offset: 33838},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 932, col: 1, offset: 33967},
			expr: &seqExpr{
				pos: position{line: 932, col: 36, offset: 34002},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 932, col: 36, offset: 34002},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 932, col: 68, offset: 34034},
						expr: &actionExpr{
							pos: position{line: 932, col: 69, offset: 34035},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 932, col: 69, offset: 34035},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 932, col: 69, offset: 34035},
										expr: &litMatcher{
											pos:        position{line: 932, col: 71, offset: 34037},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 932, col: 77, offset: 34043},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 932, col: 86, offset: 34052},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 932, col: 86, offset: 34052},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 932, col: 91, offset: 34057},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 936, col: 1, offset: 34154},
			expr: &actionExpr{
				pos: position{line: 936, col: 36, offset: 34189},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 936, col: 36, offset: 34189},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 936, col: 36, offset: 34189},
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 37, offset: 34190},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 45, offset: 34198},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 936, col: 54, offset: 34207},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 936, col: 54, offset: 34207},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 937, col: 11, offset: 34243},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 938, col: 11, offset: 34262},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 34284},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 34308},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 34334},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 34357},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 34373},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 34396},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 948, col: 1, offset: 34557},
			expr: &actionExpr{
				pos: position{line: 948, col: 32, offset: 34588},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 948, col: 32, offset: 34588},
					exprs: []interface{}{
						&anyMatcher{
							line: 948, col: 33, offset: 34589,
						},
						&zeroOrMoreExpr{
							pos: position{line: 948, col: 36, offset: 34592},
							expr: &seqExpr{
								pos: position{line: 948, col: 37, offset: 34593},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 948, col: 37, offset: 34593},
										expr: &litMatcher{
											pos:        position{line: 948, col: 38, offset: 34594},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 43, offset: 34599},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 44, offset: 34600},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 948, col: 47, offset: 34603},
										expr: &litMatcher{
											pos:        position{line: 948, col: 48, offset: 34604},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 52, offset: 34608},
										expr: &litMatcher{
											pos:        position{line: 948, col: 53, offset: 34609},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 57, offset: 34613},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 58, offset: 34614},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 948, col: 66, offset: 34622,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 952, col: 1, offset: 34682},
			expr: &choiceExpr{
				pos: position{line: 952, col: 29, offset: 34710},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 29, offset: 34710},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 952, col: 29, offset: 34710},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 952, col: 29, offset: 34710},
									expr: &litMatcher{
										pos:        position{line: 952, col: 30, offset: 34711},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 952, col: 34, offset: 34715},
									expr: &litMatcher{
										pos:        position{line: 952, col: 35, offset: 34716},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 40, offset: 34721},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 952, col: 44, offset: 34725},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 53, offset: 34734},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 86, offset: 34767},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 34952},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 34952},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 954, col: 5, offset: 34952},
									expr: &litMatcher{
										pos:        position{line: 954, col: 6, offset: 34953},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 11, offset: 34958},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 954, col: 16, offset: 34963},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 25, offset: 34972},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 58, offset: 35005},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 958, col: 1, offset: 35273},
			expr: &seqExpr{
				pos: position{line: 958, col: 36, offset: 35308},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 958, col: 36, offset: 35308},
						expr: &ruleRefExpr{
							pos:  position{line: 958, col: 37, offset: 35309},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 40, offset: 35312},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 958, col: 72, offset: 35344},
						expr: &actionExpr{
							pos: position{line: 958, col: 73, offset: 35345},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 958, col: 73, offset: 35345},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 958, col: 73, offset: 35345},
										expr: &seqExpr{
											pos: position{line: 958, col: 75, offset: 35347},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 958, col: 75, offset: 35347},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 958, col: 79, offset: 35351},
													expr: &ruleRefExpr{
														pos:  position{line: 958, col: 80, offset: 35352},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 958, col: 90, offset: 35362},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 958, col: 98, offset: 35370},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 98, offset: 35370},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 958, col: 103, offset: 35375},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 958, col: 112, offset: 35384},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 962, col: 1, offset: 35480},
			expr: &actionExpr{
				pos: position{line: 962, col: 37, offset: 35516},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 962, col: 37, offset: 35516},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 962, col: 46, offset: 35525},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 962, col: 46, offset: 35525},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 963, col: 11, offset: 35563},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 964, col: 11, offset: 35599},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 35619},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 966, col: 11, offset: 35640},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 967, col: 11, offset: 35664},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 968, col: 11, offset: 35690},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 969, col: 11, offset: 35713},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 970, col: 11, offset: 35729},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 971, col: 11, offset: 35752},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 975, col: 1, offset: 35913},
			expr: &actionExpr{
				pos: position{line: 975, col: 32, offset: 35944},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 32, offset: 35944},
					exprs: []interface{}{
						&anyMatcher{
							line: 975, col: 33, offset: 35945,
						},
						&zeroOrMoreExpr{
							pos: position{line: 975, col: 36, offset: 35948},
							expr: &seqExpr{
								pos: position{line: 975, col: 37, offset: 35949},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 975, col: 37, offset: 35949},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 38, offset: 35950},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 41, offset: 35953},
										expr: &litMatcher{
											pos:        position{line: 975, col: 42, offset: 35954},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 46, offset: 35958},
										expr: &litMatcher{
											pos:        position{line: 975, col: 47, offset: 35959},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 51, offset: 35963},
										expr: &litMatcher{
											pos:        position{line: 975, col: 52, offset: 35964},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 56, offset: 35968},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 57, offset: 35969},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 975, col: 65, offset: 35977,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 979, col: 1, offset: 36058},
			expr: &choiceExpr{
				pos: position{line: 980, col: 5, offset: 36087},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 36087},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 980, col: 5, offset: 36087},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 980, col: 5, offset: 36087},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 980, col: 18, offset: 36100},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 980, col: 40, offset: 36122},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 980, col: 45, offset: 36127},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 980, col: 54, offset: 36136},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 980, col: 87, offset: 36169},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 9, offset: 36325},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 982, col: 9, offset: 36325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 982, col: 9, offset: 36325},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 982, col: 22, offset: 36338},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 982, col: 44, offset: 36360},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 982, col: 49, offset: 36365},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 982, col: 58, offset: 36374},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 982, col: 91, offset: 36407},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 9, offset: 36606},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 985, col: 9, offset: 36606},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 985, col: 9, offset: 36606},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 22, offset: 36619},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 985, col: 44, offset: 36641},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 985, col: 48, offset: 36645},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 57, offset: 36654},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 985, col: 90, offset: 36687},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 989, col: 1, offset: 36836},
			expr: &actionExpr{
				pos: position{line: 989, col: 18, offset: 36853},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 989, col: 18, offset: 36853},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 989, col: 18, offset: 36853},
							expr: &litMatcher{
								pos:        position{line: 989, col: 19, offset: 36854},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 989, col: 23, offset: 36858},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 989, col: 27, offset: 36862},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 36, offset: 36871},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 989, col: 58, offset: 36893},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 993, col: 1, offset: 36982},
			expr: &choiceExpr{
				pos: position{line: 993, col: 25, offset: 37006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 993, col: 25, offset: 37006},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 38, offset: 37019},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 995, col: 1, offset: 37038},
			expr: &actionExpr{
				pos: position{line: 995, col: 21, offset: 37058},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 995, col: 21, offset: 37058},
					expr: &seqExpr{
						pos: position{line: 995, col: 22, offset: 37059},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 995, col: 22, offset: 37059},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 23, offset: 37060},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 995, col: 31, offset: 37068},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 32, offset: 37069},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 995, col: 35, offset: 37072},
								expr: &litMatcher{
									pos:        position{line: 995, col: 36, offset: 37073},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 995, col: 40, offset: 37077,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 999, col: 1, offset: 37110},
			expr: &actionExpr{
				pos: position{line: 999, col: 25, offset: 37134},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 999, col: 25, offset: 37134},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 999, col: 25, offset: 37134},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 38, offset: 37147},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 60, offset: 37169},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 999, col: 64, offset: 37173},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 73, offset: 37182},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 95, offset: 37204},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1003, col: 1, offset: 37333},
			expr: &actionExpr{
				pos: position{line: 1003, col: 20, offset: 37352},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 20, offset: 37352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1003, col: 20, offset: 37352},
							expr: &litMatcher{
								pos:        position{line: 1003, col: 21, offset: 37353},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1003, col: 25, offset: 37357},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 29, offset: 37361},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1003, col: 38, offset: 37370},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1003, col: 62, offset: 37394},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1007, col: 1, offset: 37485},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 27, offset: 37511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1007, col: 27, offset: 37511},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 40, offset: 37524},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1009, col: 1, offset: 37545},
			expr: &actionExpr{
				pos: position{line: 1009, col: 23, offset: 37567},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1009, col: 23, offset: 37567},
					expr: &seqExpr{
						pos: position{line: 1009, col: 24, offset: 37568},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1009, col: 24, offset: 37568},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 25, offset: 37569},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1009, col: 33, offset: 37577},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 34, offset: 37578},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1009, col: 37, offset: 37581},
								expr: &litMatcher{
									pos:        position{line: 1009, col: 38, offset: 37582},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1009, col: 42, offset: 37586,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1013, col: 1, offset: 37619},
			expr: &actionExpr{
				pos: position{line: 1013, col: 27, offset: 37645},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 27, offset: 37645},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1013, col: 27, offset: 37645},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 40, offset: 37658},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1013, col: 62, offset: 37680},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 66, offset: 37684},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 75, offset: 37693},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1013, col: 99, offset: 37717},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1020, col: 1, offset: 37953},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 16, offset: 37968},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1020, col: 16, offset: 37968},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 40, offset: 37992},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 64, offset: 38016},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1022, col: 1, offset: 38034},
			expr: &litMatcher{
				pos:        position{line: 1022, col: 32, offset: 38065},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1024, col: 1, offset: 38070},
			expr: &actionExpr{
				pos: position{line: 1024, col: 26, offset: 38095},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 26, offset: 38095},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1024, col: 26, offset: 38095},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 54, offset: 38123},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 63, offset: 38132},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1024, col: 93, offset: 38162},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1024, col: 121, offset: 38190},
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 122, offset: 38191},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1028, col: 1, offset: 38290},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 33, offset: 38322},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 34, offset: 38323},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 34, offset: 38323},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1028, col: 35, offset: 38324},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1028, col: 35, offset: 38324},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 36, offset: 38325},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1028, col: 64, offset: 38353},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 65, offset: 38354},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1028, col: 68, offset: 38357},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 69, offset: 38358},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1028, col: 77, offset: 38366,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1028, col: 80, offset: 38369},
									expr: &seqExpr{
										pos: position{line: 1028, col: 81, offset: 38370},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1028, col: 81, offset: 38370},
												expr: &seqExpr{
													pos: position{line: 1028, col: 83, offset: 38372},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1028, col: 83, offset: 38372},
															expr: &ruleRefExpr{
																pos:  position{line: 1028, col: 83, offset: 38372},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1028, col: 87, offset: 38376},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1028, col: 116, offset: 38405},
												expr: &ruleRefExpr{
													pos:  position{line: 1028, col: 117, offset: 38406},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1028, col: 145, offset: 38434},
												expr: &ruleRefExpr{
													pos:  position{line: 1028, col: 146, offset: 38435},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1028, col: 154, offset: 38443,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 7, offset: 38585},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1030, col: 8, offset: 38586},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1030, col: 8, offset: 38586},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 9, offset: 38587},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 12, offset: 38590},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 13, offset: 38591},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 21, offset: 38599},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 22, offset: 38600},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1030, col: 50, offset: 38628,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1034, col: 1, offset: 38710},
			expr: &litMatcher{
				pos:        position{line: 1034, col: 32, offset: 38741},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1036, col: 1, offset: 38748},
			expr: &actionExpr{
				pos: position{line: 1036, col: 26, offset: 38773},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 26, offset: 38773},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1036, col: 26, offset: 38773},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 54, offset: 38801},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 63, offset: 38810},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 93, offset: 38840},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1036, col: 121, offset: 38868},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 122, offset: 38869},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1040, col: 1, offset: 38968},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 33, offset: 39000},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 34, offset: 39001},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1040, col: 34, offset: 39001},
							expr: &seqExpr{
								pos: position{line: 1040, col: 35, offset: 39002},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1040, col: 35, offset: 39002},
										expr: &ruleRefExpr{
											pos:  position{line: 1040, col: 36, offset: 39003},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1040, col: 64, offset: 39031,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 7, offset: 39196},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1042, col: 7, offset: 39196},
							expr: &seqExpr{
								pos: position{line: 1042, col: 8, offset: 39197},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1042, col: 8, offset: 39197},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 9, offset: 39198},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1042, col: 12, offset: 39201},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 13, offset: 39202},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1042, col: 21, offset: 39210},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 22, offset: 39211},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1042, col: 50, offset: 39239,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1046, col: 1, offset: 39322},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 21, offset: 39342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1046, col: 21, offset: 39342},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1046, col: 21, offset: 39342},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 21, offset: 39342},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 30, offset: 39351},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1046, col: 38, offset: 39359},
										expr: &ruleRefExpr{
											pos:  position{line: 1046, col: 39, offset: 39360},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1046, col: 67, offset: 39388},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 39478},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 39478},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 39478},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 15, offset: 39488},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1048, col: 23, offset: 39496},
										expr: &choiceExpr{
											pos: position{line: 1048, col: 24, offset: 39497},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1048, col: 24, offset: 39497},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1048, col: 37, offset: 39510},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 65, offset: 39538},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1052, col: 1, offset: 39628},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 31, offset: 39658},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 31, offset: 39658},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 43, offset: 39670},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1052, col: 52, offset: 39679},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1052, col: 53, offset: 39680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 53, offset: 39680},
									expr: &litMatcher{
										pos:        position{line: 1052, col: 54, offset: 39681},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1052, col: 58, offset: 39685,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1059, col: 1, offset: 39855},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 19, offset: 39873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1059, col: 19, offset: 39873},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1059, col: 19, offset: 39873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1059, col: 19, offset: 39873},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 24, offset: 39878},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 28, offset: 39882},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1059, col: 32, offset: 39886},
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 32, offset: 39886},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 36, offset: 39890},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 40, offset: 39894},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 47, offset: 39901},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 68, offset: 39922},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 39997},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 39997},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 39997},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 10, offset: 40002},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 14, offset: 40006},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1061, col: 18, offset: 40010},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1065, col: 1, offset: 40073},
			expr: &actionExpr{
				pos: position{line: 1065, col: 24, offset: 40096},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1065, col: 24, offset: 40096},
					expr: &choiceExpr{
						pos: position{line: 1065, col: 25, offset: 40097},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1065, col: 25, offset: 40097},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1065, col: 37, offset: 40109},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1065, col: 47, offset: 40119},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1065, col: 47, offset: 40119},
										expr: &litMatcher{
											pos:        position{line: 1065, col: 48, offset: 40120},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1065, col: 54, offset: 40126,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1072, col: 1, offset: 40268},
			expr: &actionExpr{
				pos: position{line: 1072, col: 9, offset: 40276},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1072, col: 9, offset: 40276},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1072, col: 15, offset: 40282},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1072, col: 15, offset: 40282},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1072, col: 30, offset: 40297},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1077, col: 1, offset: 40404},
			expr: &actionExpr{
				pos: position{line: 1077, col: 17, offset: 40420},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1077, col: 17, offset: 40420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1077, col: 17, offset: 40420},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 25, offset: 40428},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1077, col: 30, offset: 40433},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1077, col: 30, offset: 40433},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1077, col: 41, offset: 40444},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 55, offset: 40458},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1077, col: 73, offset: 40476},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1081, col: 1, offset: 40594},
			expr: &actionExpr{
				pos: position{line: 1081, col: 17, offset: 40610},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 17, offset: 40610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1081, col: 17, offset: 40610},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 22, offset: 40615},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 32, offset: 40625},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1081, col: 49, offset: 40642},
								expr: &ruleRefExpr{
									pos:  position{line: 1081, col: 50, offset: 40643},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1085, col: 1, offset: 40736},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 19, offset: 40754},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 19, offset: 40754},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 44, offset: 40779},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1087, col: 1, offset: 40806},
			expr: &actionExpr{
				pos: position{line: 1087, col: 27, offset: 40832},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 27, offset: 40832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1087, col: 27, offset: 40832},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 31, offset: 40836},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1087, col: 36, offset: 40841},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 37, offset: 40842},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1087, col: 66, offset: 40871},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1091, col: 1, offset: 40933},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 41005},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 41005},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 41005},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 41005},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 10, offset: 41010},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1093, col: 19, offset: 41019},
										expr: &seqExpr{
											pos: position{line: 1093, col: 20, offset: 41020},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1093, col: 20, offset: 41020},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 21, offset: 41021},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1093, col: 25, offset: 41025},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 26, offset: 41026},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1093, col: 30, offset: 41030},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 31, offset: 41031},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1093, col: 37, offset: 41037},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1093, col: 37, offset: 41037},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1093, col: 50, offset: 41050},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1093, col: 63, offset: 41063},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1093, col: 73, offset: 41073},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1093, col: 74, offset: 41074},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1093, col: 74, offset: 41074},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1093, col: 75, offset: 41075},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1093, col: 92, offset: 41092,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1095, col: 11, offset: 41161},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1095, col: 16, offset: 41166},
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 16, offset: 41166},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1095, col: 24, offset: 41174},
									expr: &notExpr{
										pos: position{line: 1095, col: 26, offset: 41176},
										expr: &litMatcher{
											pos:        position{line: 1095, col: 27, offset: 41177},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 41302},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 41302},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 5, offset: 41302},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1099, col: 14, offset: 41311},
										expr: &seqExpr{
											pos: position{line: 1099, col: 15, offset: 41312},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1099, col: 15, offset: 41312},
													expr: &litMatcher{
														pos:        position{line: 1099, col: 16, offset: 41313},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1099, col: 20, offset: 41317},
													expr: &litMatcher{
														pos:        position{line: 1099, col: 21, offset: 41318},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1099, col: 26, offset: 41323},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1099, col: 26, offset: 41323},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1099, col: 39, offset: 41336},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1099, col: 52, offset: 41349},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1099, col: 62, offset: 41359},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1099, col: 63, offset: 41360},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1099, col: 63, offset: 41360},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1099, col: 64, offset: 41361},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1099, col: 81, offset: 41378,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1101, col: 11, offset: 41447},
									expr: &notExpr{
										pos: position{line: 1101, col: 13, offset: 41449},
										expr: &litMatcher{
											pos:        position{line: 1101, col: 14, offset: 41450},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1106, col: 1, offset: 41530},
			expr: &actionExpr{
				pos: position{line: 1106, col: 30, offset: 41559},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 30, offset: 41559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1106, col: 30, offset: 41559},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 34, offset: 41563},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1106, col: 39, offset: 41568},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 40, offset: 41569},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1106, col: 60, offset: 41589},
							expr: &litMatcher{
								pos:        position{line: 1106, col: 60, offset: 41589},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1106, col: 65, offset: 41594},
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 65, offset: 41594},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 69, offset: 41598},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1106, col: 80, offset: 41609},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 81, offset: 41610},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1106, col: 100, offset: 41629},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1110, col: 1, offset: 41714},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 41777},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 41777},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 41777},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 41777},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 10, offset: 41782},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1112, col: 19, offset: 41791},
										expr: &seqExpr{
											pos: position{line: 1112, col: 20, offset: 41792},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1112, col: 20, offset: 41792},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 21, offset: 41793},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1112, col: 25, offset: 41797},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 26, offset: 41798},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1112, col: 30, offset: 41802},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 31, offset: 41803},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1112, col: 37, offset: 41809},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1112, col: 37, offset: 41809},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1112, col: 50, offset: 41822},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1112, col: 63, offset: 41835},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1112, col: 73, offset: 41845},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1112, col: 74, offset: 41846},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1112, col: 74, offset: 41846},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1112, col: 75, offset: 41847},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1112, col: 92, offset: 41864,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1114, col: 11, offset: 41933},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1114, col: 16, offset: 41938},
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 16, offset: 41938},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1114, col: 24, offset: 41946},
									expr: &notExpr{
										pos: position{line: 1114, col: 26, offset: 41948},
										expr: &litMatcher{
											pos:        position{line: 1114, col: 27, offset: 41949},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 42074},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 42074},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 5, offset: 42074},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1118, col: 14, offset: 42083},
										expr: &seqExpr{
											pos: position{line: 1118, col: 15, offset: 42084},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1118, col: 15, offset: 42084},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 16, offset: 42085},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 20, offset: 42089},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 21, offset: 42090},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 25, offset: 42094},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 26, offset: 42095},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1118, col: 31, offset: 42100},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1118, col: 31, offset: 42100},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 44, offset: 42113},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 57, offset: 42126},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1118, col: 67, offset: 42136},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1118, col: 68, offset: 42137},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1118, col: 68, offset: 42137},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1118, col: 69, offset: 42138},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1118, col: 86, offset: 42155,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1120, col: 11, offset: 42224},
									expr: &notExpr{
										pos: position{line: 1120, col: 13, offset: 42226},
										expr: &litMatcher{
											pos:        position{line: 1120, col: 14, offset: 42227},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1127, col: 1, offset: 42408},
			expr: &actionExpr{
				pos: position{line: 1127, col: 15, offset: 42422},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 15, offset: 42422},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1127, col: 15, offset: 42422},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1127, col: 26, offset: 42433},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 27, offset: 42434},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1127, col: 47, offset: 42454},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 57, offset: 42464},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 63, offset: 42470},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 68, offset: 42475},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 86, offset: 42493},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1127, col: 103, offset: 42510},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1131, col: 1, offset: 42622},
			expr: &actionExpr{
				pos: position{line: 1131, col: 16, offset: 42637},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 16, offset: 42637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 16, offset: 42637},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1131, col: 25, offset: 42646},
							expr: &litMatcher{
								pos:        position{line: 1131, col: 26, offset: 42647},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 30, offset: 42651},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 36, offset: 42657},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 41, offset: 42662},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 59, offset: 42680},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1135, col: 1, offset: 42793},
			expr: &actionExpr{
				pos: position{line: 1135, col: 20, offset: 42812},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 20, offset: 42812},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1135, col: 20, offset: 42812},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 24, offset: 42816},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 28, offset: 42820},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 29, offset: 42821},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 46, offset: 42838},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 46, offset: 42838},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 51, offset: 42843},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 57, offset: 42849},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 58, offset: 42850},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 75, offset: 42867},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 75, offset: 42867},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 80, offset: 42872},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 87, offset: 42879},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 88, offset: 42880},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 105, offset: 42897},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 105, offset: 42897},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1135, col: 110, offset: 42902},
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 110, offset: 42902},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 114, offset: 42906},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1135, col: 125, offset: 42917},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 126, offset: 42918},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1135, col: 145, offset: 42937},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1142, col: 1, offset: 43227},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 19, offset: 43245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 19, offset: 43245},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 19, offset: 43245},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 19, offset: 43245},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 32, offset: 43258},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 41, offset: 43267},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1142, col: 58, offset: 43284},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 43359},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 43359},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 43359},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 21, offset: 43375},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 26, offset: 43380},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 39, offset: 43393},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 43, offset: 43397},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 52, offset: 43406},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 69, offset: 43423},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 43508},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 43508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1146, col: 5, offset: 43508},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 21, offset: 43524},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 26, offset: 43529},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 39, offset: 43542},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1150, col: 1, offset: 43657},
			expr: &actionExpr{
				pos: position{line: 1150, col: 16, offset: 43672},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1150, col: 16, offset: 43672},
					expr: &choiceExpr{
						pos: position{line: 1150, col: 17, offset: 43673},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1150, col: 17, offset: 43673},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1150, col: 29, offset: 43685},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1150, col: 39, offset: 43695},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1150, col: 39, offset: 43695},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 40, offset: 43696},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1150, col: 44, offset: 43700},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 45, offset: 43701},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1150, col: 49, offset: 43705},
										expr: &ruleRefExpr{
											pos:  position{line: 1150, col: 50, offset: 43706},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1150, col: 55, offset: 43711,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1154, col: 1, offset: 43796},
			expr: &actionExpr{
				pos: position{line: 1154, col: 20, offset: 43815},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1154, col: 20, offset: 43815},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1154, col: 29, offset: 43824},
						expr: &seqExpr{
							pos: position{line: 1154, col: 30, offset: 43825},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1154, col: 30, offset: 43825},
									expr: &litMatcher{
										pos:        position{line: 1154, col: 31, offset: 43826},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1154, col: 35, offset: 43830},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 36, offset: 43831},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1154, col: 40, offset: 43835},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 40, offset: 43835},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1154, col: 44, offset: 43839},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 45, offset: 43840},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1154, col: 61, offset: 43856},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1154, col: 75, offset: 43870},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 75, offset: 43870},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1161, col: 1, offset: 44184},
			expr: &actionExpr{
				pos: position{line: 1161, col: 19, offset: 44202},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 19, offset: 44202},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1161, col: 19, offset: 44202},
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 20, offset: 44203},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 5, offset: 44232},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1162, col: 12, offset: 44239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1162, col: 12, offset: 44239},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 11, offset: 44262},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 44286},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 44310},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 44332},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 44354},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 44377},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 44405},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 44421},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1174, col: 1, offset: 44462},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 19, offset: 44480},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1174, col: 19, offset: 44480},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 19, offset: 44521},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 19, offset: 44561},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 19, offset: 44602},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 19, offset: 44643},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 19, offset: 44684},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 19, offset: 44722},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1186, col: 1, offset: 44941},
			expr: &seqExpr{
				pos: position{line: 1186, col: 25, offset: 44965},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1186, col: 25, offset: 44965},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 31, offset: 44971},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1188, col: 1, offset: 44977},
			expr: &actionExpr{
				pos: position{line: 1188, col: 16, offset: 44992},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 16, offset: 44992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 16, offset: 44992},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1188, col: 27, offset: 45003},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 28, offset: 45004},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1188, col: 48, offset: 45024},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 69, offset: 45045},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1188, col: 77, offset: 45053},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 78, offset: 45054},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1188, col: 100, offset: 45076},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1188, col: 100, offset: 45076},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1188, col: 123, offset: 45099},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1192, col: 1, offset: 45207},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 23, offset: 45229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1192, col: 23, offset: 45229},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 35, offset: 45241},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 51, offset: 45257},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 62, offset: 45268},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1195, col: 1, offset: 45308},
			expr: &actionExpr{
				pos: position{line: 1195, col: 25, offset: 45332},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1195, col: 25, offset: 45332},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1195, col: 31, offset: 45338},
						expr: &ruleRefExpr{
							pos:  position{line: 1195, col: 32, offset: 45339},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1199, col: 1, offset: 45452},
			expr: &actionExpr{
				pos: position{line: 1199, col: 29, offset: 45480},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 29, offset: 45480},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1199, col: 29, offset: 45480},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 30, offset: 45481},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1199, col: 51, offset: 45502},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 52, offset: 45503},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 62, offset: 45513},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 68, offset: 45519},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1206, col: 1, offset: 45757},
			expr: &seqExpr{
				pos: position{line: 1206, col: 26, offset: 45782},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1206, col: 26, offset: 45782},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 33, offset: 45789},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1209, col: 1, offset: 45830},
			expr: &actionExpr{
				pos: position{line: 1209, col: 17, offset: 45846},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 17, offset: 45846},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1209, col: 17, offset: 45846},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1209, col: 28, offset: 45857},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 29, offset: 45858},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1209, col: 49, offset: 45878},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 71, offset: 45900},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1209, col: 79, offset: 45908},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 80, offset: 45909},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1209, col: 103, offset: 45932},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1209, col: 103, offset: 45932},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 127, offset: 45956},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1213, col: 1, offset: 46065},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 24, offset: 46088},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1213, col: 24, offset: 46088},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 40, offset: 46104},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1215, col: 1, offset: 46127},
			expr: &actionExpr{
				pos: position{line: 1215, col: 26, offset: 46152},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1215, col: 26, offset: 46152},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1215, col: 32, offset: 46158},
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 33, offset: 46159},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1219, col: 1, offset: 46278},
			expr: &actionExpr{
				pos: position{line: 1219, col: 30, offset: 46307},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 30, offset: 46307},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1219, col: 30, offset: 46307},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 31, offset: 46308},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 53, offset: 46330},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1219, col: 59, offset: 46336},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1219, col: 59, offset: 46336},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1219, col: 59, offset: 46336},
											expr: &ruleRefExpr{
												pos:  position{line: 1219, col: 60, offset: 46337},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1219, col: 64, offset: 46341},
											expr: &choiceExpr{
												pos: position{line: 1219, col: 65, offset: 46342},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1219, col: 65, offset: 46342},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1219, col: 77, offset: 46354},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1219, col: 87, offset: 46364},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1219, col: 87, offset: 46364},
																expr: &ruleRefExpr{
																	pos:  position{line: 1219, col: 88, offset: 46365},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1219, col: 92, offset: 46369,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1219, col: 128, offset: 46405},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1226, col: 1, offset: 46731},
			expr: &seqExpr{
				pos: position{line: 1226, col: 26, offset: 46756},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1226, col: 26, offset: 46756},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 33, offset: 46763},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1228, col: 1, offset: 46769},
			expr: &actionExpr{
				pos: position{line: 1228, col: 17, offset: 46785},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 17, offset: 46785},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 17, offset: 46785},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1228, col: 28, offset: 46796},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 29, offset: 46797},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1228, col: 49, offset: 46817},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 71, offset: 46839},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1228, col: 79, offset: 46847},
								expr: &choiceExpr{
									pos: position{line: 1228, col: 80, offset: 46848},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1228, col: 80, offset: 46848},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 92, offset: 46860},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 108, offset: 46876},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 119, offset: 46887},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1228, col: 145, offset: 46913},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1228, col: 145, offset: 46913},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1228, col: 169, offset: 46937},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1233, col: 1, offset: 47064},
			expr: &actionExpr{
				pos: position{line: 1233, col: 26, offset: 47089},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1233, col: 26, offset: 47089},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1233, col: 32, offset: 47095},
						expr: &ruleRefExpr{
							pos:  position{line: 1233, col: 33, offset: 47096},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1237, col: 1, offset: 47210},
			expr: &actionExpr{
				pos: position{line: 1237, col: 30, offset: 47239},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 30, offset: 47239},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1237, col: 30, offset: 47239},
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 31, offset: 47240},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1237, col: 53, offset: 47262},
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 54, offset: 47263},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 64, offset: 47273},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 70, offset: 47279},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1244, col: 1, offset: 47515},
			expr: &seqExpr{
				pos: position{line: 1244, col: 24, offset: 47538},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1244, col: 24, offset: 47538},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 31, offset: 47545},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1246, col: 1, offset: 47576},
			expr: &actionExpr{
				pos: position{line: 1246, col: 15, offset: 47590},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 15, offset: 47590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1246, col: 15, offset: 47590},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1246, col: 26, offset: 47601},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 27, offset: 47602},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1246, col: 47, offset: 47622},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 67, offset: 47642},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1246, col: 75, offset: 47650},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 76, offset: 47651},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1246, col: 97, offset: 47672},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1246, col: 97, offset: 47672},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 119, offset: 47694},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1250, col: 1, offset: 47801},
			expr: &actionExpr{
				pos: position{line: 1251, col: 5, offset: 47827},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 5, offset: 47827},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1251, col: 5, offset: 47827},
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 6, offset: 47828},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1251, col: 26, offset: 47848},
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 27, offset: 47849},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 31, offset: 47853},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1251, col: 40, offset: 47862},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1251, col: 40, offset: 47862},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 15, offset: 47887},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 15, offset: 47915},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 15, offset: 47941},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 15, offset: 47964},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 15, offset: 47990},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 15, offset: 48017},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 15, offset: 48044},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 15, offset: 48071},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 15, offset: 48103},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1261, col: 15, offset: 48129},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 15, offset: 48156},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 15, offset: 48177},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 15, offset: 48205},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1265, col: 15, offset: 48249},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 15, offset: 48287},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 15, offset: 48322},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1271, col: 1, offset: 48381},
			expr: &actionExpr{
				pos: position{line: 1271, col: 24, offset: 48404},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1271, col: 24, offset: 48404},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1271, col: 30, offset: 48410},
						expr: &ruleRefExpr{
							pos:  position{line: 1271, col: 31, offset: 48411},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1280, col: 1, offset: 48757},
			expr: &actionExpr{
				pos: position{line: 1280, col: 15, offset: 48771},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 15, offset: 48771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 15, offset: 48771},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 27, offset: 48783},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1281, col: 5, offset: 48807},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1285, col: 5, offset: 48993},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 25, offset: 49013},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 33, offset: 49021},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 34, offset: 49022},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1285, col: 55, offset: 49043},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1285, col: 55, offset: 49043},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 77, offset: 49065},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1289, col: 1, offset: 49180},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 22, offset: 49201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 22, offset: 49201},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 41, offset: 49220},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 53, offset: 49232},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1291, col: 1, offset: 49253},
			expr: &actionExpr{
				pos: position{line: 1291, col: 21, offset: 49273},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 21, offset: 49273},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1291, col: 21, offset: 49273},
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 22, offset: 49274},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 42, offset: 49294},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 51, offset: 49303},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1296, col: 1, offset: 49365},
			expr: &actionExpr{
				pos: position{line: 1296, col: 24, offset: 49388},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1296, col: 24, offset: 49388},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1296, col: 30, offset: 49394},
						expr: &ruleRefExpr{
							pos:  position{line: 1296, col: 31, offset: 49395},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1300, col: 1, offset: 49485},
			expr: &actionExpr{
				pos: position{line: 1300, col: 28, offset: 49512},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 28, offset: 49512},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 28, offset: 49512},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 29, offset: 49513},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1300, col: 49, offset: 49533},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 50, offset: 49534},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 60, offset: 49544},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1300, col: 66, offset: 49550},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1300, col: 66, offset: 49550},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1300, col: 66, offset: 49550},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1300, col: 75, offset: 49559},
												expr: &ruleRefExpr{
													pos:  position{line: 1300, col: 76, offset: 49560},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1300, col: 109, offset: 49593},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1306, col: 1, offset: 49689},
			expr: &actionExpr{
				pos: position{line: 1306, col: 35, offset: 49723},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 35, offset: 49723},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1306, col: 35, offset: 49723},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 36, offset: 49724},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1306, col: 40, offset: 49728},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 41, offset: 49729},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 5, offset: 49744},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1307, col: 14, offset: 49753},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1307, col: 14, offset: 49753},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 49771},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 49794},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 49810},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 11, offset: 49833},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 49859},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 49886},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 11, offset: 49908},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 11, offset: 49934},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 11, offset: 49975},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 11, offset: 50002},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1324, col: 1, offset: 50232},
			expr: &seqExpr{
				pos: position{line: 1324, col: 26, offset: 50257},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1324, col: 26, offset: 50257},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 33, offset: 50264},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1326, col: 1, offset: 50270},
			expr: &actionExpr{
				pos: position{line: 1326, col: 17, offset: 50286},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 17, offset: 50286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1326, col: 17, offset: 50286},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1326, col: 28, offset: 50297},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 29, offset: 50298},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1326, col: 49, offset: 50318},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 71, offset: 50340},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1326, col: 79, offset: 50348},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 80, offset: 50349},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1326, col: 104, offset: 50373},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1326, col: 104, offset: 50373},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1326, col: 128, offset: 50397},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1330, col: 1, offset: 50506},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 24, offset: 50529},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 24, offset: 50529},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 36, offset: 50541},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 52, offset: 50557},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 63, offset: 50568},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 81, offset: 50586},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1332, col: 1, offset: 50609},
			expr: &actionExpr{
				pos: position{line: 1332, col: 20, offset: 50628},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 20, offset: 50628},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1332, col: 20, offset: 50628},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 21, offset: 50629},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 34, offset: 50642},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 43, offset: 50651},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1337, col: 1, offset: 50714},
			expr: &actionExpr{
				pos: position{line: 1337, col: 26, offset: 50739},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1337, col: 26, offset: 50739},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1337, col: 32, offset: 50745},
						expr: &ruleRefExpr{
							pos:  position{line: 1337, col: 33, offset: 50746},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1341, col: 1, offset: 50860},
			expr: &actionExpr{
				pos: position{line: 1341, col: 30, offset: 50889},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 30, offset: 50889},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1341, col: 30, offset: 50889},
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 31, offset: 50890},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1341, col: 53, offset: 50912},
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 54, offset: 50913},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 64, offset: 50923},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 70, offset: 50929},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1349, col: 1, offset: 51160},
			expr: &actionExpr{
				pos: position{line: 1349, col: 10, offset: 51169},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 10, offset: 51169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 10, offset: 51169},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1349, col: 21, offset: 51180},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 22, offset: 51181},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 42, offset: 51201},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1350, col: 5, offset: 51220},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1350, col: 12, offset: 51227},
								expr: &ruleRefExpr{
									pos:  position{line: 1350, col: 13, offset: 51228},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 5, offset: 51250},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1351, col: 11, offset: 51256},
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 12, offset: 51257},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1352, col: 6, offset: 51274},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1352, col: 6, offset: 51274},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 23, offset: 51291},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1356, col: 1, offset: 51406},
			expr: &seqExpr{
				pos: position{line: 1356, col: 23, offset: 51428},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 23, offset: 51428},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1356, col: 27, offset: 51432},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 27, offset: 51432},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1358, col: 1, offset: 51437},
			expr: &seqExpr{
				pos: position{line: 1358, col: 19, offset: 51455},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1358, col: 19, offset: 51455},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 26, offset: 51462},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1361, col: 1, offset: 51531},
			expr: &actionExpr{
				pos: position{line: 1361, col: 20, offset: 51550},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 20, offset: 51550},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1361, col: 20, offset: 51550},
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 21, offset: 51551},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 36, offset: 51566},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1361, col: 42, offset: 51572},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 43, offset: 51573},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 55, offset: 51585},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 59, offset: 51589},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1365, col: 1, offset: 51657},
			expr: &actionExpr{
				pos: position{line: 1365, col: 14, offset: 51670},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 14, offset: 51670},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1365, col: 14, offset: 51670},
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 15, offset: 51671},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 30, offset: 51686},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1365, col: 36, offset: 51692},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 37, offset: 51693},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1365, col: 49, offset: 51705},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1365, col: 53, offset: 51709},
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 53, offset: 51709},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1369, col: 1, offset: 51778},
			expr: &actionExpr{
				pos: position{line: 1369, col: 14, offset: 51791},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 14, offset: 51791},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1369, col: 14, offset: 51791},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 33, offset: 51810},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1369, col: 42, offset: 51819},
								expr: &seqExpr{
									pos: position{line: 1369, col: 43, offset: 51820},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1369, col: 43, offset: 51820},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 44, offset: 51821},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1369, col: 63, offset: 51840},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 64, offset: 51841},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1369, col: 68, offset: 51845},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 68, offset: 51845},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1369, col: 72, offset: 51849},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1369, col: 86, offset: 51863},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 86, offset: 51863},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1376, col: 1, offset: 52109},
			expr: &litMatcher{
				pos:        position{line: 1376, col: 26, offset: 52134},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1378, col: 1, offset: 52142},
			expr: &actionExpr{
				pos: position{line: 1378, col: 17, offset: 52158},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 17, offset: 52158},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1378, col: 17, offset: 52158},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1378, col: 39, offset: 52180},
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 39, offset: 52180},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1378, col: 43, offset: 52184},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 51, offset: 52192},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1378, col: 59, offset: 52200},
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 60, offset: 52201},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1378, col: 81, offset: 52222},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1378, col: 82, offset: 52223},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1378, col: 82, offset: 52223},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1378, col: 104, offset: 52245},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1378, col: 112, offset: 52253},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1382, col: 1, offset: 52359},
			expr: &actionExpr{
				pos: position{line: 1382, col: 21, offset: 52379},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 21, offset: 52379},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1382, col: 21, offset: 52379},
							expr: &choiceExpr{
								pos: position{line: 1382, col: 22, offset: 52380},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1382, col: 22, offset: 52380},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 34, offset: 52392},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1382, col: 44, offset: 52402},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1382, col: 44, offset: 52402},
												expr: &ruleRefExpr{
													pos:  position{line: 1382, col: 45, offset: 52403},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1382, col: 67, offset: 52425},
												expr: &ruleRefExpr{
													pos:  position{line: 1382, col: 68, offset: 52426},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1382, col: 73, offset: 52431,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1382, col: 78, offset: 52436},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1386, col: 1, offset: 52476},
			expr: &actionExpr{
				pos: position{line: 1386, col: 22, offset: 52497},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 22, offset: 52497},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1386, col: 22, offset: 52497},
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 23, offset: 52498},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1386, col: 45, offset: 52520},
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 45, offset: 52520},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 49, offset: 52524},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 54, offset: 52529},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 63, offset: 52538},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1386, col: 89, offset: 52564},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1390, col: 1, offset: 52629},
			expr: &actionExpr{
				pos: position{line: 1390, col: 29, offset: 52657},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1390, col: 29, offset: 52657},
					expr: &choiceExpr{
						pos: position{line: 1390, col: 30, offset: 52658},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1390, col: 30, offset: 52658},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1390, col: 42, offset: 52670},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1390, col: 52, offset: 52680},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1390, col: 52, offset: 52680},
										expr: &ruleRefExpr{
											pos:  position{line: 1390, col: 53, offset: 52681},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1390, col: 58, offset: 52686,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1398, col: 1, offset: 52995},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 17, offset: 53011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 17, offset: 53011},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 49, offset: 53043},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 78, offset: 53072},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1400, col: 1, offset: 53108},
			expr: &litMatcher{
				pos:        position{line: 1400, col: 26, offset: 53133},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1403, col: 1, offset: 53205},
			expr: &actionExpr{
				pos: position{line: 1403, col: 31, offset: 53235},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 31, offset: 53235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 31, offset: 53235},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1403, col: 42, offset: 53246},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 43, offset: 53247},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 63, offset: 53267},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 70, offset: 53274},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1408, col: 1, offset: 53504},
			expr: &actionExpr{
				pos: position{line: 1409, col: 5, offset: 53544},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 5, offset: 53544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1409, col: 5, offset: 53544},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1409, col: 16, offset: 53555},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1409, col: 16, offset: 53555},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1409, col: 16, offset: 53555},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1409, col: 19, offset: 53558},
											expr: &choiceExpr{
												pos: position{line: 1409, col: 20, offset: 53559},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1409, col: 20, offset: 53559},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1409, col: 32, offset: 53571},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1409, col: 41, offset: 53580},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1409, col: 42, offset: 53581},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1409, col: 42, offset: 53581},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1409, col: 43, offset: 53582},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1409, col: 48, offset: 53587,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1413, col: 8, offset: 53678},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 5, offset: 53741},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1414, col: 16, offset: 53752},
								expr: &actionExpr{
									pos: position{line: 1415, col: 9, offset: 53762},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1415, col: 9, offset: 53762},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1415, col: 9, offset: 53762},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 10, offset: 53763},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1416, col: 9, offset: 53782},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1416, col: 20, offset: 53793},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1416, col: 20, offset: 53793},
														expr: &choiceExpr{
															pos: position{line: 1416, col: 21, offset: 53794},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1416, col: 21, offset: 53794},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1416, col: 33, offset: 53806},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1416, col: 43, offset: 53816},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1416, col: 43, offset: 53816},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1416, col: 44, offset: 53817},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1416, col: 49, offset: 53822,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1418, col: 12, offset: 53879},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1425, col: 1, offset: 54109},
			expr: &actionExpr{
				pos: position{line: 1425, col: 39, offset: 54147},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 39, offset: 54147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1425, col: 39, offset: 54147},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1425, col: 50, offset: 54158},
								expr: &ruleRefExpr{
									pos:  position{line: 1425, col: 51, offset: 54159},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 9, offset: 54187},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1426, col: 31, offset: 54209},
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 31, offset: 54209},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 35, offset: 54213},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 43, offset: 54221},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 50, offset: 54228},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1426, col: 92, offset: 54270},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1426, col: 93, offset: 54271},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1426, col: 93, offset: 54271},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1426, col: 115, offset: 54293},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 123, offset: 54301},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1431, col: 1, offset: 54460},
			expr: &actionExpr{
				pos: position{line: 1431, col: 44, offset: 54503},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1431, col: 44, offset: 54503},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1431, col: 50, offset: 54509},
						expr: &ruleRefExpr{
							pos:  position{line: 1431, col: 51, offset: 54510},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1435, col: 1, offset: 54594},
			expr: &actionExpr{
				pos: position{line: 1436, col: 5, offset: 54649},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1436, col: 5, offset: 54649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1436, col: 5, offset: 54649},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1436, col: 11, offset: 54655},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1436, col: 11, offset: 54655},
									expr: &choiceExpr{
										pos: position{line: 1436, col: 12, offset: 54656},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1436, col: 12, offset: 54656},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1436, col: 24, offset: 54668},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1436, col: 34, offset: 54678},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1436, col: 34, offset: 54678},
														expr: &ruleRefExpr{
															pos:  position{line: 1436, col: 35, offset: 54679},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1436, col: 57, offset: 54701},
														expr: &ruleRefExpr{
															pos:  position{line: 1436, col: 58, offset: 54702},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1436, col: 62, offset: 54706,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 8, offset: 54755},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1443, col: 1, offset: 54881},
			expr: &actionExpr{
				pos: position{line: 1444, col: 5, offset: 54919},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1444, col: 5, offset: 54919},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1444, col: 5, offset: 54919},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1444, col: 16, offset: 54930},
								expr: &ruleRefExpr{
									pos:  position{line: 1444, col: 17, offset: 54931},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1445, col: 5, offset: 54955},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 5, offset: 55169},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 12, offset: 55176},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1456, col: 1, offset: 55326},
			expr: &actionExpr{
				pos: position{line: 1456, col: 16, offset: 55341},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1456, col: 16, offset: 55341},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1461, col: 1, offset: 55424},
			expr: &actionExpr{
				pos: position{line: 1461, col: 39, offset: 55462},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1461, col: 39, offset: 55462},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1461, col: 45, offset: 55468},
						expr: &ruleRefExpr{
							pos:  position{line: 1461, col: 46, offset: 55469},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1465, col: 1, offset: 55549},
			expr: &actionExpr{
				pos: position{line: 1465, col: 38, offset: 55586},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1465, col: 38, offset: 55586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1465, col: 38, offset: 55586},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1465, col: 44, offset: 55592},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1465, col: 44, offset: 55592},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1465, col: 44, offset: 55592},
											expr: &ruleRefExpr{
												pos:  position{line: 1465, col: 46, offset: 55594},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1465, col: 57, offset: 55605},
											expr: &choiceExpr{
												pos: position{line: 1465, col: 58, offset: 55606},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1465, col: 58, offset: 55606},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1465, col: 70, offset: 55618},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1465, col: 80, offset: 55628},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1465, col: 80, offset: 55628},
																expr: &ruleRefExpr{
																	pos:  position{line: 1465, col: 81, offset: 55629},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1465, col: 86, offset: 55634,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1467, col: 4, offset: 55675},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1474, col: 1, offset: 55847},
			expr: &actionExpr{
				pos: position{line: 1474, col: 14, offset: 55860},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 14, offset: 55860},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1474, col: 14, offset: 55860},
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 15, offset: 55861},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1474, col: 19, offset: 55865},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1481, col: 1, offset: 56013},
			expr: &charClassMatcher{
				pos:        position{line: 1481, col: 13, offset: 56025},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1483, col: 1, offset: 56035},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 16, offset: 56050},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1483, col: 16, offset: 56050},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 22, offset: 56056},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 28, offset: 56062},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 34, offset: 56068},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1485, col: 1, offset: 56073},
			expr: &oneOrMoreExpr{
				pos: position{line: 1485, col: 14, offset: 56086},
				expr: &charClassMatcher{
					pos:        position{line: 1485, col: 14, offset: 56086},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1487, col: 1, offset: 56097},
			expr: &litMatcher{
				pos:        position{line: 1487, col: 8, offset: 56104},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1489, col: 1, offset: 56109},
			expr: &actionExpr{
				pos: position{line: 1489, col: 15, offset: 56123},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 15, offset: 56123},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1489, col: 15, offset: 56123},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1489, col: 25, offset: 56133},
							expr: &choiceExpr{
								pos: position{line: 1489, col: 27, offset: 56135},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 27, offset: 56135},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 32, offset: 56140},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1494, col: 1, offset: 56405},
			expr: &actionExpr{
				pos: position{line: 1494, col: 14, offset: 56418},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1494, col: 15, offset: 56419},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1494, col: 15, offset: 56419},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 27, offset: 56431},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 46, offset: 56450},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1494, col: 60, offset: 56464},
							expr: &actionExpr{
								pos: position{line: 1494, col: 61, offset: 56465},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1494, col: 61, offset: 56465},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1494, col: 62, offset: 56466},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1494, col: 62, offset: 56466},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 63, offset: 56467},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 71, offset: 56475},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 72, offset: 56476},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 75, offset: 56479},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 76, offset: 56480},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 80, offset: 56484},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 81, offset: 56485},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1494, col: 98, offset: 56502,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1494, col: 101, offset: 56505},
											expr: &ruleRefExpr{
												pos:  position{line: 1494, col: 101, offset: 56505},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1496, col: 7, offset: 56614},
							expr: &litMatcher{
								pos:        position{line: 1496, col: 7, offset: 56614},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1500, col: 1, offset: 56795},
			expr: &oneOrMoreExpr{
				pos: position{line: 1500, col: 11, offset: 56805},
				expr: &ruleRefExpr{
					pos:  position{line: 1500, col: 11, offset: 56805},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1502, col: 1, offset: 56811},
			expr: &actionExpr{
				pos: position{line: 1502, col: 17, offset: 56827},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1502, col: 17, offset: 56827},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1502, col: 26, offset: 56836},
						expr: &choiceExpr{
							pos: position{line: 1502, col: 27, offset: 56837},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1502, col: 27, offset: 56837},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1502, col: 38, offset: 56848},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1506, col: 1, offset: 56940},
			expr: &actionExpr{
				pos: position{line: 1506, col: 13, offset: 56952},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1506, col: 13, offset: 56952},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1506, col: 23, offset: 56962},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1506, col: 23, offset: 56962},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1506, col: 34, offset: 56973},
								expr: &choiceExpr{
									pos: position{line: 1506, col: 35, offset: 56974},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1506, col: 35, offset: 56974},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1506, col: 46, offset: 56985},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1506, col: 78, offset: 57017},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1506, col: 78, offset: 57017},
													expr: &ruleRefExpr{
														pos:  position{line: 1506, col: 79, offset: 57018},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1506, col: 83, offset: 57022},
													expr: &litMatcher{
														pos:        position{line: 1506, col: 84, offset: 57023},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1506, col: 88, offset: 57027,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1510, col: 1, offset: 57092},
			expr: &oneOrMoreExpr{
				pos: position{line: 1510, col: 13, offset: 57104},
				expr: &choiceExpr{
					pos: position{line: 1510, col: 14, offset: 57105},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1510, col: 14, offset: 57105},
							name: "Alphanums",
						},
						&litMatcher{
							pos:        position{line: 1510, col: 26, offset: 57117},
							val:        ".",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 32, offset: 57123},
							val:        "_",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 38, offset: 57129},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 44, offset: 57135},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1512, col: 1, offset: 57142},
			expr: &actionExpr{
				pos: position{line: 1512, col: 8, offset: 57149},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1512, col: 8, offset: 57149},
					expr: &choiceExpr{
						pos: position{line: 1512, col: 9, offset: 57150},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1512, col: 9, offset: 57150},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1512, col: 22, offset: 57163},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1512, col: 22, offset: 57163},
										expr: &ruleRefExpr{
											pos:  position{line: 1512, col: 23, offset: 57164},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 31, offset: 57172},
										expr: &ruleRefExpr{
											pos:  position{line: 1512, col: 32, offset: 57173},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 35, offset: 57176},
										expr: &litMatcher{
											pos:        position{line: 1512, col: 36, offset: 57177},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 40, offset: 57181},
										expr: &litMatcher{
											pos:        position{line: 1512, col: 41, offset: 57182},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1512, col: 46, offset: 57187,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1516, col: 1, offset: 57228},
			expr: &choiceExpr{
				pos: position{line: 1516, col: 15, offset: 57242},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1516, col: 15, offset: 57242},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 27, offset: 57254},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 40, offset: 57267},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 51, offset: 57278},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 62, offset: 57289},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1518, col: 1, offset: 57300},
			expr: &actionExpr{
				pos: position{line: 1518, col: 7, offset: 57306},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1518, col: 7, offset: 57306},
					expr: &choiceExpr{
						pos: position{line: 1518, col: 8, offset: 57307},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1518, col: 8, offset: 57307},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1518, col: 21, offset: 57320},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1518, col: 21, offset: 57320},
										expr: &ruleRefExpr{
											pos:  position{line: 1518, col: 22, offset: 57321},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 30, offset: 57329},
										expr: &ruleRefExpr{
											pos:  position{line: 1518, col: 31, offset: 57330},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 34, offset: 57333},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 35, offset: 57334},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 39, offset: 57338},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 40, offset: 57339},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 44, offset: 57343},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 45, offset: 57344},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 50, offset: 57349},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 51, offset: 57350},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 56, offset: 57355},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 57, offset: 57356},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1518, col: 62, offset: 57361,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1522, col: 1, offset: 57402},
			expr: &actionExpr{
				pos: position{line: 1522, col: 10, offset: 57411},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1522, col: 10, offset: 57411},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1526, col: 1, offset: 57453},
			expr: &actionExpr{
				pos: position{line: 1526, col: 11, offset: 57463},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 11, offset: 57463},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1526, col: 11, offset: 57463},
							expr: &litMatcher{
								pos:        position{line: 1526, col: 11, offset: 57463},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1526, col: 16, offset: 57468},
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 16, offset: 57468},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1530, col: 1, offset: 57520},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 7, offset: 57526},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1530, col: 7, offset: 57526},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1530, col: 13, offset: 57532},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1530, col: 13, offset: 57532},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1534, col: 1, offset: 57573},
			expr: &choiceExpr{
				pos: position{line: 1534, col: 12, offset: 57584},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1534, col: 12, offset: 57584},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1534, col: 21, offset: 57593},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1534, col: 28, offset: 57600},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1536, col: 1, offset: 57606},
			expr: &notExpr{
				pos: position{line: 1536, col: 8, offset: 57613},
				expr: &anyMatcher{
					line: 1536, col: 9, offset: 57614,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1538, col: 1, offset: 57617},
			expr: &choiceExpr{
				pos: position{line: 1538, col: 8, offset: 57624},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1538, col: 8, offset: 57624},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1538, col: 18, offset: 57634},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1540, col: 1, offset: 57639},
			expr: &seqExpr{
				pos: position{line: 1540, col: 9, offset: 57647},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1540, col: 9, offset: 57647},
						expr: &ruleRefExpr{
							pos:  position{line: 1540, col: 9, offset: 57647},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1540, col: 13, offset: 57651},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags)
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMultipleTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges4()
}

func (c *current) onMultipleTagRanges12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMultipleTagRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges12()
}

func (c *current) onMultipleTagRanges8(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges8(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
