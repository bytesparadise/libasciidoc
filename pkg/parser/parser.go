// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 351},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 374},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 374},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 374},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 387},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 387},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 401},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 409},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 436},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 540},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 560},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 560},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 560},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 568},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 589},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 712},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 723},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 723},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 731},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 747},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 897},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 913},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 913},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 921},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 941},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1129},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1158},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1158},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1166},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1166},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1183},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1191},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1191},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1452},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1482},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1482},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1548},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1570},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1597},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1650},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1669},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1695},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1720},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1749},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1774},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1801},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1831},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1858},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1894},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1919},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1952},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1979},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 2017},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 2043},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2075},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2091},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2137},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2144},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2145},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2184},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2221},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2221},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2221},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2222},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2232},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2249},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2271},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2297},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2349},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2374},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2403},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2428},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2455},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2485},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2512},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2548},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2573},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2606},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2633},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2671},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2697},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2742},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2764},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2771},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2772},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2795},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2816},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2816},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2816},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2817},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2827},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2834},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2834},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2846},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 3002},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 3017},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 3037},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 3056},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 3056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 3056},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 3077},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 3085},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 3086},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3111},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3195},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3220},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3220},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3226},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3226},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3233},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3240},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3266},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3266},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3267},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3268},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3268},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3269},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3290,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3463},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3481},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3481},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3481},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3485},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3485},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3492},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3499},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3514},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3518},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3518},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3536},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3549},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3550},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3550},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3570},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3594},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3603},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3603},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3631},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3632},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3652},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3676},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3686},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3686},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3791},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3810},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3810},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3838},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3870},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3899},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3899},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3899},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3899},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3906},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3907},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3911},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3920},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3937},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 4011},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 4043},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 4043},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 4043},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 4043},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 4050},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 4061},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 4069},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 4085},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4168},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4186},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4186},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4186},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4186},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4193},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4203},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4223},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4229},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4230},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4252},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4252},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4259},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4259},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4264},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4264},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4414},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4436},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4436},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4436},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4487},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4510},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4510},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4514},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4521},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4522},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4522},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4571},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4738},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4758},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4758},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4758},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4758},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4765},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4766},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4770},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4790},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4791},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4791},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4791},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4802},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4826},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4826},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4831},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4839},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4840},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4863},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4863},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4868},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4878},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4879},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4998},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4998},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4998},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 5007},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 5029},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 5029},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 5034},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 5044},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 5045},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 5156},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5291},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5317},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5317},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5317},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5322},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5329},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5329},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5379},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5379},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5379},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5379},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5385},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5392},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5392},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5403},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5403},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5410},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5411},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5455},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5479},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5479},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5479},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5529},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5555},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5555},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5555},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5739},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5739},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5739},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5749},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5764},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5778},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5784},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5785},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5786},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5786},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5786},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5793},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5800},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5876},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5876},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5883},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 6130},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 6147},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 6147},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 6147},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 6157},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 6158},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6210},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6239},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6239},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6239},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6288},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6306},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6306},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6306},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6311},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6317},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6332},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6336},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6336},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6343},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6405},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6405},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6405},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6409},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6415},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6430},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6435},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6435},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6442},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6505},
			expr: &actionExpr{
				pos: position{line: 205, col: 26, offset: 6530},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 205, col: 26, offset: 6530},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 26, offset: 6530},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 30, offset: 6534},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 36, offset: 6540},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 51, offset: 6555},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 209, col: 1, offset: 6625},
			expr: &actionExpr{
				pos: position{line: 209, col: 15, offset: 6639},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 209, col: 15, offset: 6639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 209, col: 15, offset: 6639},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 209, col: 21, offset: 6645},
								expr: &ruleRefExpr{
									pos:  position{line: 209, col: 22, offset: 6646},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 209, col: 41, offset: 6665},
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 41, offset: 6665},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 213, col: 1, offset: 6739},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 6759},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 6759},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 213, col: 21, offset: 6759},
							expr: &choiceExpr{
								pos: position{line: 213, col: 23, offset: 6761},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 213, col: 23, offset: 6761},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 213, col: 29, offset: 6767},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 213, col: 35, offset: 6773},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 5, offset: 6850},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 214, col: 11, offset: 6856},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 214, col: 11, offset: 6856},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6878},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6903},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 217, col: 9, offset: 6941},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 218, col: 9, offset: 6970},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 219, col: 9, offset: 6999},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 220, col: 9, offset: 7027},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 221, col: 9, offset: 7055},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 222, col: 9, offset: 7093},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 223, col: 9, offset: 7130},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 227, col: 1, offset: 7237},
			expr: &actionExpr{
				pos: position{line: 227, col: 14, offset: 7250},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 14, offset: 7250},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 14, offset: 7250},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 19, offset: 7255},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 23, offset: 7259},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 27, offset: 7263},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 32, offset: 7268},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 32, offset: 7268},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 39, offset: 7275},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 231, col: 1, offset: 7331},
			expr: &actionExpr{
				pos: position{line: 231, col: 20, offset: 7350},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 231, col: 20, offset: 7350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 20, offset: 7350},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 25, offset: 7355},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 29, offset: 7359},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 231, col: 33, offset: 7363},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 231, col: 38, offset: 7368},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 38, offset: 7368},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 237, col: 1, offset: 7651},
			expr: &actionExpr{
				pos: position{line: 237, col: 17, offset: 7667},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 237, col: 17, offset: 7667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 17, offset: 7667},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 21, offset: 7671},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 28, offset: 7678},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 49, offset: 7699},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 49, offset: 7699},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 56, offset: 7706},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 241, col: 1, offset: 7768},
			expr: &actionExpr{
				pos: position{line: 241, col: 24, offset: 7791},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 241, col: 24, offset: 7791},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 241, col: 24, offset: 7791},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 32, offset: 7799},
							expr: &charClassMatcher{
								pos:        position{line: 241, col: 32, offset: 7799},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 247, col: 1, offset: 8058},
			expr: &actionExpr{
				pos: position{line: 247, col: 31, offset: 8088},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 31, offset: 8088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 31, offset: 8088},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 35, offset: 8092},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 247, col: 42, offset: 8099},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 42, offset: 8099},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 42, offset: 8099},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 247, col: 57, offset: 8114},
										expr: &ruleRefExpr{
											pos:  position{line: 247, col: 57, offset: 8114},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 69, offset: 8126},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 73, offset: 8130},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 73, offset: 8130},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 80, offset: 8137},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 251, col: 1, offset: 8195},
			expr: &choiceExpr{
				pos: position{line: 251, col: 15, offset: 8209},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 15, offset: 8209},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 31, offset: 8225},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 46, offset: 8240},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 255, col: 1, offset: 8472},
			expr: &actionExpr{
				pos: position{line: 255, col: 18, offset: 8489},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 255, col: 18, offset: 8489},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 18, offset: 8489},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 22, offset: 8493},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 255, col: 29, offset: 8500},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 255, col: 29, offset: 8500},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 29, offset: 8500},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 255, col: 45, offset: 8516},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 45, offset: 8516},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 255, col: 60, offset: 8531},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 60, offset: 8531},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 255, col: 82, offset: 8553},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 82, offset: 8553},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 255, col: 104, offset: 8575},
										expr: &ruleRefExpr{
											pos:  position{line: 255, col: 104, offset: 8575},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 116, offset: 8587},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 120, offset: 8591},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 259, col: 1, offset: 8649},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8667},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 259, col: 19, offset: 8667},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 259, col: 25, offset: 8673},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 263, col: 1, offset: 8747},
			expr: &actionExpr{
				pos: position{line: 263, col: 25, offset: 8771},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 263, col: 25, offset: 8771},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 25, offset: 8771},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 25, offset: 8771},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 32, offset: 8778},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 36, offset: 8782},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 36, offset: 8782},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 263, col: 43, offset: 8789},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 49, offset: 8795},
								expr: &ruleRefExpr{
									pos:  position{line: 263, col: 49, offset: 8795},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 270, col: 1, offset: 8952},
			expr: &actionExpr{
				pos: position{line: 270, col: 25, offset: 8976},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 270, col: 25, offset: 8976},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 25, offset: 8976},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 25, offset: 8976},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 32, offset: 8983},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 36, offset: 8987},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 36, offset: 8987},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 43, offset: 8994},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 49, offset: 9000},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 49, offset: 9000},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 277, col: 1, offset: 9157},
			expr: &actionExpr{
				pos: position{line: 277, col: 21, offset: 9177},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 277, col: 21, offset: 9177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 21, offset: 9177},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 33, offset: 9189},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 33, offset: 9189},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 40, offset: 9196},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 281, col: 1, offset: 9252},
			expr: &actionExpr{
				pos: position{line: 281, col: 30, offset: 9281},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 281, col: 30, offset: 9281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 30, offset: 9281},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 39, offset: 9290},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 39, offset: 9290},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 46, offset: 9297},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 286, col: 1, offset: 9443},
			expr: &actionExpr{
				pos: position{line: 286, col: 30, offset: 9472},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 286, col: 30, offset: 9472},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 30, offset: 9472},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 34, offset: 9476},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 37, offset: 9479},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 53, offset: 9495},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 57, offset: 9499},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 57, offset: 9499},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 64, offset: 9506},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 291, col: 1, offset: 9666},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9686},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9686},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 5, offset: 9702},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 14, offset: 9711},
								expr: &actionExpr{
									pos: position{line: 292, col: 15, offset: 9712},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 292, col: 15, offset: 9712},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 292, col: 15, offset: 9712},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 292, col: 19, offset: 9716},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 292, col: 24, offset: 9721},
													expr: &ruleRefExpr{
														pos:  position{line: 292, col: 25, offset: 9722},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 9778},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 12, offset: 9785},
								expr: &actionExpr{
									pos: position{line: 293, col: 13, offset: 9786},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 293, col: 13, offset: 9786},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 293, col: 13, offset: 9786},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 293, col: 17, offset: 9790},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 293, col: 22, offset: 9795},
													expr: &ruleRefExpr{
														pos:  position{line: 293, col: 23, offset: 9796},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 294, col: 5, offset: 9844},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 9, offset: 9848},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 9, offset: 9848},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 16, offset: 9855},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 299, col: 1, offset: 10011},
			expr: &actionExpr{
				pos: position{line: 299, col: 19, offset: 10029},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 299, col: 19, offset: 10029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 19, offset: 10029},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 23, offset: 10033},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 299, col: 34, offset: 10044},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 35, offset: 10045},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 299, col: 54, offset: 10064},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 58, offset: 10068},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 58, offset: 10068},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 65, offset: 10075},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 303, col: 1, offset: 10151},
			expr: &choiceExpr{
				pos: position{line: 303, col: 21, offset: 10171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 303, col: 21, offset: 10171},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 49, offset: 10199},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 305, col: 1, offset: 10231},
			expr: &actionExpr{
				pos: position{line: 305, col: 30, offset: 10260},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 305, col: 30, offset: 10260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 30, offset: 10260},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 35, offset: 10265},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 49, offset: 10279},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 53, offset: 10283},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 59, offset: 10289},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 60, offset: 10290},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 77, offset: 10307},
							expr: &litMatcher{
								pos:        position{line: 305, col: 77, offset: 10307},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 82, offset: 10312},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 82, offset: 10312},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 309, col: 1, offset: 10415},
			expr: &actionExpr{
				pos: position{line: 309, col: 33, offset: 10447},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 309, col: 33, offset: 10447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 309, col: 33, offset: 10447},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 38, offset: 10452},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 309, col: 52, offset: 10466},
							expr: &litMatcher{
								pos:        position{line: 309, col: 52, offset: 10466},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 57, offset: 10471},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 57, offset: 10471},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 313, col: 1, offset: 10563},
			expr: &actionExpr{
				pos: position{line: 313, col: 17, offset: 10579},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 313, col: 17, offset: 10579},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 313, col: 17, offset: 10579},
							expr: &litMatcher{
								pos:        position{line: 313, col: 18, offset: 10580},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 26, offset: 10588},
							expr: &litMatcher{
								pos:        position{line: 313, col: 27, offset: 10589},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 35, offset: 10597},
							expr: &litMatcher{
								pos:        position{line: 313, col: 36, offset: 10598},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 313, col: 46, offset: 10608},
							expr: &oneOrMoreExpr{
								pos: position{line: 313, col: 48, offset: 10610},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 48, offset: 10610},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 56, offset: 10618},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 313, col: 61, offset: 10623},
								expr: &charClassMatcher{
									pos:        position{line: 313, col: 61, offset: 10623},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 313, col: 75, offset: 10637},
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 75, offset: 10637},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 317, col: 1, offset: 10684},
			expr: &actionExpr{
				pos: position{line: 317, col: 19, offset: 10702},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 19, offset: 10702},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 317, col: 26, offset: 10709},
						expr: &charClassMatcher{
							pos:        position{line: 317, col: 26, offset: 10709},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 321, col: 1, offset: 10764},
			expr: &actionExpr{
				pos: position{line: 321, col: 29, offset: 10792},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 321, col: 29, offset: 10792},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 321, col: 29, offset: 10792},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 321, col: 36, offset: 10799},
								expr: &charClassMatcher{
									pos:        position{line: 321, col: 36, offset: 10799},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 321, col: 50, offset: 10813},
							expr: &litMatcher{
								pos:        position{line: 321, col: 51, offset: 10814},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 325, col: 1, offset: 10984},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 11003},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 325, col: 20, offset: 11003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 20, offset: 11003},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 29, offset: 11012},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 29, offset: 11012},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 36, offset: 11019},
							expr: &litMatcher{
								pos:        position{line: 325, col: 36, offset: 11019},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 41, offset: 11024},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 48, offset: 11031},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 49, offset: 11032},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 325, col: 66, offset: 11049},
							expr: &litMatcher{
								pos:        position{line: 325, col: 66, offset: 11049},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 71, offset: 11054},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 325, col: 77, offset: 11060},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 78, offset: 11061},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 95, offset: 11078},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 99, offset: 11082},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 99, offset: 11082},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 106, offset: 11089},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 329, col: 1, offset: 11162},
			expr: &actionExpr{
				pos: position{line: 329, col: 20, offset: 11181},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 329, col: 20, offset: 11181},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 329, col: 20, offset: 11181},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 29, offset: 11190},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 29, offset: 11190},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 36, offset: 11197},
							expr: &litMatcher{
								pos:        position{line: 329, col: 36, offset: 11197},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 41, offset: 11202},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 48, offset: 11209},
								expr: &ruleRefExpr{
									pos:  position{line: 329, col: 49, offset: 11210},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 329, col: 66, offset: 11227},
							expr: &litMatcher{
								pos:        position{line: 329, col: 66, offset: 11227},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 71, offset: 11232},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 329, col: 77, offset: 11238},
								expr: &ruleRefExpr{
									pos:  position{line: 329, col: 78, offset: 11239},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 329, col: 95, offset: 11256},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 329, col: 99, offset: 11260},
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 99, offset: 11260},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 329, col: 106, offset: 11267},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 333, col: 1, offset: 11358},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11376},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 333, col: 20, offset: 11377},
					expr: &charClassMatcher{
						pos:        position{line: 333, col: 20, offset: 11377},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 337, col: 1, offset: 11430},
			expr: &actionExpr{
				pos: position{line: 337, col: 20, offset: 11449},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 337, col: 20, offset: 11449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 337, col: 20, offset: 11449},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 24, offset: 11453},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 337, col: 31, offset: 11460},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 337, col: 31, offset: 11460},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 31, offset: 11460},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 51, offset: 11480},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 51, offset: 11480},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 337, col: 66, offset: 11495},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 66, offset: 11495},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 337, col: 78, offset: 11507},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 341, col: 1, offset: 11565},
			expr: &actionExpr{
				pos: position{line: 341, col: 23, offset: 11587},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 341, col: 23, offset: 11587},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 341, col: 28, offset: 11592},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 345, col: 1, offset: 11664},
			expr: &actionExpr{
				pos: position{line: 345, col: 25, offset: 11688},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 345, col: 25, offset: 11688},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 25, offset: 11688},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 345, col: 36, offset: 11699},
								expr: &ruleRefExpr{
									pos:  position{line: 345, col: 37, offset: 11700},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 56, offset: 11719},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 56, offset: 11719},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 67, offset: 11730},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 349, col: 1, offset: 11842},
			expr: &choiceExpr{
				pos: position{line: 349, col: 18, offset: 11859},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 349, col: 18, offset: 11859},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 36, offset: 11877},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 58, offset: 11899},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 351, col: 1, offset: 11920},
			expr: &actionExpr{
				pos: position{line: 351, col: 24, offset: 11943},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 351, col: 24, offset: 11943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 24, offset: 11943},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 28, offset: 11947},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 35, offset: 11954},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 351, col: 50, offset: 11969},
							expr: &charClassMatcher{
								pos:        position{line: 351, col: 51, offset: 11970},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 355, col: 1, offset: 12043},
			expr: &actionExpr{
				pos: position{line: 355, col: 20, offset: 12062},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 355, col: 20, offset: 12062},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 20, offset: 12062},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 24, offset: 12066},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 27, offset: 12069},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 355, col: 42, offset: 12084},
							expr: &charClassMatcher{
								pos:        position{line: 355, col: 43, offset: 12085},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 359, col: 1, offset: 12150},
			expr: &actionExpr{
				pos: position{line: 359, col: 22, offset: 12171},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 359, col: 22, offset: 12171},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 22, offset: 12171},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 26, offset: 12175},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 31, offset: 12180},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 359, col: 46, offset: 12195},
							expr: &charClassMatcher{
								pos:        position{line: 359, col: 47, offset: 12196},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 364, col: 1, offset: 12310},
			expr: &actionExpr{
				pos: position{line: 364, col: 20, offset: 12329},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 364, col: 20, offset: 12329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 20, offset: 12329},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 26, offset: 12335},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 364, col: 41, offset: 12350},
							expr: &charClassMatcher{
								pos:        position{line: 364, col: 42, offset: 12351},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 368, col: 1, offset: 12400},
			expr: &choiceExpr{
				pos: position{line: 368, col: 14, offset: 12413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 368, col: 14, offset: 12413},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 26, offset: 12425},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 38, offset: 12437},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 50, offset: 12449},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 370, col: 1, offset: 12465},
			expr: &actionExpr{
				pos: position{line: 370, col: 15, offset: 12479},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 15, offset: 12479},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 370, col: 21, offset: 12485},
						expr: &ruleRefExpr{
							pos:  position{line: 370, col: 21, offset: 12485},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 374, col: 1, offset: 12554},
			expr: &actionExpr{
				pos: position{line: 374, col: 18, offset: 12571},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 374, col: 18, offset: 12571},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 374, col: 18, offset: 12571},
							expr: &litMatcher{
								pos:        position{line: 374, col: 18, offset: 12571},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 23, offset: 12576},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 23, offset: 12576},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 30, offset: 12583},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 32, offset: 12585},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 45, offset: 12598},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 45, offset: 12598},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 52, offset: 12605},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 56, offset: 12609},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 374, col: 59, offset: 12612},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 374, col: 59, offset: 12612},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 71, offset: 12624},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 83, offset: 12636},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 379, col: 1, offset: 12830},
			expr: &actionExpr{
				pos: position{line: 379, col: 14, offset: 12843},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 379, col: 14, offset: 12843},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 379, col: 14, offset: 12843},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 14, offset: 12843},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 379, col: 21, offset: 12850},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 22, offset: 12851},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 385, col: 1, offset: 12993},
			expr: &actionExpr{
				pos: position{line: 385, col: 14, offset: 13006},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 385, col: 14, offset: 13006},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 14, offset: 13006},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 14, offset: 13006},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 21, offset: 13013},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 25, offset: 13017},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 29, offset: 13021},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 41, offset: 13033},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 45, offset: 13037},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 45, offset: 13037},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 385, col: 52, offset: 13044},
							expr: &charClassMatcher{
								pos:        position{line: 385, col: 53, offset: 13045},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 387, col: 1, offset: 13074},
			expr: &actionExpr{
				pos: position{line: 387, col: 16, offset: 13089},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 387, col: 16, offset: 13089},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 387, col: 20, offset: 13093},
						expr: &choiceExpr{
							pos: position{line: 387, col: 22, offset: 13095},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 22, offset: 13095},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 387, col: 37, offset: 13110},
									expr: &charClassMatcher{
										pos:        position{line: 387, col: 37, offset: 13110},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 387, col: 51, offset: 13124},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 389, col: 1, offset: 13166},
			expr: &actionExpr{
				pos: position{line: 389, col: 17, offset: 13182},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 389, col: 17, offset: 13182},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 392, col: 1, offset: 13245},
			expr: &actionExpr{
				pos: position{line: 392, col: 14, offset: 13258},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 392, col: 14, offset: 13258},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 14, offset: 13258},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 14, offset: 13258},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 21, offset: 13265},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 25, offset: 13269},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 29, offset: 13273},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 392, col: 41, offset: 13285},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 392, col: 45, offset: 13289},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 45, offset: 13289},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 394, col: 1, offset: 13319},
			expr: &actionExpr{
				pos: position{line: 394, col: 16, offset: 13334},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 394, col: 16, offset: 13334},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 394, col: 20, offset: 13338},
						expr: &choiceExpr{
							pos: position{line: 394, col: 22, offset: 13340},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 394, col: 22, offset: 13340},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 394, col: 37, offset: 13355},
									expr: &charClassMatcher{
										pos:        position{line: 394, col: 37, offset: 13355},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 394, col: 51, offset: 13369},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 396, col: 1, offset: 13411},
			expr: &actionExpr{
				pos: position{line: 396, col: 17, offset: 13427},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 396, col: 17, offset: 13427},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 399, col: 1, offset: 13521},
			expr: &actionExpr{
				pos: position{line: 399, col: 17, offset: 13537},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 399, col: 17, offset: 13537},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 17, offset: 13537},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 17, offset: 13537},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 399, col: 30, offset: 13550},
							expr: &charClassMatcher{
								pos:        position{line: 399, col: 31, offset: 13551},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 402, col: 1, offset: 13665},
			expr: &actionExpr{
				pos: position{line: 402, col: 19, offset: 13683},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 402, col: 19, offset: 13683},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 19, offset: 13683},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 19, offset: 13683},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 402, col: 31, offset: 13695},
							expr: &charClassMatcher{
								pos:        position{line: 402, col: 32, offset: 13696},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 404, col: 1, offset: 13755},
			expr: &choiceExpr{
				pos: position{line: 404, col: 19, offset: 13773},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 404, col: 19, offset: 13773},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 404, col: 41, offset: 13795},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 404, col: 65, offset: 13819},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 408, col: 1, offset: 14021},
			expr: &actionExpr{
				pos: position{line: 408, col: 24, offset: 14044},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 408, col: 24, offset: 14044},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 408, col: 24, offset: 14044},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 45, offset: 14065},
							expr: &choiceExpr{
								pos: position{line: 408, col: 46, offset: 14066},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 408, col: 46, offset: 14066},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 408, col: 68, offset: 14088},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 408, col: 68, offset: 14088},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 408, col: 73, offset: 14093},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 412, col: 1, offset: 14155},
			expr: &actionExpr{
				pos: position{line: 412, col: 13, offset: 14167},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 412, col: 13, offset: 14167},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 412, col: 13, offset: 14167},
							expr: &seqExpr{
								pos: position{line: 412, col: 15, offset: 14169},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 412, col: 15, offset: 14169},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 412, col: 19, offset: 14173},
										expr: &ruleRefExpr{
											pos:  position{line: 412, col: 19, offset: 14173},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 29, offset: 14183},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 33, offset: 14187},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 46, offset: 14200},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 46, offset: 14200},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 53, offset: 14207},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 57, offset: 14211},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 57, offset: 14211},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 412, col: 64, offset: 14218},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 70, offset: 14224},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 412, col: 85, offset: 14239},
							expr: &ruleRefExpr{
								pos:  position{line: 412, col: 85, offset: 14239},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 417, col: 1, offset: 14434},
			expr: &actionExpr{
				pos: position{line: 417, col: 17, offset: 14450},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 417, col: 17, offset: 14450},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 417, col: 17, offset: 14450},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 417, col: 26, offset: 14459},
							expr: &charClassMatcher{
								pos:        position{line: 417, col: 26, offset: 14459},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 421, col: 1, offset: 14511},
			expr: &choiceExpr{
				pos: position{line: 421, col: 19, offset: 14529},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 421, col: 19, offset: 14529},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 421, col: 35, offset: 14545},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 421, col: 59, offset: 14569},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 421, col: 83, offset: 14593},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 423, col: 1, offset: 14611},
			expr: &actionExpr{
				pos: position{line: 423, col: 19, offset: 14629},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 423, col: 19, offset: 14629},
					expr: &charClassMatcher{
						pos:        position{line: 423, col: 19, offset: 14629},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 427, col: 1, offset: 14686},
			expr: &actionExpr{
				pos: position{line: 427, col: 26, offset: 14711},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 427, col: 26, offset: 14711},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 26, offset: 14711},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 427, col: 30, offset: 14715},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 30, offset: 14715},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 427, col: 40, offset: 14725},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 431, col: 1, offset: 14786},
			expr: &actionExpr{
				pos: position{line: 431, col: 26, offset: 14811},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 431, col: 26, offset: 14811},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 26, offset: 14811},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 431, col: 31, offset: 14816},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 31, offset: 14816},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 431, col: 41, offset: 14826},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 437, col: 1, offset: 15087},
			expr: &actionExpr{
				pos: position{line: 437, col: 18, offset: 15104},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 437, col: 18, offset: 15104},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 445, col: 1, offset: 15294},
			expr: &choiceExpr{
				pos: position{line: 445, col: 17, offset: 15310},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 445, col: 17, offset: 15310},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 445, col: 38, offset: 15331},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 447, col: 1, offset: 15353},
			expr: &actionExpr{
				pos: position{line: 447, col: 23, offset: 15375},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 447, col: 23, offset: 15375},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 447, col: 23, offset: 15375},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 447, col: 46, offset: 15398},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 55, offset: 15407},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 447, col: 82, offset: 15434},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 451, col: 1, offset: 15542},
			expr: &actionExpr{
				pos: position{line: 451, col: 31, offset: 15572},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 451, col: 31, offset: 15572},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 451, col: 41, offset: 15582},
						expr: &ruleRefExpr{
							pos:  position{line: 451, col: 41, offset: 15582},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 455, col: 1, offset: 15664},
			expr: &seqExpr{
				pos: position{line: 455, col: 27, offset: 15690},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 455, col: 27, offset: 15690},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 455, col: 32, offset: 15695},
						expr: &charClassMatcher{
							pos:        position{line: 455, col: 33, offset: 15696},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 457, col: 1, offset: 15709},
			expr: &litMatcher{
				pos:        position{line: 457, col: 25, offset: 15733},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 460, col: 1, offset: 15824},
			expr: &actionExpr{
				pos: position{line: 460, col: 30, offset: 15853},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 460, col: 30, offset: 15853},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 461, col: 9, offset: 15872},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 461, col: 9, offset: 15872},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 461, col: 9, offset: 15872},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 461, col: 19, offset: 15882},
										expr: &ruleRefExpr{
											pos:  position{line: 461, col: 20, offset: 15883},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 462, col: 11, offset: 15940},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 462, col: 11, offset: 15940},
										expr: &ruleRefExpr{
											pos:  position{line: 462, col: 11, offset: 15940},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 462, col: 18, offset: 15947},
										expr: &ruleRefExpr{
											pos:  position{line: 462, col: 19, offset: 15948},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 463, col: 11, offset: 15980},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 463, col: 11, offset: 15980},
										expr: &litMatcher{
											pos:        position{line: 463, col: 12, offset: 15981},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 463, col: 16, offset: 15985},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 16034},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 16056},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 466, col: 11, offset: 16079},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 467, col: 11, offset: 16105},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 468, col: 11, offset: 16134},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 16150},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 16183},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 16203},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 16225},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 16247},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 16272},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 475, col: 11, offset: 16299},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 475, col: 11, offset: 16299},
										expr: &litMatcher{
											pos:        position{line: 475, col: 12, offset: 16300},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 475, col: 17, offset: 16305},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 16330},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 16360},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16389},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 482, col: 1, offset: 16459},
			expr: &choiceExpr{
				pos: position{line: 482, col: 41, offset: 16499},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 482, col: 41, offset: 16499},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 482, col: 55, offset: 16513},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 482, col: 55, offset: 16513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 482, col: 55, offset: 16513},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 482, col: 59, offset: 16517},
									expr: &litMatcher{
										pos:        position{line: 482, col: 60, offset: 16518},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 486, col: 1, offset: 16581},
			expr: &actionExpr{
				pos: position{line: 486, col: 23, offset: 16603},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 486, col: 23, offset: 16603},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 486, col: 23, offset: 16603},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 46, offset: 16626},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 55, offset: 16635},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 82, offset: 16662},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 490, col: 1, offset: 16770},
			expr: &actionExpr{
				pos: position{line: 490, col: 31, offset: 16800},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 490, col: 31, offset: 16800},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 490, col: 41, offset: 16810},
						expr: &ruleRefExpr{
							pos:  position{line: 490, col: 41, offset: 16810},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 495, col: 1, offset: 16975},
			expr: &actionExpr{
				pos: position{line: 495, col: 30, offset: 17004},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 495, col: 30, offset: 17004},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 496, col: 9, offset: 17023},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 496, col: 9, offset: 17023},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 496, col: 9, offset: 17023},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 496, col: 19, offset: 17033},
										expr: &ruleRefExpr{
											pos:  position{line: 496, col: 20, offset: 17034},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 497, col: 11, offset: 17091},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 497, col: 11, offset: 17091},
										expr: &ruleRefExpr{
											pos:  position{line: 497, col: 11, offset: 17091},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 497, col: 18, offset: 17098},
										expr: &ruleRefExpr{
											pos:  position{line: 497, col: 19, offset: 17099},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 17131},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 17149},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 17171},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 17194},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 17220},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 17249},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 17265},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17298},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17318},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17340},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17362},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 509, col: 11, offset: 17387},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 510, col: 11, offset: 17414},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 510, col: 11, offset: 17414},
										expr: &litMatcher{
											pos:        position{line: 510, col: 12, offset: 17415},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 510, col: 18, offset: 17421},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 511, col: 11, offset: 17446},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 512, col: 11, offset: 17476},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 513, col: 11, offset: 17505},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 517, col: 1, offset: 17583},
			expr: &seqExpr{
				pos: position{line: 517, col: 27, offset: 17609},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 517, col: 27, offset: 17609},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 517, col: 33, offset: 17615},
						expr: &charClassMatcher{
							pos:        position{line: 517, col: 34, offset: 17616},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 519, col: 1, offset: 17629},
			expr: &litMatcher{
				pos:        position{line: 519, col: 25, offset: 17653},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 521, col: 1, offset: 17662},
			expr: &actionExpr{
				pos: position{line: 521, col: 41, offset: 17702},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 521, col: 42, offset: 17703},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 521, col: 42, offset: 17703},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 521, col: 56, offset: 17717},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 521, col: 56, offset: 17717},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 521, col: 60, offset: 17721},
									expr: &litMatcher{
										pos:        position{line: 521, col: 61, offset: 17722},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 528, col: 1, offset: 17894},
			expr: &actionExpr{
				pos: position{line: 528, col: 12, offset: 17905},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 528, col: 12, offset: 17905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 528, col: 12, offset: 17905},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 528, col: 23, offset: 17916},
								expr: &ruleRefExpr{
									pos:  position{line: 528, col: 24, offset: 17917},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 529, col: 5, offset: 17935},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 529, col: 12, offset: 17942},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 529, col: 12, offset: 17942},
									expr: &litMatcher{
										pos:        position{line: 529, col: 13, offset: 17943},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 533, col: 5, offset: 18038},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 537, col: 5, offset: 18194},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 5, offset: 18194},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 12, offset: 18201},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 19, offset: 18208},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 34, offset: 18223},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 537, col: 38, offset: 18227},
								expr: &ruleRefExpr{
									pos:  position{line: 537, col: 38, offset: 18227},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 56, offset: 18245},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 541, col: 1, offset: 18355},
			expr: &actionExpr{
				pos: position{line: 541, col: 18, offset: 18372},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 541, col: 18, offset: 18372},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 541, col: 27, offset: 18381},
						expr: &seqExpr{
							pos: position{line: 541, col: 28, offset: 18382},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 541, col: 28, offset: 18382},
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 29, offset: 18383},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 541, col: 37, offset: 18391},
									expr: &ruleRefExpr{
										pos:  position{line: 541, col: 38, offset: 18392},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 541, col: 54, offset: 18408},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 545, col: 1, offset: 18533},
			expr: &actionExpr{
				pos: position{line: 545, col: 17, offset: 18549},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 545, col: 17, offset: 18549},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 545, col: 26, offset: 18558},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 545, col: 26, offset: 18558},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 546, col: 11, offset: 18574},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 547, col: 11, offset: 18620},
								expr: &ruleRefExpr{
									pos:  position{line: 547, col: 11, offset: 18620},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 18639},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 549, col: 11, offset: 18665},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 550, col: 11, offset: 18694},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 551, col: 11, offset: 18716},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 552, col: 11, offset: 18739},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 553, col: 11, offset: 18755},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 554, col: 11, offset: 18781},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 18805},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 556, col: 11, offset: 18827},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 18845},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 558, col: 11, offset: 18878},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 559, col: 11, offset: 18907},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 566, col: 1, offset: 19065},
			expr: &seqExpr{
				pos: position{line: 566, col: 31, offset: 19095},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 566, col: 31, offset: 19095},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 566, col: 41, offset: 19105},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 571, col: 1, offset: 19221},
			expr: &actionExpr{
				pos: position{line: 571, col: 19, offset: 19239},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 571, col: 19, offset: 19239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 19, offset: 19239},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 25, offset: 19245},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 40, offset: 19260},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 45, offset: 19265},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 52, offset: 19272},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 68, offset: 19288},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 75, offset: 19295},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 575, col: 1, offset: 19414},
			expr: &actionExpr{
				pos: position{line: 575, col: 20, offset: 19433},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 575, col: 20, offset: 19433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 575, col: 20, offset: 19433},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 26, offset: 19439},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 575, col: 41, offset: 19454},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 45, offset: 19458},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 52, offset: 19465},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 68, offset: 19481},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 75, offset: 19488},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 579, col: 1, offset: 19608},
			expr: &actionExpr{
				pos: position{line: 579, col: 18, offset: 19625},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 579, col: 19, offset: 19626},
					expr: &charClassMatcher{
						pos:        position{line: 579, col: 19, offset: 19626},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 583, col: 1, offset: 19679},
			expr: &actionExpr{
				pos: position{line: 583, col: 19, offset: 19697},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 583, col: 19, offset: 19697},
					expr: &charClassMatcher{
						pos:        position{line: 583, col: 19, offset: 19697},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 587, col: 1, offset: 19749},
			expr: &actionExpr{
				pos: position{line: 587, col: 24, offset: 19772},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 587, col: 24, offset: 19772},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 24, offset: 19772},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 28, offset: 19776},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 587, col: 34, offset: 19782},
								expr: &ruleRefExpr{
									pos:  position{line: 587, col: 35, offset: 19783},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 587, col: 54, offset: 19802},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 594, col: 1, offset: 19991},
			expr: &actionExpr{
				pos: position{line: 594, col: 18, offset: 20008},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 594, col: 18, offset: 20008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 18, offset: 20008},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 594, col: 24, offset: 20014},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 594, col: 24, offset: 20014},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 594, col: 24, offset: 20014},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 594, col: 36, offset: 20026},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 594, col: 42, offset: 20032},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 594, col: 56, offset: 20046},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 594, col: 74, offset: 20064},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 596, col: 8, offset: 20213},
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 8, offset: 20213},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 15, offset: 20220},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 600, col: 1, offset: 20276},
			expr: &actionExpr{
				pos: position{line: 600, col: 26, offset: 20301},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 600, col: 26, offset: 20301},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 600, col: 26, offset: 20301},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 30, offset: 20305},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 36, offset: 20311},
								expr: &choiceExpr{
									pos: position{line: 600, col: 37, offset: 20312},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 600, col: 37, offset: 20312},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 600, col: 59, offset: 20334},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 600, col: 80, offset: 20355},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 600, col: 99, offset: 20374},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 604, col: 1, offset: 20450},
			expr: &actionExpr{
				pos: position{line: 604, col: 24, offset: 20473},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 604, col: 24, offset: 20473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 604, col: 24, offset: 20473},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 33, offset: 20482},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 40, offset: 20489},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 604, col: 66, offset: 20515},
							expr: &litMatcher{
								pos:        position{line: 604, col: 66, offset: 20515},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 608, col: 1, offset: 20578},
			expr: &actionExpr{
				pos: position{line: 608, col: 29, offset: 20606},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 608, col: 29, offset: 20606},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 29, offset: 20606},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 608, col: 36, offset: 20613},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 608, col: 36, offset: 20613},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 609, col: 11, offset: 20731},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 610, col: 11, offset: 20768},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 611, col: 11, offset: 20795},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 612, col: 11, offset: 20828},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 613, col: 11, offset: 20861},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 614, col: 11, offset: 20889},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 614, col: 31, offset: 20909},
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 31, offset: 20909},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 614, col: 39, offset: 20917},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 614, col: 39, offset: 20917},
									expr: &litMatcher{
										pos:        position{line: 614, col: 40, offset: 20918},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 614, col: 46, offset: 20924},
									expr: &litMatcher{
										pos:        position{line: 614, col: 47, offset: 20925},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 618, col: 1, offset: 20961},
			expr: &actionExpr{
				pos: position{line: 618, col: 23, offset: 20983},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 618, col: 23, offset: 20983},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 618, col: 23, offset: 20983},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 618, col: 30, offset: 20990},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 618, col: 30, offset: 20990},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 618, col: 47, offset: 21007},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 21030},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 619, col: 12, offset: 21037},
								expr: &actionExpr{
									pos: position{line: 619, col: 13, offset: 21038},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 619, col: 13, offset: 21038},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 619, col: 13, offset: 21038},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 619, col: 17, offset: 21042},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 619, col: 24, offset: 21049},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 619, col: 24, offset: 21049},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 619, col: 41, offset: 21066},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 625, col: 1, offset: 21210},
			expr: &actionExpr{
				pos: position{line: 625, col: 29, offset: 21238},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 625, col: 29, offset: 21238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 625, col: 29, offset: 21238},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 34, offset: 21243},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 625, col: 41, offset: 21250},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 625, col: 41, offset: 21250},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 625, col: 58, offset: 21267},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 21290},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 626, col: 12, offset: 21297},
								expr: &actionExpr{
									pos: position{line: 626, col: 13, offset: 21298},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 626, col: 13, offset: 21298},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 626, col: 13, offset: 21298},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 17, offset: 21302},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 626, col: 24, offset: 21309},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 626, col: 24, offset: 21309},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 626, col: 41, offset: 21326},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 628, col: 9, offset: 21381},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 632, col: 1, offset: 21475},
			expr: &actionExpr{
				pos: position{line: 632, col: 19, offset: 21493},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 632, col: 19, offset: 21493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 19, offset: 21493},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 26, offset: 21500},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 34, offset: 21508},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 39, offset: 21513},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 44, offset: 21518},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 636, col: 1, offset: 21610},
			expr: &actionExpr{
				pos: position{line: 636, col: 25, offset: 21634},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 636, col: 25, offset: 21634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 25, offset: 21634},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 30, offset: 21639},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 37, offset: 21646},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 636, col: 45, offset: 21654},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 50, offset: 21659},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 55, offset: 21664},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 636, col: 63, offset: 21672},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 640, col: 1, offset: 21761},
			expr: &actionExpr{
				pos: position{line: 640, col: 20, offset: 21780},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 20, offset: 21780},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 640, col: 32, offset: 21792},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 644, col: 1, offset: 21891},
			expr: &actionExpr{
				pos: position{line: 644, col: 26, offset: 21916},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 644, col: 26, offset: 21916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 644, col: 26, offset: 21916},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 31, offset: 21921},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 43, offset: 21933},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 644, col: 51, offset: 21941},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 648, col: 1, offset: 22037},
			expr: &actionExpr{
				pos: position{line: 648, col: 23, offset: 22059},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 648, col: 23, offset: 22059},
					expr: &charClassMatcher{
						pos:        position{line: 648, col: 23, offset: 22059},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 652, col: 1, offset: 22108},
			expr: &actionExpr{
				pos: position{line: 652, col: 23, offset: 22130},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 652, col: 23, offset: 22130},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 652, col: 24, offset: 22131},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 652, col: 24, offset: 22131},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 652, col: 34, offset: 22141},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 42, offset: 22149},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 48, offset: 22155},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 652, col: 73, offset: 22180},
							expr: &litMatcher{
								pos:        position{line: 652, col: 73, offset: 22180},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 656, col: 1, offset: 22333},
			expr: &actionExpr{
				pos: position{line: 656, col: 28, offset: 22360},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 656, col: 28, offset: 22360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 28, offset: 22360},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 35, offset: 22367},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 656, col: 54, offset: 22386},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 54, offset: 22386},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 656, col: 62, offset: 22394},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 656, col: 62, offset: 22394},
									expr: &litMatcher{
										pos:        position{line: 656, col: 63, offset: 22395},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 656, col: 69, offset: 22401},
									expr: &litMatcher{
										pos:        position{line: 656, col: 70, offset: 22402},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 660, col: 1, offset: 22438},
			expr: &actionExpr{
				pos: position{line: 660, col: 22, offset: 22459},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 660, col: 22, offset: 22459},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 22, offset: 22459},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 29, offset: 22466},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 22481},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 661, col: 12, offset: 22488},
								expr: &actionExpr{
									pos: position{line: 661, col: 13, offset: 22489},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 661, col: 13, offset: 22489},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 661, col: 13, offset: 22489},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 661, col: 17, offset: 22493},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 661, col: 24, offset: 22500},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 667, col: 1, offset: 22637},
			expr: &choiceExpr{
				pos: position{line: 667, col: 13, offset: 22649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 667, col: 13, offset: 22649},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 667, col: 13, offset: 22649},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 667, col: 18, offset: 22654},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 667, col: 18, offset: 22654},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 30, offset: 22666},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 22736},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 22736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 669, col: 5, offset: 22736},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 669, col: 9, offset: 22740},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 669, col: 14, offset: 22745},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 669, col: 14, offset: 22745},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 669, col: 26, offset: 22757},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 673, col: 1, offset: 22829},
			expr: &actionExpr{
				pos: position{line: 673, col: 16, offset: 22844},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 673, col: 16, offset: 22844},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 673, col: 16, offset: 22844},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 673, col: 23, offset: 22851},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 673, col: 23, offset: 22851},
									expr: &litMatcher{
										pos:        position{line: 673, col: 24, offset: 22852},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 676, col: 5, offset: 22909},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 684, col: 1, offset: 23097},
			expr: &actionExpr{
				pos: position{line: 684, col: 21, offset: 23117},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 684, col: 21, offset: 23117},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 684, col: 21, offset: 23117},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 22, offset: 23118},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 26, offset: 23122},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 684, col: 35, offset: 23131},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 684, col: 35, offset: 23131},
									expr: &charClassMatcher{
										pos:        position{line: 684, col: 35, offset: 23131},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 686, col: 12, offset: 23195},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 691, col: 1, offset: 23347},
			expr: &zeroOrMoreExpr{
				pos: position{line: 691, col: 19, offset: 23365},
				expr: &choiceExpr{
					pos: position{line: 691, col: 20, offset: 23366},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 20, offset: 23366},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 36, offset: 23382},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 697, col: 1, offset: 23535},
			expr: &actionExpr{
				pos: position{line: 697, col: 21, offset: 23555},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 697, col: 21, offset: 23555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 21, offset: 23555},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 697, col: 29, offset: 23563},
								expr: &choiceExpr{
									pos: position{line: 697, col: 30, offset: 23564},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 697, col: 30, offset: 23564},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 697, col: 53, offset: 23587},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 697, col: 74, offset: 23608},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 697, col: 74, offset: 23608,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 697, col: 107, offset: 23641},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 701, col: 1, offset: 23716},
			expr: &actionExpr{
				pos: position{line: 701, col: 25, offset: 23740},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 701, col: 25, offset: 23740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 701, col: 25, offset: 23740},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 33, offset: 23748},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 701, col: 38, offset: 23753},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 38, offset: 23753},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 701, col: 78, offset: 23793},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 705, col: 1, offset: 23862},
			expr: &actionExpr{
				pos: position{line: 705, col: 23, offset: 23884},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 705, col: 23, offset: 23884},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 23, offset: 23884},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 705, col: 31, offset: 23892},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 705, col: 36, offset: 23897},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 36, offset: 23897},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 705, col: 76, offset: 23937},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 712, col: 1, offset: 24108},
			expr: &choiceExpr{
				pos: position{line: 712, col: 18, offset: 24125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 712, col: 18, offset: 24125},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 712, col: 18, offset: 24125},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 27, offset: 24134},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 714, col: 9, offset: 24193},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 714, col: 9, offset: 24193},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 714, col: 15, offset: 24199},
								expr: &ruleRefExpr{
									pos:  position{line: 714, col: 16, offset: 24200},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 718, col: 1, offset: 24296},
			expr: &actionExpr{
				pos: position{line: 718, col: 22, offset: 24317},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 718, col: 22, offset: 24317},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 718, col: 22, offset: 24317},
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 23, offset: 24318},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 719, col: 5, offset: 24327},
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 6, offset: 24328},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 720, col: 5, offset: 24344},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 6, offset: 24345},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 721, col: 5, offset: 24368},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 6, offset: 24369},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 722, col: 5, offset: 24396},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 6, offset: 24397},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 723, col: 5, offset: 24426},
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 6, offset: 24427},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 724, col: 5, offset: 24454},
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 6, offset: 24455},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 725, col: 5, offset: 24481},
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 6, offset: 24482},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 726, col: 5, offset: 24504},
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 6, offset: 24505},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 727, col: 5, offset: 24525},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 6, offset: 24526},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 728, col: 5, offset: 24554},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 728, col: 11, offset: 24560},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 728, col: 11, offset: 24560},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 728, col: 20, offset: 24569},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 21, offset: 24570},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 12, offset: 24671},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 734, col: 1, offset: 24714},
			expr: &seqExpr{
				pos: position{line: 734, col: 25, offset: 24738},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 734, col: 25, offset: 24738},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 734, col: 29, offset: 24742},
						expr: &ruleRefExpr{
							pos:  position{line: 734, col: 29, offset: 24742},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 36, offset: 24749},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 736, col: 1, offset: 24823},
			expr: &actionExpr{
				pos: position{line: 736, col: 29, offset: 24851},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 736, col: 29, offset: 24851},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 736, col: 29, offset: 24851},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 736, col: 50, offset: 24872},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 58, offset: 24880},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 740, col: 1, offset: 24990},
			expr: &actionExpr{
				pos: position{line: 740, col: 29, offset: 25018},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 740, col: 29, offset: 25018},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 740, col: 29, offset: 25018},
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 30, offset: 25019},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 5, offset: 25029},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 741, col: 14, offset: 25038},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 741, col: 14, offset: 25038},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 742, col: 11, offset: 25064},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 25089},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 11, offset: 25111},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25140},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25165},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25193},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25223},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 25290},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 25342},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 25367},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 25400},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 25427},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 25465},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 25491},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 763, col: 1, offset: 25664},
			expr: &actionExpr{
				pos: position{line: 763, col: 20, offset: 25683},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 763, col: 20, offset: 25683},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 763, col: 20, offset: 25683},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 763, col: 26, offset: 25689},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 27, offset: 25690},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 40, offset: 25703},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 48, offset: 25711},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 71, offset: 25734},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 80, offset: 25743},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 767, col: 1, offset: 25882},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 25913},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 25913},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 768, col: 5, offset: 25913},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 5, offset: 25913},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 12, offset: 25920},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 770, col: 9, offset: 25985},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 770, col: 9, offset: 25985},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 770, col: 9, offset: 25985},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 770, col: 9, offset: 25985},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 770, col: 16, offset: 25992},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 770, col: 16, offset: 25992},
															expr: &litMatcher{
																pos:        position{line: 770, col: 17, offset: 25993},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 774, col: 9, offset: 26097},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 793, col: 11, offset: 26833},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 793, col: 11, offset: 26833},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 793, col: 11, offset: 26833},
													expr: &charClassMatcher{
														pos:        position{line: 793, col: 12, offset: 26834},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 793, col: 20, offset: 26842},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 795, col: 13, offset: 26955},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 795, col: 13, offset: 26955},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 795, col: 14, offset: 26956},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 795, col: 21, offset: 26963},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 797, col: 13, offset: 27079},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 797, col: 13, offset: 27079},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 797, col: 14, offset: 27080},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 797, col: 21, offset: 27087},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 799, col: 13, offset: 27203},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 799, col: 13, offset: 27203},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 799, col: 13, offset: 27203},
													expr: &charClassMatcher{
														pos:        position{line: 799, col: 14, offset: 27204},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 799, col: 22, offset: 27212},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 801, col: 13, offset: 27328},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 801, col: 13, offset: 27328},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 801, col: 13, offset: 27328},
													expr: &charClassMatcher{
														pos:        position{line: 801, col: 14, offset: 27329},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 801, col: 22, offset: 27337},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 803, col: 12, offset: 27452},
							expr: &ruleRefExpr{
								pos:  position{line: 803, col: 12, offset: 27452},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 807, col: 1, offset: 27491},
			expr: &actionExpr{
				pos: position{line: 807, col: 27, offset: 27517},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 807, col: 27, offset: 27517},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 807, col: 37, offset: 27527},
						expr: &ruleRefExpr{
							pos:  position{line: 807, col: 37, offset: 27527},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 814, col: 1, offset: 27734},
			expr: &actionExpr{
				pos: position{line: 814, col: 22, offset: 27755},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 814, col: 22, offset: 27755},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 814, col: 22, offset: 27755},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 814, col: 28, offset: 27761},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 29, offset: 27762},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 42, offset: 27775},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 50, offset: 27783},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 75, offset: 27808},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 814, col: 86, offset: 27819},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 87, offset: 27820},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 117, offset: 27850},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 126, offset: 27859},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 818, col: 1, offset: 28016},
			expr: &actionExpr{
				pos: position{line: 819, col: 5, offset: 28049},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 819, col: 5, offset: 28049},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 819, col: 5, offset: 28049},
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 5, offset: 28049},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 819, col: 12, offset: 28056},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 819, col: 20, offset: 28064},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 821, col: 9, offset: 28123},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 821, col: 9, offset: 28123},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 821, col: 9, offset: 28123},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 821, col: 16, offset: 28130},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 821, col: 16, offset: 28130},
															expr: &litMatcher{
																pos:        position{line: 821, col: 17, offset: 28131},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 825, col: 9, offset: 28235},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 842, col: 14, offset: 28959},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 842, col: 21, offset: 28966},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 842, col: 22, offset: 28967},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 844, col: 13, offset: 29055},
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 13, offset: 29055},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 848, col: 1, offset: 29095},
			expr: &actionExpr{
				pos: position{line: 848, col: 32, offset: 29126},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 848, col: 32, offset: 29126},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 848, col: 32, offset: 29126},
							expr: &litMatcher{
								pos:        position{line: 848, col: 33, offset: 29127},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 37, offset: 29131},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 849, col: 7, offset: 29146},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 849, col: 7, offset: 29146},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 849, col: 7, offset: 29146},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 850, col: 7, offset: 29192},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 850, col: 7, offset: 29192},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 851, col: 7, offset: 29236},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 851, col: 7, offset: 29236},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 852, col: 7, offset: 29279},
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 7, offset: 29279},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 856, col: 1, offset: 29325},
			expr: &actionExpr{
				pos: position{line: 856, col: 29, offset: 29353},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 856, col: 29, offset: 29353},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 856, col: 39, offset: 29363},
						expr: &ruleRefExpr{
							pos:  position{line: 856, col: 39, offset: 29363},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 863, col: 1, offset: 29686},
			expr: &actionExpr{
				pos: position{line: 863, col: 20, offset: 29705},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 863, col: 20, offset: 29705},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 863, col: 20, offset: 29705},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 863, col: 26, offset: 29711},
								expr: &ruleRefExpr{
									pos:  position{line: 863, col: 27, offset: 29712},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 40, offset: 29725},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 46, offset: 29731},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 75, offset: 29760},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 86, offset: 29771},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 112, offset: 29797},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 863, col: 124, offset: 29809},
								expr: &ruleRefExpr{
									pos:  position{line: 863, col: 125, offset: 29810},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 867, col: 1, offset: 29955},
			expr: &seqExpr{
				pos: position{line: 867, col: 26, offset: 29980},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 867, col: 26, offset: 29980},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 867, col: 54, offset: 30008},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 869, col: 1, offset: 30036},
			expr: &choiceExpr{
				pos: position{line: 869, col: 33, offset: 30068},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 869, col: 33, offset: 30068},
						expr: &charClassMatcher{
							pos:        position{line: 869, col: 33, offset: 30068},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 869, col: 45, offset: 30080},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 869, col: 45, offset: 30080},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 869, col: 49, offset: 30084},
								expr: &litMatcher{
									pos:        position{line: 869, col: 50, offset: 30085},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 870, col: 1, offset: 30090},
			expr: &actionExpr{
				pos: position{line: 870, col: 32, offset: 30121},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 870, col: 32, offset: 30121},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 870, col: 42, offset: 30131},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 870, col: 42, offset: 30131},
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 42, offset: 30131},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 876, col: 1, offset: 30292},
			expr: &actionExpr{
				pos: position{line: 876, col: 24, offset: 30315},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 876, col: 24, offset: 30315},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 876, col: 33, offset: 30324},
						expr: &seqExpr{
							pos: position{line: 876, col: 34, offset: 30325},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 876, col: 34, offset: 30325},
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 35, offset: 30326},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 876, col: 43, offset: 30334},
									expr: &litMatcher{
										pos:        position{line: 876, col: 44, offset: 30335},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 876, col: 49, offset: 30340},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 880, col: 1, offset: 30471},
			expr: &actionExpr{
				pos: position{line: 880, col: 31, offset: 30501},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 880, col: 31, offset: 30501},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 880, col: 40, offset: 30510},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 880, col: 40, offset: 30510},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 881, col: 11, offset: 30526},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 882, col: 11, offset: 30576},
								expr: &ruleRefExpr{
									pos:  position{line: 882, col: 11, offset: 30576},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 883, col: 11, offset: 30595},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 884, col: 11, offset: 30621},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 885, col: 11, offset: 30651},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 886, col: 11, offset: 30672},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 887, col: 11, offset: 30701},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 888, col: 11, offset: 30723},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 889, col: 11, offset: 30747},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 890, col: 11, offset: 30763},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 891, col: 11, offset: 30789},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 892, col: 11, offset: 30813},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 893, col: 11, offset: 30835},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 894, col: 11, offset: 30853},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 895, col: 11, offset: 30886},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 896, col: 11, offset: 30915},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 900, col: 1, offset: 30958},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 30992},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 30992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 30992},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 901, col: 16, offset: 31003},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 901, col: 16, offset: 31003},
									expr: &litMatcher{
										pos:        position{line: 901, col: 17, offset: 31004},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 904, col: 5, offset: 31065},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 908, col: 6, offset: 31245},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 908, col: 6, offset: 31245},
									expr: &choiceExpr{
										pos: position{line: 908, col: 7, offset: 31246},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 908, col: 7, offset: 31246},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 908, col: 15, offset: 31254},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 27, offset: 31266},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 912, col: 1, offset: 31310},
			expr: &actionExpr{
				pos: position{line: 912, col: 31, offset: 31340},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 912, col: 31, offset: 31340},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 912, col: 40, offset: 31349},
						expr: &ruleRefExpr{
							pos:  position{line: 912, col: 41, offset: 31350},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 919, col: 1, offset: 31548},
			expr: &choiceExpr{
				pos: position{line: 919, col: 19, offset: 31566},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 19, offset: 31566},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 919, col: 19, offset: 31566},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 921, col: 9, offset: 31614},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 921, col: 9, offset: 31614},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 9, offset: 31664},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 923, col: 9, offset: 31664},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 9, offset: 31724},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 925, col: 9, offset: 31724},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 927, col: 9, offset: 31780},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 927, col: 9, offset: 31780},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 938, col: 1, offset: 32107},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 32159},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 32159},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 32159},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 940, col: 5, offset: 32159},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 940, col: 16, offset: 32170},
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 17, offset: 32171},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 940, col: 30, offset: 32184},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 33, offset: 32187},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 940, col: 49, offset: 32203},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 54, offset: 32208},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 940, col: 60, offset: 32214},
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 61, offset: 32215},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 32402},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 32402},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 32402},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 16, offset: 32413},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 17, offset: 32414},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 30, offset: 32427},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 944, col: 35, offset: 32432},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 44, offset: 32441},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 32635},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 948, col: 5, offset: 32635},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 948, col: 5, offset: 32635},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 948, col: 16, offset: 32646},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 17, offset: 32647},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 948, col: 30, offset: 32660},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 955, col: 7, offset: 32946},
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 8, offset: 32947},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 23, offset: 32962},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 955, col: 31, offset: 32970},
										expr: &ruleRefExpr{
											pos:  position{line: 955, col: 32, offset: 32971},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 33158},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 33158},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 33158},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 959, col: 16, offset: 33169},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 17, offset: 33170},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 959, col: 30, offset: 33183},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 31, offset: 33184},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 959, col: 46, offset: 33199},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 959, col: 52, offset: 33205},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 53, offset: 33206},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 963, col: 1, offset: 33308},
			expr: &oneOrMoreExpr{
				pos: position{line: 963, col: 33, offset: 33340},
				expr: &actionExpr{
					pos: position{line: 963, col: 34, offset: 33341},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 963, col: 34, offset: 33341},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 963, col: 34, offset: 33341},
								expr: &ruleRefExpr{
									pos:  position{line: 963, col: 35, offset: 33342},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 963, col: 45, offset: 33352},
								expr: &litMatcher{
									pos:        position{line: 963, col: 45, offset: 33352},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 963, col: 51, offset: 33358},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 963, col: 60, offset: 33367},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 967, col: 1, offset: 33504},
			expr: &actionExpr{
				pos: position{line: 967, col: 21, offset: 33524},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 967, col: 21, offset: 33524},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 967, col: 21, offset: 33524},
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 22, offset: 33525},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 967, col: 32, offset: 33535},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 41, offset: 33544},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 967, col: 66, offset: 33569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 971, col: 1, offset: 33628},
			expr: &actionExpr{
				pos: position{line: 971, col: 28, offset: 33655},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 971, col: 28, offset: 33655},
					expr: &charClassMatcher{
						pos:        position{line: 971, col: 28, offset: 33655},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 977, col: 1, offset: 33860},
			expr: &choiceExpr{
				pos: position{line: 979, col: 5, offset: 33909},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 33909},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 33909},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 979, col: 5, offset: 33909},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 979, col: 16, offset: 33920},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 17, offset: 33921},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 979, col: 30, offset: 33934},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 979, col: 33, offset: 33937},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 49, offset: 33953},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 54, offset: 33958},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 979, col: 60, offset: 33964},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 61, offset: 33965},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 34155},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 983, col: 5, offset: 34155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 983, col: 5, offset: 34155},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 983, col: 16, offset: 34166},
										expr: &ruleRefExpr{
											pos:  position{line: 983, col: 17, offset: 34167},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 983, col: 30, offset: 34180},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 990, col: 7, offset: 34466},
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 8, offset: 34467},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 990, col: 23, offset: 34482},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 990, col: 31, offset: 34490},
										expr: &ruleRefExpr{
											pos:  position{line: 990, col: 32, offset: 34491},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 34675},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 994, col: 5, offset: 34675},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 994, col: 5, offset: 34675},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 994, col: 16, offset: 34686},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 17, offset: 34687},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 994, col: 30, offset: 34700},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 31, offset: 34701},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 994, col: 46, offset: 34716},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 994, col: 52, offset: 34722},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 53, offset: 34723},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 998, col: 1, offset: 34822},
			expr: &ruleRefExpr{
				pos:  position{line: 998, col: 18, offset: 34839},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1000, col: 1, offset: 34857},
			expr: &actionExpr{
				pos: position{line: 1000, col: 34, offset: 34890},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 34, offset: 34890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1000, col: 34, offset: 34890},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 40, offset: 34896},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1000, col: 48, offset: 34904},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1000, col: 49, offset: 34905},
									expr: &charClassMatcher{
										pos:        position{line: 1000, col: 49, offset: 34905},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 8, offset: 34957},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1006, col: 1, offset: 34993},
			expr: &oneOrMoreExpr{
				pos: position{line: 1006, col: 36, offset: 35028},
				expr: &actionExpr{
					pos: position{line: 1006, col: 37, offset: 35029},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1006, col: 37, offset: 35029},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1006, col: 37, offset: 35029},
								expr: &ruleRefExpr{
									pos:  position{line: 1006, col: 38, offset: 35030},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1006, col: 48, offset: 35040},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1006, col: 57, offset: 35049},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1011, col: 1, offset: 35265},
			expr: &actionExpr{
				pos: position{line: 1011, col: 20, offset: 35284},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 20, offset: 35284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1011, col: 20, offset: 35284},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1011, col: 31, offset: 35295},
								expr: &ruleRefExpr{
									pos:  position{line: 1011, col: 32, offset: 35296},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1012, col: 5, offset: 35315},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 35609},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 16, offset: 35620},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 5, offset: 35647},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1021, col: 16, offset: 35658},
								expr: &ruleRefExpr{
									pos:  position{line: 1021, col: 17, offset: 35659},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1025, col: 1, offset: 35800},
			expr: &actionExpr{
				pos: position{line: 1026, col: 5, offset: 35831},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1026, col: 5, offset: 35831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1026, col: 5, offset: 35831},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1026, col: 14, offset: 35840},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1026, col: 14, offset: 35840},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1026, col: 14, offset: 35840},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1026, col: 23, offset: 35849},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1026, col: 28, offset: 35854},
											expr: &charClassMatcher{
												pos:        position{line: 1026, col: 28, offset: 35854},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1026, col: 68, offset: 35894},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1030, col: 1, offset: 35954},
			expr: &ruleRefExpr{
				pos:  position{line: 1030, col: 26, offset: 35979},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1033, col: 1, offset: 36078},
			expr: &oneOrMoreExpr{
				pos: position{line: 1033, col: 27, offset: 36104},
				expr: &ruleRefExpr{
					pos:  position{line: 1033, col: 27, offset: 36104},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1040, col: 1, offset: 36322},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 36383},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 36383},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1042, col: 5, offset: 36383},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1042, col: 5, offset: 36383},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1042, col: 16, offset: 36394},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 17, offset: 36395},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 30, offset: 36408},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 33, offset: 36411},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1042, col: 49, offset: 36427},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 54, offset: 36432},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 61, offset: 36439},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 36646},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 36646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1046, col: 5, offset: 36646},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1046, col: 16, offset: 36657},
										expr: &ruleRefExpr{
											pos:  position{line: 1046, col: 17, offset: 36658},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 30, offset: 36671},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 37, offset: 36678},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1050, col: 1, offset: 36786},
			expr: &actionExpr{
				pos: position{line: 1050, col: 31, offset: 36816},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 31, offset: 36816},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1050, col: 31, offset: 36816},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 42, offset: 36827},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 65, offset: 36850},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1050, col: 76, offset: 36861},
								expr: &seqExpr{
									pos: position{line: 1050, col: 77, offset: 36862},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1050, col: 77, offset: 36862},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 78, offset: 36863},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1050, col: 99, offset: 36884},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1058, col: 1, offset: 37114},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 37141},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 5, offset: 37141},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1059, col: 5, offset: 37141},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1059, col: 16, offset: 37152},
								expr: &ruleRefExpr{
									pos:  position{line: 1059, col: 17, offset: 37153},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1060, col: 5, offset: 37171},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1067, col: 5, offset: 37383},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1067, col: 11, offset: 37389},
								expr: &ruleRefExpr{
									pos:  position{line: 1067, col: 12, offset: 37390},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1075, col: 1, offset: 37604},
			expr: &actionExpr{
				pos: position{line: 1075, col: 19, offset: 37622},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1075, col: 19, offset: 37622},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1075, col: 19, offset: 37622},
							expr: &ruleRefExpr{
								pos:  position{line: 1075, col: 20, offset: 37623},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 5, offset: 37638},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1076, col: 15, offset: 37648},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1076, col: 15, offset: 37648},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1076, col: 15, offset: 37648},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1076, col: 24, offset: 37657},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1078, col: 9, offset: 37751},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1078, col: 9, offset: 37751},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1078, col: 9, offset: 37751},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1078, col: 18, offset: 37760},
														expr: &ruleRefExpr{
															pos:  position{line: 1078, col: 19, offset: 37761},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1078, col: 35, offset: 37777},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1084, col: 1, offset: 37900},
			expr: &actionExpr{
				pos: position{line: 1085, col: 5, offset: 37924},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1085, col: 5, offset: 37924},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1085, col: 14, offset: 37933},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1085, col: 14, offset: 37933},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1086, col: 11, offset: 37985},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1087, col: 11, offset: 38031},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 11, offset: 38031},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1088, col: 11, offset: 38050},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1088, col: 11, offset: 38050},
										expr: &ruleRefExpr{
											pos:  position{line: 1088, col: 12, offset: 38051},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1089, col: 13, offset: 38070},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1089, col: 13, offset: 38070},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1090, col: 15, offset: 38098},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1091, col: 15, offset: 38124},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1092, col: 15, offset: 38146},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1093, col: 15, offset: 38172},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1094, col: 15, offset: 38200},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1095, col: 15, offset: 38221},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1096, col: 15, offset: 38255},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1097, col: 15, offset: 38286},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1098, col: 15, offset: 38317},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1099, col: 15, offset: 38349},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1100, col: 15, offset: 38387},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1101, col: 15, offset: 38418},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1102, col: 15, offset: 38452},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1103, col: 15, offset: 38477},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1104, col: 15, offset: 38510},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1111, col: 1, offset: 38740},
			expr: &actionExpr{
				pos: position{line: 1111, col: 14, offset: 38753},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 14, offset: 38753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1111, col: 14, offset: 38753},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1111, col: 20, offset: 38759},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1111, col: 24, offset: 38763},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 24, offset: 38763},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1111, col: 31, offset: 38770},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 32, offset: 38771},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1118, col: 1, offset: 39062},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 15, offset: 39076},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 15, offset: 39076},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 41, offset: 39102},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 65, offset: 39126},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1120, col: 1, offset: 39147},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 32, offset: 39178},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1120, col: 32, offset: 39178},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1120, col: 32, offset: 39178},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1120, col: 36, offset: 39182},
								expr: &litMatcher{
									pos:        position{line: 1120, col: 37, offset: 39183},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1120, col: 43, offset: 39189},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1120, col: 43, offset: 39189},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1120, col: 47, offset: 39193},
								expr: &litMatcher{
									pos:        position{line: 1120, col: 48, offset: 39194},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1120, col: 54, offset: 39200},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1120, col: 54, offset: 39200},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1120, col: 58, offset: 39204},
								expr: &litMatcher{
									pos:        position{line: 1120, col: 59, offset: 39205},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1120, col: 65, offset: 39211},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1120, col: 65, offset: 39211},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1120, col: 69, offset: 39215},
								expr: &litMatcher{
									pos:        position{line: 1120, col: 70, offset: 39216},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1122, col: 1, offset: 39223},
			expr: &choiceExpr{
				pos: position{line: 1122, col: 34, offset: 39256},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1122, col: 34, offset: 39256},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1122, col: 41, offset: 39263},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1122, col: 48, offset: 39270},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1122, col: 55, offset: 39277},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1122, col: 62, offset: 39284},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1122, col: 68, offset: 39290},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1124, col: 1, offset: 39297},
			expr: &actionExpr{
				pos: position{line: 1124, col: 26, offset: 39322},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1124, col: 26, offset: 39322},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1124, col: 32, offset: 39328},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1124, col: 32, offset: 39328},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1125, col: 15, offset: 39364},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1126, col: 15, offset: 39401},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1127, col: 15, offset: 39438},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1128, col: 15, offset: 39479},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1129, col: 15, offset: 39509},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1130, col: 15, offset: 39541},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1134, col: 1, offset: 39699},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 28, offset: 39726},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 28, offset: 39726},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 15, offset: 39761},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 15, offset: 39798},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 15, offset: 39835},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1139, col: 1, offset: 39863},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 22, offset: 39884},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 22, offset: 39884},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 15, offset: 39916},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 15, offset: 39949},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 15, offset: 39982},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 15, offset: 40019},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 15, offset: 40056},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1146, col: 1, offset: 40082},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 33, offset: 40114},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1146, col: 33, offset: 40114},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1146, col: 39, offset: 40120},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1146, col: 39, offset: 40120},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1150, col: 1, offset: 40257},
			expr: &actionExpr{
				pos: position{line: 1150, col: 25, offset: 40281},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1150, col: 25, offset: 40281},
					expr: &litMatcher{
						pos:        position{line: 1150, col: 25, offset: 40281},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1154, col: 1, offset: 40326},
			expr: &actionExpr{
				pos: position{line: 1154, col: 25, offset: 40350},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 25, offset: 40350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1154, col: 25, offset: 40350},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1154, col: 30, offset: 40355},
							expr: &litMatcher{
								pos:        position{line: 1154, col: 30, offset: 40355},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1162, col: 1, offset: 40460},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 13, offset: 40472},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1162, col: 13, offset: 40472},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 35, offset: 40494},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1164, col: 1, offset: 40563},
			expr: &actionExpr{
				pos: position{line: 1164, col: 24, offset: 40586},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 24, offset: 40586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1164, col: 24, offset: 40586},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1164, col: 30, offset: 40592},
								expr: &ruleRefExpr{
									pos:  position{line: 1164, col: 31, offset: 40593},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1164, col: 49, offset: 40611},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1164, col: 54, offset: 40616},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 64, offset: 40626},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1164, col: 93, offset: 40655},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1168, col: 1, offset: 40746},
			expr: &seqExpr{
				pos: position{line: 1168, col: 32, offset: 40777},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 32, offset: 40777},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1168, col: 59, offset: 40804},
						expr: &seqExpr{
							pos: position{line: 1168, col: 60, offset: 40805},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1168, col: 60, offset: 40805},
									expr: &litMatcher{
										pos:        position{line: 1168, col: 62, offset: 40807},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1168, col: 69, offset: 40814},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1168, col: 69, offset: 40814},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1168, col: 77, offset: 40822},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1170, col: 1, offset: 40889},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 31, offset: 40919},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 31, offset: 40919},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1171, col: 11, offset: 40935},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1171, col: 11, offset: 40935},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1171, col: 19, offset: 40943},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 20, offset: 40944},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 40963},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 40994},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 41018},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 41040},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 41062},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 41087},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 41112},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 41139},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 41157},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 41179},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 41202},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 41218},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 41247},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 41280},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 41309},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1189, col: 1, offset: 41351},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 41396},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1190, col: 5, offset: 41396},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1191, col: 7, offset: 41494},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1191, col: 7, offset: 41494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 7, offset: 41494},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1191, col: 12, offset: 41499},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1195, col: 1, offset: 41666},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 24, offset: 41689},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1195, col: 24, offset: 41689},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1195, col: 24, offset: 41689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1195, col: 24, offset: 41689},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1195, col: 30, offset: 41695},
										expr: &ruleRefExpr{
											pos:  position{line: 1195, col: 31, offset: 41696},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1195, col: 51, offset: 41716},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1195, col: 51, offset: 41716},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1195, col: 55, offset: 41720},
											expr: &litMatcher{
												pos:        position{line: 1195, col: 56, offset: 41721},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1195, col: 61, offset: 41726},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1195, col: 71, offset: 41736},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1195, col: 100, offset: 41765},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1195, col: 104, offset: 41769},
									expr: &notExpr{
										pos: position{line: 1195, col: 106, offset: 41771},
										expr: &ruleRefExpr{
											pos:  position{line: 1195, col: 107, offset: 41772},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 41968},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 41968},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1197, col: 5, offset: 41968},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1197, col: 11, offset: 41974},
										expr: &ruleRefExpr{
											pos:  position{line: 1197, col: 12, offset: 41975},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 30, offset: 41993},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 34, offset: 41997},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1197, col: 44, offset: 42007},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1197, col: 44, offset: 42007},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1197, col: 48, offset: 42011},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 77, offset: 42040},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1201, col: 1, offset: 42250},
			expr: &seqExpr{
				pos: position{line: 1201, col: 32, offset: 42281},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1201, col: 32, offset: 42281},
						expr: &ruleRefExpr{
							pos:  position{line: 1201, col: 33, offset: 42282},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1201, col: 39, offset: 42288},
						expr: &ruleRefExpr{
							pos:  position{line: 1201, col: 39, offset: 42288},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1203, col: 1, offset: 42319},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 31, offset: 42349},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1203, col: 31, offset: 42349},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1204, col: 11, offset: 42365},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1204, col: 11, offset: 42365},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1204, col: 19, offset: 42373},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 20, offset: 42374},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 42393},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 42424},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1207, col: 11, offset: 42448},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1207, col: 11, offset: 42448},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 11, offset: 42448},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1207, col: 18, offset: 42455},
								expr: &seqExpr{
									pos: position{line: 1207, col: 19, offset: 42456},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1207, col: 19, offset: 42456},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1207, col: 23, offset: 42460},
											expr: &litMatcher{
												pos:        position{line: 1207, col: 24, offset: 42461},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 42478},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 42500},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 42522},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 42547},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 42572},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 42599},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 42617},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 42639},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 42663},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 42681},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 42710},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 42743},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 42772},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1222, col: 1, offset: 42812},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 42857},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1223, col: 5, offset: 42857},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1224, col: 7, offset: 42955},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1224, col: 7, offset: 42955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 7, offset: 42955},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1224, col: 11, offset: 42959},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1228, col: 1, offset: 43126},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 43151},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 43151},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 43151},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 5, offset: 43151},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 18, offset: 43164},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 40, offset: 43186},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 45, offset: 43191},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 55, offset: 43201},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 84, offset: 43230},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 9, offset: 43389},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1231, col: 9, offset: 43389},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1231, col: 9, offset: 43389},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 22, offset: 43402},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 44, offset: 43424},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1231, col: 49, offset: 43429},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 59, offset: 43439},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 88, offset: 43468},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 9, offset: 43671},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1234, col: 9, offset: 43671},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1234, col: 9, offset: 43671},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 22, offset: 43684},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 44, offset: 43706},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 48, offset: 43710},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 58, offset: 43720},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1234, col: 87, offset: 43749},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1242, col: 1, offset: 43965},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 15, offset: 43979},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1242, col: 15, offset: 43979},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 39, offset: 44003},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1244, col: 1, offset: 44028},
			expr: &actionExpr{
				pos: position{line: 1244, col: 26, offset: 44053},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 26, offset: 44053},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1244, col: 26, offset: 44053},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1244, col: 32, offset: 44059},
								expr: &ruleRefExpr{
									pos:  position{line: 1244, col: 33, offset: 44060},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 51, offset: 44078},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 56, offset: 44083},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 66, offset: 44093},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 97, offset: 44124},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1248, col: 1, offset: 44262},
			expr: &seqExpr{
				pos: position{line: 1248, col: 34, offset: 44295},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 34, offset: 44295},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1248, col: 63, offset: 44324},
						expr: &seqExpr{
							pos: position{line: 1248, col: 64, offset: 44325},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1248, col: 64, offset: 44325},
									expr: &litMatcher{
										pos:        position{line: 1248, col: 66, offset: 44327},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1248, col: 73, offset: 44334},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1248, col: 73, offset: 44334},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1248, col: 81, offset: 44342},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1250, col: 1, offset: 44411},
			expr: &choiceExpr{
				pos: position{line: 1250, col: 33, offset: 44443},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 33, offset: 44443},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1251, col: 11, offset: 44459},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1251, col: 11, offset: 44459},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1251, col: 19, offset: 44467},
								expr: &ruleRefExpr{
									pos:  position{line: 1251, col: 20, offset: 44468},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 44487},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 44520},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 44544},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 44564},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 44586},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 44611},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 44636},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 44663},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 44681},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 44703},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 44727},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 44744},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 44773},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 44802},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1267, col: 1, offset: 44844},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 44891},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1268, col: 5, offset: 44891},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1269, col: 7, offset: 44991},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1269, col: 7, offset: 44991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 7, offset: 44991},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1269, col: 12, offset: 44996},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1273, col: 1, offset: 45165},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 26, offset: 45190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1273, col: 26, offset: 45190},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1273, col: 26, offset: 45190},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1273, col: 26, offset: 45190},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1273, col: 32, offset: 45196},
										expr: &ruleRefExpr{
											pos:  position{line: 1273, col: 33, offset: 45197},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1273, col: 52, offset: 45216},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1273, col: 52, offset: 45216},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1273, col: 56, offset: 45220},
											expr: &litMatcher{
												pos:        position{line: 1273, col: 57, offset: 45221},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 62, offset: 45226},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 72, offset: 45236},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 103, offset: 45267},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1275, col: 5, offset: 45459},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1275, col: 5, offset: 45459},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1275, col: 5, offset: 45459},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1275, col: 11, offset: 45465},
										expr: &ruleRefExpr{
											pos:  position{line: 1275, col: 12, offset: 45466},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1275, col: 30, offset: 45484},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1275, col: 34, offset: 45488},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1275, col: 44, offset: 45498},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1275, col: 44, offset: 45498},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1275, col: 48, offset: 45502},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1275, col: 79, offset: 45533},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1279, col: 1, offset: 45747},
			expr: &seqExpr{
				pos: position{line: 1279, col: 34, offset: 45780},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1279, col: 34, offset: 45780},
						expr: &ruleRefExpr{
							pos:  position{line: 1279, col: 35, offset: 45781},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1279, col: 41, offset: 45787},
						expr: &ruleRefExpr{
							pos:  position{line: 1279, col: 41, offset: 45787},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1281, col: 1, offset: 45820},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 33, offset: 45852},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1281, col: 33, offset: 45852},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1282, col: 11, offset: 45868},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1282, col: 11, offset: 45868},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1282, col: 19, offset: 45876},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 20, offset: 45877},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 11, offset: 45896},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 11, offset: 45929},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1285, col: 11, offset: 45953},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1285, col: 11, offset: 45953},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 11, offset: 45953},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1285, col: 18, offset: 45960},
								expr: &seqExpr{
									pos: position{line: 1285, col: 19, offset: 45961},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1285, col: 19, offset: 45961},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1285, col: 23, offset: 45965},
											expr: &litMatcher{
												pos:        position{line: 1285, col: 24, offset: 45966},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 11, offset: 45983},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 46003},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 46025},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 46050},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 46075},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 46102},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 46120},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 46142},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 46166},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 46184},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 46214},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 46247},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 46276},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1300, col: 1, offset: 46318},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 5, offset: 46365},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1301, col: 5, offset: 46365},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1302, col: 7, offset: 46465},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1302, col: 7, offset: 46465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1302, col: 7, offset: 46465},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1302, col: 11, offset: 46469},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1306, col: 1, offset: 46639},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 5, offset: 46666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 46666},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1307, col: 5, offset: 46666},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1307, col: 5, offset: 46666},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 18, offset: 46679},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 40, offset: 46701},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1307, col: 45, offset: 46706},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1307, col: 55, offset: 46716},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1307, col: 86, offset: 46747},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 9, offset: 46906},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1309, col: 9, offset: 46906},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 9, offset: 46906},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 22, offset: 46919},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 44, offset: 46941},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 49, offset: 46946},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 59, offset: 46956},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 90, offset: 46987},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1312, col: 9, offset: 47190},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1312, col: 9, offset: 47190},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1312, col: 9, offset: 47190},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1312, col: 22, offset: 47203},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1312, col: 44, offset: 47225},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1312, col: 48, offset: 47229},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1312, col: 58, offset: 47239},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1312, col: 89, offset: 47270},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1319, col: 1, offset: 47487},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 18, offset: 47504},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1319, col: 18, offset: 47504},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 45, offset: 47531},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1321, col: 1, offset: 47559},
			expr: &actionExpr{
				pos: position{line: 1321, col: 29, offset: 47587},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 29, offset: 47587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1321, col: 29, offset: 47587},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1321, col: 35, offset: 47593},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 36, offset: 47594},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 54, offset: 47612},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 59, offset: 47617},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 69, offset: 47627},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 103, offset: 47661},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1325, col: 1, offset: 47802},
			expr: &seqExpr{
				pos: position{line: 1325, col: 37, offset: 47838},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1325, col: 37, offset: 47838},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1325, col: 69, offset: 47870},
						expr: &seqExpr{
							pos: position{line: 1325, col: 70, offset: 47871},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1325, col: 70, offset: 47871},
									expr: &litMatcher{
										pos:        position{line: 1325, col: 72, offset: 47873},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1325, col: 79, offset: 47880},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1325, col: 79, offset: 47880},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1325, col: 87, offset: 47888},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1327, col: 1, offset: 47959},
			expr: &choiceExpr{
				pos: position{line: 1327, col: 36, offset: 47994},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1327, col: 36, offset: 47994},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1328, col: 11, offset: 48010},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1328, col: 11, offset: 48010},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1328, col: 19, offset: 48018},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 20, offset: 48019},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 48038},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 48056},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 48092},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 48116},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 48136},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 48158},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 48180},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 48205},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 48232},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 48254},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 48277},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 48293},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 48323},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 48352},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1344, col: 1, offset: 48397},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 48447},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1345, col: 5, offset: 48447},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1346, col: 7, offset: 48550},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1346, col: 7, offset: 48550},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 7, offset: 48550},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1346, col: 12, offset: 48555},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1350, col: 1, offset: 48727},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 29, offset: 48755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1350, col: 29, offset: 48755},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1350, col: 29, offset: 48755},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1350, col: 29, offset: 48755},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1350, col: 35, offset: 48761},
										expr: &ruleRefExpr{
											pos:  position{line: 1350, col: 36, offset: 48762},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1350, col: 55, offset: 48781},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1350, col: 55, offset: 48781},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1350, col: 59, offset: 48785},
											expr: &litMatcher{
												pos:        position{line: 1350, col: 60, offset: 48786},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1350, col: 65, offset: 48791},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 75, offset: 48801},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 109, offset: 48835},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 49030},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 49030},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1352, col: 5, offset: 49030},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1352, col: 11, offset: 49036},
										expr: &ruleRefExpr{
											pos:  position{line: 1352, col: 12, offset: 49037},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 30, offset: 49055},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 34, offset: 49059},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1352, col: 44, offset: 49069},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1352, col: 44, offset: 49069},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1352, col: 48, offset: 49073},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 82, offset: 49107},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1356, col: 1, offset: 49325},
			expr: &seqExpr{
				pos: position{line: 1356, col: 37, offset: 49361},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1356, col: 37, offset: 49361},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 38, offset: 49362},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1356, col: 44, offset: 49368},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 44, offset: 49368},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1358, col: 1, offset: 49404},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 37, offset: 49440},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 37, offset: 49440},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1359, col: 11, offset: 49456},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1359, col: 11, offset: 49456},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1359, col: 19, offset: 49464},
								expr: &ruleRefExpr{
									pos:  position{line: 1359, col: 20, offset: 49465},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 11, offset: 49484},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1361, col: 11, offset: 49520},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1362, col: 11, offset: 49544},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1362, col: 11, offset: 49544},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 11, offset: 49544},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1362, col: 18, offset: 49551},
								expr: &seqExpr{
									pos: position{line: 1362, col: 19, offset: 49552},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1362, col: 19, offset: 49552},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1362, col: 23, offset: 49556},
											expr: &litMatcher{
												pos:        position{line: 1362, col: 24, offset: 49557},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 11, offset: 49686},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 11, offset: 49706},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 49728},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 49750},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 49775},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1368, col: 11, offset: 49802},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1368, col: 11, offset: 49802},
								expr: &litMatcher{
									pos:        position{line: 1368, col: 12, offset: 49803},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1368, col: 16, offset: 49807},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 49825},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 49847},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 49871},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 49888},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 49918},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 49951},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 49980},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1377, col: 1, offset: 50025},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 50075},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1378, col: 5, offset: 50075},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1379, col: 7, offset: 50178},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1379, col: 7, offset: 50178},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1379, col: 7, offset: 50178},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1379, col: 11, offset: 50182},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1383, col: 1, offset: 50355},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 5, offset: 50385},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 50385},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1384, col: 5, offset: 50385},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1384, col: 5, offset: 50385},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 18, offset: 50398},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 40, offset: 50420},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1384, col: 45, offset: 50425},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1384, col: 55, offset: 50435},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1384, col: 89, offset: 50469},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1386, col: 9, offset: 50628},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1386, col: 9, offset: 50628},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1386, col: 9, offset: 50628},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1386, col: 22, offset: 50641},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1386, col: 44, offset: 50663},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1386, col: 49, offset: 50668},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1386, col: 59, offset: 50678},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1386, col: 93, offset: 50712},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1389, col: 9, offset: 50915},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1389, col: 9, offset: 50915},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1389, col: 9, offset: 50915},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 22, offset: 50928},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1389, col: 44, offset: 50950},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 48, offset: 50954},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 58, offset: 50964},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1389, col: 92, offset: 50998},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1397, col: 1, offset: 51214},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 15, offset: 51228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 15, offset: 51228},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 39, offset: 51252},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1399, col: 1, offset: 51277},
			expr: &actionExpr{
				pos: position{line: 1399, col: 26, offset: 51302},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 26, offset: 51302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 26, offset: 51302},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1399, col: 32, offset: 51308},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 33, offset: 51309},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1399, col: 51, offset: 51327},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1399, col: 56, offset: 51332},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1399, col: 66, offset: 51342},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1399, col: 97, offset: 51373},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1403, col: 1, offset: 51511},
			expr: &seqExpr{
				pos: position{line: 1403, col: 34, offset: 51544},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 34, offset: 51544},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1403, col: 63, offset: 51573},
						expr: &seqExpr{
							pos: position{line: 1403, col: 64, offset: 51574},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1403, col: 64, offset: 51574},
									expr: &litMatcher{
										pos:        position{line: 1403, col: 66, offset: 51576},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1403, col: 73, offset: 51583},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1403, col: 73, offset: 51583},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1403, col: 81, offset: 51591},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1405, col: 1, offset: 51660},
			expr: &choiceExpr{
				pos: position{line: 1405, col: 33, offset: 51692},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1405, col: 33, offset: 51692},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 51708},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1407, col: 11, offset: 51741},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1407, col: 11, offset: 51741},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1407, col: 19, offset: 51749},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 20, offset: 51750},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 51769},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 51793},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 11, offset: 51813},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 11, offset: 51835},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 11, offset: 51860},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 51885},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 51912},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 11, offset: 51930},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 11, offset: 51952},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 51975},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 11, offset: 51991},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 11, offset: 52020},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 11, offset: 52049},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1422, col: 1, offset: 52091},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 5, offset: 52138},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1423, col: 5, offset: 52138},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1424, col: 7, offset: 52238},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1424, col: 7, offset: 52238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1424, col: 7, offset: 52238},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 12, offset: 52243},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1428, col: 1, offset: 52412},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 26, offset: 52437},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1428, col: 26, offset: 52437},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1428, col: 26, offset: 52437},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1428, col: 26, offset: 52437},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1428, col: 32, offset: 52443},
										expr: &ruleRefExpr{
											pos:  position{line: 1428, col: 33, offset: 52444},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1428, col: 52, offset: 52463},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1428, col: 52, offset: 52463},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1428, col: 56, offset: 52467},
											expr: &litMatcher{
												pos:        position{line: 1428, col: 57, offset: 52468},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 62, offset: 52473},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 72, offset: 52483},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 103, offset: 52514},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 5, offset: 52706},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1430, col: 5, offset: 52706},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1430, col: 5, offset: 52706},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1430, col: 11, offset: 52712},
										expr: &ruleRefExpr{
											pos:  position{line: 1430, col: 12, offset: 52713},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 30, offset: 52731},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 34, offset: 52735},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1430, col: 44, offset: 52745},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1430, col: 44, offset: 52745},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1430, col: 48, offset: 52749},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 79, offset: 52780},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1434, col: 1, offset: 52993},
			expr: &seqExpr{
				pos: position{line: 1434, col: 34, offset: 53026},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1434, col: 34, offset: 53026},
						expr: &ruleRefExpr{
							pos:  position{line: 1434, col: 35, offset: 53027},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1434, col: 41, offset: 53033},
						expr: &ruleRefExpr{
							pos:  position{line: 1434, col: 41, offset: 53033},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1436, col: 1, offset: 53066},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 33, offset: 53098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1436, col: 33, offset: 53098},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 11, offset: 53114},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1438, col: 11, offset: 53147},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1438, col: 11, offset: 53147},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1438, col: 19, offset: 53155},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 20, offset: 53156},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 11, offset: 53175},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1440, col: 11, offset: 53199},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1440, col: 11, offset: 53199},
								expr: &ruleRefExpr{
									pos:  position{line: 1440, col: 11, offset: 53199},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1440, col: 18, offset: 53206},
								expr: &seqExpr{
									pos: position{line: 1440, col: 19, offset: 53207},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1440, col: 19, offset: 53207},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1440, col: 23, offset: 53211},
											expr: &litMatcher{
												pos:        position{line: 1440, col: 24, offset: 53212},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 11, offset: 53229},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1442, col: 11, offset: 53249},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 11, offset: 53271},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1444, col: 11, offset: 53296},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 53321},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 11, offset: 53348},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 53366},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 53388},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 53411},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 11, offset: 53427},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 11, offset: 53456},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 53489},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 11, offset: 53518},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1455, col: 1, offset: 53560},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 5, offset: 53607},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1456, col: 5, offset: 53607},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1457, col: 7, offset: 53705},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1457, col: 7, offset: 53705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1457, col: 7, offset: 53705},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1457, col: 11, offset: 53709},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1461, col: 1, offset: 53876},
			expr: &choiceExpr{
				pos: position{line: 1462, col: 5, offset: 53902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1462, col: 5, offset: 53902},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1462, col: 5, offset: 53902},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1462, col: 5, offset: 53902},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 18, offset: 53915},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 40, offset: 53937},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1462, col: 45, offset: 53942},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1462, col: 55, offset: 53952},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1462, col: 86, offset: 53983},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1464, col: 9, offset: 54142},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1464, col: 9, offset: 54142},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1464, col: 9, offset: 54142},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 22, offset: 54155},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 44, offset: 54177},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1464, col: 49, offset: 54182},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1464, col: 59, offset: 54192},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1464, col: 90, offset: 54223},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1467, col: 9, offset: 54426},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1467, col: 9, offset: 54426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1467, col: 9, offset: 54426},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 22, offset: 54439},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 44, offset: 54461},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 48, offset: 54465},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 58, offset: 54475},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1467, col: 89, offset: 54506},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1472, col: 1, offset: 54661},
			expr: &actionExpr{
				pos: position{line: 1472, col: 18, offset: 54678},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1472, col: 18, offset: 54678},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1472, col: 18, offset: 54678},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1472, col: 24, offset: 54684},
								expr: &ruleRefExpr{
									pos:  position{line: 1472, col: 25, offset: 54685},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1472, col: 43, offset: 54703},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1472, col: 47, offset: 54707},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 56, offset: 54716},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1472, col: 78, offset: 54738},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1476, col: 1, offset: 54838},
			expr: &choiceExpr{
				pos: position{line: 1476, col: 25, offset: 54862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1476, col: 25, offset: 54862},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1476, col: 38, offset: 54875},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1478, col: 1, offset: 54896},
			expr: &actionExpr{
				pos: position{line: 1478, col: 21, offset: 54916},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1478, col: 21, offset: 54916},
					expr: &charClassMatcher{
						pos:        position{line: 1478, col: 21, offset: 54916},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1482, col: 1, offset: 54997},
			expr: &actionExpr{
				pos: position{line: 1482, col: 25, offset: 55021},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1482, col: 25, offset: 55021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1482, col: 25, offset: 55021},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 38, offset: 55034},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1482, col: 60, offset: 55056},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 64, offset: 55060},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 73, offset: 55069},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1482, col: 95, offset: 55091},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1486, col: 1, offset: 55224},
			expr: &actionExpr{
				pos: position{line: 1486, col: 20, offset: 55243},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 20, offset: 55243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 20, offset: 55243},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1486, col: 26, offset: 55249},
								expr: &ruleRefExpr{
									pos:  position{line: 1486, col: 27, offset: 55250},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1486, col: 45, offset: 55268},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 49, offset: 55272},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 58, offset: 55281},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1486, col: 82, offset: 55305},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1490, col: 1, offset: 55407},
			expr: &choiceExpr{
				pos: position{line: 1490, col: 27, offset: 55433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1490, col: 27, offset: 55433},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1490, col: 40, offset: 55446},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1492, col: 1, offset: 55469},
			expr: &actionExpr{
				pos: position{line: 1492, col: 23, offset: 55491},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1492, col: 23, offset: 55491},
					expr: &charClassMatcher{
						pos:        position{line: 1492, col: 23, offset: 55491},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1496, col: 1, offset: 55572},
			expr: &actionExpr{
				pos: position{line: 1496, col: 27, offset: 55598},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 27, offset: 55598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1496, col: 27, offset: 55598},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 40, offset: 55611},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1496, col: 62, offset: 55633},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 66, offset: 55637},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 75, offset: 55646},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1496, col: 99, offset: 55670},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1503, col: 1, offset: 55919},
			expr: &choiceExpr{
				pos: position{line: 1503, col: 22, offset: 55940},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1503, col: 22, offset: 55940},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1503, col: 46, offset: 55964},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1503, col: 70, offset: 55988},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1505, col: 1, offset: 56008},
			expr: &litMatcher{
				pos:        position{line: 1505, col: 32, offset: 56039},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1507, col: 1, offset: 56046},
			expr: &actionExpr{
				pos: position{line: 1507, col: 26, offset: 56071},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 26, offset: 56071},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1507, col: 26, offset: 56071},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 54, offset: 56099},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 63, offset: 56108},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1507, col: 93, offset: 56138},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1507, col: 121, offset: 56166},
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 122, offset: 56167},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1511, col: 1, offset: 56276},
			expr: &choiceExpr{
				pos: position{line: 1511, col: 33, offset: 56308},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1511, col: 34, offset: 56309},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1511, col: 34, offset: 56309},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1511, col: 35, offset: 56310},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1511, col: 35, offset: 56310},
											expr: &ruleRefExpr{
												pos:  position{line: 1511, col: 36, offset: 56311},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 64, offset: 56339},
											expr: &ruleRefExpr{
												pos:  position{line: 1511, col: 65, offset: 56340},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1511, col: 71, offset: 56346},
											expr: &ruleRefExpr{
												pos:  position{line: 1511, col: 72, offset: 56347},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1511, col: 80, offset: 56355,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1511, col: 83, offset: 56358},
									expr: &seqExpr{
										pos: position{line: 1511, col: 84, offset: 56359},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1511, col: 84, offset: 56359},
												expr: &seqExpr{
													pos: position{line: 1511, col: 86, offset: 56361},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1511, col: 86, offset: 56361},
															expr: &ruleRefExpr{
																pos:  position{line: 1511, col: 86, offset: 56361},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1511, col: 93, offset: 56368},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1511, col: 122, offset: 56397},
												expr: &ruleRefExpr{
													pos:  position{line: 1511, col: 123, offset: 56398},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1511, col: 151, offset: 56426},
												expr: &ruleRefExpr{
													pos:  position{line: 1511, col: 152, offset: 56427},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1511, col: 160, offset: 56435,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1513, col: 7, offset: 56579},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1513, col: 8, offset: 56580},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1513, col: 8, offset: 56580},
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 9, offset: 56581},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1513, col: 15, offset: 56587},
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 16, offset: 56588},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1513, col: 24, offset: 56596},
									expr: &ruleRefExpr{
										pos:  position{line: 1513, col: 25, offset: 56597},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1513, col: 53, offset: 56625,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1517, col: 1, offset: 56711},
			expr: &litMatcher{
				pos:        position{line: 1517, col: 32, offset: 56742},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1519, col: 1, offset: 56751},
			expr: &actionExpr{
				pos: position{line: 1519, col: 26, offset: 56776},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 26, offset: 56776},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1519, col: 26, offset: 56776},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 54, offset: 56804},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 63, offset: 56813},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1519, col: 93, offset: 56843},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1519, col: 121, offset: 56871},
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 122, offset: 56872},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1523, col: 1, offset: 56981},
			expr: &choiceExpr{
				pos: position{line: 1523, col: 33, offset: 57013},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1523, col: 34, offset: 57014},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1523, col: 34, offset: 57014},
							expr: &seqExpr{
								pos: position{line: 1523, col: 35, offset: 57015},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1523, col: 35, offset: 57015},
										expr: &ruleRefExpr{
											pos:  position{line: 1523, col: 36, offset: 57016},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1523, col: 64, offset: 57044,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1525, col: 7, offset: 57211},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1525, col: 7, offset: 57211},
							expr: &seqExpr{
								pos: position{line: 1525, col: 8, offset: 57212},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1525, col: 8, offset: 57212},
										expr: &ruleRefExpr{
											pos:  position{line: 1525, col: 9, offset: 57213},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1525, col: 15, offset: 57219},
										expr: &ruleRefExpr{
											pos:  position{line: 1525, col: 16, offset: 57220},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1525, col: 24, offset: 57228},
										expr: &ruleRefExpr{
											pos:  position{line: 1525, col: 25, offset: 57229},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1525, col: 53, offset: 57257,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1529, col: 1, offset: 57344},
			expr: &choiceExpr{
				pos: position{line: 1529, col: 21, offset: 57364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1529, col: 21, offset: 57364},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1529, col: 21, offset: 57364},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1529, col: 21, offset: 57364},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1529, col: 30, offset: 57373},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1529, col: 38, offset: 57381},
										expr: &ruleRefExpr{
											pos:  position{line: 1529, col: 39, offset: 57382},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1529, col: 67, offset: 57410},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1531, col: 5, offset: 57508},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1531, col: 5, offset: 57508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1531, col: 5, offset: 57508},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1531, col: 15, offset: 57518},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1531, col: 23, offset: 57526},
										expr: &choiceExpr{
											pos: position{line: 1531, col: 24, offset: 57527},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1531, col: 24, offset: 57527},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1531, col: 37, offset: 57540},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1531, col: 65, offset: 57568},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1535, col: 1, offset: 57668},
			expr: &actionExpr{
				pos: position{line: 1535, col: 30, offset: 57697},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1535, col: 30, offset: 57697},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1542, col: 1, offset: 57877},
			expr: &choiceExpr{
				pos: position{line: 1542, col: 19, offset: 57895},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1542, col: 19, offset: 57895},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1542, col: 44, offset: 57920},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1544, col: 1, offset: 57947},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 27, offset: 57973},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1544, col: 27, offset: 57973},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1544, col: 27, offset: 57973},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1544, col: 27, offset: 57973},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 32, offset: 57978},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 36, offset: 57982},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1544, col: 40, offset: 57986},
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 40, offset: 57986},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1544, col: 47, offset: 57993},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 51, offset: 57997},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 58, offset: 58004},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1544, col: 79, offset: 58025},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1546, col: 5, offset: 58110},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1546, col: 5, offset: 58110},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1546, col: 5, offset: 58110},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1546, col: 10, offset: 58115},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1546, col: 14, offset: 58119},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1546, col: 18, offset: 58123},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1550, col: 1, offset: 58199},
			expr: &actionExpr{
				pos: position{line: 1550, col: 27, offset: 58225},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 27, offset: 58225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1550, col: 27, offset: 58225},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 35, offset: 58233},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 40, offset: 58238},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1550, col: 54, offset: 58252},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 72, offset: 58270},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1554, col: 1, offset: 58397},
			expr: &ruleRefExpr{
				pos:  position{line: 1554, col: 24, offset: 58420},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1559, col: 1, offset: 58547},
			expr: &choiceExpr{
				pos: position{line: 1559, col: 9, offset: 58555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1559, col: 9, offset: 58555},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1559, col: 24, offset: 58570},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1562, col: 1, offset: 58654},
			expr: &actionExpr{
				pos: position{line: 1562, col: 17, offset: 58670},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 17, offset: 58670},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1562, col: 17, offset: 58670},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 25, offset: 58678},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 30, offset: 58683},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 40, offset: 58693},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 58, offset: 58711},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1566, col: 1, offset: 58826},
			expr: &actionExpr{
				pos: position{line: 1566, col: 17, offset: 58842},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 17, offset: 58842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1566, col: 17, offset: 58842},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1566, col: 22, offset: 58847},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1566, col: 42, offset: 58867},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1566, col: 59, offset: 58884},
								expr: &ruleRefExpr{
									pos:  position{line: 1566, col: 60, offset: 58885},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1570, col: 1, offset: 58982},
			expr: &actionExpr{
				pos: position{line: 1570, col: 19, offset: 59000},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1570, col: 19, offset: 59000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1570, col: 19, offset: 59000},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 23, offset: 59004},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1570, col: 33, offset: 59014},
								expr: &ruleRefExpr{
									pos:  position{line: 1570, col: 34, offset: 59015},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1571, col: 5, offset: 59048},
							expr: &ruleRefExpr{
								pos:  position{line: 1571, col: 5, offset: 59048},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1571, col: 12, offset: 59055},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1571, col: 23, offset: 59066},
								expr: &ruleRefExpr{
									pos:  position{line: 1571, col: 24, offset: 59067},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1571, col: 43, offset: 59086},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1575, col: 1, offset: 59207},
			expr: &actionExpr{
				pos: position{line: 1575, col: 30, offset: 59236},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1575, col: 30, offset: 59236},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1577, col: 5, offset: 59289},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1577, col: 6, offset: 59290},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1577, col: 6, offset: 59290},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1577, col: 6, offset: 59290},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1577, col: 11, offset: 59295},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1577, col: 20, offset: 59304},
												expr: &choiceExpr{
													pos: position{line: 1577, col: 21, offset: 59305},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1577, col: 21, offset: 59305},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1577, col: 36, offset: 59320},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1577, col: 49, offset: 59333},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1577, col: 71, offset: 59355},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1577, col: 76, offset: 59360},
											expr: &notExpr{
												pos: position{line: 1577, col: 78, offset: 59362},
												expr: &litMatcher{
													pos:        position{line: 1577, col: 79, offset: 59363},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1577, col: 84, offset: 59368},
											expr: &litMatcher{
												pos:        position{line: 1577, col: 84, offset: 59368},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1581, col: 6, offset: 59499},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1581, col: 6, offset: 59499},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1581, col: 6, offset: 59499},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1581, col: 15, offset: 59508},
												expr: &choiceExpr{
													pos: position{line: 1581, col: 16, offset: 59509},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1581, col: 16, offset: 59509},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1581, col: 31, offset: 59524},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1581, col: 44, offset: 59537},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1581, col: 68, offset: 59561},
											expr: &notExpr{
												pos: position{line: 1581, col: 70, offset: 59563},
												expr: &litMatcher{
													pos:        position{line: 1581, col: 71, offset: 59564},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1581, col: 76, offset: 59569},
											expr: &litMatcher{
												pos:        position{line: 1581, col: 76, offset: 59569},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1587, col: 1, offset: 59689},
			expr: &actionExpr{
				pos: position{line: 1587, col: 18, offset: 59706},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1587, col: 18, offset: 59706},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1591, col: 1, offset: 59796},
			expr: &actionExpr{
				pos: position{line: 1591, col: 24, offset: 59819},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1591, col: 24, offset: 59819},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1595, col: 1, offset: 59916},
			expr: &actionExpr{
				pos: position{line: 1595, col: 26, offset: 59941},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1595, col: 26, offset: 59941},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1600, col: 1, offset: 60102},
			expr: &actionExpr{
				pos: position{line: 1601, col: 5, offset: 60122},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 5, offset: 60122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1601, col: 5, offset: 60122},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1601, col: 14, offset: 60131},
								expr: &choiceExpr{
									pos: position{line: 1601, col: 15, offset: 60132},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1601, col: 15, offset: 60132},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1602, col: 11, offset: 60148},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1603, col: 11, offset: 60166},
											expr: &ruleRefExpr{
												pos:  position{line: 1603, col: 11, offset: 60166},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1604, col: 11, offset: 60185},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1605, col: 11, offset: 60210},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1606, col: 11, offset: 60233},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1607, col: 11, offset: 60262},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1608, col: 11, offset: 60281},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1608, col: 21, offset: 60291},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1612, col: 1, offset: 60365},
			expr: &choiceExpr{
				pos: position{line: 1612, col: 17, offset: 60381},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1612, col: 17, offset: 60381},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 40, offset: 60404},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1615, col: 1, offset: 60535},
			expr: &actionExpr{
				pos: position{line: 1615, col: 25, offset: 60559},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 25, offset: 60559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1615, col: 25, offset: 60559},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 33, offset: 60567},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1615, col: 38, offset: 60572},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1615, col: 38, offset: 60572},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1615, col: 57, offset: 60591},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 79, offset: 60613},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1615, col: 97, offset: 60631},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1619, col: 1, offset: 60746},
			expr: &actionExpr{
				pos: position{line: 1619, col: 25, offset: 60770},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 25, offset: 60770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1619, col: 25, offset: 60770},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1619, col: 30, offset: 60775},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1619, col: 48, offset: 60793},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1619, col: 65, offset: 60810},
								expr: &ruleRefExpr{
									pos:  position{line: 1619, col: 66, offset: 60811},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1626, col: 1, offset: 61013},
			expr: &actionExpr{
				pos: position{line: 1626, col: 15, offset: 61027},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 15, offset: 61027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1626, col: 15, offset: 61027},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1626, col: 26, offset: 61038},
								expr: &ruleRefExpr{
									pos:  position{line: 1626, col: 27, offset: 61039},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1626, col: 45, offset: 61057},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 55, offset: 61067},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 61, offset: 61073},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1626, col: 71, offset: 61083},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 84, offset: 61096},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1626, col: 102, offset: 61114},
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 102, offset: 61114},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1626, col: 109, offset: 61121},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1630, col: 1, offset: 61232},
			expr: &actionExpr{
				pos: position{line: 1630, col: 16, offset: 61247},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 16, offset: 61247},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1630, col: 16, offset: 61247},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1630, col: 25, offset: 61256},
							expr: &litMatcher{
								pos:        position{line: 1630, col: 26, offset: 61257},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 30, offset: 61261},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 36, offset: 61267},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 46, offset: 61277},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 59, offset: 61290},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1634, col: 1, offset: 61404},
			expr: &actionExpr{
				pos: position{line: 1634, col: 21, offset: 61424},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1634, col: 21, offset: 61424},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1634, col: 21, offset: 61424},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 25, offset: 61428},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 29, offset: 61432},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 44, offset: 61447},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 46, offset: 61449},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 57, offset: 61460},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 59, offset: 61462},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1634, col: 71, offset: 61474},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1634, col: 74, offset: 61477},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1634, col: 85, offset: 61488},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1638, col: 1, offset: 61554},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 20, offset: 61573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1638, col: 20, offset: 61573},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 36, offset: 61589},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 51, offset: 61604},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1640, col: 1, offset: 61617},
			expr: &actionExpr{
				pos: position{line: 1640, col: 18, offset: 61634},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1640, col: 18, offset: 61634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1640, col: 18, offset: 61634},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 22, offset: 61638},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1640, col: 29, offset: 61645},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1640, col: 29, offset: 61645},
										expr: &ruleRefExpr{
											pos:  position{line: 1640, col: 29, offset: 61645},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1640, col: 43, offset: 61659},
										expr: &ruleRefExpr{
											pos:  position{line: 1640, col: 43, offset: 61659},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1640, col: 58, offset: 61674},
										expr: &ruleRefExpr{
											pos:  position{line: 1640, col: 58, offset: 61674},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1640, col: 74, offset: 61690},
										expr: &ruleRefExpr{
											pos:  position{line: 1640, col: 74, offset: 61690},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1640, col: 91, offset: 61707},
										expr: &ruleRefExpr{
											pos:  position{line: 1640, col: 91, offset: 61707},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1640, col: 103, offset: 61719},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1640, col: 107, offset: 61723},
							expr: &ruleRefExpr{
								pos:  position{line: 1640, col: 107, offset: 61723},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1640, col: 114, offset: 61730},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1644, col: 1, offset: 61788},
			expr: &actionExpr{
				pos: position{line: 1644, col: 19, offset: 61806},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 19, offset: 61806},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1644, col: 25, offset: 61812},
						expr: &ruleRefExpr{
							pos:  position{line: 1644, col: 25, offset: 61812},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1648, col: 1, offset: 61895},
			expr: &actionExpr{
				pos: position{line: 1648, col: 15, offset: 61909},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1648, col: 15, offset: 61909},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1648, col: 15, offset: 61909},
							expr: &litMatcher{
								pos:        position{line: 1648, col: 15, offset: 61909},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1648, col: 20, offset: 61914},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1648, col: 26, offset: 61920},
								expr: &ruleRefExpr{
									pos:  position{line: 1648, col: 26, offset: 61920},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1652, col: 1, offset: 62000},
			expr: &actionExpr{
				pos: position{line: 1652, col: 16, offset: 62015},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1652, col: 16, offset: 62015},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1652, col: 16, offset: 62015},
							expr: &litMatcher{
								pos:        position{line: 1652, col: 16, offset: 62015},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1652, col: 21, offset: 62020},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1652, col: 27, offset: 62026},
								expr: &ruleRefExpr{
									pos:  position{line: 1652, col: 27, offset: 62026},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1656, col: 1, offset: 62112},
			expr: &actionExpr{
				pos: position{line: 1656, col: 17, offset: 62128},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1656, col: 17, offset: 62128},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1656, col: 17, offset: 62128},
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 17, offset: 62128},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 24, offset: 62135},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 30, offset: 62141},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1656, col: 46, offset: 62157},
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 46, offset: 62157},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1660, col: 1, offset: 62246},
			expr: &actionExpr{
				pos: position{line: 1660, col: 19, offset: 62264},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 19, offset: 62264},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1660, col: 19, offset: 62264},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 19, offset: 62264},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1660, col: 26, offset: 62271},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1660, col: 30, offset: 62275},
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 30, offset: 62275},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 37, offset: 62282},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1660, col: 43, offset: 62288},
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 43, offset: 62288},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1667, col: 1, offset: 62439},
			expr: &actionExpr{
				pos: position{line: 1667, col: 20, offset: 62458},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1667, col: 20, offset: 62458},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1667, col: 20, offset: 62458},
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 20, offset: 62458},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1667, col: 27, offset: 62465},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1667, col: 31, offset: 62469},
							expr: &ruleRefExpr{
								pos:  position{line: 1667, col: 31, offset: 62469},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1667, col: 38, offset: 62476},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1667, col: 44, offset: 62482},
								expr: &ruleRefExpr{
									pos:  position{line: 1667, col: 44, offset: 62482},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1678, col: 1, offset: 62836},
			expr: &actionExpr{
				pos: position{line: 1678, col: 15, offset: 62850},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1678, col: 15, offset: 62850},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1678, col: 15, offset: 62850},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 23, offset: 62858},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1678, col: 29, offset: 62864},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1678, col: 29, offset: 62864},
									expr: &charClassMatcher{
										pos:        position{line: 1678, col: 29, offset: 62864},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 73, offset: 62908},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 80, offset: 62915},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1682, col: 1, offset: 63001},
			expr: &actionExpr{
				pos: position{line: 1682, col: 14, offset: 63014},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1682, col: 14, offset: 63014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1682, col: 14, offset: 63014},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 18, offset: 63018},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1682, col: 23, offset: 63023},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 32, offset: 63032},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1682, col: 35, offset: 63035},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1682, col: 46, offset: 63046},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1686, col: 1, offset: 63107},
			expr: &actionExpr{
				pos: position{line: 1686, col: 13, offset: 63119},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1686, col: 13, offset: 63119},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1686, col: 19, offset: 63125},
						expr: &ruleRefExpr{
							pos:  position{line: 1686, col: 19, offset: 63125},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1693, col: 1, offset: 63408},
			expr: &choiceExpr{
				pos: position{line: 1693, col: 19, offset: 63426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1693, col: 19, offset: 63426},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1693, col: 19, offset: 63426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1693, col: 19, offset: 63426},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1693, col: 32, offset: 63439},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1693, col: 41, offset: 63448},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1693, col: 58, offset: 63465},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1695, col: 5, offset: 63535},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1695, col: 5, offset: 63535},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1695, col: 5, offset: 63535},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1695, col: 17, offset: 63547},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1695, col: 22, offset: 63552},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1695, col: 35, offset: 63565},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1695, col: 39, offset: 63569},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1695, col: 47, offset: 63577},
										expr: &ruleRefExpr{
											pos:  position{line: 1695, col: 48, offset: 63578},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1695, col: 66, offset: 63596},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1699, col: 1, offset: 63661},
			expr: &ruleRefExpr{
				pos:  position{line: 1699, col: 16, offset: 63676},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1701, col: 1, offset: 63689},
			expr: &actionExpr{
				pos: position{line: 1701, col: 20, offset: 63708},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1701, col: 20, offset: 63708},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1701, col: 29, offset: 63717},
						expr: &seqExpr{
							pos: position{line: 1701, col: 30, offset: 63718},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1701, col: 30, offset: 63718},
									expr: &litMatcher{
										pos:        position{line: 1701, col: 31, offset: 63719},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1701, col: 35, offset: 63723},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1708, col: 1, offset: 64054},
			expr: &actionExpr{
				pos: position{line: 1708, col: 19, offset: 64072},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1708, col: 19, offset: 64072},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1708, col: 19, offset: 64072},
							expr: &ruleRefExpr{
								pos:  position{line: 1708, col: 20, offset: 64073},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 5, offset: 64162},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1709, col: 12, offset: 64169},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1709, col: 12, offset: 64169},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1710, col: 11, offset: 64193},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1711, col: 11, offset: 64218},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1712, col: 11, offset: 64243},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1713, col: 11, offset: 64265},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1714, col: 11, offset: 64289},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1715, col: 11, offset: 64318},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1716, col: 11, offset: 64346},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1717, col: 11, offset: 64363},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1721, col: 1, offset: 64408},
			expr: &choiceExpr{
				pos: position{line: 1721, col: 19, offset: 64426},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1721, col: 19, offset: 64426},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1721, col: 19, offset: 64426},
								expr: &ruleRefExpr{
									pos:  position{line: 1721, col: 21, offset: 64428},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1721, col: 31, offset: 64438},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1722, col: 19, offset: 64510},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 19, offset: 64551},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 19, offset: 64593},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1725, col: 19, offset: 64635},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 19, offset: 64677},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1727, col: 19, offset: 64716},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1728, col: 19, offset: 64757},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1730, col: 1, offset: 64786},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 26, offset: 64811},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1730, col: 26, offset: 64811},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1730, col: 42, offset: 64827},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1732, col: 1, offset: 64838},
			expr: &actionExpr{
				pos: position{line: 1732, col: 12, offset: 64849},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1732, col: 12, offset: 64849},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1732, col: 12, offset: 64849},
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 13, offset: 64850},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1732, col: 17, offset: 64854},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1732, col: 26, offset: 64863},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1732, col: 42, offset: 64879},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1736, col: 1, offset: 64963},
			expr: &actionExpr{
				pos: position{line: 1736, col: 19, offset: 64981},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1736, col: 19, offset: 64981},
					expr: &charClassMatcher{
						pos:        position{line: 1736, col: 19, offset: 64981},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1740, col: 1, offset: 65032},
			expr: &ruleRefExpr{
				pos:  position{line: 1740, col: 20, offset: 65051},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1742, col: 1, offset: 65067},
			expr: &actionExpr{
				pos: position{line: 1742, col: 17, offset: 65083},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1742, col: 17, offset: 65083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1742, col: 17, offset: 65083},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1742, col: 26, offset: 65092},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1742, col: 47, offset: 65113},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1742, col: 56, offset: 65122},
								expr: &ruleRefExpr{
									pos:  position{line: 1742, col: 57, offset: 65123},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1742, col: 68, offset: 65134},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1746, col: 1, offset: 65208},
			expr: &actionExpr{
				pos: position{line: 1746, col: 24, offset: 65231},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1746, col: 24, offset: 65231},
					expr: &seqExpr{
						pos: position{line: 1746, col: 25, offset: 65232},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1746, col: 25, offset: 65232},
								expr: &ruleRefExpr{
									pos:  position{line: 1746, col: 26, offset: 65233},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1746, col: 36, offset: 65243},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1746, col: 36, offset: 65243},
										expr: &ruleRefExpr{
											pos:  position{line: 1746, col: 36, offset: 65243},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1746, col: 45, offset: 65252},
										expr: &charClassMatcher{
											pos:        position{line: 1746, col: 45, offset: 65252},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1750, col: 1, offset: 65306},
			expr: &oneOrMoreExpr{
				pos: position{line: 1750, col: 13, offset: 65318},
				expr: &ruleRefExpr{
					pos:  position{line: 1750, col: 13, offset: 65318},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1752, col: 1, offset: 65330},
			expr: &actionExpr{
				pos: position{line: 1752, col: 12, offset: 65341},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1752, col: 12, offset: 65341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1752, col: 12, offset: 65341},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1752, col: 16, offset: 65345},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1752, col: 21, offset: 65350},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1752, col: 21, offset: 65350},
									expr: &charClassMatcher{
										pos:        position{line: 1752, col: 21, offset: 65350},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1752, col: 69, offset: 65398},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1752, col: 73, offset: 65402},
							expr: &ruleRefExpr{
								pos:  position{line: 1752, col: 73, offset: 65402},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1752, col: 80, offset: 65409},
							expr: &choiceExpr{
								pos: position{line: 1752, col: 82, offset: 65411},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1752, col: 82, offset: 65411},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 88, offset: 65417},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1756, col: 1, offset: 65474},
			expr: &actionExpr{
				pos: position{line: 1756, col: 20, offset: 65493},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1756, col: 20, offset: 65493},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1756, col: 20, offset: 65493},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1756, col: 25, offset: 65498},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1756, col: 48, offset: 65521},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1756, col: 61, offset: 65534},
								expr: &ruleRefExpr{
									pos:  position{line: 1756, col: 61, offset: 65534},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1760, col: 1, offset: 65635},
			expr: &actionExpr{
				pos: position{line: 1760, col: 26, offset: 65660},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1760, col: 26, offset: 65660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1760, col: 26, offset: 65660},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1760, col: 30, offset: 65664},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1760, col: 35, offset: 65669},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1760, col: 35, offset: 65669},
									expr: &charClassMatcher{
										pos:        position{line: 1760, col: 35, offset: 65669},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1760, col: 83, offset: 65717},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1760, col: 87, offset: 65721},
							expr: &ruleRefExpr{
								pos:  position{line: 1760, col: 87, offset: 65721},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1767, col: 1, offset: 65955},
			expr: &seqExpr{
				pos: position{line: 1767, col: 25, offset: 65979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1767, col: 25, offset: 65979},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1767, col: 31, offset: 65985},
						expr: &ruleRefExpr{
							pos:  position{line: 1767, col: 31, offset: 65985},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 38, offset: 65992},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1769, col: 1, offset: 66054},
			expr: &seqExpr{
				pos: position{line: 1769, col: 30, offset: 66083},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1769, col: 30, offset: 66083},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1769, col: 36, offset: 66089},
						expr: &ruleRefExpr{
							pos:  position{line: 1769, col: 36, offset: 66089},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 43, offset: 66096},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1771, col: 1, offset: 66103},
			expr: &choiceExpr{
				pos: position{line: 1771, col: 28, offset: 66130},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1771, col: 29, offset: 66131},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1771, col: 29, offset: 66131},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1771, col: 35, offset: 66137},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 35, offset: 66137},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1771, col: 42, offset: 66144},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 49, offset: 66151},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1773, col: 1, offset: 66158},
			expr: &actionExpr{
				pos: position{line: 1773, col: 16, offset: 66173},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 16, offset: 66173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1773, col: 16, offset: 66173},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1773, col: 27, offset: 66184},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 28, offset: 66185},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 41, offset: 66198},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 67, offset: 66224},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1773, col: 76, offset: 66233},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 99, offset: 66256},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1777, col: 1, offset: 66375},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1777, col: 26, offset: 66400},
				expr: &actionExpr{
					pos: position{line: 1777, col: 27, offset: 66401},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1777, col: 27, offset: 66401},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1777, col: 27, offset: 66401},
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 28, offset: 66402},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1777, col: 52, offset: 66426},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1777, col: 58, offset: 66432},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1784, col: 1, offset: 66779},
			expr: &seqExpr{
				pos: position{line: 1784, col: 26, offset: 66804},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1784, col: 26, offset: 66804},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1784, col: 33, offset: 66811},
						expr: &ruleRefExpr{
							pos:  position{line: 1784, col: 33, offset: 66811},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1784, col: 40, offset: 66818},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1786, col: 1, offset: 66825},
			expr: &seqExpr{
				pos: position{line: 1786, col: 31, offset: 66855},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1786, col: 31, offset: 66855},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1786, col: 38, offset: 66862},
						expr: &ruleRefExpr{
							pos:  position{line: 1786, col: 38, offset: 66862},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1786, col: 45, offset: 66869},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1788, col: 1, offset: 66876},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 29, offset: 66904},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1788, col: 30, offset: 66905},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1788, col: 30, offset: 66905},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1788, col: 37, offset: 66912},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 37, offset: 66912},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1788, col: 44, offset: 66919},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1788, col: 51, offset: 66926},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1790, col: 1, offset: 66933},
			expr: &actionExpr{
				pos: position{line: 1790, col: 17, offset: 66949},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1790, col: 17, offset: 66949},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1790, col: 17, offset: 66949},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1790, col: 28, offset: 66960},
								expr: &ruleRefExpr{
									pos:  position{line: 1790, col: 29, offset: 66961},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 42, offset: 66974},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 69, offset: 67001},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1790, col: 78, offset: 67010},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1790, col: 102, offset: 67034},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1794, col: 1, offset: 67155},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1794, col: 27, offset: 67181},
				expr: &actionExpr{
					pos: position{line: 1794, col: 28, offset: 67182},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1794, col: 28, offset: 67182},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1794, col: 28, offset: 67182},
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 29, offset: 67183},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1794, col: 54, offset: 67208},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 60, offset: 67214},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1801, col: 1, offset: 67561},
			expr: &seqExpr{
				pos: position{line: 1801, col: 26, offset: 67586},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1801, col: 26, offset: 67586},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1801, col: 33, offset: 67593},
						expr: &ruleRefExpr{
							pos:  position{line: 1801, col: 33, offset: 67593},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 40, offset: 67600},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1803, col: 1, offset: 67607},
			expr: &seqExpr{
				pos: position{line: 1803, col: 31, offset: 67637},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1803, col: 31, offset: 67637},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1803, col: 38, offset: 67644},
						expr: &ruleRefExpr{
							pos:  position{line: 1803, col: 38, offset: 67644},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1803, col: 45, offset: 67651},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1805, col: 1, offset: 67658},
			expr: &choiceExpr{
				pos: position{line: 1805, col: 29, offset: 67686},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1805, col: 30, offset: 67687},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1805, col: 30, offset: 67687},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1805, col: 37, offset: 67694},
								expr: &ruleRefExpr{
									pos:  position{line: 1805, col: 37, offset: 67694},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1805, col: 44, offset: 67701},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1805, col: 51, offset: 67708},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1807, col: 1, offset: 67715},
			expr: &actionExpr{
				pos: position{line: 1807, col: 17, offset: 67731},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1807, col: 17, offset: 67731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1807, col: 17, offset: 67731},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1807, col: 28, offset: 67742},
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 29, offset: 67743},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 42, offset: 67756},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1807, col: 69, offset: 67783},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1807, col: 78, offset: 67792},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1807, col: 102, offset: 67816},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1811, col: 1, offset: 67937},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1811, col: 27, offset: 67963},
				expr: &actionExpr{
					pos: position{line: 1811, col: 28, offset: 67964},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1811, col: 28, offset: 67964},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1811, col: 28, offset: 67964},
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 29, offset: 67965},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1811, col: 54, offset: 67990},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1811, col: 60, offset: 67996},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1818, col: 1, offset: 68341},
			expr: &seqExpr{
				pos: position{line: 1818, col: 24, offset: 68364},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1818, col: 24, offset: 68364},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1818, col: 31, offset: 68371},
						expr: &ruleRefExpr{
							pos:  position{line: 1818, col: 31, offset: 68371},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 38, offset: 68378},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1820, col: 1, offset: 68410},
			expr: &seqExpr{
				pos: position{line: 1820, col: 29, offset: 68438},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1820, col: 29, offset: 68438},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1820, col: 36, offset: 68445},
						expr: &ruleRefExpr{
							pos:  position{line: 1820, col: 36, offset: 68445},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 43, offset: 68452},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1822, col: 1, offset: 68484},
			expr: &choiceExpr{
				pos: position{line: 1822, col: 27, offset: 68510},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1822, col: 28, offset: 68511},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1822, col: 28, offset: 68511},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1822, col: 35, offset: 68518},
								expr: &ruleRefExpr{
									pos:  position{line: 1822, col: 35, offset: 68518},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1822, col: 42, offset: 68525},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1822, col: 49, offset: 68532},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1824, col: 1, offset: 68564},
			expr: &actionExpr{
				pos: position{line: 1824, col: 15, offset: 68578},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 15, offset: 68578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1824, col: 15, offset: 68578},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1824, col: 26, offset: 68589},
								expr: &ruleRefExpr{
									pos:  position{line: 1824, col: 27, offset: 68590},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1824, col: 40, offset: 68603},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 65, offset: 68628},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1824, col: 74, offset: 68637},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1824, col: 101, offset: 68664},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1828, col: 1, offset: 68781},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1828, col: 30, offset: 68810},
				expr: &actionExpr{
					pos: position{line: 1828, col: 31, offset: 68811},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1828, col: 31, offset: 68811},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1828, col: 31, offset: 68811},
								expr: &ruleRefExpr{
									pos:  position{line: 1828, col: 32, offset: 68812},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1828, col: 55, offset: 68835},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1828, col: 61, offset: 68841},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1835, col: 1, offset: 69188},
			expr: &seqExpr{
				pos: position{line: 1835, col: 26, offset: 69213},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1835, col: 26, offset: 69213},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1835, col: 33, offset: 69220},
						expr: &ruleRefExpr{
							pos:  position{line: 1835, col: 33, offset: 69220},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 40, offset: 69227},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1837, col: 1, offset: 69234},
			expr: &seqExpr{
				pos: position{line: 1837, col: 31, offset: 69264},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1837, col: 31, offset: 69264},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1837, col: 38, offset: 69271},
						expr: &ruleRefExpr{
							pos:  position{line: 1837, col: 38, offset: 69271},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 45, offset: 69278},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1839, col: 1, offset: 69285},
			expr: &choiceExpr{
				pos: position{line: 1839, col: 29, offset: 69313},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1839, col: 30, offset: 69314},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1839, col: 30, offset: 69314},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1839, col: 37, offset: 69321},
								expr: &ruleRefExpr{
									pos:  position{line: 1839, col: 37, offset: 69321},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1839, col: 44, offset: 69328},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1839, col: 51, offset: 69335},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1841, col: 1, offset: 69342},
			expr: &actionExpr{
				pos: position{line: 1841, col: 17, offset: 69358},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 17, offset: 69358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1841, col: 17, offset: 69358},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1841, col: 28, offset: 69369},
								expr: &ruleRefExpr{
									pos:  position{line: 1841, col: 29, offset: 69370},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 42, offset: 69383},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 69, offset: 69410},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1841, col: 78, offset: 69419},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1841, col: 102, offset: 69443},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1845, col: 1, offset: 69564},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1845, col: 27, offset: 69590},
				expr: &actionExpr{
					pos: position{line: 1845, col: 28, offset: 69591},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1845, col: 28, offset: 69591},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1845, col: 28, offset: 69591},
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 29, offset: 69592},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1845, col: 54, offset: 69617},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1845, col: 60, offset: 69623},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1852, col: 1, offset: 69974},
			expr: &seqExpr{
				pos: position{line: 1852, col: 30, offset: 70003},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1852, col: 30, offset: 70003},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1852, col: 37, offset: 70010},
						expr: &ruleRefExpr{
							pos:  position{line: 1852, col: 37, offset: 70010},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1852, col: 44, offset: 70017},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1854, col: 1, offset: 70024},
			expr: &seqExpr{
				pos: position{line: 1854, col: 35, offset: 70058},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1854, col: 35, offset: 70058},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1854, col: 42, offset: 70065},
						expr: &ruleRefExpr{
							pos:  position{line: 1854, col: 42, offset: 70065},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 49, offset: 70072},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1856, col: 1, offset: 70079},
			expr: &choiceExpr{
				pos: position{line: 1856, col: 33, offset: 70111},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1856, col: 34, offset: 70112},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1856, col: 34, offset: 70112},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1856, col: 41, offset: 70119},
								expr: &ruleRefExpr{
									pos:  position{line: 1856, col: 41, offset: 70119},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1856, col: 48, offset: 70126},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1856, col: 55, offset: 70133},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1858, col: 1, offset: 70140},
			expr: &actionExpr{
				pos: position{line: 1858, col: 21, offset: 70160},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1858, col: 21, offset: 70160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1858, col: 21, offset: 70160},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1858, col: 32, offset: 70171},
								expr: &ruleRefExpr{
									pos:  position{line: 1858, col: 33, offset: 70172},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1858, col: 46, offset: 70185},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1858, col: 77, offset: 70216},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1858, col: 86, offset: 70225},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1858, col: 114, offset: 70253},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1862, col: 1, offset: 70382},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1862, col: 31, offset: 70412},
				expr: &actionExpr{
					pos: position{line: 1862, col: 32, offset: 70413},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1862, col: 32, offset: 70413},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1862, col: 32, offset: 70413},
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 33, offset: 70414},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1862, col: 62, offset: 70443},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1862, col: 68, offset: 70449},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1867, col: 1, offset: 70616},
			expr: &actionExpr{
				pos: position{line: 1867, col: 18, offset: 70633},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1867, col: 18, offset: 70633},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1867, col: 19, offset: 70634},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1867, col: 19, offset: 70634},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1867, col: 27, offset: 70642},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1867, col: 37, offset: 70652},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1867, col: 45, offset: 70660},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1867, col: 55, offset: 70670},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1867, col: 63, offset: 70678},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1867, col: 72, offset: 70687},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1876, col: 1, offset: 70993},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1876, col: 23, offset: 71015},
				expr: &ruleRefExpr{
					pos:  position{line: 1876, col: 23, offset: 71015},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1878, col: 1, offset: 71033},
			expr: &actionExpr{
				pos: position{line: 1879, col: 5, offset: 71056},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 5, offset: 71056},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1879, col: 5, offset: 71056},
							expr: &ruleRefExpr{
								pos:  position{line: 1879, col: 6, offset: 71057},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1879, col: 10, offset: 71061},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1879, col: 19, offset: 71070},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1879, col: 19, offset: 71070},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1880, col: 15, offset: 71096},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1881, col: 15, offset: 71125},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1882, col: 15, offset: 71151},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1883, col: 15, offset: 71180},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1884, col: 15, offset: 71212},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1885, col: 15, offset: 71246},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1886, col: 15, offset: 71278},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1887, col: 15, offset: 71318},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1888, col: 15, offset: 71348},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1889, col: 15, offset: 71377},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1890, col: 15, offset: 71414},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1891, col: 15, offset: 71445},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1892, col: 15, offset: 71487},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1893, col: 15, offset: 71523},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1898, col: 1, offset: 71641},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1898, col: 22, offset: 71662},
				expr: &ruleRefExpr{
					pos:  position{line: 1898, col: 22, offset: 71662},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1900, col: 1, offset: 71684},
			expr: &actionExpr{
				pos: position{line: 1900, col: 22, offset: 71705},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 22, offset: 71705},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1900, col: 22, offset: 71705},
							expr: &ruleRefExpr{
								pos:  position{line: 1900, col: 23, offset: 71706},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 27, offset: 71710},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1900, col: 36, offset: 71719},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1900, col: 36, offset: 71719},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 48, offset: 71731},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1904, col: 1, offset: 71785},
			expr: &actionExpr{
				pos: position{line: 1904, col: 24, offset: 71808},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1904, col: 24, offset: 71808},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1904, col: 30, offset: 71814},
						expr: &ruleRefExpr{
							pos:  position{line: 1904, col: 31, offset: 71815},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1908, col: 1, offset: 71909},
			expr: &actionExpr{
				pos: position{line: 1908, col: 28, offset: 71936},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1908, col: 28, offset: 71936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1908, col: 28, offset: 71936},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1908, col: 37, offset: 71945},
								expr: &ruleRefExpr{
									pos:  position{line: 1908, col: 38, offset: 71946},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1908, col: 54, offset: 71962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1915, col: 1, offset: 72211},
			expr: &actionExpr{
				pos: position{line: 1915, col: 10, offset: 72220},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1915, col: 10, offset: 72220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1915, col: 10, offset: 72220},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1915, col: 16, offset: 72226},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1915, col: 17, offset: 72227},
									expr: &ruleRefExpr{
										pos:  position{line: 1915, col: 17, offset: 72227},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1915, col: 31, offset: 72241},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1916, col: 5, offset: 72261},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1916, col: 12, offset: 72268},
								expr: &ruleRefExpr{
									pos:  position{line: 1916, col: 13, offset: 72269},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1917, col: 5, offset: 72292},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1917, col: 11, offset: 72298},
								expr: &ruleRefExpr{
									pos:  position{line: 1917, col: 12, offset: 72299},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1918, col: 6, offset: 72317},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1918, col: 6, offset: 72317},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 23, offset: 72334},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1922, col: 1, offset: 72448},
			expr: &seqExpr{
				pos: position{line: 1922, col: 23, offset: 72470},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1922, col: 23, offset: 72470},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1922, col: 27, offset: 72474},
						expr: &ruleRefExpr{
							pos:  position{line: 1922, col: 27, offset: 72474},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1924, col: 1, offset: 72484},
			expr: &seqExpr{
				pos: position{line: 1924, col: 19, offset: 72502},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1924, col: 19, offset: 72502},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1924, col: 26, offset: 72509},
						expr: &ruleRefExpr{
							pos:  position{line: 1924, col: 26, offset: 72509},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1924, col: 33, offset: 72516},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1927, col: 1, offset: 72587},
			expr: &actionExpr{
				pos: position{line: 1927, col: 20, offset: 72606},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1927, col: 20, offset: 72606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1927, col: 20, offset: 72606},
							expr: &ruleRefExpr{
								pos:  position{line: 1927, col: 21, offset: 72607},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1927, col: 36, offset: 72622},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1927, col: 42, offset: 72628},
								expr: &ruleRefExpr{
									pos:  position{line: 1927, col: 43, offset: 72629},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1927, col: 55, offset: 72641},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1927, col: 59, offset: 72645},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1931, col: 1, offset: 72717},
			expr: &actionExpr{
				pos: position{line: 1931, col: 14, offset: 72730},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1931, col: 14, offset: 72730},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1931, col: 14, offset: 72730},
							expr: &ruleRefExpr{
								pos:  position{line: 1931, col: 15, offset: 72731},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1931, col: 30, offset: 72746},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1931, col: 36, offset: 72752},
								expr: &ruleRefExpr{
									pos:  position{line: 1931, col: 37, offset: 72753},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1931, col: 49, offset: 72765},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1931, col: 53, offset: 72769},
							expr: &ruleRefExpr{
								pos:  position{line: 1931, col: 53, offset: 72769},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1935, col: 1, offset: 72842},
			expr: &actionExpr{
				pos: position{line: 1935, col: 14, offset: 72855},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1935, col: 14, offset: 72855},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1935, col: 14, offset: 72855},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 33, offset: 72874},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1935, col: 42, offset: 72883},
								expr: &seqExpr{
									pos: position{line: 1935, col: 43, offset: 72884},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1935, col: 43, offset: 72884},
											expr: &ruleRefExpr{
												pos:  position{line: 1935, col: 44, offset: 72885},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1935, col: 63, offset: 72904},
											expr: &ruleRefExpr{
												pos:  position{line: 1935, col: 64, offset: 72905},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1935, col: 68, offset: 72909},
											expr: &ruleRefExpr{
												pos:  position{line: 1935, col: 68, offset: 72909},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1935, col: 75, offset: 72916},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1935, col: 89, offset: 72930},
											expr: &ruleRefExpr{
												pos:  position{line: 1935, col: 89, offset: 72930},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1942, col: 1, offset: 73186},
			expr: &seqExpr{
				pos: position{line: 1942, col: 26, offset: 73211},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1942, col: 26, offset: 73211},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1942, col: 33, offset: 73218},
						expr: &ruleRefExpr{
							pos:  position{line: 1942, col: 33, offset: 73218},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1942, col: 40, offset: 73225},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1944, col: 1, offset: 73232},
			expr: &seqExpr{
				pos: position{line: 1944, col: 31, offset: 73262},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1944, col: 31, offset: 73262},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1944, col: 38, offset: 73269},
						expr: &ruleRefExpr{
							pos:  position{line: 1944, col: 38, offset: 73269},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1944, col: 45, offset: 73276},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1946, col: 1, offset: 73283},
			expr: &choiceExpr{
				pos: position{line: 1946, col: 29, offset: 73311},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1946, col: 30, offset: 73312},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1946, col: 30, offset: 73312},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1946, col: 37, offset: 73319},
								expr: &ruleRefExpr{
									pos:  position{line: 1946, col: 37, offset: 73319},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1946, col: 44, offset: 73326},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1946, col: 51, offset: 73333},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1948, col: 1, offset: 73340},
			expr: &actionExpr{
				pos: position{line: 1948, col: 17, offset: 73356},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1948, col: 17, offset: 73356},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1948, col: 17, offset: 73356},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1948, col: 44, offset: 73383},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1948, col: 53, offset: 73392},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1948, col: 78, offset: 73417},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1952, col: 1, offset: 73531},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1952, col: 27, offset: 73557},
				expr: &actionExpr{
					pos: position{line: 1952, col: 28, offset: 73558},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1952, col: 28, offset: 73558},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1952, col: 28, offset: 73558},
								expr: &ruleRefExpr{
									pos:  position{line: 1952, col: 29, offset: 73559},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1952, col: 54, offset: 73584},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1952, col: 60, offset: 73590},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1956, col: 1, offset: 73738},
			expr: &actionExpr{
				pos: position{line: 1956, col: 22, offset: 73759},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1956, col: 22, offset: 73759},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1956, col: 22, offset: 73759},
							expr: &ruleRefExpr{
								pos:  position{line: 1956, col: 23, offset: 73760},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1956, col: 45, offset: 73782},
							expr: &ruleRefExpr{
								pos:  position{line: 1956, col: 45, offset: 73782},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1956, col: 52, offset: 73789},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1956, col: 57, offset: 73794},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1956, col: 66, offset: 73803},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1956, col: 92, offset: 73829},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1960, col: 1, offset: 73898},
			expr: &actionExpr{
				pos: position{line: 1960, col: 29, offset: 73926},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1960, col: 29, offset: 73926},
					expr: &charClassMatcher{
						pos:        position{line: 1960, col: 29, offset: 73926},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1968, col: 1, offset: 74247},
			expr: &choiceExpr{
				pos: position{line: 1968, col: 17, offset: 74263},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1968, col: 17, offset: 74263},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1968, col: 49, offset: 74295},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1968, col: 78, offset: 74324},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1970, col: 1, offset: 74362},
			expr: &litMatcher{
				pos:        position{line: 1970, col: 26, offset: 74387},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1973, col: 1, offset: 74462},
			expr: &actionExpr{
				pos: position{line: 1973, col: 31, offset: 74492},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1973, col: 31, offset: 74492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1973, col: 31, offset: 74492},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1973, col: 42, offset: 74503},
								expr: &ruleRefExpr{
									pos:  position{line: 1973, col: 43, offset: 74504},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 56, offset: 74517},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1973, col: 63, offset: 74524},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1978, col: 1, offset: 74759},
			expr: &actionExpr{
				pos: position{line: 1979, col: 5, offset: 74800},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1979, col: 5, offset: 74800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1979, col: 5, offset: 74800},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1979, col: 16, offset: 74811},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1979, col: 16, offset: 74811},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1979, col: 16, offset: 74811},
											expr: &ruleRefExpr{
												pos:  position{line: 1979, col: 16, offset: 74811},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1979, col: 23, offset: 74818},
											expr: &charClassMatcher{
												pos:        position{line: 1979, col: 23, offset: 74818},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1981, col: 8, offset: 74873},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1982, col: 5, offset: 74937},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1982, col: 16, offset: 74948},
								expr: &actionExpr{
									pos: position{line: 1983, col: 9, offset: 74959},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1983, col: 9, offset: 74959},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1983, col: 9, offset: 74959},
												expr: &ruleRefExpr{
													pos:  position{line: 1983, col: 10, offset: 74960},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1984, col: 9, offset: 74980},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1984, col: 20, offset: 74991},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1984, col: 20, offset: 74991},
														expr: &charClassMatcher{
															pos:        position{line: 1984, col: 20, offset: 74991},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1986, col: 12, offset: 75054},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1993, col: 1, offset: 75291},
			expr: &actionExpr{
				pos: position{line: 1993, col: 39, offset: 75329},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1993, col: 39, offset: 75329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1993, col: 39, offset: 75329},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1993, col: 50, offset: 75340},
								expr: &ruleRefExpr{
									pos:  position{line: 1993, col: 51, offset: 75341},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1994, col: 9, offset: 75363},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1994, col: 31, offset: 75385},
							expr: &ruleRefExpr{
								pos:  position{line: 1994, col: 31, offset: 75385},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1994, col: 38, offset: 75392},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1994, col: 46, offset: 75400},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1994, col: 53, offset: 75407},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1994, col: 95, offset: 75449},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1994, col: 96, offset: 75450},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1994, col: 96, offset: 75450},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1994, col: 118, offset: 75472},
											expr: &ruleRefExpr{
												pos:  position{line: 1994, col: 118, offset: 75472},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1994, col: 125, offset: 75479},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1994, col: 132, offset: 75486},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1999, col: 1, offset: 75650},
			expr: &actionExpr{
				pos: position{line: 1999, col: 44, offset: 75693},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1999, col: 44, offset: 75693},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1999, col: 50, offset: 75699},
						expr: &ruleRefExpr{
							pos:  position{line: 1999, col: 51, offset: 75700},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2003, col: 1, offset: 75788},
			expr: &actionExpr{
				pos: position{line: 2004, col: 5, offset: 75844},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 5, offset: 75844},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2004, col: 5, offset: 75844},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2004, col: 11, offset: 75850},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2004, col: 11, offset: 75850},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2004, col: 11, offset: 75850},
											expr: &ruleRefExpr{
												pos:  position{line: 2004, col: 12, offset: 75851},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2004, col: 34, offset: 75873},
											expr: &charClassMatcher{
												pos:        position{line: 2004, col: 34, offset: 75873},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2006, col: 8, offset: 75928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2011, col: 1, offset: 76059},
			expr: &actionExpr{
				pos: position{line: 2012, col: 5, offset: 76098},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 5, offset: 76098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2012, col: 5, offset: 76098},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2012, col: 16, offset: 76109},
								expr: &ruleRefExpr{
									pos:  position{line: 2012, col: 17, offset: 76110},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2013, col: 5, offset: 76128},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2020, col: 5, offset: 76342},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2020, col: 12, offset: 76349},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2024, col: 1, offset: 76503},
			expr: &actionExpr{
				pos: position{line: 2024, col: 16, offset: 76518},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2024, col: 16, offset: 76518},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2029, col: 1, offset: 76606},
			expr: &actionExpr{
				pos: position{line: 2029, col: 39, offset: 76644},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2029, col: 39, offset: 76644},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2029, col: 45, offset: 76650},
						expr: &ruleRefExpr{
							pos:  position{line: 2029, col: 46, offset: 76651},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2033, col: 1, offset: 76735},
			expr: &actionExpr{
				pos: position{line: 2033, col: 38, offset: 76772},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2033, col: 38, offset: 76772},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2033, col: 38, offset: 76772},
							expr: &ruleRefExpr{
								pos:  position{line: 2033, col: 39, offset: 76773},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 49, offset: 76783},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2033, col: 58, offset: 76792},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2033, col: 58, offset: 76792},
									expr: &charClassMatcher{
										pos:        position{line: 2033, col: 58, offset: 76792},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2035, col: 4, offset: 76839},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2042, col: 1, offset: 77032},
			expr: &actionExpr{
				pos: position{line: 2042, col: 14, offset: 77045},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 14, offset: 77045},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2042, col: 14, offset: 77045},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2042, col: 19, offset: 77050},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2042, col: 25, offset: 77056},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2042, col: 43, offset: 77074},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2046, col: 1, offset: 77143},
			expr: &actionExpr{
				pos: position{line: 2046, col: 21, offset: 77163},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2046, col: 21, offset: 77163},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2046, col: 30, offset: 77172},
						expr: &choiceExpr{
							pos: position{line: 2046, col: 31, offset: 77173},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2046, col: 31, offset: 77173},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2046, col: 38, offset: 77180},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2046, col: 53, offset: 77195},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2046, col: 66, offset: 77208},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 2046, col: 74, offset: 77216},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 2046, col: 75, offset: 77217},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2046, col: 75, offset: 77217},
												expr: &litMatcher{
													pos:        position{line: 2046, col: 76, offset: 77218},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2046, col: 81, offset: 77223,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2052, col: 1, offset: 77335},
			expr: &actionExpr{
				pos: position{line: 2052, col: 23, offset: 77357},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2052, col: 23, offset: 77357},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2052, col: 23, offset: 77357},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2052, col: 29, offset: 77363},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2052, col: 36, offset: 77370},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2053, col: 5, offset: 77403},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2053, col: 11, offset: 77409},
								expr: &actionExpr{
									pos: position{line: 2053, col: 12, offset: 77410},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2053, col: 12, offset: 77410},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2053, col: 12, offset: 77410},
												expr: &ruleRefExpr{
													pos:  position{line: 2053, col: 12, offset: 77410},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2053, col: 19, offset: 77417},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2053, col: 23, offset: 77421},
												expr: &ruleRefExpr{
													pos:  position{line: 2053, col: 23, offset: 77421},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2053, col: 30, offset: 77428},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2053, col: 39, offset: 77437},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2054, col: 5, offset: 77496},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2054, col: 11, offset: 77502},
								expr: &actionExpr{
									pos: position{line: 2054, col: 12, offset: 77503},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2054, col: 12, offset: 77503},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2054, col: 12, offset: 77503},
												expr: &ruleRefExpr{
													pos:  position{line: 2054, col: 12, offset: 77503},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2054, col: 19, offset: 77510},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2054, col: 23, offset: 77514},
												expr: &ruleRefExpr{
													pos:  position{line: 2054, col: 23, offset: 77514},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2054, col: 30, offset: 77521},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2054, col: 39, offset: 77530},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2055, col: 5, offset: 77589},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2059, col: 1, offset: 77672},
			expr: &actionExpr{
				pos: position{line: 2059, col: 30, offset: 77701},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2059, col: 30, offset: 77701},
					expr: &choiceExpr{
						pos: position{line: 2059, col: 31, offset: 77702},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2059, col: 31, offset: 77702},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2059, col: 42, offset: 77713},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2066, col: 1, offset: 77869},
			expr: &actionExpr{
				pos: position{line: 2066, col: 14, offset: 77882},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2066, col: 14, offset: 77882},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2066, col: 14, offset: 77882},
							expr: &ruleRefExpr{
								pos:  position{line: 2066, col: 15, offset: 77883},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2066, col: 19, offset: 77887},
							expr: &ruleRefExpr{
								pos:  position{line: 2066, col: 19, offset: 77887},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2066, col: 26, offset: 77894},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2074, col: 1, offset: 78047},
			expr: &choiceExpr{
				pos: position{line: 2074, col: 11, offset: 78057},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2074, col: 11, offset: 78057},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 24, offset: 78070},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 36, offset: 78082},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 48, offset: 78094},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2074, col: 61, offset: 78107},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2076, col: 1, offset: 78119},
			expr: &actionExpr{
				pos: position{line: 2076, col: 15, offset: 78133},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2076, col: 15, offset: 78133},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2079, col: 1, offset: 78189},
			expr: &actionExpr{
				pos: position{line: 2079, col: 14, offset: 78202},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2079, col: 14, offset: 78202},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2082, col: 1, offset: 78259},
			expr: &actionExpr{
				pos: position{line: 2082, col: 14, offset: 78272},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2082, col: 14, offset: 78272},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2085, col: 1, offset: 78330},
			expr: &actionExpr{
				pos: position{line: 2085, col: 15, offset: 78344},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2085, col: 15, offset: 78344},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2088, col: 1, offset: 78401},
			expr: &actionExpr{
				pos: position{line: 2088, col: 13, offset: 78413},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2088, col: 13, offset: 78413},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2096, col: 1, offset: 78696},
			expr: &actionExpr{
				pos: position{line: 2096, col: 22, offset: 78717},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2096, col: 22, offset: 78717},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2096, col: 22, offset: 78717},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2096, col: 31, offset: 78726},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2096, col: 35, offset: 78730},
							expr: &charClassMatcher{
								pos:        position{line: 2096, col: 36, offset: 78731},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2103, col: 1, offset: 78918},
			expr: &charClassMatcher{
				pos:        position{line: 2103, col: 13, offset: 78930},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2105, col: 1, offset: 78942},
			expr: &choiceExpr{
				pos: position{line: 2105, col: 16, offset: 78957},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2105, col: 16, offset: 78957},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2105, col: 22, offset: 78963},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2105, col: 28, offset: 78969},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2105, col: 34, offset: 78975},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2105, col: 40, offset: 78981},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2105, col: 46, offset: 78987},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2107, col: 1, offset: 78995},
			expr: &actionExpr{
				pos: position{line: 2107, col: 14, offset: 79008},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2107, col: 14, offset: 79008},
					expr: &charClassMatcher{
						pos:        position{line: 2107, col: 14, offset: 79008},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2111, col: 1, offset: 79058},
			expr: &choiceExpr{
				pos: position{line: 2115, col: 5, offset: 79389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2115, col: 5, offset: 79389},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2115, col: 5, offset: 79389},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2115, col: 5, offset: 79389},
									expr: &charClassMatcher{
										pos:        position{line: 2115, col: 5, offset: 79389},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2115, col: 15, offset: 79399},
									expr: &choiceExpr{
										pos: position{line: 2115, col: 17, offset: 79401},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2115, col: 17, offset: 79401},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2115, col: 30, offset: 79414},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2117, col: 9, offset: 79486},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2117, col: 9, offset: 79486},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2117, col: 9, offset: 79486},
									expr: &charClassMatcher{
										pos:        position{line: 2117, col: 9, offset: 79486},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2117, col: 19, offset: 79496},
									expr: &seqExpr{
										pos: position{line: 2117, col: 20, offset: 79497},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2117, col: 20, offset: 79497},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2117, col: 27, offset: 79504},
												expr: &charClassMatcher{
													pos:        position{line: 2117, col: 27, offset: 79504},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2121, col: 1, offset: 79584},
			expr: &choiceExpr{
				pos: position{line: 2122, col: 5, offset: 79666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2122, col: 5, offset: 79666},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2122, col: 5, offset: 79666},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2122, col: 5, offset: 79666},
									expr: &charClassMatcher{
										pos:        position{line: 2122, col: 5, offset: 79666},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2122, col: 19, offset: 79680},
									expr: &choiceExpr{
										pos: position{line: 2122, col: 21, offset: 79682},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2122, col: 21, offset: 79682},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2122, col: 31, offset: 79692},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2124, col: 9, offset: 79763},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2127, col: 1, offset: 79866},
			expr: &actionExpr{
				pos: position{line: 2127, col: 12, offset: 79877},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2127, col: 12, offset: 79877},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2131, col: 1, offset: 79946},
			expr: &actionExpr{
				pos: position{line: 2131, col: 17, offset: 79962},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2131, col: 17, offset: 79962},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2131, col: 22, offset: 79967},
						expr: &choiceExpr{
							pos: position{line: 2131, col: 23, offset: 79968},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2131, col: 23, offset: 79968},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2131, col: 34, offset: 79979},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2135, col: 1, offset: 80067},
			expr: &actionExpr{
				pos: position{line: 2135, col: 25, offset: 80091},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2135, col: 25, offset: 80091},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2135, col: 30, offset: 80096},
						expr: &charClassMatcher{
							pos:        position{line: 2135, col: 31, offset: 80097},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2139, col: 1, offset: 80173},
			expr: &actionExpr{
				pos: position{line: 2139, col: 13, offset: 80185},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2139, col: 13, offset: 80185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2139, col: 13, offset: 80185},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2139, col: 20, offset: 80192},
								expr: &ruleRefExpr{
									pos:  position{line: 2139, col: 21, offset: 80193},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2139, col: 34, offset: 80206},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2139, col: 39, offset: 80211},
								expr: &choiceExpr{
									pos: position{line: 2139, col: 40, offset: 80212},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2139, col: 40, offset: 80212},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2139, col: 51, offset: 80223},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2143, col: 1, offset: 80315},
			expr: &actionExpr{
				pos: position{line: 2143, col: 23, offset: 80337},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2143, col: 23, offset: 80337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2143, col: 23, offset: 80337},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2143, col: 31, offset: 80345},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2143, col: 43, offset: 80357},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2143, col: 48, offset: 80362},
								expr: &choiceExpr{
									pos: position{line: 2143, col: 49, offset: 80363},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2143, col: 49, offset: 80363},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2143, col: 60, offset: 80374},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2147, col: 1, offset: 80466},
			expr: &oneOrMoreExpr{
				pos: position{line: 2147, col: 13, offset: 80478},
				expr: &charClassMatcher{
					pos:        position{line: 2147, col: 14, offset: 80479},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2149, col: 1, offset: 80615},
			expr: &actionExpr{
				pos: position{line: 2149, col: 21, offset: 80635},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2149, col: 21, offset: 80635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2149, col: 21, offset: 80635},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2149, col: 29, offset: 80643},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2149, col: 41, offset: 80655},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2149, col: 47, offset: 80661},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2154, col: 1, offset: 80914},
			expr: &oneOrMoreExpr{
				pos: position{line: 2154, col: 22, offset: 80935},
				expr: &charClassMatcher{
					pos:        position{line: 2154, col: 23, offset: 80936},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2156, col: 1, offset: 81070},
			expr: &actionExpr{
				pos: position{line: 2156, col: 9, offset: 81078},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2156, col: 9, offset: 81078},
					expr: &charClassMatcher{
						pos:        position{line: 2156, col: 9, offset: 81078},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2160, col: 1, offset: 81130},
			expr: &choiceExpr{
				pos: position{line: 2160, col: 15, offset: 81144},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2160, col: 15, offset: 81144},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2160, col: 27, offset: 81156},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2160, col: 40, offset: 81169},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2160, col: 51, offset: 81180},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2160, col: 62, offset: 81191},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2162, col: 1, offset: 81204},
			expr: &actionExpr{
				pos: position{line: 2162, col: 7, offset: 81210},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2162, col: 7, offset: 81210},
					expr: &charClassMatcher{
						pos:        position{line: 2162, col: 7, offset: 81210},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2166, col: 1, offset: 81339},
			expr: &actionExpr{
				pos: position{line: 2166, col: 10, offset: 81348},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2166, col: 10, offset: 81348},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2170, col: 1, offset: 81394},
			expr: &actionExpr{
				pos: position{line: 2170, col: 11, offset: 81404},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2170, col: 11, offset: 81404},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2170, col: 11, offset: 81404},
							expr: &litMatcher{
								pos:        position{line: 2170, col: 11, offset: 81404},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2170, col: 16, offset: 81409},
							expr: &ruleRefExpr{
								pos:  position{line: 2170, col: 16, offset: 81409},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2174, col: 1, offset: 81465},
			expr: &choiceExpr{
				pos: position{line: 2174, col: 10, offset: 81474},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2174, col: 10, offset: 81474},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2174, col: 16, offset: 81480},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2174, col: 16, offset: 81480},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2178, col: 1, offset: 81525},
			expr: &choiceExpr{
				pos: position{line: 2178, col: 12, offset: 81536},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2178, col: 12, offset: 81536},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 21, offset: 81545},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2178, col: 28, offset: 81552},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2180, col: 1, offset: 81560},
			expr: &notExpr{
				pos: position{line: 2180, col: 8, offset: 81567},
				expr: &anyMatcher{
					line: 2180, col: 9, offset: 81568,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2182, col: 1, offset: 81573},
			expr: &choiceExpr{
				pos: position{line: 2182, col: 8, offset: 81580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2182, col: 8, offset: 81580},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2182, col: 18, offset: 81590},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {

	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {

	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {

	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {

	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {

	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {

	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {

	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {

	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {

	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {

	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {

	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {

	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
