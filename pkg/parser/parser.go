// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 8315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 8315},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 249, col: 5, offset: 8315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 249, col: 5, offset: 8315},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 10, offset: 8320},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 249, col: 24, offset: 8334},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 249, col: 28, offset: 8338},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 249, col: 34, offset: 8344},
										expr: &ruleRefExpr{
											pos:  position{line: 249, col: 35, offset: 8345},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 249, col: 52, offset: 8362},
									expr: &litMatcher{
										pos:        position{line: 249, col: 52, offset: 8362},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 249, col: 57, offset: 8367},
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 57, offset: 8367},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 9, offset: 8472},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 251, col: 9, offset: 8472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 9, offset: 8472},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 14, offset: 8477},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 251, col: 28, offset: 8491},
									expr: &litMatcher{
										pos:        position{line: 251, col: 28, offset: 8491},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 251, col: 33, offset: 8496},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 33, offset: 8496},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 255, col: 1, offset: 8589},
			expr: &actionExpr{
				pos: position{line: 255, col: 17, offset: 8605},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 255, col: 17, offset: 8605},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 255, col: 17, offset: 8605},
							expr: &litMatcher{
								pos:        position{line: 255, col: 18, offset: 8606},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 26, offset: 8614},
							expr: &litMatcher{
								pos:        position{line: 255, col: 27, offset: 8615},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 35, offset: 8623},
							expr: &litMatcher{
								pos:        position{line: 255, col: 36, offset: 8624},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 46, offset: 8634},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 47, offset: 8635},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 54, offset: 8642},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 255, col: 58, offset: 8646},
								expr: &choiceExpr{
									pos: position{line: 255, col: 59, offset: 8647},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 255, col: 59, offset: 8647},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 71, offset: 8659},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 92, offset: 8680},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 92, offset: 8680},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 259, col: 1, offset: 8720},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8738},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 259, col: 19, offset: 8738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 259, col: 19, offset: 8738},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 259, col: 25, offset: 8744},
								expr: &choiceExpr{
									pos: position{line: 259, col: 26, offset: 8745},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 259, col: 26, offset: 8745},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 38, offset: 8757},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 47, offset: 8766},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 259, col: 68, offset: 8787},
							expr: &litMatcher{
								pos:        position{line: 259, col: 69, offset: 8788},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 263, col: 1, offset: 8943},
			expr: &seqExpr{
				pos: position{line: 263, col: 24, offset: 8966},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 263, col: 24, offset: 8966},
						expr: &litMatcher{
							pos:        position{line: 263, col: 25, offset: 8967},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 29, offset: 8971},
						expr: &litMatcher{
							pos:        position{line: 263, col: 30, offset: 8972},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 34, offset: 8976},
						expr: &litMatcher{
							pos:        position{line: 263, col: 35, offset: 8977},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 263, col: 39, offset: 8981,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 265, col: 1, offset: 8985},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 9005},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 9005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 9005},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 36, offset: 9020},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 269, col: 1, offset: 9094},
			expr: &actionExpr{
				pos: position{line: 269, col: 20, offset: 9113},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 269, col: 20, offset: 9113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 20, offset: 9113},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 29, offset: 9122},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 29, offset: 9122},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 33, offset: 9126},
							expr: &litMatcher{
								pos:        position{line: 269, col: 33, offset: 9126},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 38, offset: 9131},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 45, offset: 9138},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 46, offset: 9139},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 63, offset: 9156},
							expr: &litMatcher{
								pos:        position{line: 269, col: 63, offset: 9156},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 68, offset: 9161},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 9167},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 75, offset: 9168},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 92, offset: 9185},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 96, offset: 9189},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 273, col: 1, offset: 9259},
			expr: &actionExpr{
				pos: position{line: 273, col: 20, offset: 9278},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 20, offset: 9278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 20, offset: 9278},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 29, offset: 9287},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 29, offset: 9287},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 33, offset: 9291},
							expr: &litMatcher{
								pos:        position{line: 273, col: 33, offset: 9291},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 38, offset: 9296},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 45, offset: 9303},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 46, offset: 9304},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 63, offset: 9321},
							expr: &litMatcher{
								pos:        position{line: 273, col: 63, offset: 9321},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 68, offset: 9326},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 74, offset: 9332},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 75, offset: 9333},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 92, offset: 9350},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 96, offset: 9354},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 277, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 277, col: 19, offset: 9460},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 277, col: 19, offset: 9460},
					expr: &choiceExpr{
						pos: position{line: 277, col: 20, offset: 9461},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 277, col: 20, offset: 9461},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 277, col: 32, offset: 9473},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 277, col: 42, offset: 9483},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 277, col: 42, offset: 9483},
										expr: &litMatcher{
											pos:        position{line: 277, col: 43, offset: 9484},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 47, offset: 9488},
										expr: &litMatcher{
											pos:        position{line: 277, col: 48, offset: 9489},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 52, offset: 9493},
										expr: &ruleRefExpr{
											pos:  position{line: 277, col: 53, offset: 9494},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 277, col: 57, offset: 9498,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 281, col: 1, offset: 9539},
			expr: &actionExpr{
				pos: position{line: 281, col: 21, offset: 9559},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 21, offset: 9559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 21, offset: 9559},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 25, offset: 9563},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 31, offset: 9569},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 32, offset: 9570},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 51, offset: 9589},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 288, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 288, col: 12, offset: 9774},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 288, col: 12, offset: 9774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 12, offset: 9774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 23, offset: 9785},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 24, offset: 9786},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9810},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 289, col: 12, offset: 9817},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 289, col: 12, offset: 9817},
									expr: &litMatcher{
										pos:        position{line: 289, col: 13, offset: 9818},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 293, col: 5, offset: 9909},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 297, col: 5, offset: 10061},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 5, offset: 10061},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 9, offset: 10065},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 16, offset: 10072},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 31, offset: 10087},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 35, offset: 10091},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 35, offset: 10091},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 53, offset: 10109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 302, col: 1, offset: 10223},
			expr: &actionExpr{
				pos: position{line: 302, col: 18, offset: 10240},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 302, col: 18, offset: 10240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 302, col: 27, offset: 10249},
						expr: &seqExpr{
							pos: position{line: 302, col: 28, offset: 10250},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 302, col: 28, offset: 10250},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 29, offset: 10251},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 302, col: 37, offset: 10259},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 38, offset: 10260},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 54, offset: 10276},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 306, col: 1, offset: 10397},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10413},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 17, offset: 10413},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 306, col: 26, offset: 10422},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 306, col: 26, offset: 10422},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10443},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10461},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10486},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10508},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10531},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10546},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10571},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 314, col: 11, offset: 10592},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 315, col: 11, offset: 10632},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10652},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 323, col: 1, offset: 10805},
			expr: &seqExpr{
				pos: position{line: 323, col: 25, offset: 10829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 323, col: 25, offset: 10829},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 35, offset: 10839},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 328, col: 1, offset: 10950},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10968},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 10968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 25, offset: 10974},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 40, offset: 10989},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 45, offset: 10994},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 52, offset: 11001},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 68, offset: 11017},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 75, offset: 11024},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 332, col: 1, offset: 11165},
			expr: &actionExpr{
				pos: position{line: 332, col: 20, offset: 11184},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 332, col: 20, offset: 11184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 332, col: 20, offset: 11184},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 26, offset: 11190},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 41, offset: 11205},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 45, offset: 11209},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 52, offset: 11216},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 68, offset: 11232},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 75, offset: 11239},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 336, col: 1, offset: 11381},
			expr: &actionExpr{
				pos: position{line: 336, col: 18, offset: 11398},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 336, col: 18, offset: 11398},
					expr: &choiceExpr{
						pos: position{line: 336, col: 19, offset: 11399},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 336, col: 19, offset: 11399},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 33, offset: 11413},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 39, offset: 11419},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 340, col: 1, offset: 11461},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11479},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 340, col: 19, offset: 11479},
					expr: &choiceExpr{
						pos: position{line: 340, col: 20, offset: 11480},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 340, col: 20, offset: 11480},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 340, col: 33, offset: 11493},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 340, col: 33, offset: 11493},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 34, offset: 11494},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 340, col: 37, offset: 11497},
										expr: &litMatcher{
											pos:        position{line: 340, col: 38, offset: 11498},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 42, offset: 11502},
										expr: &litMatcher{
											pos:        position{line: 340, col: 43, offset: 11503},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 47, offset: 11507},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 48, offset: 11508},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 340, col: 52, offset: 11512,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 344, col: 1, offset: 11553},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11576},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11576},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11580},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 344, col: 34, offset: 11586},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 35, offset: 11587},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 54, offset: 11606},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 351, col: 1, offset: 11786},
			expr: &actionExpr{
				pos: position{line: 351, col: 18, offset: 11803},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 351, col: 18, offset: 11803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 18, offset: 11803},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 351, col: 24, offset: 11809},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 351, col: 24, offset: 11809},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 351, col: 24, offset: 11809},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 351, col: 36, offset: 11821},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 42, offset: 11827},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 351, col: 56, offset: 11841},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 74, offset: 11859},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 8, offset: 12013},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 357, col: 1, offset: 12066},
			expr: &actionExpr{
				pos: position{line: 357, col: 26, offset: 12091},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 26, offset: 12091},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 26, offset: 12091},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 30, offset: 12095},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 36, offset: 12101},
								expr: &choiceExpr{
									pos: position{line: 357, col: 37, offset: 12102},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 357, col: 37, offset: 12102},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 59, offset: 12124},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 80, offset: 12145},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 99, offset: 12164},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 361, col: 1, offset: 12234},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12257},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12257},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 33, offset: 12266},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 40, offset: 12273},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 66, offset: 12299},
							expr: &litMatcher{
								pos:        position{line: 361, col: 66, offset: 12299},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 365, col: 1, offset: 12358},
			expr: &actionExpr{
				pos: position{line: 365, col: 29, offset: 12386},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 365, col: 29, offset: 12386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 29, offset: 12386},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 365, col: 36, offset: 12393},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 365, col: 36, offset: 12393},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12510},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12546},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12572},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12604},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 11, offset: 12636},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 11, offset: 12663},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 371, col: 31, offset: 12683},
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 31, offset: 12683},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 371, col: 36, offset: 12688},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 371, col: 36, offset: 12688},
									expr: &litMatcher{
										pos:        position{line: 371, col: 37, offset: 12689},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 371, col: 43, offset: 12695},
									expr: &litMatcher{
										pos:        position{line: 371, col: 44, offset: 12696},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 375, col: 1, offset: 12728},
			expr: &actionExpr{
				pos: position{line: 375, col: 23, offset: 12750},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 375, col: 23, offset: 12750},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 23, offset: 12750},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 375, col: 30, offset: 12757},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 30, offset: 12757},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 375, col: 47, offset: 12774},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 376, col: 5, offset: 12796},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 376, col: 12, offset: 12803},
								expr: &actionExpr{
									pos: position{line: 376, col: 13, offset: 12804},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 376, col: 13, offset: 12804},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 376, col: 13, offset: 12804},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 376, col: 17, offset: 12808},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 376, col: 24, offset: 12815},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 376, col: 24, offset: 12815},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 376, col: 41, offset: 12832},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 382, col: 1, offset: 12970},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 12998},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 12998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 29, offset: 12998},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 382, col: 34, offset: 13003},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 382, col: 41, offset: 13010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 41, offset: 13010},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 382, col: 58, offset: 13027},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 5, offset: 13049},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 383, col: 12, offset: 13056},
								expr: &actionExpr{
									pos: position{line: 383, col: 13, offset: 13057},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 383, col: 13, offset: 13057},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 383, col: 13, offset: 13057},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 383, col: 17, offset: 13061},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 383, col: 24, offset: 13068},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 383, col: 24, offset: 13068},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 383, col: 41, offset: 13085},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 9, offset: 13138},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 389, col: 1, offset: 13228},
			expr: &actionExpr{
				pos: position{line: 389, col: 19, offset: 13246},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 389, col: 19, offset: 13246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 389, col: 19, offset: 13246},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 26, offset: 13253},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 34, offset: 13261},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 39, offset: 13266},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 44, offset: 13271},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 393, col: 1, offset: 13359},
			expr: &actionExpr{
				pos: position{line: 393, col: 25, offset: 13383},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 393, col: 25, offset: 13383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 25, offset: 13383},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 30, offset: 13388},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 37, offset: 13395},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 45, offset: 13403},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 50, offset: 13408},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 55, offset: 13413},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 63, offset: 13421},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 397, col: 1, offset: 13506},
			expr: &actionExpr{
				pos: position{line: 397, col: 20, offset: 13525},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 397, col: 20, offset: 13525},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 397, col: 32, offset: 13537},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 401, col: 1, offset: 13632},
			expr: &actionExpr{
				pos: position{line: 401, col: 26, offset: 13657},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 401, col: 26, offset: 13657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 26, offset: 13657},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 31, offset: 13662},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 43, offset: 13674},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 51, offset: 13682},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 405, col: 1, offset: 13774},
			expr: &actionExpr{
				pos: position{line: 405, col: 23, offset: 13796},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 405, col: 23, offset: 13796},
					expr: &seqExpr{
						pos: position{line: 405, col: 24, offset: 13797},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 405, col: 24, offset: 13797},
								expr: &litMatcher{
									pos:        position{line: 405, col: 25, offset: 13798},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 29, offset: 13802},
								expr: &litMatcher{
									pos:        position{line: 405, col: 30, offset: 13803},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 34, offset: 13807},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 35, offset: 13808},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 405, col: 38, offset: 13811,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 409, col: 1, offset: 13851},
			expr: &actionExpr{
				pos: position{line: 409, col: 23, offset: 13873},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 409, col: 23, offset: 13873},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 409, col: 24, offset: 13874},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 24, offset: 13874},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 409, col: 34, offset: 13884},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 42, offset: 13892},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 48, offset: 13898},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 409, col: 73, offset: 13923},
							expr: &litMatcher{
								pos:        position{line: 409, col: 73, offset: 13923},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 413, col: 1, offset: 14056},
			expr: &actionExpr{
				pos: position{line: 413, col: 28, offset: 14083},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 413, col: 28, offset: 14083},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 413, col: 28, offset: 14083},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 35, offset: 14090},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 54, offset: 14109},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 54, offset: 14109},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 413, col: 59, offset: 14114},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 413, col: 59, offset: 14114},
									expr: &litMatcher{
										pos:        position{line: 413, col: 60, offset: 14115},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 413, col: 66, offset: 14121},
									expr: &litMatcher{
										pos:        position{line: 413, col: 67, offset: 14122},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 417, col: 1, offset: 14154},
			expr: &actionExpr{
				pos: position{line: 417, col: 22, offset: 14175},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 417, col: 22, offset: 14175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 22, offset: 14175},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 417, col: 29, offset: 14182},
								run: (*parser).callonMultipleTagRanges4,
								expr: &ruleRefExpr{
									pos:  position{line: 417, col: 29, offset: 14182},
									name: "Alphanums",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 420, col: 5, offset: 14240},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 420, col: 12, offset: 14247},
								expr: &actionExpr{
									pos: position{line: 420, col: 13, offset: 14248},
									run: (*parser).callonMultipleTagRanges8,
									expr: &seqExpr{
										pos: position{line: 420, col: 13, offset: 14248},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 420, col: 13, offset: 14248},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 420, col: 17, offset: 14252},
												label: "other",
												expr: &actionExpr{
													pos: position{line: 420, col: 24, offset: 14259},
													run: (*parser).callonMultipleTagRanges12,
													expr: &ruleRefExpr{
														pos:  position{line: 420, col: 24, offset: 14259},
														name: "Alphanums",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 431, col: 1, offset: 14569},
			expr: &actionExpr{
				pos: position{line: 431, col: 21, offset: 14589},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 431, col: 21, offset: 14589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 431, col: 21, offset: 14589},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 29, offset: 14597},
								expr: &choiceExpr{
									pos: position{line: 431, col: 30, offset: 14598},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 431, col: 30, offset: 14598},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 431, col: 53, offset: 14621},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 431, col: 74, offset: 14642},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 431, col: 74, offset: 14642,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 107, offset: 14675},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 435, col: 1, offset: 14746},
			expr: &actionExpr{
				pos: position{line: 435, col: 25, offset: 14770},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 435, col: 25, offset: 14770},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 25, offset: 14770},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 435, col: 33, offset: 14778},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 435, col: 38, offset: 14783},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 38, offset: 14783},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 435, col: 78, offset: 14823},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 439, col: 1, offset: 14888},
			expr: &actionExpr{
				pos: position{line: 439, col: 23, offset: 14910},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 439, col: 23, offset: 14910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 23, offset: 14910},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 439, col: 31, offset: 14918},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 439, col: 36, offset: 14923},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 36, offset: 14923},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 439, col: 76, offset: 14963},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 446, col: 1, offset: 15127},
			expr: &oneOrMoreExpr{
				pos: position{line: 446, col: 14, offset: 15140},
				expr: &ruleRefExpr{
					pos:  position{line: 446, col: 14, offset: 15140},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 448, col: 1, offset: 15151},
			expr: &choiceExpr{
				pos: position{line: 448, col: 13, offset: 15163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 13, offset: 15163},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 31, offset: 15181},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 51, offset: 15201},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 448, col: 69, offset: 15219},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 450, col: 1, offset: 15245},
			expr: &choiceExpr{
				pos: position{line: 450, col: 18, offset: 15262},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 450, col: 18, offset: 15262},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 450, col: 18, offset: 15262},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 27, offset: 15271},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 9, offset: 15328},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 452, col: 9, offset: 15328},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 15, offset: 15334},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 16, offset: 15335},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 456, col: 1, offset: 15427},
			expr: &actionExpr{
				pos: position{line: 456, col: 22, offset: 15448},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 456, col: 22, offset: 15448},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 456, col: 22, offset: 15448},
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 23, offset: 15449},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 457, col: 5, offset: 15457},
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 6, offset: 15458},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 458, col: 5, offset: 15473},
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 6, offset: 15474},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 459, col: 5, offset: 15496},
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 6, offset: 15497},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 460, col: 5, offset: 15523},
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 6, offset: 15524},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 461, col: 5, offset: 15552},
							expr: &seqExpr{
								pos: position{line: 461, col: 7, offset: 15554},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 461, col: 7, offset: 15554},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 461, col: 27, offset: 15574},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 462, col: 5, offset: 15605},
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 6, offset: 15606},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 463, col: 5, offset: 15631},
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 6, offset: 15632},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 464, col: 5, offset: 15653},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 6, offset: 15654},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 15673},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 466, col: 9, offset: 15688},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 466, col: 9, offset: 15688},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 466, col: 9, offset: 15688},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 466, col: 18, offset: 15697},
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 19, offset: 15698},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 466, col: 35, offset: 15714},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 466, col: 45, offset: 15724},
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 46, offset: 15725},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 12, offset: 15877},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 472, col: 1, offset: 15924},
			expr: &seqExpr{
				pos: position{line: 472, col: 25, offset: 15948},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 472, col: 25, offset: 15948},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 29, offset: 15952},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 474, col: 1, offset: 15959},
			expr: &actionExpr{
				pos: position{line: 474, col: 29, offset: 15987},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 474, col: 29, offset: 15987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 29, offset: 15987},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 474, col: 41, offset: 15999},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 41, offset: 15999},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 53, offset: 16011},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 74, offset: 16032},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 82, offset: 16040},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 481, col: 1, offset: 16282},
			expr: &actionExpr{
				pos: position{line: 481, col: 20, offset: 16301},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 481, col: 20, offset: 16301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 481, col: 20, offset: 16301},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 31, offset: 16312},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 32, offset: 16313},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 52, offset: 16333},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 60, offset: 16341},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 83, offset: 16364},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 92, offset: 16373},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 485, col: 1, offset: 16513},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 16543},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 16543},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 486, col: 5, offset: 16543},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 5, offset: 16543},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 9, offset: 16547},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 488, col: 9, offset: 16610},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 488, col: 9, offset: 16610},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 488, col: 9, offset: 16610},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 488, col: 9, offset: 16610},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 488, col: 16, offset: 16617},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 488, col: 16, offset: 16617},
															expr: &litMatcher{
																pos:        position{line: 488, col: 17, offset: 16618},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 492, col: 9, offset: 16718},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 511, col: 11, offset: 17435},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 511, col: 11, offset: 17435},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 511, col: 11, offset: 17435},
													expr: &charClassMatcher{
														pos:        position{line: 511, col: 12, offset: 17436},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 511, col: 20, offset: 17444},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 513, col: 13, offset: 17555},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 513, col: 13, offset: 17555},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 513, col: 14, offset: 17556},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 513, col: 21, offset: 17563},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 515, col: 13, offset: 17677},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 515, col: 13, offset: 17677},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 515, col: 14, offset: 17678},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 515, col: 21, offset: 17685},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 517, col: 13, offset: 17799},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 517, col: 13, offset: 17799},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 517, col: 13, offset: 17799},
													expr: &charClassMatcher{
														pos:        position{line: 517, col: 14, offset: 17800},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 517, col: 22, offset: 17808},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 519, col: 13, offset: 17922},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 519, col: 13, offset: 17922},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 519, col: 13, offset: 17922},
													expr: &charClassMatcher{
														pos:        position{line: 519, col: 14, offset: 17923},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 519, col: 22, offset: 17931},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 521, col: 12, offset: 18044},
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 12, offset: 18044},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 525, col: 1, offset: 18076},
			expr: &actionExpr{
				pos: position{line: 525, col: 27, offset: 18102},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 525, col: 27, offset: 18102},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 525, col: 37, offset: 18112},
						expr: &ruleRefExpr{
							pos:  position{line: 525, col: 37, offset: 18112},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 532, col: 1, offset: 18312},
			expr: &actionExpr{
				pos: position{line: 532, col: 22, offset: 18333},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 532, col: 22, offset: 18333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 532, col: 22, offset: 18333},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 532, col: 33, offset: 18344},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 34, offset: 18345},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 54, offset: 18365},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 62, offset: 18373},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 87, offset: 18398},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 532, col: 98, offset: 18409},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 99, offset: 18410},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 129, offset: 18440},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 138, offset: 18449},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 536, col: 1, offset: 18607},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 18639},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 18639},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 5, offset: 18639},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 5, offset: 18639},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 537, col: 9, offset: 18643},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 537, col: 17, offset: 18651},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 539, col: 9, offset: 18708},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 539, col: 9, offset: 18708},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 539, col: 9, offset: 18708},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 539, col: 16, offset: 18715},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 539, col: 16, offset: 18715},
															expr: &litMatcher{
																pos:        position{line: 539, col: 17, offset: 18716},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 543, col: 9, offset: 18816},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 560, col: 14, offset: 19523},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 560, col: 21, offset: 19530},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 560, col: 22, offset: 19531},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 562, col: 13, offset: 19617},
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 13, offset: 19617},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 566, col: 1, offset: 19650},
			expr: &actionExpr{
				pos: position{line: 566, col: 32, offset: 19681},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 566, col: 32, offset: 19681},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 566, col: 32, offset: 19681},
							expr: &litMatcher{
								pos:        position{line: 566, col: 33, offset: 19682},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 37, offset: 19686},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 567, col: 7, offset: 19700},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 567, col: 7, offset: 19700},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 567, col: 7, offset: 19700},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 568, col: 7, offset: 19745},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 568, col: 7, offset: 19745},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 569, col: 7, offset: 19788},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 569, col: 7, offset: 19788},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 570, col: 7, offset: 19830},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 7, offset: 19830},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 574, col: 1, offset: 19869},
			expr: &actionExpr{
				pos: position{line: 574, col: 29, offset: 19897},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 29, offset: 19897},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 574, col: 39, offset: 19907},
						expr: &ruleRefExpr{
							pos:  position{line: 574, col: 39, offset: 19907},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 581, col: 1, offset: 20223},
			expr: &actionExpr{
				pos: position{line: 581, col: 20, offset: 20242},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 581, col: 20, offset: 20242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 20, offset: 20242},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 31, offset: 20253},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 32, offset: 20254},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 52, offset: 20274},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 58, offset: 20280},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 79, offset: 20301},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 90, offset: 20312},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 116, offset: 20338},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 128, offset: 20350},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 129, offset: 20351},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 585, col: 1, offset: 20490},
			expr: &actionExpr{
				pos: position{line: 585, col: 24, offset: 20513},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 585, col: 24, offset: 20513},
					expr: &choiceExpr{
						pos: position{line: 585, col: 25, offset: 20514},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 585, col: 25, offset: 20514},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 37, offset: 20526},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 585, col: 47, offset: 20536},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 585, col: 47, offset: 20536},
										expr: &ruleRefExpr{
											pos:  position{line: 585, col: 48, offset: 20537},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 585, col: 56, offset: 20545},
										expr: &litMatcher{
											pos:        position{line: 585, col: 57, offset: 20546},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 585, col: 62, offset: 20551,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 589, col: 1, offset: 20593},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 20626},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 20626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 20626},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 590, col: 16, offset: 20637},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 590, col: 16, offset: 20637},
									expr: &litMatcher{
										pos:        position{line: 590, col: 17, offset: 20638},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 593, col: 5, offset: 20696},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 597, col: 6, offset: 20872},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 597, col: 6, offset: 20872},
									expr: &choiceExpr{
										pos: position{line: 597, col: 7, offset: 20873},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 597, col: 7, offset: 20873},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 597, col: 12, offset: 20878},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 24, offset: 20890},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 601, col: 1, offset: 20930},
			expr: &actionExpr{
				pos: position{line: 601, col: 31, offset: 20960},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 601, col: 31, offset: 20960},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 601, col: 40, offset: 20969},
						expr: &ruleRefExpr{
							pos:  position{line: 601, col: 41, offset: 20970},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 608, col: 1, offset: 21161},
			expr: &choiceExpr{
				pos: position{line: 608, col: 19, offset: 21179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 608, col: 19, offset: 21179},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 608, col: 19, offset: 21179},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 9, offset: 21225},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 610, col: 9, offset: 21225},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 9, offset: 21273},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 612, col: 9, offset: 21273},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 614, col: 9, offset: 21331},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 614, col: 9, offset: 21331},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 9, offset: 21385},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 616, col: 9, offset: 21385},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 625, col: 1, offset: 21692},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 21739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 21739},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 21739},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 21739},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 627, col: 16, offset: 21750},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 17, offset: 21751},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 627, col: 37, offset: 21771},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 40, offset: 21774},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 627, col: 56, offset: 21790},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 627, col: 61, offset: 21795},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 627, col: 67, offset: 21801},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 68, offset: 21802},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 21994},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 631, col: 5, offset: 21994},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 21994},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 631, col: 16, offset: 22005},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 17, offset: 22006},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 631, col: 37, offset: 22026},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 631, col: 43, offset: 22032},
										expr: &ruleRefExpr{
											pos:  position{line: 631, col: 44, offset: 22033},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 636, col: 1, offset: 22198},
			expr: &actionExpr{
				pos: position{line: 636, col: 20, offset: 22217},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 636, col: 20, offset: 22217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 20, offset: 22217},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 636, col: 31, offset: 22228},
								expr: &ruleRefExpr{
									pos:  position{line: 636, col: 32, offset: 22229},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 637, col: 5, offset: 22254},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 22545},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 16, offset: 22556},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 22579},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 646, col: 16, offset: 22590},
								expr: &ruleRefExpr{
									pos:  position{line: 646, col: 17, offset: 22591},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 650, col: 1, offset: 22725},
			expr: &actionExpr{
				pos: position{line: 650, col: 19, offset: 22743},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 650, col: 19, offset: 22743},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 19, offset: 22743},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 30, offset: 22754},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 50, offset: 22774},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 61, offset: 22785},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 62, offset: 22786},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 654, col: 1, offset: 22892},
			expr: &actionExpr{
				pos: position{line: 654, col: 23, offset: 22914},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 654, col: 23, offset: 22914},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 654, col: 23, offset: 22914},
							expr: &seqExpr{
								pos: position{line: 654, col: 25, offset: 22916},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 654, col: 25, offset: 22916},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 45, offset: 22936},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 22966},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 655, col: 15, offset: 22976},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 655, col: 15, offset: 22976},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 655, col: 26, offset: 22987},
										expr: &ruleRefExpr{
											pos:  position{line: 655, col: 26, offset: 22987},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 42, offset: 23003},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 655, col: 52, offset: 23013},
								expr: &ruleRefExpr{
									pos:  position{line: 655, col: 53, offset: 23014},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 65, offset: 23026},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 659, col: 1, offset: 23116},
			expr: &actionExpr{
				pos: position{line: 659, col: 23, offset: 23138},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 659, col: 23, offset: 23138},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 659, col: 33, offset: 23148},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 663, col: 1, offset: 23194},
			expr: &choiceExpr{
				pos: position{line: 665, col: 5, offset: 23246},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 23246},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 23246},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 665, col: 5, offset: 23246},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 665, col: 16, offset: 23257},
										expr: &ruleRefExpr{
											pos:  position{line: 665, col: 17, offset: 23258},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 666, col: 5, offset: 23282},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 5, offset: 23494},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 8, offset: 23497},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 673, col: 24, offset: 23513},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 29, offset: 23518},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 673, col: 35, offset: 23524},
										expr: &ruleRefExpr{
											pos:  position{line: 673, col: 36, offset: 23525},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 23717},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 23717},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 23717},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 677, col: 16, offset: 23728},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 17, offset: 23729},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 678, col: 5, offset: 23753},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 685, col: 5, offset: 23965},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 685, col: 11, offset: 23971},
										expr: &ruleRefExpr{
											pos:  position{line: 685, col: 12, offset: 23972},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 689, col: 1, offset: 24073},
			expr: &actionExpr{
				pos: position{line: 689, col: 19, offset: 24091},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 689, col: 19, offset: 24091},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 689, col: 19, offset: 24091},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 20, offset: 24092},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 689, col: 24, offset: 24096},
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 25, offset: 24097},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 24111},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 690, col: 15, offset: 24121},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 690, col: 15, offset: 24121},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 690, col: 15, offset: 24121},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 690, col: 24, offset: 24130},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 692, col: 9, offset: 24222},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 692, col: 9, offset: 24222},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 692, col: 9, offset: 24222},
													expr: &ruleRefExpr{
														pos:  position{line: 692, col: 10, offset: 24223},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 692, col: 25, offset: 24238},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 692, col: 34, offset: 24247},
														expr: &ruleRefExpr{
															pos:  position{line: 692, col: 35, offset: 24248},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 692, col: 51, offset: 24264},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 692, col: 61, offset: 24274},
														expr: &ruleRefExpr{
															pos:  position{line: 692, col: 62, offset: 24275},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 692, col: 74, offset: 24287},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 698, col: 1, offset: 24423},
			expr: &actionExpr{
				pos: position{line: 698, col: 18, offset: 24440},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 698, col: 18, offset: 24440},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 698, col: 18, offset: 24440},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 19, offset: 24441},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 698, col: 23, offset: 24445},
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 24, offset: 24446},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 5, offset: 24461},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 699, col: 14, offset: 24470},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 14, offset: 24470},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 700, col: 11, offset: 24491},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 701, col: 11, offset: 24509},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 702, col: 11, offset: 24532},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 703, col: 11, offset: 24548},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 11, offset: 24571},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 11, offset: 24597},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 24624},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 707, col: 11, offset: 24646},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 708, col: 11, offset: 24672},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 24713},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 11, offset: 24740},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 717, col: 1, offset: 25000},
			expr: &actionExpr{
				pos: position{line: 717, col: 37, offset: 25036},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 717, col: 37, offset: 25036},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 717, col: 37, offset: 25036},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 38, offset: 25037},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 717, col: 48, offset: 25047},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 49, offset: 25048},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 64, offset: 25063},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 717, col: 73, offset: 25072},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 74, offset: 25073},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 108, offset: 25107},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 717, col: 118, offset: 25117},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 119, offset: 25118},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 131, offset: 25130},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 721, col: 1, offset: 25221},
			expr: &actionExpr{
				pos: position{line: 721, col: 36, offset: 25256},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 721, col: 36, offset: 25256},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 721, col: 36, offset: 25256},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 37, offset: 25257},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 721, col: 41, offset: 25261},
							expr: &ruleRefExpr{
								pos:  position{line: 721, col: 42, offset: 25262},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 722, col: 5, offset: 25277},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 722, col: 14, offset: 25286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 722, col: 14, offset: 25286},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25307},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25325},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25348},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25364},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25387},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25409},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25435},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25461},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 735, col: 1, offset: 25595},
			expr: &actionExpr{
				pos: position{line: 735, col: 18, offset: 25612},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 735, col: 18, offset: 25612},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 735, col: 18, offset: 25612},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 735, col: 27, offset: 25621},
								expr: &choiceExpr{
									pos: position{line: 735, col: 28, offset: 25622},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 735, col: 28, offset: 25622},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 735, col: 40, offset: 25634},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 735, col: 56, offset: 25650},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 76, offset: 25670},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 739, col: 1, offset: 25704},
			expr: &actionExpr{
				pos: position{line: 739, col: 22, offset: 25725},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 739, col: 22, offset: 25725},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 22, offset: 25725},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 33, offset: 25736},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 34, offset: 25737},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 54, offset: 25757},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 739, col: 60, offset: 25763},
								expr: &actionExpr{
									pos: position{line: 739, col: 61, offset: 25764},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 739, col: 61, offset: 25764},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 739, col: 61, offset: 25764},
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 62, offset: 25765},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 739, col: 66, offset: 25769},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 72, offset: 25775},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 745, col: 1, offset: 25895},
			expr: &actionExpr{
				pos: position{line: 745, col: 26, offset: 25920},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 745, col: 26, offset: 25920},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 745, col: 26, offset: 25920},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 27, offset: 25921},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 745, col: 42, offset: 25936},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 43, offset: 25937},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 53, offset: 25947},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 745, col: 62, offset: 25956},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 63, offset: 25957},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 94, offset: 25988},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 745, col: 104, offset: 25998},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 105, offset: 25999},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 117, offset: 26011},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 749, col: 1, offset: 26102},
			expr: &actionExpr{
				pos: position{line: 749, col: 33, offset: 26134},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 749, col: 33, offset: 26134},
					expr: &seqExpr{
						pos: position{line: 749, col: 34, offset: 26135},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 749, col: 34, offset: 26135},
								expr: &ruleRefExpr{
									pos:  position{line: 749, col: 35, offset: 26136},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 749, col: 39, offset: 26140},
								expr: &ruleRefExpr{
									pos:  position{line: 749, col: 40, offset: 26141},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 749, col: 50, offset: 26151,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 756, col: 1, offset: 26375},
			expr: &actionExpr{
				pos: position{line: 756, col: 14, offset: 26388},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 756, col: 14, offset: 26388},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 756, col: 14, offset: 26388},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 756, col: 17, offset: 26391},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 756, col: 21, offset: 26395},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 21, offset: 26395},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 756, col: 25, offset: 26399},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 26, offset: 26400},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 763, col: 1, offset: 26684},
			expr: &actionExpr{
				pos: position{line: 763, col: 15, offset: 26698},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 763, col: 15, offset: 26698},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 763, col: 15, offset: 26698},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 16, offset: 26699},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 19, offset: 26702},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 763, col: 25, offset: 26708},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 763, col: 25, offset: 26708},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 764, col: 15, offset: 26732},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 765, col: 15, offset: 26758},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 766, col: 15, offset: 26787},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 767, col: 15, offset: 26816},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 768, col: 15, offset: 26847},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 769, col: 15, offset: 26878},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 15, offset: 26911},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 15, offset: 26947},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 15, offset: 26983},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 15, offset: 27020},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 777, col: 1, offset: 27174},
			expr: &choiceExpr{
				pos: position{line: 777, col: 21, offset: 27194},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 777, col: 21, offset: 27194},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 28, offset: 27201},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 34, offset: 27207},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 41, offset: 27214},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 47, offset: 27220},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 54, offset: 27227},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 60, offset: 27233},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 777, col: 66, offset: 27239},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 779, col: 1, offset: 27244},
			expr: &choiceExpr{
				pos: position{line: 779, col: 33, offset: 27276},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 779, col: 33, offset: 27276},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 779, col: 39, offset: 27282},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 779, col: 39, offset: 27282},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 783, col: 1, offset: 27415},
			expr: &actionExpr{
				pos: position{line: 783, col: 25, offset: 27439},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 783, col: 25, offset: 27439},
					expr: &litMatcher{
						pos:        position{line: 783, col: 25, offset: 27439},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 787, col: 1, offset: 27480},
			expr: &actionExpr{
				pos: position{line: 787, col: 25, offset: 27504},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 787, col: 25, offset: 27504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 787, col: 25, offset: 27504},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 787, col: 30, offset: 27509},
							expr: &litMatcher{
								pos:        position{line: 787, col: 30, offset: 27509},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 795, col: 1, offset: 27606},
			expr: &choiceExpr{
				pos: position{line: 795, col: 13, offset: 27618},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 795, col: 13, offset: 27618},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 795, col: 35, offset: 27640},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 797, col: 1, offset: 27661},
			expr: &actionExpr{
				pos: position{line: 797, col: 24, offset: 27684},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 797, col: 24, offset: 27684},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 797, col: 24, offset: 27684},
							expr: &litMatcher{
								pos:        position{line: 797, col: 25, offset: 27685},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 797, col: 30, offset: 27690},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 797, col: 35, offset: 27695},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 44, offset: 27704},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 797, col: 72, offset: 27732},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 801, col: 1, offset: 27857},
			expr: &seqExpr{
				pos: position{line: 801, col: 31, offset: 27887},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 801, col: 31, offset: 27887},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 801, col: 58, offset: 27914},
						expr: &actionExpr{
							pos: position{line: 801, col: 59, offset: 27915},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 801, col: 59, offset: 27915},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 801, col: 59, offset: 27915},
										expr: &litMatcher{
											pos:        position{line: 801, col: 61, offset: 27917},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 801, col: 67, offset: 27923},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 801, col: 76, offset: 27932},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 801, col: 76, offset: 27932},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 801, col: 81, offset: 27937},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 805, col: 1, offset: 28029},
			expr: &actionExpr{
				pos: position{line: 805, col: 31, offset: 28059},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 805, col: 31, offset: 28059},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 805, col: 31, offset: 28059},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 32, offset: 28060},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 40, offset: 28068},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 805, col: 49, offset: 28077},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 805, col: 49, offset: 28077},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 11, offset: 28108},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 11, offset: 28130},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 11, offset: 28154},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 11, offset: 28178},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 11, offset: 28204},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 11, offset: 28227},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 11, offset: 28243},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 11, offset: 28266},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 817, col: 1, offset: 28422},
			expr: &actionExpr{
				pos: position{line: 817, col: 27, offset: 28448},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 817, col: 27, offset: 28448},
					exprs: []interface{}{
						&anyMatcher{
							line: 817, col: 28, offset: 28449,
						},
						&zeroOrMoreExpr{
							pos: position{line: 817, col: 31, offset: 28452},
							expr: &seqExpr{
								pos: position{line: 817, col: 32, offset: 28453},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 817, col: 32, offset: 28453},
										expr: &litMatcher{
											pos:        position{line: 817, col: 33, offset: 28454},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 38, offset: 28459},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 39, offset: 28460},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 817, col: 42, offset: 28463},
										expr: &litMatcher{
											pos:        position{line: 817, col: 43, offset: 28464},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 47, offset: 28468},
										expr: &litMatcher{
											pos:        position{line: 817, col: 48, offset: 28469},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 817, col: 52, offset: 28473},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 53, offset: 28474},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 817, col: 61, offset: 28482,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 821, col: 1, offset: 28542},
			expr: &choiceExpr{
				pos: position{line: 821, col: 24, offset: 28565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 821, col: 24, offset: 28565},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 821, col: 24, offset: 28565},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 821, col: 24, offset: 28565},
									expr: &litMatcher{
										pos:        position{line: 821, col: 25, offset: 28566},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 821, col: 29, offset: 28570},
									expr: &litMatcher{
										pos:        position{line: 821, col: 30, offset: 28571},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 35, offset: 28576},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 39, offset: 28580},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 48, offset: 28589},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 76, offset: 28617},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 28797},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 28797},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 823, col: 5, offset: 28797},
									expr: &litMatcher{
										pos:        position{line: 823, col: 6, offset: 28798},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 11, offset: 28803},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 823, col: 16, offset: 28808},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 25, offset: 28817},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 53, offset: 28845},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 827, col: 1, offset: 29103},
			expr: &seqExpr{
				pos: position{line: 827, col: 31, offset: 29133},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 827, col: 31, offset: 29133},
						expr: &ruleRefExpr{
							pos:  position{line: 827, col: 32, offset: 29134},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 35, offset: 29137},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 827, col: 62, offset: 29164},
						expr: &actionExpr{
							pos: position{line: 827, col: 63, offset: 29165},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 827, col: 63, offset: 29165},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 827, col: 63, offset: 29165},
										expr: &seqExpr{
											pos: position{line: 827, col: 65, offset: 29167},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 827, col: 65, offset: 29167},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 827, col: 69, offset: 29171},
													expr: &ruleRefExpr{
														pos:  position{line: 827, col: 70, offset: 29172},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 827, col: 80, offset: 29182},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 827, col: 88, offset: 29190},
											expr: &ruleRefExpr{
												pos:  position{line: 827, col: 88, offset: 29190},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 827, col: 93, offset: 29195},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 102, offset: 29204},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 831, col: 1, offset: 29295},
			expr: &actionExpr{
				pos: position{line: 831, col: 31, offset: 29325},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 831, col: 31, offset: 29325},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 831, col: 31, offset: 29325},
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 32, offset: 29326},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 831, col: 40, offset: 29334},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 831, col: 49, offset: 29343},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 831, col: 49, offset: 29343},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 29373},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 29395},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 29419},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 29443},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 29469},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 29492},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 29508},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29531},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 843, col: 1, offset: 29687},
			expr: &actionExpr{
				pos: position{line: 843, col: 27, offset: 29713},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 843, col: 27, offset: 29713},
					exprs: []interface{}{
						&anyMatcher{
							line: 843, col: 28, offset: 29714,
						},
						&zeroOrMoreExpr{
							pos: position{line: 843, col: 31, offset: 29717},
							expr: &seqExpr{
								pos: position{line: 843, col: 32, offset: 29718},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 843, col: 32, offset: 29718},
										expr: &litMatcher{
											pos:        position{line: 843, col: 33, offset: 29719},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 37, offset: 29723},
										expr: &ruleRefExpr{
											pos:  position{line: 843, col: 38, offset: 29724},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 843, col: 41, offset: 29727},
										expr: &litMatcher{
											pos:        position{line: 843, col: 42, offset: 29728},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 46, offset: 29732},
										expr: &litMatcher{
											pos:        position{line: 843, col: 47, offset: 29733},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 843, col: 51, offset: 29737},
										expr: &ruleRefExpr{
											pos:  position{line: 843, col: 52, offset: 29738},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 843, col: 60, offset: 29746,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 847, col: 1, offset: 29806},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 29830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 29830},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 29830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 848, col: 5, offset: 29830},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 18, offset: 29843},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 40, offset: 29865},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 848, col: 45, offset: 29870},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 54, offset: 29879},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 848, col: 82, offset: 29907},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 9, offset: 30063},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 850, col: 9, offset: 30063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 850, col: 9, offset: 30063},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 22, offset: 30076},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 850, col: 44, offset: 30098},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 850, col: 49, offset: 30103},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 850, col: 58, offset: 30112},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 850, col: 86, offset: 30140},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 9, offset: 30339},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 853, col: 9, offset: 30339},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 853, col: 9, offset: 30339},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 22, offset: 30352},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 44, offset: 30374},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 853, col: 48, offset: 30378},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 57, offset: 30387},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 85, offset: 30415},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 861, col: 1, offset: 30622},
			expr: &choiceExpr{
				pos: position{line: 861, col: 15, offset: 30636},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 15, offset: 30636},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 39, offset: 30660},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 863, col: 1, offset: 30683},
			expr: &actionExpr{
				pos: position{line: 863, col: 26, offset: 30708},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 863, col: 26, offset: 30708},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 863, col: 26, offset: 30708},
							expr: &litMatcher{
								pos:        position{line: 863, col: 27, offset: 30709},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 863, col: 32, offset: 30714},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 863, col: 37, offset: 30719},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 46, offset: 30728},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 863, col: 76, offset: 30758},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 867, col: 1, offset: 30884},
			expr: &seqExpr{
				pos: position{line: 867, col: 33, offset: 30916},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 867, col: 33, offset: 30916},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 867, col: 62, offset: 30945},
						expr: &actionExpr{
							pos: position{line: 867, col: 63, offset: 30946},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 867, col: 63, offset: 30946},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 867, col: 63, offset: 30946},
										expr: &litMatcher{
											pos:        position{line: 867, col: 65, offset: 30948},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 867, col: 71, offset: 30954},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 867, col: 80, offset: 30963},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 867, col: 80, offset: 30963},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 867, col: 85, offset: 30968},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 871, col: 1, offset: 31062},
			expr: &actionExpr{
				pos: position{line: 871, col: 33, offset: 31094},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 871, col: 33, offset: 31094},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 871, col: 33, offset: 31094},
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 34, offset: 31095},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 42, offset: 31103},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 871, col: 51, offset: 31112},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 871, col: 51, offset: 31112},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 872, col: 11, offset: 31145},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 873, col: 11, offset: 31165},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 874, col: 11, offset: 31189},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 875, col: 11, offset: 31213},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 31239},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 31262},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 31278},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 31301},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 883, col: 1, offset: 31459},
			expr: &actionExpr{
				pos: position{line: 883, col: 29, offset: 31487},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 883, col: 29, offset: 31487},
					exprs: []interface{}{
						&anyMatcher{
							line: 883, col: 30, offset: 31488,
						},
						&zeroOrMoreExpr{
							pos: position{line: 883, col: 33, offset: 31491},
							expr: &seqExpr{
								pos: position{line: 883, col: 34, offset: 31492},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 883, col: 34, offset: 31492},
										expr: &litMatcher{
											pos:        position{line: 883, col: 35, offset: 31493},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 40, offset: 31498},
										expr: &litMatcher{
											pos:        position{line: 883, col: 41, offset: 31499},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 45, offset: 31503},
										expr: &litMatcher{
											pos:        position{line: 883, col: 46, offset: 31504},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 883, col: 50, offset: 31508},
										expr: &ruleRefExpr{
											pos:  position{line: 883, col: 51, offset: 31509},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 883, col: 59, offset: 31517,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 887, col: 1, offset: 31577},
			expr: &choiceExpr{
				pos: position{line: 887, col: 26, offset: 31602},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 26, offset: 31602},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 887, col: 26, offset: 31602},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 887, col: 26, offset: 31602},
									expr: &litMatcher{
										pos:        position{line: 887, col: 27, offset: 31603},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 887, col: 31, offset: 31607},
									expr: &litMatcher{
										pos:        position{line: 887, col: 32, offset: 31608},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 37, offset: 31613},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 887, col: 41, offset: 31617},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 50, offset: 31626},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 887, col: 80, offset: 31656},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 31838},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 889, col: 5, offset: 31838},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 889, col: 5, offset: 31838},
									expr: &litMatcher{
										pos:        position{line: 889, col: 6, offset: 31839},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 889, col: 11, offset: 31844},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 889, col: 16, offset: 31849},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 889, col: 25, offset: 31858},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 889, col: 55, offset: 31888},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 893, col: 1, offset: 32150},
			expr: &seqExpr{
				pos: position{line: 893, col: 33, offset: 32182},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 893, col: 33, offset: 32182},
						expr: &ruleRefExpr{
							pos:  position{line: 893, col: 34, offset: 32183},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 37, offset: 32186},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 893, col: 66, offset: 32215},
						expr: &actionExpr{
							pos: position{line: 893, col: 67, offset: 32216},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 893, col: 67, offset: 32216},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 893, col: 67, offset: 32216},
										expr: &seqExpr{
											pos: position{line: 893, col: 69, offset: 32218},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 893, col: 69, offset: 32218},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 893, col: 73, offset: 32222},
													expr: &ruleRefExpr{
														pos:  position{line: 893, col: 74, offset: 32223},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 893, col: 84, offset: 32233},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 893, col: 92, offset: 32241},
											expr: &ruleRefExpr{
												pos:  position{line: 893, col: 92, offset: 32241},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 893, col: 97, offset: 32246},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 106, offset: 32255},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 897, col: 1, offset: 32348},
			expr: &actionExpr{
				pos: position{line: 897, col: 33, offset: 32380},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 897, col: 33, offset: 32380},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 897, col: 33, offset: 32380},
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 34, offset: 32381},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 897, col: 42, offset: 32389},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 897, col: 51, offset: 32398},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 897, col: 51, offset: 32398},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 32430},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 32450},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 32474},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32498},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 32524},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 32547},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32563},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 32586},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 909, col: 1, offset: 32744},
			expr: &actionExpr{
				pos: position{line: 909, col: 29, offset: 32772},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 909, col: 29, offset: 32772},
					exprs: []interface{}{
						&anyMatcher{
							line: 909, col: 30, offset: 32773,
						},
						&zeroOrMoreExpr{
							pos: position{line: 909, col: 33, offset: 32776},
							expr: &seqExpr{
								pos: position{line: 909, col: 34, offset: 32777},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 909, col: 34, offset: 32777},
										expr: &litMatcher{
											pos:        position{line: 909, col: 35, offset: 32778},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 39, offset: 32782},
										expr: &ruleRefExpr{
											pos:  position{line: 909, col: 40, offset: 32783},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 909, col: 43, offset: 32786},
										expr: &litMatcher{
											pos:        position{line: 909, col: 44, offset: 32787},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 48, offset: 32791},
										expr: &litMatcher{
											pos:        position{line: 909, col: 49, offset: 32792},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 909, col: 53, offset: 32796},
										expr: &ruleRefExpr{
											pos:  position{line: 909, col: 54, offset: 32797},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 909, col: 62, offset: 32805,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 913, col: 1, offset: 32865},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 32891},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 32891},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 32891},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 914, col: 5, offset: 32891},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 18, offset: 32904},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 40, offset: 32926},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 914, col: 45, offset: 32931},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 54, offset: 32940},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 914, col: 84, offset: 32970},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 9, offset: 33126},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 916, col: 9, offset: 33126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 916, col: 9, offset: 33126},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 22, offset: 33139},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 44, offset: 33161},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 916, col: 49, offset: 33166},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 58, offset: 33175},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 88, offset: 33205},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 9, offset: 33404},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 919, col: 9, offset: 33404},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 9, offset: 33404},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 22, offset: 33417},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 44, offset: 33439},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 919, col: 48, offset: 33443},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 57, offset: 33452},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 87, offset: 33482},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 926, col: 1, offset: 33691},
			expr: &choiceExpr{
				pos: position{line: 926, col: 18, offset: 33708},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 926, col: 18, offset: 33708},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 45, offset: 33735},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 928, col: 1, offset: 33761},
			expr: &actionExpr{
				pos: position{line: 928, col: 29, offset: 33789},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 928, col: 29, offset: 33789},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 928, col: 29, offset: 33789},
							expr: &litMatcher{
								pos:        position{line: 928, col: 30, offset: 33790},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 928, col: 35, offset: 33795},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 928, col: 40, offset: 33800},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 49, offset: 33809},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 928, col: 82, offset: 33842},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 932, col: 1, offset: 33971},
			expr: &seqExpr{
				pos: position{line: 932, col: 36, offset: 34006},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 932, col: 36, offset: 34006},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 932, col: 68, offset: 34038},
						expr: &actionExpr{
							pos: position{line: 932, col: 69, offset: 34039},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 932, col: 69, offset: 34039},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 932, col: 69, offset: 34039},
										expr: &litMatcher{
											pos:        position{line: 932, col: 71, offset: 34041},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 932, col: 77, offset: 34047},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 932, col: 86, offset: 34056},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 932, col: 86, offset: 34056},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 932, col: 91, offset: 34061},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 936, col: 1, offset: 34158},
			expr: &actionExpr{
				pos: position{line: 936, col: 36, offset: 34193},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 936, col: 36, offset: 34193},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 936, col: 36, offset: 34193},
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 37, offset: 34194},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 936, col: 45, offset: 34202},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 936, col: 54, offset: 34211},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 936, col: 54, offset: 34211},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 937, col: 11, offset: 34247},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 938, col: 11, offset: 34266},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 34288},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 34312},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 34338},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 34361},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 34377},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 34400},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 948, col: 1, offset: 34561},
			expr: &actionExpr{
				pos: position{line: 948, col: 32, offset: 34592},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 948, col: 32, offset: 34592},
					exprs: []interface{}{
						&anyMatcher{
							line: 948, col: 33, offset: 34593,
						},
						&zeroOrMoreExpr{
							pos: position{line: 948, col: 36, offset: 34596},
							expr: &seqExpr{
								pos: position{line: 948, col: 37, offset: 34597},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 948, col: 37, offset: 34597},
										expr: &litMatcher{
											pos:        position{line: 948, col: 38, offset: 34598},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 43, offset: 34603},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 44, offset: 34604},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 948, col: 47, offset: 34607},
										expr: &litMatcher{
											pos:        position{line: 948, col: 48, offset: 34608},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 52, offset: 34612},
										expr: &litMatcher{
											pos:        position{line: 948, col: 53, offset: 34613},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 948, col: 57, offset: 34617},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 58, offset: 34618},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 948, col: 66, offset: 34626,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 952, col: 1, offset: 34686},
			expr: &choiceExpr{
				pos: position{line: 952, col: 29, offset: 34714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 29, offset: 34714},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 952, col: 29, offset: 34714},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 952, col: 29, offset: 34714},
									expr: &litMatcher{
										pos:        position{line: 952, col: 30, offset: 34715},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 952, col: 34, offset: 34719},
									expr: &litMatcher{
										pos:        position{line: 952, col: 35, offset: 34720},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 40, offset: 34725},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 952, col: 44, offset: 34729},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 952, col: 53, offset: 34738},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 952, col: 86, offset: 34771},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 34956},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 34956},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 954, col: 5, offset: 34956},
									expr: &litMatcher{
										pos:        position{line: 954, col: 6, offset: 34957},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 11, offset: 34962},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 954, col: 16, offset: 34967},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 25, offset: 34976},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 954, col: 58, offset: 35009},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 958, col: 1, offset: 35277},
			expr: &seqExpr{
				pos: position{line: 958, col: 36, offset: 35312},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 958, col: 36, offset: 35312},
						expr: &ruleRefExpr{
							pos:  position{line: 958, col: 37, offset: 35313},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 40, offset: 35316},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 958, col: 72, offset: 35348},
						expr: &actionExpr{
							pos: position{line: 958, col: 73, offset: 35349},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 958, col: 73, offset: 35349},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 958, col: 73, offset: 35349},
										expr: &seqExpr{
											pos: position{line: 958, col: 75, offset: 35351},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 958, col: 75, offset: 35351},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 958, col: 79, offset: 35355},
													expr: &ruleRefExpr{
														pos:  position{line: 958, col: 80, offset: 35356},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 958, col: 90, offset: 35366},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 958, col: 98, offset: 35374},
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 98, offset: 35374},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 958, col: 103, offset: 35379},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 958, col: 112, offset: 35388},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 962, col: 1, offset: 35484},
			expr: &actionExpr{
				pos: position{line: 962, col: 37, offset: 35520},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 962, col: 37, offset: 35520},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 962, col: 46, offset: 35529},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 962, col: 46, offset: 35529},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 963, col: 11, offset: 35567},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 964, col: 11, offset: 35603},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 35623},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 966, col: 11, offset: 35644},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 967, col: 11, offset: 35668},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 968, col: 11, offset: 35694},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 969, col: 11, offset: 35717},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 970, col: 11, offset: 35733},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 971, col: 11, offset: 35756},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 975, col: 1, offset: 35917},
			expr: &actionExpr{
				pos: position{line: 975, col: 32, offset: 35948},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 32, offset: 35948},
					exprs: []interface{}{
						&anyMatcher{
							line: 975, col: 33, offset: 35949,
						},
						&zeroOrMoreExpr{
							pos: position{line: 975, col: 36, offset: 35952},
							expr: &seqExpr{
								pos: position{line: 975, col: 37, offset: 35953},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 975, col: 37, offset: 35953},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 38, offset: 35954},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 975, col: 41, offset: 35957},
										expr: &litMatcher{
											pos:        position{line: 975, col: 42, offset: 35958},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 46, offset: 35962},
										expr: &litMatcher{
											pos:        position{line: 975, col: 47, offset: 35963},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 51, offset: 35967},
										expr: &litMatcher{
											pos:        position{line: 975, col: 52, offset: 35968},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 975, col: 56, offset: 35972},
										expr: &ruleRefExpr{
											pos:  position{line: 975, col: 57, offset: 35973},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 975, col: 65, offset: 35981,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 979, col: 1, offset: 36062},
			expr: &choiceExpr{
				pos: position{line: 980, col: 5, offset: 36091},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 36091},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 980, col: 5, offset: 36091},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 980, col: 5, offset: 36091},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 980, col: 18, offset: 36104},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 980, col: 40, offset: 36126},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 980, col: 45, offset: 36131},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 980, col: 54, offset: 36140},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 980, col: 87, offset: 36173},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 9, offset: 36329},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 982, col: 9, offset: 36329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 982, col: 9, offset: 36329},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 982, col: 22, offset: 36342},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 982, col: 44, offset: 36364},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 982, col: 49, offset: 36369},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 982, col: 58, offset: 36378},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 982, col: 91, offset: 36411},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 9, offset: 36610},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 985, col: 9, offset: 36610},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 985, col: 9, offset: 36610},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 22, offset: 36623},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 985, col: 44, offset: 36645},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 985, col: 48, offset: 36649},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 57, offset: 36658},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 985, col: 90, offset: 36691},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 989, col: 1, offset: 36840},
			expr: &actionExpr{
				pos: position{line: 989, col: 18, offset: 36857},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 989, col: 18, offset: 36857},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 989, col: 18, offset: 36857},
							expr: &litMatcher{
								pos:        position{line: 989, col: 19, offset: 36858},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 989, col: 23, offset: 36862},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 989, col: 27, offset: 36866},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 36, offset: 36875},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 989, col: 58, offset: 36897},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 993, col: 1, offset: 36986},
			expr: &choiceExpr{
				pos: position{line: 993, col: 25, offset: 37010},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 993, col: 25, offset: 37010},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 38, offset: 37023},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 995, col: 1, offset: 37042},
			expr: &actionExpr{
				pos: position{line: 995, col: 21, offset: 37062},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 995, col: 21, offset: 37062},
					expr: &seqExpr{
						pos: position{line: 995, col: 22, offset: 37063},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 995, col: 22, offset: 37063},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 23, offset: 37064},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 995, col: 31, offset: 37072},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 32, offset: 37073},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 995, col: 35, offset: 37076},
								expr: &litMatcher{
									pos:        position{line: 995, col: 36, offset: 37077},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 995, col: 40, offset: 37081,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 999, col: 1, offset: 37114},
			expr: &actionExpr{
				pos: position{line: 999, col: 25, offset: 37138},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 999, col: 25, offset: 37138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 999, col: 25, offset: 37138},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 38, offset: 37151},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 60, offset: 37173},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 999, col: 64, offset: 37177},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 73, offset: 37186},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 999, col: 95, offset: 37208},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1003, col: 1, offset: 37337},
			expr: &actionExpr{
				pos: position{line: 1003, col: 20, offset: 37356},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1003, col: 20, offset: 37356},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1003, col: 20, offset: 37356},
							expr: &litMatcher{
								pos:        position{line: 1003, col: 21, offset: 37357},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1003, col: 25, offset: 37361},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1003, col: 29, offset: 37365},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1003, col: 38, offset: 37374},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1003, col: 62, offset: 37398},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1007, col: 1, offset: 37489},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 27, offset: 37515},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1007, col: 27, offset: 37515},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 40, offset: 37528},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1009, col: 1, offset: 37549},
			expr: &actionExpr{
				pos: position{line: 1009, col: 23, offset: 37571},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1009, col: 23, offset: 37571},
					expr: &seqExpr{
						pos: position{line: 1009, col: 24, offset: 37572},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1009, col: 24, offset: 37572},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 25, offset: 37573},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1009, col: 33, offset: 37581},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 34, offset: 37582},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1009, col: 37, offset: 37585},
								expr: &litMatcher{
									pos:        position{line: 1009, col: 38, offset: 37586},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1009, col: 42, offset: 37590,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1013, col: 1, offset: 37623},
			expr: &actionExpr{
				pos: position{line: 1013, col: 27, offset: 37649},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 27, offset: 37649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1013, col: 27, offset: 37649},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 40, offset: 37662},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1013, col: 62, offset: 37684},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 66, offset: 37688},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 75, offset: 37697},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1013, col: 99, offset: 37721},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1020, col: 1, offset: 37957},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 16, offset: 37972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1020, col: 16, offset: 37972},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 40, offset: 37996},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 64, offset: 38020},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1022, col: 1, offset: 38038},
			expr: &litMatcher{
				pos:        position{line: 1022, col: 32, offset: 38069},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1024, col: 1, offset: 38074},
			expr: &actionExpr{
				pos: position{line: 1024, col: 26, offset: 38099},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 26, offset: 38099},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1024, col: 26, offset: 38099},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1024, col: 54, offset: 38127},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 63, offset: 38136},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1024, col: 93, offset: 38166},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1024, col: 121, offset: 38194},
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 122, offset: 38195},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1028, col: 1, offset: 38294},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 33, offset: 38326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 34, offset: 38327},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 34, offset: 38327},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1028, col: 35, offset: 38328},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1028, col: 35, offset: 38328},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 36, offset: 38329},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1028, col: 64, offset: 38357},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 65, offset: 38358},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1028, col: 68, offset: 38361},
											expr: &ruleRefExpr{
												pos:  position{line: 1028, col: 69, offset: 38362},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1028, col: 77, offset: 38370,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1028, col: 80, offset: 38373},
									expr: &seqExpr{
										pos: position{line: 1028, col: 81, offset: 38374},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1028, col: 81, offset: 38374},
												expr: &seqExpr{
													pos: position{line: 1028, col: 83, offset: 38376},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1028, col: 83, offset: 38376},
															expr: &ruleRefExpr{
																pos:  position{line: 1028, col: 83, offset: 38376},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1028, col: 87, offset: 38380},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1028, col: 116, offset: 38409},
												expr: &ruleRefExpr{
													pos:  position{line: 1028, col: 117, offset: 38410},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1028, col: 145, offset: 38438},
												expr: &ruleRefExpr{
													pos:  position{line: 1028, col: 146, offset: 38439},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1028, col: 154, offset: 38447,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 7, offset: 38589},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1030, col: 8, offset: 38590},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1030, col: 8, offset: 38590},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 9, offset: 38591},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 12, offset: 38594},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 13, offset: 38595},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 21, offset: 38603},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 22, offset: 38604},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1030, col: 50, offset: 38632,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1034, col: 1, offset: 38714},
			expr: &litMatcher{
				pos:        position{line: 1034, col: 32, offset: 38745},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1036, col: 1, offset: 38752},
			expr: &actionExpr{
				pos: position{line: 1036, col: 26, offset: 38777},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 26, offset: 38777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1036, col: 26, offset: 38777},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 54, offset: 38805},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 63, offset: 38814},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 93, offset: 38844},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1036, col: 121, offset: 38872},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 122, offset: 38873},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1040, col: 1, offset: 38972},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 33, offset: 39004},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 34, offset: 39005},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1040, col: 34, offset: 39005},
							expr: &seqExpr{
								pos: position{line: 1040, col: 35, offset: 39006},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1040, col: 35, offset: 39006},
										expr: &ruleRefExpr{
											pos:  position{line: 1040, col: 36, offset: 39007},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1040, col: 64, offset: 39035,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 7, offset: 39200},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1042, col: 7, offset: 39200},
							expr: &seqExpr{
								pos: position{line: 1042, col: 8, offset: 39201},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1042, col: 8, offset: 39201},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 9, offset: 39202},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1042, col: 12, offset: 39205},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 13, offset: 39206},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1042, col: 21, offset: 39214},
										expr: &ruleRefExpr{
											pos:  position{line: 1042, col: 22, offset: 39215},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1042, col: 50, offset: 39243,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1046, col: 1, offset: 39326},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 21, offset: 39346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1046, col: 21, offset: 39346},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1046, col: 21, offset: 39346},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 21, offset: 39346},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 30, offset: 39355},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1046, col: 38, offset: 39363},
										expr: &ruleRefExpr{
											pos:  position{line: 1046, col: 39, offset: 39364},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1046, col: 67, offset: 39392},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 39482},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 39482},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 39482},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 15, offset: 39492},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1048, col: 23, offset: 39500},
										expr: &choiceExpr{
											pos: position{line: 1048, col: 24, offset: 39501},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1048, col: 24, offset: 39501},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1048, col: 37, offset: 39514},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 65, offset: 39542},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1052, col: 1, offset: 39632},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 31, offset: 39662},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 31, offset: 39662},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 43, offset: 39674},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1052, col: 52, offset: 39683},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1052, col: 53, offset: 39684},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 53, offset: 39684},
									expr: &litMatcher{
										pos:        position{line: 1052, col: 54, offset: 39685},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1052, col: 58, offset: 39689,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1059, col: 1, offset: 39859},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 19, offset: 39877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1059, col: 19, offset: 39877},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1059, col: 19, offset: 39877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1059, col: 19, offset: 39877},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 24, offset: 39882},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 28, offset: 39886},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1059, col: 32, offset: 39890},
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 32, offset: 39890},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 36, offset: 39894},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 40, offset: 39898},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 47, offset: 39905},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1059, col: 68, offset: 39926},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 40001},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 40001},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 40001},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 10, offset: 40006},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 14, offset: 40010},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1061, col: 18, offset: 40014},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1065, col: 1, offset: 40077},
			expr: &actionExpr{
				pos: position{line: 1065, col: 24, offset: 40100},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1065, col: 24, offset: 40100},
					expr: &choiceExpr{
						pos: position{line: 1065, col: 25, offset: 40101},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1065, col: 25, offset: 40101},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1065, col: 37, offset: 40113},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1065, col: 47, offset: 40123},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1065, col: 47, offset: 40123},
										expr: &litMatcher{
											pos:        position{line: 1065, col: 48, offset: 40124},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1065, col: 54, offset: 40130,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1072, col: 1, offset: 40272},
			expr: &actionExpr{
				pos: position{line: 1072, col: 9, offset: 40280},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1072, col: 9, offset: 40280},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1072, col: 15, offset: 40286},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1072, col: 15, offset: 40286},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1072, col: 30, offset: 40301},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1077, col: 1, offset: 40408},
			expr: &actionExpr{
				pos: position{line: 1077, col: 17, offset: 40424},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1077, col: 17, offset: 40424},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1077, col: 17, offset: 40424},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 25, offset: 40432},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1077, col: 30, offset: 40437},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1077, col: 30, offset: 40437},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1077, col: 41, offset: 40448},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1077, col: 55, offset: 40462},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1077, col: 73, offset: 40480},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1081, col: 1, offset: 40598},
			expr: &actionExpr{
				pos: position{line: 1081, col: 17, offset: 40614},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 17, offset: 40614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1081, col: 17, offset: 40614},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 22, offset: 40619},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 32, offset: 40629},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1081, col: 49, offset: 40646},
								expr: &ruleRefExpr{
									pos:  position{line: 1081, col: 50, offset: 40647},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1085, col: 1, offset: 40740},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 19, offset: 40758},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 19, offset: 40758},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 44, offset: 40783},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1087, col: 1, offset: 40810},
			expr: &actionExpr{
				pos: position{line: 1087, col: 27, offset: 40836},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 27, offset: 40836},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1087, col: 27, offset: 40836},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1087, col: 31, offset: 40840},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1087, col: 36, offset: 40845},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 37, offset: 40846},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1087, col: 66, offset: 40875},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1091, col: 1, offset: 40937},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 41009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 41009},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 41009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 41009},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 10, offset: 41014},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1093, col: 19, offset: 41023},
										expr: &seqExpr{
											pos: position{line: 1093, col: 20, offset: 41024},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1093, col: 20, offset: 41024},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 21, offset: 41025},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1093, col: 25, offset: 41029},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 26, offset: 41030},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1093, col: 30, offset: 41034},
													expr: &litMatcher{
														pos:        position{line: 1093, col: 31, offset: 41035},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1093, col: 37, offset: 41041},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1093, col: 37, offset: 41041},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1093, col: 50, offset: 41054},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1093, col: 63, offset: 41067},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1093, col: 73, offset: 41077},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1093, col: 74, offset: 41078},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1093, col: 74, offset: 41078},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1093, col: 75, offset: 41079},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1093, col: 92, offset: 41096,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1095, col: 11, offset: 41165},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1095, col: 16, offset: 41170},
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 16, offset: 41170},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1095, col: 24, offset: 41178},
									expr: &notExpr{
										pos: position{line: 1095, col: 26, offset: 41180},
										expr: &litMatcher{
											pos:        position{line: 1095, col: 27, offset: 41181},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 41306},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 41306},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 5, offset: 41306},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1099, col: 14, offset: 41315},
										expr: &seqExpr{
											pos: position{line: 1099, col: 15, offset: 41316},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1099, col: 15, offset: 41316},
													expr: &litMatcher{
														pos:        position{line: 1099, col: 16, offset: 41317},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1099, col: 20, offset: 41321},
													expr: &litMatcher{
														pos:        position{line: 1099, col: 21, offset: 41322},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1099, col: 26, offset: 41327},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1099, col: 26, offset: 41327},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1099, col: 39, offset: 41340},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1099, col: 52, offset: 41353},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1099, col: 62, offset: 41363},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1099, col: 63, offset: 41364},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1099, col: 63, offset: 41364},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1099, col: 64, offset: 41365},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1099, col: 81, offset: 41382,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1101, col: 11, offset: 41451},
									expr: &notExpr{
										pos: position{line: 1101, col: 13, offset: 41453},
										expr: &litMatcher{
											pos:        position{line: 1101, col: 14, offset: 41454},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1106, col: 1, offset: 41534},
			expr: &actionExpr{
				pos: position{line: 1106, col: 30, offset: 41563},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 30, offset: 41563},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1106, col: 30, offset: 41563},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 34, offset: 41567},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1106, col: 39, offset: 41572},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 40, offset: 41573},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1106, col: 60, offset: 41593},
							expr: &litMatcher{
								pos:        position{line: 1106, col: 60, offset: 41593},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1106, col: 65, offset: 41598},
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 65, offset: 41598},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 69, offset: 41602},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1106, col: 80, offset: 41613},
								expr: &ruleRefExpr{
									pos:  position{line: 1106, col: 81, offset: 41614},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1106, col: 100, offset: 41633},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1110, col: 1, offset: 41718},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 41781},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 41781},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 41781},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 41781},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 10, offset: 41786},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1112, col: 19, offset: 41795},
										expr: &seqExpr{
											pos: position{line: 1112, col: 20, offset: 41796},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1112, col: 20, offset: 41796},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 21, offset: 41797},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1112, col: 25, offset: 41801},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 26, offset: 41802},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1112, col: 30, offset: 41806},
													expr: &litMatcher{
														pos:        position{line: 1112, col: 31, offset: 41807},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1112, col: 37, offset: 41813},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1112, col: 37, offset: 41813},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1112, col: 50, offset: 41826},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1112, col: 63, offset: 41839},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1112, col: 73, offset: 41849},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1112, col: 74, offset: 41850},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1112, col: 74, offset: 41850},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1112, col: 75, offset: 41851},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1112, col: 92, offset: 41868,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1114, col: 11, offset: 41937},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1114, col: 16, offset: 41942},
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 16, offset: 41942},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1114, col: 24, offset: 41950},
									expr: &notExpr{
										pos: position{line: 1114, col: 26, offset: 41952},
										expr: &litMatcher{
											pos:        position{line: 1114, col: 27, offset: 41953},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 42078},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 42078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 5, offset: 42078},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1118, col: 14, offset: 42087},
										expr: &seqExpr{
											pos: position{line: 1118, col: 15, offset: 42088},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1118, col: 15, offset: 42088},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 16, offset: 42089},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 20, offset: 42093},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 21, offset: 42094},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1118, col: 25, offset: 42098},
													expr: &litMatcher{
														pos:        position{line: 1118, col: 26, offset: 42099},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1118, col: 31, offset: 42104},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1118, col: 31, offset: 42104},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 44, offset: 42117},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1118, col: 57, offset: 42130},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1118, col: 67, offset: 42140},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1118, col: 68, offset: 42141},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1118, col: 68, offset: 42141},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1118, col: 69, offset: 42142},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1118, col: 86, offset: 42159,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1120, col: 11, offset: 42228},
									expr: &notExpr{
										pos: position{line: 1120, col: 13, offset: 42230},
										expr: &litMatcher{
											pos:        position{line: 1120, col: 14, offset: 42231},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1127, col: 1, offset: 42412},
			expr: &actionExpr{
				pos: position{line: 1127, col: 15, offset: 42426},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 15, offset: 42426},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1127, col: 15, offset: 42426},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1127, col: 26, offset: 42437},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 27, offset: 42438},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1127, col: 47, offset: 42458},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 57, offset: 42468},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 63, offset: 42474},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 68, offset: 42479},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 86, offset: 42497},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1127, col: 103, offset: 42514},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1131, col: 1, offset: 42626},
			expr: &actionExpr{
				pos: position{line: 1131, col: 16, offset: 42641},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 16, offset: 42641},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 16, offset: 42641},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1131, col: 25, offset: 42650},
							expr: &litMatcher{
								pos:        position{line: 1131, col: 26, offset: 42651},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 30, offset: 42655},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 36, offset: 42661},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 41, offset: 42666},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 59, offset: 42684},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1135, col: 1, offset: 42797},
			expr: &actionExpr{
				pos: position{line: 1135, col: 20, offset: 42816},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 20, offset: 42816},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1135, col: 20, offset: 42816},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 24, offset: 42820},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 28, offset: 42824},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 29, offset: 42825},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 46, offset: 42842},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 46, offset: 42842},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 51, offset: 42847},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 57, offset: 42853},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 58, offset: 42854},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 75, offset: 42871},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 75, offset: 42871},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 80, offset: 42876},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 87, offset: 42883},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 88, offset: 42884},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1135, col: 105, offset: 42901},
							expr: &litMatcher{
								pos:        position{line: 1135, col: 105, offset: 42901},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1135, col: 110, offset: 42906},
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 110, offset: 42906},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 114, offset: 42910},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1135, col: 125, offset: 42921},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 126, offset: 42922},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1135, col: 145, offset: 42941},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1142, col: 1, offset: 43231},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 19, offset: 43249},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 19, offset: 43249},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 19, offset: 43249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 19, offset: 43249},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 32, offset: 43262},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 41, offset: 43271},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1142, col: 58, offset: 43288},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 43363},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 43363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 43363},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 21, offset: 43379},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 26, offset: 43384},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 39, offset: 43397},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 43, offset: 43401},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 52, offset: 43410},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 69, offset: 43427},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 43512},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 43512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1146, col: 5, offset: 43512},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 21, offset: 43528},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 26, offset: 43533},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 39, offset: 43546},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1150, col: 1, offset: 43661},
			expr: &actionExpr{
				pos: position{line: 1150, col: 16, offset: 43676},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1150, col: 16, offset: 43676},
					expr: &choiceExpr{
						pos: position{line: 1150, col: 17, offset: 43677},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1150, col: 17, offset: 43677},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1150, col: 29, offset: 43689},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1150, col: 39, offset: 43699},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1150, col: 39, offset: 43699},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 40, offset: 43700},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1150, col: 44, offset: 43704},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 45, offset: 43705},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1150, col: 49, offset: 43709},
										expr: &ruleRefExpr{
											pos:  position{line: 1150, col: 50, offset: 43710},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1150, col: 55, offset: 43715,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1154, col: 1, offset: 43800},
			expr: &actionExpr{
				pos: position{line: 1154, col: 20, offset: 43819},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1154, col: 20, offset: 43819},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1154, col: 29, offset: 43828},
						expr: &seqExpr{
							pos: position{line: 1154, col: 30, offset: 43829},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1154, col: 30, offset: 43829},
									expr: &litMatcher{
										pos:        position{line: 1154, col: 31, offset: 43830},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1154, col: 35, offset: 43834},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 36, offset: 43835},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1154, col: 40, offset: 43839},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 40, offset: 43839},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1154, col: 44, offset: 43843},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 45, offset: 43844},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1154, col: 61, offset: 43860},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1154, col: 75, offset: 43874},
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 75, offset: 43874},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1161, col: 1, offset: 44188},
			expr: &actionExpr{
				pos: position{line: 1161, col: 19, offset: 44206},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 19, offset: 44206},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1161, col: 19, offset: 44206},
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 20, offset: 44207},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 5, offset: 44236},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1162, col: 12, offset: 44243},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1162, col: 12, offset: 44243},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1163, col: 11, offset: 44266},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 44290},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1165, col: 11, offset: 44314},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1166, col: 11, offset: 44336},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 44358},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1168, col: 11, offset: 44381},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 44409},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1170, col: 11, offset: 44425},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1174, col: 1, offset: 44466},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 19, offset: 44484},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1174, col: 19, offset: 44484},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 19, offset: 44525},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 19, offset: 44565},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 19, offset: 44606},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 19, offset: 44647},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 19, offset: 44688},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 19, offset: 44726},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1186, col: 1, offset: 44945},
			expr: &seqExpr{
				pos: position{line: 1186, col: 25, offset: 44969},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1186, col: 25, offset: 44969},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 31, offset: 44975},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1188, col: 1, offset: 44981},
			expr: &actionExpr{
				pos: position{line: 1188, col: 16, offset: 44996},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 16, offset: 44996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 16, offset: 44996},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1188, col: 27, offset: 45007},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 28, offset: 45008},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1188, col: 48, offset: 45028},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 69, offset: 45049},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1188, col: 77, offset: 45057},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 78, offset: 45058},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1188, col: 100, offset: 45080},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1188, col: 100, offset: 45080},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1188, col: 123, offset: 45103},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1192, col: 1, offset: 45211},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 23, offset: 45233},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1192, col: 23, offset: 45233},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 35, offset: 45245},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 51, offset: 45261},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 62, offset: 45272},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1195, col: 1, offset: 45312},
			expr: &actionExpr{
				pos: position{line: 1195, col: 25, offset: 45336},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1195, col: 25, offset: 45336},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1195, col: 31, offset: 45342},
						expr: &ruleRefExpr{
							pos:  position{line: 1195, col: 32, offset: 45343},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1199, col: 1, offset: 45456},
			expr: &actionExpr{
				pos: position{line: 1199, col: 29, offset: 45484},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 29, offset: 45484},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1199, col: 29, offset: 45484},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 30, offset: 45485},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1199, col: 51, offset: 45506},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 52, offset: 45507},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 62, offset: 45517},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 68, offset: 45523},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1206, col: 1, offset: 45761},
			expr: &seqExpr{
				pos: position{line: 1206, col: 26, offset: 45786},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1206, col: 26, offset: 45786},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 33, offset: 45793},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1209, col: 1, offset: 45834},
			expr: &actionExpr{
				pos: position{line: 1209, col: 17, offset: 45850},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 17, offset: 45850},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1209, col: 17, offset: 45850},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1209, col: 28, offset: 45861},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 29, offset: 45862},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1209, col: 49, offset: 45882},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 71, offset: 45904},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1209, col: 79, offset: 45912},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 80, offset: 45913},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1209, col: 103, offset: 45936},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1209, col: 103, offset: 45936},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 127, offset: 45960},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1213, col: 1, offset: 46069},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 24, offset: 46092},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1213, col: 24, offset: 46092},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 40, offset: 46108},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1215, col: 1, offset: 46131},
			expr: &actionExpr{
				pos: position{line: 1215, col: 26, offset: 46156},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1215, col: 26, offset: 46156},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1215, col: 32, offset: 46162},
						expr: &ruleRefExpr{
							pos:  position{line: 1215, col: 33, offset: 46163},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1219, col: 1, offset: 46282},
			expr: &actionExpr{
				pos: position{line: 1219, col: 30, offset: 46311},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 30, offset: 46311},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1219, col: 30, offset: 46311},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 31, offset: 46312},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 53, offset: 46334},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1219, col: 59, offset: 46340},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1219, col: 59, offset: 46340},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1219, col: 59, offset: 46340},
											expr: &ruleRefExpr{
												pos:  position{line: 1219, col: 60, offset: 46341},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1219, col: 64, offset: 46345},
											expr: &choiceExpr{
												pos: position{line: 1219, col: 65, offset: 46346},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1219, col: 65, offset: 46346},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1219, col: 77, offset: 46358},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1219, col: 87, offset: 46368},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1219, col: 87, offset: 46368},
																expr: &ruleRefExpr{
																	pos:  position{line: 1219, col: 88, offset: 46369},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1219, col: 92, offset: 46373,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1219, col: 128, offset: 46409},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1226, col: 1, offset: 46735},
			expr: &seqExpr{
				pos: position{line: 1226, col: 26, offset: 46760},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1226, col: 26, offset: 46760},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 33, offset: 46767},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1228, col: 1, offset: 46773},
			expr: &actionExpr{
				pos: position{line: 1228, col: 17, offset: 46789},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 17, offset: 46789},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 17, offset: 46789},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1228, col: 28, offset: 46800},
								expr: &ruleRefExpr{
									pos:  position{line: 1228, col: 29, offset: 46801},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1228, col: 49, offset: 46821},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 71, offset: 46843},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1228, col: 79, offset: 46851},
								expr: &choiceExpr{
									pos: position{line: 1228, col: 80, offset: 46852},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1228, col: 80, offset: 46852},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 92, offset: 46864},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 108, offset: 46880},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1228, col: 119, offset: 46891},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1228, col: 145, offset: 46917},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1228, col: 145, offset: 46917},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1228, col: 169, offset: 46941},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1233, col: 1, offset: 47068},
			expr: &actionExpr{
				pos: position{line: 1233, col: 26, offset: 47093},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1233, col: 26, offset: 47093},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1233, col: 32, offset: 47099},
						expr: &ruleRefExpr{
							pos:  position{line: 1233, col: 33, offset: 47100},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1237, col: 1, offset: 47214},
			expr: &actionExpr{
				pos: position{line: 1237, col: 30, offset: 47243},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1237, col: 30, offset: 47243},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1237, col: 30, offset: 47243},
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 31, offset: 47244},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1237, col: 53, offset: 47266},
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 54, offset: 47267},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1237, col: 64, offset: 47277},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1237, col: 70, offset: 47283},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1244, col: 1, offset: 47519},
			expr: &seqExpr{
				pos: position{line: 1244, col: 24, offset: 47542},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1244, col: 24, offset: 47542},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 31, offset: 47549},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1246, col: 1, offset: 47580},
			expr: &actionExpr{
				pos: position{line: 1246, col: 15, offset: 47594},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 15, offset: 47594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1246, col: 15, offset: 47594},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1246, col: 26, offset: 47605},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 27, offset: 47606},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1246, col: 47, offset: 47626},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 67, offset: 47646},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1246, col: 75, offset: 47654},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 76, offset: 47655},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1246, col: 97, offset: 47676},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1246, col: 97, offset: 47676},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1246, col: 119, offset: 47698},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1250, col: 1, offset: 47805},
			expr: &actionExpr{
				pos: position{line: 1251, col: 5, offset: 47831},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 5, offset: 47831},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1251, col: 5, offset: 47831},
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 6, offset: 47832},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1251, col: 26, offset: 47852},
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 27, offset: 47853},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1251, col: 31, offset: 47857},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1251, col: 40, offset: 47866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1251, col: 40, offset: 47866},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 15, offset: 47891},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1253, col: 15, offset: 47919},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 15, offset: 47945},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1255, col: 15, offset: 47968},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 15, offset: 47994},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1257, col: 15, offset: 48021},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 15, offset: 48048},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1259, col: 15, offset: 48075},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 15, offset: 48107},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1261, col: 15, offset: 48133},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 15, offset: 48160},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 15, offset: 48181},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 15, offset: 48209},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1265, col: 15, offset: 48253},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 15, offset: 48291},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 15, offset: 48326},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1271, col: 1, offset: 48385},
			expr: &actionExpr{
				pos: position{line: 1271, col: 24, offset: 48408},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1271, col: 24, offset: 48408},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1271, col: 30, offset: 48414},
						expr: &ruleRefExpr{
							pos:  position{line: 1271, col: 31, offset: 48415},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1280, col: 1, offset: 48761},
			expr: &actionExpr{
				pos: position{line: 1280, col: 15, offset: 48775},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 15, offset: 48775},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 15, offset: 48775},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 27, offset: 48787},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1281, col: 5, offset: 48811},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1285, col: 5, offset: 48997},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 25, offset: 49017},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 33, offset: 49025},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 34, offset: 49026},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1285, col: 55, offset: 49047},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1285, col: 55, offset: 49047},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 77, offset: 49069},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1289, col: 1, offset: 49184},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 22, offset: 49205},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 22, offset: 49205},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 41, offset: 49224},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 53, offset: 49236},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1291, col: 1, offset: 49257},
			expr: &actionExpr{
				pos: position{line: 1291, col: 21, offset: 49277},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 21, offset: 49277},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1291, col: 21, offset: 49277},
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 22, offset: 49278},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 42, offset: 49298},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 51, offset: 49307},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1296, col: 1, offset: 49369},
			expr: &actionExpr{
				pos: position{line: 1296, col: 24, offset: 49392},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1296, col: 24, offset: 49392},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1296, col: 30, offset: 49398},
						expr: &ruleRefExpr{
							pos:  position{line: 1296, col: 31, offset: 49399},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1300, col: 1, offset: 49489},
			expr: &actionExpr{
				pos: position{line: 1300, col: 28, offset: 49516},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 28, offset: 49516},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 28, offset: 49516},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 29, offset: 49517},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1300, col: 49, offset: 49537},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 50, offset: 49538},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 60, offset: 49548},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1300, col: 66, offset: 49554},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1300, col: 66, offset: 49554},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1300, col: 66, offset: 49554},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1300, col: 75, offset: 49563},
												expr: &ruleRefExpr{
													pos:  position{line: 1300, col: 76, offset: 49564},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1300, col: 109, offset: 49597},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1306, col: 1, offset: 49693},
			expr: &actionExpr{
				pos: position{line: 1306, col: 35, offset: 49727},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 35, offset: 49727},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1306, col: 35, offset: 49727},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 36, offset: 49728},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1306, col: 40, offset: 49732},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 41, offset: 49733},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 5, offset: 49748},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1307, col: 14, offset: 49757},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1307, col: 14, offset: 49757},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1308, col: 11, offset: 49775},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1309, col: 11, offset: 49798},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1310, col: 11, offset: 49814},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1311, col: 11, offset: 49837},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 11, offset: 49863},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1313, col: 11, offset: 49890},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1314, col: 11, offset: 49912},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1315, col: 11, offset: 49938},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 11, offset: 49979},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 11, offset: 50006},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1324, col: 1, offset: 50236},
			expr: &seqExpr{
				pos: position{line: 1324, col: 26, offset: 50261},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1324, col: 26, offset: 50261},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 33, offset: 50268},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1326, col: 1, offset: 50274},
			expr: &actionExpr{
				pos: position{line: 1326, col: 17, offset: 50290},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 17, offset: 50290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1326, col: 17, offset: 50290},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1326, col: 28, offset: 50301},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 29, offset: 50302},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1326, col: 49, offset: 50322},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 71, offset: 50344},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1326, col: 79, offset: 50352},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 80, offset: 50353},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1326, col: 104, offset: 50377},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1326, col: 104, offset: 50377},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1326, col: 128, offset: 50401},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1330, col: 1, offset: 50510},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 24, offset: 50533},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 24, offset: 50533},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 36, offset: 50545},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 52, offset: 50561},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 63, offset: 50572},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 81, offset: 50590},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1332, col: 1, offset: 50613},
			expr: &actionExpr{
				pos: position{line: 1332, col: 20, offset: 50632},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 20, offset: 50632},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1332, col: 20, offset: 50632},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 21, offset: 50633},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 34, offset: 50646},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 43, offset: 50655},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1337, col: 1, offset: 50718},
			expr: &actionExpr{
				pos: position{line: 1337, col: 26, offset: 50743},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1337, col: 26, offset: 50743},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1337, col: 32, offset: 50749},
						expr: &ruleRefExpr{
							pos:  position{line: 1337, col: 33, offset: 50750},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1341, col: 1, offset: 50864},
			expr: &actionExpr{
				pos: position{line: 1341, col: 30, offset: 50893},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1341, col: 30, offset: 50893},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1341, col: 30, offset: 50893},
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 31, offset: 50894},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1341, col: 53, offset: 50916},
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 54, offset: 50917},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1341, col: 64, offset: 50927},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1341, col: 70, offset: 50933},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1349, col: 1, offset: 51164},
			expr: &actionExpr{
				pos: position{line: 1349, col: 10, offset: 51173},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 10, offset: 51173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 10, offset: 51173},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1349, col: 21, offset: 51184},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 22, offset: 51185},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1349, col: 42, offset: 51205},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1350, col: 5, offset: 51224},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1350, col: 12, offset: 51231},
								expr: &ruleRefExpr{
									pos:  position{line: 1350, col: 13, offset: 51232},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 5, offset: 51254},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1351, col: 11, offset: 51260},
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 12, offset: 51261},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1352, col: 6, offset: 51278},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1352, col: 6, offset: 51278},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 23, offset: 51295},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1356, col: 1, offset: 51410},
			expr: &seqExpr{
				pos: position{line: 1356, col: 23, offset: 51432},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 23, offset: 51432},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1356, col: 27, offset: 51436},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 27, offset: 51436},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1358, col: 1, offset: 51441},
			expr: &seqExpr{
				pos: position{line: 1358, col: 19, offset: 51459},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1358, col: 19, offset: 51459},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 26, offset: 51466},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1361, col: 1, offset: 51535},
			expr: &actionExpr{
				pos: position{line: 1361, col: 20, offset: 51554},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 20, offset: 51554},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1361, col: 20, offset: 51554},
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 21, offset: 51555},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 36, offset: 51570},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1361, col: 42, offset: 51576},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 43, offset: 51577},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 55, offset: 51589},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 59, offset: 51593},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1365, col: 1, offset: 51661},
			expr: &actionExpr{
				pos: position{line: 1365, col: 14, offset: 51674},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 14, offset: 51674},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1365, col: 14, offset: 51674},
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 15, offset: 51675},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 30, offset: 51690},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1365, col: 36, offset: 51696},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 37, offset: 51697},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1365, col: 49, offset: 51709},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1365, col: 53, offset: 51713},
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 53, offset: 51713},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1369, col: 1, offset: 51782},
			expr: &actionExpr{
				pos: position{line: 1369, col: 14, offset: 51795},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1369, col: 14, offset: 51795},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1369, col: 14, offset: 51795},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1369, col: 33, offset: 51814},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1369, col: 42, offset: 51823},
								expr: &seqExpr{
									pos: position{line: 1369, col: 43, offset: 51824},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1369, col: 43, offset: 51824},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 44, offset: 51825},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1369, col: 63, offset: 51844},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 64, offset: 51845},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1369, col: 68, offset: 51849},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 68, offset: 51849},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1369, col: 72, offset: 51853},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1369, col: 86, offset: 51867},
											expr: &ruleRefExpr{
												pos:  position{line: 1369, col: 86, offset: 51867},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1376, col: 1, offset: 52113},
			expr: &litMatcher{
				pos:        position{line: 1376, col: 26, offset: 52138},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1378, col: 1, offset: 52146},
			expr: &actionExpr{
				pos: position{line: 1378, col: 17, offset: 52162},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 17, offset: 52162},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1378, col: 17, offset: 52162},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1378, col: 39, offset: 52184},
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 39, offset: 52184},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1378, col: 43, offset: 52188},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 51, offset: 52196},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1378, col: 59, offset: 52204},
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 60, offset: 52205},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1378, col: 81, offset: 52226},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1378, col: 82, offset: 52227},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1378, col: 82, offset: 52227},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1378, col: 104, offset: 52249},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1378, col: 112, offset: 52257},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1382, col: 1, offset: 52363},
			expr: &actionExpr{
				pos: position{line: 1382, col: 21, offset: 52383},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 21, offset: 52383},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1382, col: 21, offset: 52383},
							expr: &choiceExpr{
								pos: position{line: 1382, col: 22, offset: 52384},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1382, col: 22, offset: 52384},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 34, offset: 52396},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1382, col: 44, offset: 52406},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1382, col: 44, offset: 52406},
												expr: &ruleRefExpr{
													pos:  position{line: 1382, col: 45, offset: 52407},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1382, col: 67, offset: 52429},
												expr: &ruleRefExpr{
													pos:  position{line: 1382, col: 68, offset: 52430},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1382, col: 73, offset: 52435,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1382, col: 78, offset: 52440},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1386, col: 1, offset: 52480},
			expr: &actionExpr{
				pos: position{line: 1386, col: 22, offset: 52501},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 22, offset: 52501},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1386, col: 22, offset: 52501},
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 23, offset: 52502},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1386, col: 45, offset: 52524},
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 45, offset: 52524},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 49, offset: 52528},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 54, offset: 52533},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 63, offset: 52542},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1386, col: 89, offset: 52568},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1390, col: 1, offset: 52633},
			expr: &actionExpr{
				pos: position{line: 1390, col: 29, offset: 52661},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1390, col: 29, offset: 52661},
					expr: &choiceExpr{
						pos: position{line: 1390, col: 30, offset: 52662},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1390, col: 30, offset: 52662},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1390, col: 42, offset: 52674},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1390, col: 52, offset: 52684},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1390, col: 52, offset: 52684},
										expr: &ruleRefExpr{
											pos:  position{line: 1390, col: 53, offset: 52685},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1390, col: 58, offset: 52690,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1398, col: 1, offset: 52999},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 17, offset: 53015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 17, offset: 53015},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 49, offset: 53047},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 78, offset: 53076},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1400, col: 1, offset: 53112},
			expr: &litMatcher{
				pos:        position{line: 1400, col: 26, offset: 53137},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1403, col: 1, offset: 53209},
			expr: &actionExpr{
				pos: position{line: 1403, col: 31, offset: 53239},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 31, offset: 53239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 31, offset: 53239},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1403, col: 42, offset: 53250},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 43, offset: 53251},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 63, offset: 53271},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1403, col: 70, offset: 53278},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1408, col: 1, offset: 53508},
			expr: &actionExpr{
				pos: position{line: 1409, col: 5, offset: 53548},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 5, offset: 53548},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1409, col: 5, offset: 53548},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1409, col: 16, offset: 53559},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1409, col: 16, offset: 53559},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1409, col: 16, offset: 53559},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1409, col: 19, offset: 53562},
											expr: &choiceExpr{
												pos: position{line: 1409, col: 20, offset: 53563},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1409, col: 20, offset: 53563},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1409, col: 32, offset: 53575},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1409, col: 41, offset: 53584},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1409, col: 42, offset: 53585},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1409, col: 42, offset: 53585},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1409, col: 43, offset: 53586},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1409, col: 48, offset: 53591,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1413, col: 8, offset: 53682},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 5, offset: 53745},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1414, col: 16, offset: 53756},
								expr: &actionExpr{
									pos: position{line: 1415, col: 9, offset: 53766},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1415, col: 9, offset: 53766},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1415, col: 9, offset: 53766},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 10, offset: 53767},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1416, col: 9, offset: 53786},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1416, col: 20, offset: 53797},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1416, col: 20, offset: 53797},
														expr: &choiceExpr{
															pos: position{line: 1416, col: 21, offset: 53798},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1416, col: 21, offset: 53798},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1416, col: 33, offset: 53810},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1416, col: 43, offset: 53820},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1416, col: 43, offset: 53820},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1416, col: 44, offset: 53821},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1416, col: 49, offset: 53826,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1418, col: 12, offset: 53883},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1425, col: 1, offset: 54113},
			expr: &actionExpr{
				pos: position{line: 1425, col: 39, offset: 54151},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 39, offset: 54151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1425, col: 39, offset: 54151},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1425, col: 50, offset: 54162},
								expr: &ruleRefExpr{
									pos:  position{line: 1425, col: 51, offset: 54163},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 9, offset: 54191},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1426, col: 31, offset: 54213},
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 31, offset: 54213},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 35, offset: 54217},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 43, offset: 54225},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 50, offset: 54232},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1426, col: 92, offset: 54274},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1426, col: 93, offset: 54275},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1426, col: 93, offset: 54275},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1426, col: 115, offset: 54297},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1426, col: 123, offset: 54305},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1431, col: 1, offset: 54464},
			expr: &actionExpr{
				pos: position{line: 1431, col: 44, offset: 54507},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1431, col: 44, offset: 54507},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1431, col: 50, offset: 54513},
						expr: &ruleRefExpr{
							pos:  position{line: 1431, col: 51, offset: 54514},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1435, col: 1, offset: 54598},
			expr: &actionExpr{
				pos: position{line: 1436, col: 5, offset: 54653},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1436, col: 5, offset: 54653},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1436, col: 5, offset: 54653},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1436, col: 11, offset: 54659},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1436, col: 11, offset: 54659},
									expr: &choiceExpr{
										pos: position{line: 1436, col: 12, offset: 54660},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1436, col: 12, offset: 54660},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1436, col: 24, offset: 54672},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1436, col: 34, offset: 54682},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1436, col: 34, offset: 54682},
														expr: &ruleRefExpr{
															pos:  position{line: 1436, col: 35, offset: 54683},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1436, col: 57, offset: 54705},
														expr: &ruleRefExpr{
															pos:  position{line: 1436, col: 58, offset: 54706},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1436, col: 62, offset: 54710,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 8, offset: 54759},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1443, col: 1, offset: 54885},
			expr: &actionExpr{
				pos: position{line: 1444, col: 5, offset: 54923},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1444, col: 5, offset: 54923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1444, col: 5, offset: 54923},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1444, col: 16, offset: 54934},
								expr: &ruleRefExpr{
									pos:  position{line: 1444, col: 17, offset: 54935},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1445, col: 5, offset: 54959},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 5, offset: 55173},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 12, offset: 55180},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1456, col: 1, offset: 55330},
			expr: &actionExpr{
				pos: position{line: 1456, col: 16, offset: 55345},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1456, col: 16, offset: 55345},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1461, col: 1, offset: 55428},
			expr: &actionExpr{
				pos: position{line: 1461, col: 39, offset: 55466},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1461, col: 39, offset: 55466},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1461, col: 45, offset: 55472},
						expr: &ruleRefExpr{
							pos:  position{line: 1461, col: 46, offset: 55473},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1465, col: 1, offset: 55553},
			expr: &actionExpr{
				pos: position{line: 1465, col: 38, offset: 55590},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1465, col: 38, offset: 55590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1465, col: 38, offset: 55590},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1465, col: 44, offset: 55596},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1465, col: 44, offset: 55596},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1465, col: 44, offset: 55596},
											expr: &ruleRefExpr{
												pos:  position{line: 1465, col: 46, offset: 55598},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1465, col: 57, offset: 55609},
											expr: &choiceExpr{
												pos: position{line: 1465, col: 58, offset: 55610},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1465, col: 58, offset: 55610},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1465, col: 70, offset: 55622},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1465, col: 80, offset: 55632},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1465, col: 80, offset: 55632},
																expr: &ruleRefExpr{
																	pos:  position{line: 1465, col: 81, offset: 55633},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1465, col: 86, offset: 55638,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1467, col: 4, offset: 55679},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1474, col: 1, offset: 55851},
			expr: &actionExpr{
				pos: position{line: 1474, col: 14, offset: 55864},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 14, offset: 55864},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1474, col: 14, offset: 55864},
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 15, offset: 55865},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1474, col: 19, offset: 55869},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1481, col: 1, offset: 56017},
			expr: &charClassMatcher{
				pos:        position{line: 1481, col: 13, offset: 56029},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1483, col: 1, offset: 56039},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 16, offset: 56054},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1483, col: 16, offset: 56054},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 22, offset: 56060},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 28, offset: 56066},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1483, col: 34, offset: 56072},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1485, col: 1, offset: 56077},
			expr: &oneOrMoreExpr{
				pos: position{line: 1485, col: 14, offset: 56090},
				expr: &charClassMatcher{
					pos:        position{line: 1485, col: 14, offset: 56090},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1487, col: 1, offset: 56101},
			expr: &litMatcher{
				pos:        position{line: 1487, col: 8, offset: 56108},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1489, col: 1, offset: 56113},
			expr: &actionExpr{
				pos: position{line: 1489, col: 15, offset: 56127},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 15, offset: 56127},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1489, col: 15, offset: 56127},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1489, col: 25, offset: 56137},
							expr: &choiceExpr{
								pos: position{line: 1489, col: 27, offset: 56139},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 27, offset: 56139},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 32, offset: 56144},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1494, col: 1, offset: 56409},
			expr: &actionExpr{
				pos: position{line: 1494, col: 14, offset: 56422},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1494, col: 15, offset: 56423},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1494, col: 15, offset: 56423},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 27, offset: 56435},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1494, col: 46, offset: 56454},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1494, col: 60, offset: 56468},
							expr: &actionExpr{
								pos: position{line: 1494, col: 61, offset: 56469},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1494, col: 61, offset: 56469},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1494, col: 62, offset: 56470},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1494, col: 62, offset: 56470},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 63, offset: 56471},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 71, offset: 56479},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 72, offset: 56480},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 75, offset: 56483},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 76, offset: 56484},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1494, col: 80, offset: 56488},
													expr: &ruleRefExpr{
														pos:  position{line: 1494, col: 81, offset: 56489},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1494, col: 98, offset: 56506,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1494, col: 101, offset: 56509},
											expr: &ruleRefExpr{
												pos:  position{line: 1494, col: 101, offset: 56509},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1496, col: 7, offset: 56618},
							expr: &litMatcher{
								pos:        position{line: 1496, col: 7, offset: 56618},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1500, col: 1, offset: 56799},
			expr: &oneOrMoreExpr{
				pos: position{line: 1500, col: 11, offset: 56809},
				expr: &ruleRefExpr{
					pos:  position{line: 1500, col: 11, offset: 56809},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1502, col: 1, offset: 56815},
			expr: &actionExpr{
				pos: position{line: 1502, col: 17, offset: 56831},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1502, col: 17, offset: 56831},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1502, col: 26, offset: 56840},
						expr: &choiceExpr{
							pos: position{line: 1502, col: 27, offset: 56841},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1502, col: 27, offset: 56841},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1502, col: 38, offset: 56852},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1506, col: 1, offset: 56944},
			expr: &actionExpr{
				pos: position{line: 1506, col: 13, offset: 56956},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1506, col: 13, offset: 56956},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1506, col: 23, offset: 56966},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1506, col: 23, offset: 56966},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1506, col: 34, offset: 56977},
								expr: &choiceExpr{
									pos: position{line: 1506, col: 35, offset: 56978},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1506, col: 35, offset: 56978},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1506, col: 46, offset: 56989},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1506, col: 78, offset: 57021},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1506, col: 78, offset: 57021},
													expr: &ruleRefExpr{
														pos:  position{line: 1506, col: 79, offset: 57022},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1506, col: 83, offset: 57026},
													expr: &litMatcher{
														pos:        position{line: 1506, col: 84, offset: 57027},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1506, col: 88, offset: 57031,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1510, col: 1, offset: 57096},
			expr: &oneOrMoreExpr{
				pos: position{line: 1510, col: 13, offset: 57108},
				expr: &choiceExpr{
					pos: position{line: 1510, col: 14, offset: 57109},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1510, col: 14, offset: 57109},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 99, offset: 57194},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1510, col: 105, offset: 57200},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1512, col: 1, offset: 57241},
			expr: &actionExpr{
				pos: position{line: 1512, col: 8, offset: 57248},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1512, col: 8, offset: 57248},
					expr: &choiceExpr{
						pos: position{line: 1512, col: 9, offset: 57249},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1512, col: 9, offset: 57249},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1512, col: 22, offset: 57262},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1512, col: 22, offset: 57262},
										expr: &ruleRefExpr{
											pos:  position{line: 1512, col: 23, offset: 57263},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 31, offset: 57271},
										expr: &ruleRefExpr{
											pos:  position{line: 1512, col: 32, offset: 57272},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 35, offset: 57275},
										expr: &litMatcher{
											pos:        position{line: 1512, col: 36, offset: 57276},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1512, col: 40, offset: 57280},
										expr: &litMatcher{
											pos:        position{line: 1512, col: 41, offset: 57281},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1512, col: 46, offset: 57286,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1516, col: 1, offset: 57327},
			expr: &choiceExpr{
				pos: position{line: 1516, col: 15, offset: 57341},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1516, col: 15, offset: 57341},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 27, offset: 57353},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 40, offset: 57366},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 51, offset: 57377},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1516, col: 62, offset: 57388},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1518, col: 1, offset: 57399},
			expr: &actionExpr{
				pos: position{line: 1518, col: 7, offset: 57405},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1518, col: 7, offset: 57405},
					expr: &choiceExpr{
						pos: position{line: 1518, col: 8, offset: 57406},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1518, col: 8, offset: 57406},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1518, col: 21, offset: 57419},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1518, col: 21, offset: 57419},
										expr: &ruleRefExpr{
											pos:  position{line: 1518, col: 22, offset: 57420},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 30, offset: 57428},
										expr: &ruleRefExpr{
											pos:  position{line: 1518, col: 31, offset: 57429},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 34, offset: 57432},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 35, offset: 57433},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 39, offset: 57437},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 40, offset: 57438},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 44, offset: 57442},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 45, offset: 57443},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 50, offset: 57448},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 51, offset: 57449},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1518, col: 56, offset: 57454},
										expr: &litMatcher{
											pos:        position{line: 1518, col: 57, offset: 57455},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1518, col: 62, offset: 57460,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1522, col: 1, offset: 57501},
			expr: &actionExpr{
				pos: position{line: 1522, col: 10, offset: 57510},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1522, col: 10, offset: 57510},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1526, col: 1, offset: 57552},
			expr: &actionExpr{
				pos: position{line: 1526, col: 11, offset: 57562},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 11, offset: 57562},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1526, col: 11, offset: 57562},
							expr: &litMatcher{
								pos:        position{line: 1526, col: 11, offset: 57562},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1526, col: 16, offset: 57567},
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 16, offset: 57567},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1530, col: 1, offset: 57619},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 7, offset: 57625},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1530, col: 7, offset: 57625},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1530, col: 13, offset: 57631},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1530, col: 13, offset: 57631},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1534, col: 1, offset: 57672},
			expr: &choiceExpr{
				pos: position{line: 1534, col: 12, offset: 57683},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1534, col: 12, offset: 57683},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1534, col: 21, offset: 57692},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1534, col: 28, offset: 57699},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1536, col: 1, offset: 57705},
			expr: &notExpr{
				pos: position{line: 1536, col: 8, offset: 57712},
				expr: &anyMatcher{
					line: 1536, col: 9, offset: 57713,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1538, col: 1, offset: 57716},
			expr: &choiceExpr{
				pos: position{line: 1538, col: 8, offset: 57723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1538, col: 8, offset: 57723},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1538, col: 18, offset: 57733},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1540, col: 1, offset: 57738},
			expr: &seqExpr{
				pos: position{line: 1540, col: 9, offset: 57746},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1540, col: 9, offset: 57746},
						expr: &ruleRefExpr{
							pos:  position{line: 1540, col: 9, offset: 57746},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1540, col: 13, offset: 57750},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags)
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMultipleTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges4()
}

func (c *current) onMultipleTagRanges12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMultipleTagRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges12()
}

func (c *current) onMultipleTagRanges8(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges8(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
