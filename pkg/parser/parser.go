// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2658},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2664},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2690},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2690},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2691},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2692},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2693},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2714,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2898},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2898},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2902},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2902},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2906},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2913},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2928},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2932},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2932},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2950},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2962},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2963},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2963},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2983},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3006},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3015},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3015},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3042},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3043},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3043},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3063},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3086},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3096},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3096},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3197},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3216},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3244},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3274},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3303},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3303},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3303},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3303},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3307},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3308},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3312},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3321},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3321},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3338},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3408},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3440},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3440},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3440},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3440},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3444},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3455},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3463},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3479},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3558},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3576},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3576},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3576},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3576},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3580},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3590},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3610},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3616},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3617},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3639},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3639},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3643},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3643},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3648},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3648},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3790},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3812},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3812},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3813},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3813},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3826},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3826},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3827},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3831},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3832},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3836},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3837},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3845,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3886},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3909},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3909},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3913},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3920},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3920},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3921},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3921},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3934},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3934},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3935},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3939},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3940},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3945,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3986},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4147},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4167},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4167},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4167},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4167},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4171},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4172},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4176},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4195},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4196},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4196},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4196},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4207},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4231},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4231},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4236},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4244},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4245},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4268},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4268},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4273},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4283},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4284},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4401},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4401},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4401},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4410},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4432},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4432},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4437},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4447},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4448},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4557},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4687},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4713},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4713},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4718},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4725},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4726},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4726},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4738},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4748},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4748},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4749},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4753},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4754},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4758},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4759},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4764,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4806},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4806},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4806},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4806},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4812},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4819},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4820},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4820},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4832},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4842},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4842},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4843},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4847},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4848},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4852},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4853},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4858,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4863},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4863},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4867},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4868},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4908},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4932},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4932},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4933},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4933},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4945},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4955},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4955},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4956},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4960},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4961},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4966,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 5007},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5033},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5033},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5034},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5034},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5046},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5056},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5056},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5057},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5062,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5218},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5250},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5250},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5250},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5254},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5260},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5283},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5287},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5293},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5294},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5295},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5295},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5295},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5299},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5306},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 138, offset: 5355},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5604},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5629},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5629},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5630},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5630},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5638},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5646},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5654},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5659},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5660},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5660},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5668},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5676},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5684},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5726},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5752},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5752},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5753},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5753},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5754},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5762,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5802},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5828},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5828},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5828},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5828},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5833},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5839},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5862},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 65, offset: 5866},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5935},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5935},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5939},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5945},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5968},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 43, offset: 5973},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6041},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6074},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6074},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6078},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6084},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6107},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6295},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6316},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 22, offset: 6316},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 192, col: 28, offset: 6322},
						expr: &ruleRefExpr{
							pos:  position{line: 192, col: 29, offset: 6323},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6413},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6433},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6433},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6433},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6435},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6435},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6441},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6447},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6523},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6529},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6529},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6550},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6574},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6597},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6625},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6653},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6680},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6707},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6744},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6772},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6955},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 6978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6978},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 6996},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7013},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7026},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7026},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7031},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7035},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7039},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 32, offset: 7044},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7098},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7098},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7098},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7103},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7107},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7111},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 23, offset: 7116},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7169},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7188},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7188},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7188},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7193},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7197},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7201},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7206},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7206},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7480},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7496},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7496},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7500},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7507},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7507},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7507},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7517},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7518},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7518},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7530},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7540},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7540},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7541},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7549,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7590},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7742},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7757},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7757},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7762},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7768},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7768},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7768},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7778},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7779},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7779},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7791},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7801},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7801},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7802},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7810},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7811},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7815,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7856},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 8, offset: 7860},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7917},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7937},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7937},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7949},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7949},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7953},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8085},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8114},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8114},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8118},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8121},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8137},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 57, offset: 8141},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8297},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8317},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8317},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8317},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 249, col: 31, offset: 8327},
							expr: &litMatcher{
								pos:        position{line: 249, col: 31, offset: 8327},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 249, col: 36, offset: 8332},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 249, col: 45, offset: 8341},
								expr: &actionExpr{
									pos: position{line: 249, col: 46, offset: 8342},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 249, col: 46, offset: 8342},
										expr: &choiceExpr{
											pos: position{line: 249, col: 47, offset: 8343},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 249, col: 47, offset: 8343},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 249, col: 59, offset: 8355},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 249, col: 69, offset: 8365},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 249, col: 69, offset: 8365},
															expr: &ruleRefExpr{
																pos:  position{line: 249, col: 70, offset: 8366},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 249, col: 78, offset: 8374},
															expr: &litMatcher{
																pos:        position{line: 249, col: 79, offset: 8375},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 249, col: 83, offset: 8379,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 9, offset: 8429},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 13, offset: 8433},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 256, col: 1, offset: 8558},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8576},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 19, offset: 8576},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 256, col: 23, offset: 8580},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 256, col: 34, offset: 8591},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 35, offset: 8592},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 54, offset: 8611},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 58, offset: 8615},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 260, col: 1, offset: 8688},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 8713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 8713},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 8713},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 5, offset: 8713},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 10, offset: 8718},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 261, col: 24, offset: 8732},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 261, col: 28, offset: 8736},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 261, col: 34, offset: 8742},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 35, offset: 8743},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 52, offset: 8760},
									expr: &litMatcher{
										pos:        position{line: 261, col: 52, offset: 8760},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 57, offset: 8765},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 57, offset: 8765},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 9, offset: 8870},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 263, col: 9, offset: 8870},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 263, col: 9, offset: 8870},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 14, offset: 8875},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 263, col: 28, offset: 8889},
									expr: &litMatcher{
										pos:        position{line: 263, col: 28, offset: 8889},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 263, col: 33, offset: 8894},
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 33, offset: 8894},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 267, col: 1, offset: 8987},
			expr: &actionExpr{
				pos: position{line: 267, col: 17, offset: 9003},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 267, col: 17, offset: 9003},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 267, col: 17, offset: 9003},
							expr: &litMatcher{
								pos:        position{line: 267, col: 18, offset: 9004},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 26, offset: 9012},
							expr: &litMatcher{
								pos:        position{line: 267, col: 27, offset: 9013},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 35, offset: 9021},
							expr: &litMatcher{
								pos:        position{line: 267, col: 36, offset: 9022},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 46, offset: 9032},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 47, offset: 9033},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 54, offset: 9040},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 267, col: 58, offset: 9044},
								expr: &choiceExpr{
									pos: position{line: 267, col: 59, offset: 9045},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 267, col: 59, offset: 9045},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 267, col: 71, offset: 9057},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 92, offset: 9078},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 92, offset: 9078},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 271, col: 1, offset: 9118},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 9136},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 9136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 19, offset: 9136},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 271, col: 25, offset: 9142},
								expr: &choiceExpr{
									pos: position{line: 271, col: 26, offset: 9143},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 26, offset: 9143},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 38, offset: 9155},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 47, offset: 9164},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 271, col: 68, offset: 9185},
							expr: &litMatcher{
								pos:        position{line: 271, col: 69, offset: 9186},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 275, col: 1, offset: 9341},
			expr: &seqExpr{
				pos: position{line: 275, col: 24, offset: 9364},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 275, col: 24, offset: 9364},
						expr: &litMatcher{
							pos:        position{line: 275, col: 25, offset: 9365},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 275, col: 29, offset: 9369},
						expr: &litMatcher{
							pos:        position{line: 275, col: 30, offset: 9370},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 275, col: 34, offset: 9374},
						expr: &litMatcher{
							pos:        position{line: 275, col: 35, offset: 9375},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 275, col: 39, offset: 9379,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 277, col: 1, offset: 9383},
			expr: &actionExpr{
				pos: position{line: 277, col: 21, offset: 9403},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 277, col: 21, offset: 9403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 21, offset: 9403},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 36, offset: 9418},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 281, col: 1, offset: 9492},
			expr: &actionExpr{
				pos: position{line: 281, col: 20, offset: 9511},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 20, offset: 9511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 20, offset: 9511},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 29, offset: 9520},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 29, offset: 9520},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 33, offset: 9524},
							expr: &litMatcher{
								pos:        position{line: 281, col: 33, offset: 9524},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 38, offset: 9529},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 45, offset: 9536},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 46, offset: 9537},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 63, offset: 9554},
							expr: &litMatcher{
								pos:        position{line: 281, col: 63, offset: 9554},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 68, offset: 9559},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 74, offset: 9565},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 75, offset: 9566},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 92, offset: 9583},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 96, offset: 9587},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 285, col: 1, offset: 9657},
			expr: &actionExpr{
				pos: position{line: 285, col: 20, offset: 9676},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 285, col: 20, offset: 9676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 285, col: 20, offset: 9676},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 29, offset: 9685},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 29, offset: 9685},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 285, col: 33, offset: 9689},
							expr: &litMatcher{
								pos:        position{line: 285, col: 33, offset: 9689},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 38, offset: 9694},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 45, offset: 9701},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 46, offset: 9702},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 285, col: 63, offset: 9719},
							expr: &litMatcher{
								pos:        position{line: 285, col: 63, offset: 9719},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 68, offset: 9724},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 74, offset: 9730},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 75, offset: 9731},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 92, offset: 9748},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 96, offset: 9752},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 289, col: 1, offset: 9840},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9858},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 289, col: 19, offset: 9858},
					expr: &choiceExpr{
						pos: position{line: 289, col: 20, offset: 9859},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 9859},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 289, col: 32, offset: 9871},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 289, col: 42, offset: 9881},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 289, col: 42, offset: 9881},
										expr: &litMatcher{
											pos:        position{line: 289, col: 43, offset: 9882},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 289, col: 47, offset: 9886},
										expr: &litMatcher{
											pos:        position{line: 289, col: 48, offset: 9887},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 289, col: 52, offset: 9891},
										expr: &ruleRefExpr{
											pos:  position{line: 289, col: 53, offset: 9892},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 289, col: 57, offset: 9896,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 293, col: 1, offset: 9937},
			expr: &actionExpr{
				pos: position{line: 293, col: 21, offset: 9957},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 293, col: 21, offset: 9957},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 293, col: 21, offset: 9957},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 293, col: 25, offset: 9961},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 31, offset: 9967},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 32, offset: 9968},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 51, offset: 9987},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 300, col: 1, offset: 10161},
			expr: &actionExpr{
				pos: position{line: 300, col: 12, offset: 10172},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 300, col: 12, offset: 10172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 300, col: 12, offset: 10172},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 23, offset: 10183},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 24, offset: 10184},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 5, offset: 10208},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 301, col: 12, offset: 10215},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 301, col: 12, offset: 10215},
									expr: &litMatcher{
										pos:        position{line: 301, col: 13, offset: 10216},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 305, col: 5, offset: 10307},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 309, col: 5, offset: 10459},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 5, offset: 10459},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 9, offset: 10463},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 16, offset: 10470},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 31, offset: 10485},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 35, offset: 10489},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 35, offset: 10489},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 53, offset: 10507},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 313, col: 1, offset: 10613},
			expr: &actionExpr{
				pos: position{line: 313, col: 18, offset: 10630},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 313, col: 18, offset: 10630},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 313, col: 27, offset: 10639},
						expr: &seqExpr{
							pos: position{line: 313, col: 28, offset: 10640},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 313, col: 28, offset: 10640},
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 29, offset: 10641},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 313, col: 37, offset: 10649},
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 38, offset: 10650},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 54, offset: 10666},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 317, col: 1, offset: 10787},
			expr: &actionExpr{
				pos: position{line: 317, col: 17, offset: 10803},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 17, offset: 10803},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 317, col: 26, offset: 10812},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 317, col: 26, offset: 10812},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10833},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10851},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10876},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10898},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10921},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10936},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10961},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10982},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11022},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11042},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11062},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 335, col: 1, offset: 11217},
			expr: &seqExpr{
				pos: position{line: 335, col: 31, offset: 11247},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 335, col: 31, offset: 11247},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 41, offset: 11257},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 340, col: 1, offset: 11368},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11386},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 340, col: 19, offset: 11386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 340, col: 19, offset: 11386},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 25, offset: 11392},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 40, offset: 11407},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 340, col: 45, offset: 11412},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 52, offset: 11419},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 68, offset: 11435},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 75, offset: 11442},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 344, col: 1, offset: 11583},
			expr: &actionExpr{
				pos: position{line: 344, col: 20, offset: 11602},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 344, col: 20, offset: 11602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 344, col: 20, offset: 11602},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 26, offset: 11608},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 41, offset: 11623},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 45, offset: 11627},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 52, offset: 11634},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 68, offset: 11650},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 75, offset: 11657},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 348, col: 1, offset: 11799},
			expr: &actionExpr{
				pos: position{line: 348, col: 18, offset: 11816},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 348, col: 18, offset: 11816},
					expr: &choiceExpr{
						pos: position{line: 348, col: 19, offset: 11817},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 348, col: 19, offset: 11817},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 348, col: 33, offset: 11831},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 348, col: 39, offset: 11837},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 352, col: 1, offset: 11879},
			expr: &actionExpr{
				pos: position{line: 352, col: 19, offset: 11897},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 352, col: 19, offset: 11897},
					expr: &choiceExpr{
						pos: position{line: 352, col: 20, offset: 11898},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 352, col: 20, offset: 11898},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 352, col: 33, offset: 11911},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 352, col: 33, offset: 11911},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 34, offset: 11912},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 352, col: 37, offset: 11915},
										expr: &litMatcher{
											pos:        position{line: 352, col: 38, offset: 11916},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 352, col: 42, offset: 11920},
										expr: &litMatcher{
											pos:        position{line: 352, col: 43, offset: 11921},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 352, col: 47, offset: 11925},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 48, offset: 11926},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 352, col: 52, offset: 11930,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 356, col: 1, offset: 11971},
			expr: &actionExpr{
				pos: position{line: 356, col: 24, offset: 11994},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 356, col: 24, offset: 11994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 24, offset: 11994},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 356, col: 28, offset: 11998},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 356, col: 34, offset: 12004},
								expr: &ruleRefExpr{
									pos:  position{line: 356, col: 35, offset: 12005},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 54, offset: 12024},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 363, col: 1, offset: 12204},
			expr: &actionExpr{
				pos: position{line: 363, col: 18, offset: 12221},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 363, col: 18, offset: 12221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 18, offset: 12221},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 363, col: 24, offset: 12227},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 363, col: 24, offset: 12227},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 363, col: 24, offset: 12227},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 363, col: 36, offset: 12239},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 363, col: 42, offset: 12245},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 363, col: 56, offset: 12259},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 363, col: 74, offset: 12277},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 8, offset: 12431},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 369, col: 1, offset: 12484},
			expr: &actionExpr{
				pos: position{line: 369, col: 26, offset: 12509},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 369, col: 26, offset: 12509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 26, offset: 12509},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 369, col: 30, offset: 12513},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 369, col: 36, offset: 12519},
								expr: &choiceExpr{
									pos: position{line: 369, col: 37, offset: 12520},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 369, col: 37, offset: 12520},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 369, col: 59, offset: 12542},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 369, col: 80, offset: 12563},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 99, offset: 12582},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 373, col: 1, offset: 12652},
			expr: &actionExpr{
				pos: position{line: 373, col: 24, offset: 12675},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 373, col: 24, offset: 12675},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 24, offset: 12675},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 373, col: 33, offset: 12684},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 40, offset: 12691},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 373, col: 66, offset: 12717},
							expr: &litMatcher{
								pos:        position{line: 373, col: 66, offset: 12717},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 377, col: 1, offset: 12776},
			expr: &actionExpr{
				pos: position{line: 377, col: 29, offset: 12804},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 29, offset: 12804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 29, offset: 12804},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 377, col: 36, offset: 12811},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 377, col: 36, offset: 12811},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12928},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12964},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12990},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 13022},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 382, col: 11, offset: 13054},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 11, offset: 13081},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 383, col: 31, offset: 13101},
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 31, offset: 13101},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 383, col: 36, offset: 13106},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 383, col: 36, offset: 13106},
									expr: &litMatcher{
										pos:        position{line: 383, col: 37, offset: 13107},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 383, col: 43, offset: 13113},
									expr: &litMatcher{
										pos:        position{line: 383, col: 44, offset: 13114},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 387, col: 1, offset: 13146},
			expr: &actionExpr{
				pos: position{line: 387, col: 23, offset: 13168},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 387, col: 23, offset: 13168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 23, offset: 13168},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 387, col: 30, offset: 13175},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 30, offset: 13175},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 47, offset: 13192},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 388, col: 5, offset: 13214},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 388, col: 12, offset: 13221},
								expr: &actionExpr{
									pos: position{line: 388, col: 13, offset: 13222},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 388, col: 13, offset: 13222},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 388, col: 13, offset: 13222},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 388, col: 17, offset: 13226},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 388, col: 24, offset: 13233},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 388, col: 24, offset: 13233},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 388, col: 41, offset: 13250},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 394, col: 1, offset: 13388},
			expr: &actionExpr{
				pos: position{line: 394, col: 29, offset: 13416},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 394, col: 29, offset: 13416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 29, offset: 13416},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 394, col: 34, offset: 13421},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 394, col: 41, offset: 13428},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 41, offset: 13428},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 58, offset: 13445},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 5, offset: 13467},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 395, col: 12, offset: 13474},
								expr: &actionExpr{
									pos: position{line: 395, col: 13, offset: 13475},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 395, col: 13, offset: 13475},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 395, col: 13, offset: 13475},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 395, col: 17, offset: 13479},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 395, col: 24, offset: 13486},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 395, col: 24, offset: 13486},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 395, col: 41, offset: 13503},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 9, offset: 13556},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 401, col: 1, offset: 13646},
			expr: &actionExpr{
				pos: position{line: 401, col: 19, offset: 13664},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 401, col: 19, offset: 13664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 401, col: 19, offset: 13664},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 26, offset: 13671},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 34, offset: 13679},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 39, offset: 13684},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 44, offset: 13689},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 405, col: 1, offset: 13777},
			expr: &actionExpr{
				pos: position{line: 405, col: 25, offset: 13801},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 405, col: 25, offset: 13801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 25, offset: 13801},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 405, col: 30, offset: 13806},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 37, offset: 13813},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 45, offset: 13821},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 405, col: 50, offset: 13826},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 55, offset: 13831},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 63, offset: 13839},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 409, col: 1, offset: 13924},
			expr: &actionExpr{
				pos: position{line: 409, col: 20, offset: 13943},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 409, col: 20, offset: 13943},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 409, col: 32, offset: 13955},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 413, col: 1, offset: 14050},
			expr: &actionExpr{
				pos: position{line: 413, col: 26, offset: 14075},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 413, col: 26, offset: 14075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 26, offset: 14075},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 413, col: 31, offset: 14080},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 43, offset: 14092},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 51, offset: 14100},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 417, col: 1, offset: 14192},
			expr: &actionExpr{
				pos: position{line: 417, col: 23, offset: 14214},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 417, col: 23, offset: 14214},
					expr: &seqExpr{
						pos: position{line: 417, col: 24, offset: 14215},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 417, col: 24, offset: 14215},
								expr: &litMatcher{
									pos:        position{line: 417, col: 25, offset: 14216},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 417, col: 29, offset: 14220},
								expr: &litMatcher{
									pos:        position{line: 417, col: 30, offset: 14221},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 417, col: 34, offset: 14225},
								expr: &ruleRefExpr{
									pos:  position{line: 417, col: 35, offset: 14226},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 417, col: 38, offset: 14229,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 421, col: 1, offset: 14269},
			expr: &actionExpr{
				pos: position{line: 421, col: 23, offset: 14291},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 421, col: 23, offset: 14291},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 421, col: 24, offset: 14292},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 421, col: 24, offset: 14292},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 421, col: 34, offset: 14302},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 421, col: 42, offset: 14310},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 48, offset: 14316},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 421, col: 73, offset: 14341},
							expr: &litMatcher{
								pos:        position{line: 421, col: 73, offset: 14341},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 425, col: 1, offset: 14490},
			expr: &actionExpr{
				pos: position{line: 425, col: 28, offset: 14517},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 425, col: 28, offset: 14517},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 28, offset: 14517},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 35, offset: 14524},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 425, col: 54, offset: 14543},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 54, offset: 14543},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 425, col: 59, offset: 14548},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 425, col: 59, offset: 14548},
									expr: &litMatcher{
										pos:        position{line: 425, col: 60, offset: 14549},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 425, col: 66, offset: 14555},
									expr: &litMatcher{
										pos:        position{line: 425, col: 67, offset: 14556},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 429, col: 1, offset: 14588},
			expr: &actionExpr{
				pos: position{line: 429, col: 22, offset: 14609},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 429, col: 22, offset: 14609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 429, col: 22, offset: 14609},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 29, offset: 14616},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 5, offset: 14630},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 12, offset: 14637},
								expr: &actionExpr{
									pos: position{line: 430, col: 13, offset: 14638},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 430, col: 13, offset: 14638},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 430, col: 13, offset: 14638},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 430, col: 17, offset: 14642},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 24, offset: 14649},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 436, col: 1, offset: 14780},
			expr: &choiceExpr{
				pos: position{line: 436, col: 13, offset: 14792},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 436, col: 13, offset: 14792},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 436, col: 13, offset: 14792},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 436, col: 18, offset: 14797},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 436, col: 18, offset: 14797},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 436, col: 30, offset: 14809},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 14877},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 14877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 14877},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 438, col: 9, offset: 14881},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 438, col: 14, offset: 14886},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 438, col: 14, offset: 14886},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 438, col: 26, offset: 14898},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 442, col: 1, offset: 14966},
			expr: &actionExpr{
				pos: position{line: 442, col: 16, offset: 14981},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 442, col: 16, offset: 14981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 16, offset: 14981},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 442, col: 23, offset: 14988},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 442, col: 23, offset: 14988},
									expr: &litMatcher{
										pos:        position{line: 442, col: 24, offset: 14989},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 445, col: 5, offset: 15043},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 455, col: 1, offset: 15337},
			expr: &actionExpr{
				pos: position{line: 455, col: 21, offset: 15357},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 455, col: 21, offset: 15357},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 21, offset: 15357},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 455, col: 29, offset: 15365},
								expr: &choiceExpr{
									pos: position{line: 455, col: 30, offset: 15366},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 455, col: 30, offset: 15366},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 455, col: 53, offset: 15389},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 455, col: 74, offset: 15410},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 455, col: 74, offset: 15410,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 107, offset: 15443},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 459, col: 1, offset: 15514},
			expr: &actionExpr{
				pos: position{line: 459, col: 25, offset: 15538},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 459, col: 25, offset: 15538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 25, offset: 15538},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 459, col: 33, offset: 15546},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 459, col: 38, offset: 15551},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 38, offset: 15551},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 78, offset: 15591},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 463, col: 1, offset: 15656},
			expr: &actionExpr{
				pos: position{line: 463, col: 23, offset: 15678},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 463, col: 23, offset: 15678},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 23, offset: 15678},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 463, col: 31, offset: 15686},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 463, col: 36, offset: 15691},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 463, col: 36, offset: 15691},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 463, col: 76, offset: 15731},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 470, col: 1, offset: 15895},
			expr: &oneOrMoreExpr{
				pos: position{line: 470, col: 14, offset: 15908},
				expr: &ruleRefExpr{
					pos:  position{line: 470, col: 14, offset: 15908},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 472, col: 1, offset: 15919},
			expr: &choiceExpr{
				pos: position{line: 472, col: 13, offset: 15931},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 472, col: 13, offset: 15931},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 31, offset: 15949},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 51, offset: 15969},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 69, offset: 15987},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 474, col: 1, offset: 16013},
			expr: &choiceExpr{
				pos: position{line: 474, col: 18, offset: 16030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 474, col: 18, offset: 16030},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 18, offset: 16030},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 27, offset: 16039},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 9, offset: 16096},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 476, col: 9, offset: 16096},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 476, col: 15, offset: 16102},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 16, offset: 16103},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 480, col: 1, offset: 16195},
			expr: &actionExpr{
				pos: position{line: 480, col: 22, offset: 16216},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 480, col: 22, offset: 16216},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 480, col: 22, offset: 16216},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 23, offset: 16217},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16225},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16226},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16241},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16242},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16264},
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 6, offset: 16265},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16291},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16292},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16320},
							expr: &seqExpr{
								pos: position{line: 485, col: 7, offset: 16322},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 485, col: 7, offset: 16322},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 33, offset: 16348},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16379},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16380},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 16405},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 16406},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 16427},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 16428},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 16447},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 490, col: 9, offset: 16462},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 490, col: 9, offset: 16462},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 490, col: 9, offset: 16462},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 490, col: 18, offset: 16471},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 19, offset: 16472},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 490, col: 35, offset: 16488},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 490, col: 45, offset: 16498},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 46, offset: 16499},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 12, offset: 16651},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 496, col: 1, offset: 16698},
			expr: &seqExpr{
				pos: position{line: 496, col: 25, offset: 16722},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 496, col: 25, offset: 16722},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 29, offset: 16726},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 498, col: 1, offset: 16733},
			expr: &actionExpr{
				pos: position{line: 498, col: 29, offset: 16761},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 498, col: 29, offset: 16761},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 29, offset: 16761},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 41, offset: 16773},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 41, offset: 16773},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 53, offset: 16785},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 74, offset: 16806},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 82, offset: 16814},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 505, col: 1, offset: 17056},
			expr: &actionExpr{
				pos: position{line: 505, col: 20, offset: 17075},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 505, col: 20, offset: 17075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 20, offset: 17075},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 31, offset: 17086},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 32, offset: 17087},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 52, offset: 17107},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 60, offset: 17115},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 83, offset: 17138},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 92, offset: 17147},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 509, col: 1, offset: 17287},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 17317},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 510, col: 5, offset: 17317},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 5, offset: 17317},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 5, offset: 17317},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 9, offset: 17321},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 512, col: 9, offset: 17384},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 512, col: 9, offset: 17384},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 512, col: 9, offset: 17384},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 512, col: 9, offset: 17384},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 512, col: 16, offset: 17391},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 512, col: 16, offset: 17391},
															expr: &litMatcher{
																pos:        position{line: 512, col: 17, offset: 17392},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 516, col: 9, offset: 17492},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 11, offset: 18209},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 535, col: 11, offset: 18209},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 535, col: 11, offset: 18209},
													expr: &charClassMatcher{
														pos:        position{line: 535, col: 12, offset: 18210},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 535, col: 20, offset: 18218},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18329},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18329},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18330},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18337},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18451},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18451},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 539, col: 14, offset: 18452},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 539, col: 21, offset: 18459},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18573},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18573},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18573},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18574},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18582},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 543, col: 13, offset: 18696},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 543, col: 13, offset: 18696},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 543, col: 13, offset: 18696},
													expr: &charClassMatcher{
														pos:        position{line: 543, col: 14, offset: 18697},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 543, col: 22, offset: 18705},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 545, col: 12, offset: 18818},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 12, offset: 18818},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 549, col: 1, offset: 18850},
			expr: &actionExpr{
				pos: position{line: 549, col: 27, offset: 18876},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 549, col: 27, offset: 18876},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 549, col: 37, offset: 18886},
						expr: &ruleRefExpr{
							pos:  position{line: 549, col: 37, offset: 18886},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 556, col: 1, offset: 19086},
			expr: &actionExpr{
				pos: position{line: 556, col: 22, offset: 19107},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 556, col: 22, offset: 19107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 22, offset: 19107},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 556, col: 33, offset: 19118},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 34, offset: 19119},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 54, offset: 19139},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 62, offset: 19147},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 87, offset: 19172},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 556, col: 98, offset: 19183},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 99, offset: 19184},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 129, offset: 19214},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 138, offset: 19223},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 560, col: 1, offset: 19381},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 19413},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 19413},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 561, col: 5, offset: 19413},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 5, offset: 19413},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 9, offset: 19417},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 561, col: 17, offset: 19425},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 563, col: 9, offset: 19482},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 563, col: 9, offset: 19482},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 563, col: 9, offset: 19482},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 563, col: 16, offset: 19489},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 563, col: 16, offset: 19489},
															expr: &litMatcher{
																pos:        position{line: 563, col: 17, offset: 19490},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 567, col: 9, offset: 19590},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 584, col: 14, offset: 20297},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 584, col: 21, offset: 20304},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 584, col: 22, offset: 20305},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 586, col: 13, offset: 20391},
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 13, offset: 20391},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 590, col: 1, offset: 20424},
			expr: &actionExpr{
				pos: position{line: 590, col: 32, offset: 20455},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 590, col: 32, offset: 20455},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 590, col: 32, offset: 20455},
							expr: &litMatcher{
								pos:        position{line: 590, col: 33, offset: 20456},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 37, offset: 20460},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 591, col: 7, offset: 20474},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20474},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20474},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 592, col: 7, offset: 20519},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 592, col: 7, offset: 20519},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 593, col: 7, offset: 20562},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 593, col: 7, offset: 20562},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 594, col: 7, offset: 20604},
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 7, offset: 20604},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 598, col: 1, offset: 20643},
			expr: &actionExpr{
				pos: position{line: 598, col: 29, offset: 20671},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 598, col: 29, offset: 20671},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 598, col: 39, offset: 20681},
						expr: &ruleRefExpr{
							pos:  position{line: 598, col: 39, offset: 20681},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 605, col: 1, offset: 20997},
			expr: &actionExpr{
				pos: position{line: 605, col: 20, offset: 21016},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 605, col: 20, offset: 21016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 20, offset: 21016},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 605, col: 31, offset: 21027},
								expr: &ruleRefExpr{
									pos:  position{line: 605, col: 32, offset: 21028},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 52, offset: 21048},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 58, offset: 21054},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 85, offset: 21081},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 96, offset: 21092},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 122, offset: 21118},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 605, col: 134, offset: 21130},
								expr: &ruleRefExpr{
									pos:  position{line: 605, col: 135, offset: 21131},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 609, col: 1, offset: 21277},
			expr: &actionExpr{
				pos: position{line: 609, col: 30, offset: 21306},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 609, col: 30, offset: 21306},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 609, col: 39, offset: 21315},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 609, col: 39, offset: 21315},
							expr: &choiceExpr{
								pos: position{line: 609, col: 40, offset: 21316},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 609, col: 40, offset: 21316},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 609, col: 52, offset: 21328},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 609, col: 62, offset: 21338},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 609, col: 62, offset: 21338},
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 63, offset: 21339},
													name: "NEWLINE",
												},
											},
											&notExpr{
												pos: position{line: 609, col: 71, offset: 21347},
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 72, offset: 21348},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 609, col: 97, offset: 21373,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 615, col: 1, offset: 21502},
			expr: &actionExpr{
				pos: position{line: 615, col: 24, offset: 21525},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 615, col: 24, offset: 21525},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 615, col: 33, offset: 21534},
						expr: &seqExpr{
							pos: position{line: 615, col: 34, offset: 21535},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 615, col: 34, offset: 21535},
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 35, offset: 21536},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 615, col: 43, offset: 21544},
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 44, offset: 21545},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 615, col: 69, offset: 21570},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 619, col: 1, offset: 21705},
			expr: &actionExpr{
				pos: position{line: 619, col: 31, offset: 21735},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 619, col: 31, offset: 21735},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 619, col: 40, offset: 21744},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 619, col: 40, offset: 21744},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 21765},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 21783},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 622, col: 11, offset: 21808},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 21830},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 21853},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 21868},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 21893},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 21914},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 21954},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 21974},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 21994},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 634, col: 1, offset: 22036},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 22069},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 22069},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 22069},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 635, col: 16, offset: 22080},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 635, col: 16, offset: 22080},
									expr: &litMatcher{
										pos:        position{line: 635, col: 17, offset: 22081},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 638, col: 5, offset: 22139},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 642, col: 6, offset: 22315},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 642, col: 6, offset: 22315},
									expr: &choiceExpr{
										pos: position{line: 642, col: 7, offset: 22316},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 642, col: 7, offset: 22316},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 642, col: 12, offset: 22321},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 642, col: 24, offset: 22333},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 646, col: 1, offset: 22373},
			expr: &actionExpr{
				pos: position{line: 646, col: 31, offset: 22403},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 646, col: 31, offset: 22403},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 646, col: 40, offset: 22412},
						expr: &ruleRefExpr{
							pos:  position{line: 646, col: 41, offset: 22413},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 653, col: 1, offset: 22604},
			expr: &choiceExpr{
				pos: position{line: 653, col: 19, offset: 22622},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 19, offset: 22622},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 653, col: 19, offset: 22622},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 9, offset: 22668},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 655, col: 9, offset: 22668},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 9, offset: 22716},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 657, col: 9, offset: 22716},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 9, offset: 22774},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 659, col: 9, offset: 22774},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 661, col: 9, offset: 22828},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 661, col: 9, offset: 22828},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 670, col: 1, offset: 23135},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 23182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 23182},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 672, col: 5, offset: 23182},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 672, col: 5, offset: 23182},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 672, col: 16, offset: 23193},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 17, offset: 23194},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 672, col: 37, offset: 23214},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 672, col: 40, offset: 23217},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 672, col: 56, offset: 23233},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 672, col: 61, offset: 23238},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 672, col: 67, offset: 23244},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 68, offset: 23245},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 23437},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 23437},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 23437},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 676, col: 16, offset: 23448},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 17, offset: 23449},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 37, offset: 23469},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 676, col: 43, offset: 23475},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 44, offset: 23476},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 681, col: 1, offset: 23641},
			expr: &actionExpr{
				pos: position{line: 681, col: 20, offset: 23660},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 681, col: 20, offset: 23660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 681, col: 20, offset: 23660},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 681, col: 31, offset: 23671},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 32, offset: 23672},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 682, col: 5, offset: 23697},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 23988},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 16, offset: 23999},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 5, offset: 24022},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 691, col: 16, offset: 24033},
								expr: &ruleRefExpr{
									pos:  position{line: 691, col: 17, offset: 24034},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 695, col: 1, offset: 24168},
			expr: &actionExpr{
				pos: position{line: 695, col: 19, offset: 24186},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 695, col: 19, offset: 24186},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 19, offset: 24186},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 30, offset: 24197},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 50, offset: 24217},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 61, offset: 24228},
								expr: &ruleRefExpr{
									pos:  position{line: 695, col: 62, offset: 24229},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 699, col: 1, offset: 24335},
			expr: &actionExpr{
				pos: position{line: 699, col: 23, offset: 24357},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 699, col: 23, offset: 24357},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 699, col: 23, offset: 24357},
							expr: &seqExpr{
								pos: position{line: 699, col: 25, offset: 24359},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 25, offset: 24359},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 51, offset: 24385},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 5, offset: 24415},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 700, col: 15, offset: 24425},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 700, col: 15, offset: 24425},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 700, col: 26, offset: 24436},
										expr: &ruleRefExpr{
											pos:  position{line: 700, col: 26, offset: 24436},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 42, offset: 24452},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 700, col: 52, offset: 24462},
								expr: &ruleRefExpr{
									pos:  position{line: 700, col: 53, offset: 24463},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 65, offset: 24475},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 704, col: 1, offset: 24565},
			expr: &actionExpr{
				pos: position{line: 704, col: 23, offset: 24587},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 704, col: 23, offset: 24587},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 704, col: 33, offset: 24597},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 708, col: 1, offset: 24643},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 24695},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 24695},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 710, col: 5, offset: 24695},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 710, col: 5, offset: 24695},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 710, col: 16, offset: 24706},
										expr: &ruleRefExpr{
											pos:  position{line: 710, col: 17, offset: 24707},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 711, col: 5, offset: 24731},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 24943},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 8, offset: 24946},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 718, col: 24, offset: 24962},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 718, col: 29, offset: 24967},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 718, col: 35, offset: 24973},
										expr: &ruleRefExpr{
											pos:  position{line: 718, col: 36, offset: 24974},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 25166},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 25166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 722, col: 5, offset: 25166},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 722, col: 16, offset: 25177},
										expr: &ruleRefExpr{
											pos:  position{line: 722, col: 17, offset: 25178},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 723, col: 5, offset: 25202},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 730, col: 5, offset: 25414},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 730, col: 11, offset: 25420},
										expr: &ruleRefExpr{
											pos:  position{line: 730, col: 12, offset: 25421},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 734, col: 1, offset: 25522},
			expr: &actionExpr{
				pos: position{line: 734, col: 19, offset: 25540},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 734, col: 19, offset: 25540},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 734, col: 19, offset: 25540},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 20, offset: 25541},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 24, offset: 25545},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 25, offset: 25546},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 5, offset: 25560},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 735, col: 15, offset: 25570},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 735, col: 15, offset: 25570},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 735, col: 15, offset: 25570},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 735, col: 24, offset: 25579},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 737, col: 9, offset: 25671},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 737, col: 9, offset: 25671},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 737, col: 9, offset: 25671},
													expr: &ruleRefExpr{
														pos:  position{line: 737, col: 10, offset: 25672},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 737, col: 25, offset: 25687},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 737, col: 34, offset: 25696},
														expr: &ruleRefExpr{
															pos:  position{line: 737, col: 35, offset: 25697},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 737, col: 51, offset: 25713},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 737, col: 61, offset: 25723},
														expr: &ruleRefExpr{
															pos:  position{line: 737, col: 62, offset: 25724},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 737, col: 74, offset: 25736},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 743, col: 1, offset: 25872},
			expr: &actionExpr{
				pos: position{line: 743, col: 18, offset: 25889},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 743, col: 18, offset: 25889},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 18, offset: 25889},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 19, offset: 25890},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 743, col: 23, offset: 25894},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 24, offset: 25895},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 25910},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 744, col: 14, offset: 25919},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 14, offset: 25919},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25940},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25958},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25981},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25997},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26020},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26046},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26068},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26094},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26121},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26162},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26189},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 26209},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 26238},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 765, col: 1, offset: 26501},
			expr: &actionExpr{
				pos: position{line: 765, col: 37, offset: 26537},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 765, col: 37, offset: 26537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 765, col: 37, offset: 26537},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 38, offset: 26538},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 765, col: 48, offset: 26548},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 49, offset: 26549},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 64, offset: 26564},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 73, offset: 26573},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 74, offset: 26574},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 108, offset: 26608},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 765, col: 118, offset: 26618},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 119, offset: 26619},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 131, offset: 26631},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 769, col: 1, offset: 26722},
			expr: &actionExpr{
				pos: position{line: 769, col: 36, offset: 26757},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 769, col: 36, offset: 26757},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 36, offset: 26757},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 37, offset: 26758},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 769, col: 41, offset: 26762},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 42, offset: 26763},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 5, offset: 26778},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 770, col: 14, offset: 26787},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 770, col: 14, offset: 26787},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26808},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26826},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26849},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26865},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26888},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26910},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26936},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 26962},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 26982},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 783, col: 1, offset: 27024},
			expr: &actionExpr{
				pos: position{line: 783, col: 22, offset: 27045},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 783, col: 22, offset: 27045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 783, col: 22, offset: 27045},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 783, col: 33, offset: 27056},
								expr: &ruleRefExpr{
									pos:  position{line: 783, col: 34, offset: 27057},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 54, offset: 27077},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 783, col: 60, offset: 27083},
								expr: &actionExpr{
									pos: position{line: 783, col: 61, offset: 27084},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 783, col: 61, offset: 27084},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 783, col: 61, offset: 27084},
												expr: &ruleRefExpr{
													pos:  position{line: 783, col: 62, offset: 27085},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 783, col: 66, offset: 27089},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 783, col: 72, offset: 27095},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 789, col: 1, offset: 27215},
			expr: &actionExpr{
				pos: position{line: 789, col: 26, offset: 27240},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 789, col: 26, offset: 27240},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 789, col: 26, offset: 27240},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 27, offset: 27241},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 789, col: 42, offset: 27256},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 43, offset: 27257},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 53, offset: 27267},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 789, col: 62, offset: 27276},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 63, offset: 27277},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 94, offset: 27308},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 789, col: 104, offset: 27318},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 105, offset: 27319},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 789, col: 117, offset: 27331},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 793, col: 1, offset: 27422},
			expr: &actionExpr{
				pos: position{line: 793, col: 33, offset: 27454},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 793, col: 33, offset: 27454},
					expr: &seqExpr{
						pos: position{line: 793, col: 34, offset: 27455},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 793, col: 34, offset: 27455},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 35, offset: 27456},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 793, col: 39, offset: 27460},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 40, offset: 27461},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 793, col: 50, offset: 27471,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 800, col: 1, offset: 27695},
			expr: &actionExpr{
				pos: position{line: 800, col: 14, offset: 27708},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 800, col: 14, offset: 27708},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 800, col: 14, offset: 27708},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 800, col: 17, offset: 27711},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 800, col: 21, offset: 27715},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 21, offset: 27715},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 800, col: 25, offset: 27719},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 26, offset: 27720},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 807, col: 1, offset: 28004},
			expr: &actionExpr{
				pos: position{line: 807, col: 15, offset: 28018},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 807, col: 15, offset: 28018},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 807, col: 15, offset: 28018},
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 16, offset: 28019},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 19, offset: 28022},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 807, col: 25, offset: 28028},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 807, col: 25, offset: 28028},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 15, offset: 28052},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 15, offset: 28078},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 15, offset: 28107},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 15, offset: 28136},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 15, offset: 28167},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28198},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28231},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28267},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 15, offset: 28303},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 15, offset: 28340},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 821, col: 1, offset: 28494},
			expr: &choiceExpr{
				pos: position{line: 821, col: 21, offset: 28514},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 821, col: 21, offset: 28514},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 28, offset: 28521},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 34, offset: 28527},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 41, offset: 28534},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 47, offset: 28540},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 54, offset: 28547},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 60, offset: 28553},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 66, offset: 28559},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 823, col: 1, offset: 28564},
			expr: &choiceExpr{
				pos: position{line: 823, col: 33, offset: 28596},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 823, col: 33, offset: 28596},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 823, col: 39, offset: 28602},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 823, col: 39, offset: 28602},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 827, col: 1, offset: 28735},
			expr: &actionExpr{
				pos: position{line: 827, col: 25, offset: 28759},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 827, col: 25, offset: 28759},
					expr: &litMatcher{
						pos:        position{line: 827, col: 25, offset: 28759},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 831, col: 1, offset: 28800},
			expr: &actionExpr{
				pos: position{line: 831, col: 25, offset: 28824},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 831, col: 25, offset: 28824},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 831, col: 25, offset: 28824},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 831, col: 30, offset: 28829},
							expr: &litMatcher{
								pos:        position{line: 831, col: 30, offset: 28829},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 839, col: 1, offset: 28926},
			expr: &choiceExpr{
				pos: position{line: 839, col: 13, offset: 28938},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 839, col: 13, offset: 28938},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 839, col: 35, offset: 28960},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 841, col: 1, offset: 28981},
			expr: &actionExpr{
				pos: position{line: 841, col: 24, offset: 29004},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 841, col: 24, offset: 29004},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 841, col: 24, offset: 29004},
							expr: &litMatcher{
								pos:        position{line: 841, col: 25, offset: 29005},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 841, col: 30, offset: 29010},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 841, col: 35, offset: 29015},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 45, offset: 29025},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 841, col: 74, offset: 29054},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 845, col: 1, offset: 29180},
			expr: &seqExpr{
				pos: position{line: 845, col: 32, offset: 29211},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 845, col: 32, offset: 29211},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 845, col: 59, offset: 29238},
						expr: &seqExpr{
							pos: position{line: 845, col: 60, offset: 29239},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 60, offset: 29239},
									expr: &litMatcher{
										pos:        position{line: 845, col: 62, offset: 29241},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 845, col: 69, offset: 29248},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 845, col: 69, offset: 29248},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 845, col: 74, offset: 29253},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 847, col: 1, offset: 29318},
			expr: &actionExpr{
				pos: position{line: 847, col: 31, offset: 29348},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 847, col: 31, offset: 29348},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 847, col: 31, offset: 29348},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 32, offset: 29349},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 40, offset: 29357},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 847, col: 49, offset: 29366},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 847, col: 49, offset: 29366},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 11, offset: 29397},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 29419},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 11, offset: 29443},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 29467},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 852, col: 11, offset: 29493},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29516},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29538},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29561},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 29601},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 29634},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 861, col: 1, offset: 29779},
			expr: &actionExpr{
				pos: position{line: 861, col: 27, offset: 29805},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 861, col: 27, offset: 29805},
					exprs: []interface{}{
						&anyMatcher{
							line: 861, col: 28, offset: 29806,
						},
						&zeroOrMoreExpr{
							pos: position{line: 861, col: 31, offset: 29809},
							expr: &seqExpr{
								pos: position{line: 861, col: 32, offset: 29810},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 861, col: 32, offset: 29810},
										expr: &litMatcher{
											pos:        position{line: 861, col: 33, offset: 29811},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 38, offset: 29816},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 39, offset: 29817},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 42, offset: 29820},
										expr: &litMatcher{
											pos:        position{line: 861, col: 43, offset: 29821},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 47, offset: 29825},
										expr: &litMatcher{
											pos:        position{line: 861, col: 48, offset: 29826},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 52, offset: 29830},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 53, offset: 29831},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 61, offset: 29839},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 62, offset: 29840},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 861, col: 74, offset: 29852,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 865, col: 1, offset: 29912},
			expr: &choiceExpr{
				pos: position{line: 865, col: 24, offset: 29935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 24, offset: 29935},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 865, col: 24, offset: 29935},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 865, col: 24, offset: 29935},
									expr: &litMatcher{
										pos:        position{line: 865, col: 25, offset: 29936},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 29, offset: 29940},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 865, col: 33, offset: 29944},
									expr: &litMatcher{
										pos:        position{line: 865, col: 34, offset: 29945},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 865, col: 38, offset: 29949},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 48, offset: 29959},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 77, offset: 29988},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 30169},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 30169},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 867, col: 5, offset: 30169},
									expr: &litMatcher{
										pos:        position{line: 867, col: 6, offset: 30170},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 11, offset: 30175},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 867, col: 15, offset: 30179},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 867, col: 25, offset: 30189},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 867, col: 25, offset: 30189},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 867, col: 29, offset: 30193},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 58, offset: 30222},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 871, col: 1, offset: 30421},
			expr: &seqExpr{
				pos: position{line: 871, col: 32, offset: 30452},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 871, col: 32, offset: 30452},
						expr: &ruleRefExpr{
							pos:  position{line: 871, col: 33, offset: 30453},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 36, offset: 30456},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 871, col: 63, offset: 30483},
						expr: &seqExpr{
							pos: position{line: 871, col: 64, offset: 30484},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 871, col: 64, offset: 30484},
									expr: &seqExpr{
										pos: position{line: 871, col: 66, offset: 30486},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 871, col: 66, offset: 30486},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 871, col: 70, offset: 30490},
												expr: &ruleRefExpr{
													pos:  position{line: 871, col: 71, offset: 30491},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 871, col: 81, offset: 30501},
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 81, offset: 30501},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 871, col: 85, offset: 30505},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 873, col: 1, offset: 30536},
			expr: &actionExpr{
				pos: position{line: 873, col: 31, offset: 30566},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 873, col: 31, offset: 30566},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 873, col: 31, offset: 30566},
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 32, offset: 30567},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 873, col: 40, offset: 30575},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 873, col: 49, offset: 30584},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 873, col: 49, offset: 30584},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 874, col: 11, offset: 30614},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 875, col: 11, offset: 30636},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 30660},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 30684},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 30710},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30733},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30755},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30778},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 30818},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30851},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 887, col: 1, offset: 30996},
			expr: &actionExpr{
				pos: position{line: 887, col: 27, offset: 31022},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 887, col: 27, offset: 31022},
					exprs: []interface{}{
						&anyMatcher{
							line: 887, col: 28, offset: 31023,
						},
						&zeroOrMoreExpr{
							pos: position{line: 887, col: 31, offset: 31026},
							expr: &seqExpr{
								pos: position{line: 887, col: 32, offset: 31027},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 887, col: 32, offset: 31027},
										expr: &litMatcher{
											pos:        position{line: 887, col: 33, offset: 31028},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 37, offset: 31032},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 38, offset: 31033},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 887, col: 41, offset: 31036},
										expr: &litMatcher{
											pos:        position{line: 887, col: 42, offset: 31037},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 46, offset: 31041},
										expr: &litMatcher{
											pos:        position{line: 887, col: 47, offset: 31042},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 51, offset: 31046},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 52, offset: 31047},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 887, col: 60, offset: 31055},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 61, offset: 31056},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 887, col: 73, offset: 31068,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 891, col: 1, offset: 31128},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 31152},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 31152},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 31152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 31152},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 18, offset: 31165},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 40, offset: 31187},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 892, col: 45, offset: 31192},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 55, offset: 31202},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 84, offset: 31231},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 894, col: 9, offset: 31388},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 894, col: 9, offset: 31388},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 894, col: 9, offset: 31388},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 22, offset: 31401},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 44, offset: 31423},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 894, col: 49, offset: 31428},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 59, offset: 31438},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 88, offset: 31467},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 9, offset: 31667},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 897, col: 9, offset: 31667},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 9, offset: 31667},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 22, offset: 31680},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 44, offset: 31702},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 897, col: 48, offset: 31706},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 58, offset: 31716},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 87, offset: 31745},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 905, col: 1, offset: 31953},
			expr: &choiceExpr{
				pos: position{line: 905, col: 15, offset: 31967},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 905, col: 15, offset: 31967},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 39, offset: 31991},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 907, col: 1, offset: 32014},
			expr: &actionExpr{
				pos: position{line: 907, col: 26, offset: 32039},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 907, col: 26, offset: 32039},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 907, col: 26, offset: 32039},
							expr: &litMatcher{
								pos:        position{line: 907, col: 27, offset: 32040},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 32, offset: 32045},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 907, col: 37, offset: 32050},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 47, offset: 32060},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 78, offset: 32091},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 911, col: 1, offset: 32218},
			expr: &seqExpr{
				pos: position{line: 911, col: 34, offset: 32251},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 911, col: 34, offset: 32251},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 911, col: 63, offset: 32280},
						expr: &seqExpr{
							pos: position{line: 911, col: 64, offset: 32281},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 911, col: 64, offset: 32281},
									expr: &litMatcher{
										pos:        position{line: 911, col: 66, offset: 32283},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 911, col: 73, offset: 32290},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 911, col: 73, offset: 32290},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 911, col: 78, offset: 32295},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 913, col: 1, offset: 32362},
			expr: &actionExpr{
				pos: position{line: 913, col: 33, offset: 32394},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 913, col: 33, offset: 32394},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 913, col: 33, offset: 32394},
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 34, offset: 32395},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 42, offset: 32403},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 913, col: 51, offset: 32412},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 913, col: 51, offset: 32412},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 32445},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 32465},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 32489},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 32513},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 32539},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32562},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32584},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 32607},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 32642},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 926, col: 1, offset: 32787},
			expr: &actionExpr{
				pos: position{line: 926, col: 29, offset: 32815},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 926, col: 29, offset: 32815},
					exprs: []interface{}{
						&anyMatcher{
							line: 926, col: 30, offset: 32816,
						},
						&zeroOrMoreExpr{
							pos: position{line: 926, col: 33, offset: 32819},
							expr: &seqExpr{
								pos: position{line: 926, col: 34, offset: 32820},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 926, col: 34, offset: 32820},
										expr: &litMatcher{
											pos:        position{line: 926, col: 35, offset: 32821},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 40, offset: 32826},
										expr: &litMatcher{
											pos:        position{line: 926, col: 41, offset: 32827},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 45, offset: 32831},
										expr: &litMatcher{
											pos:        position{line: 926, col: 46, offset: 32832},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 50, offset: 32836},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 51, offset: 32837},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 926, col: 59, offset: 32845},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 60, offset: 32846},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 926, col: 72, offset: 32858,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 930, col: 1, offset: 32918},
			expr: &choiceExpr{
				pos: position{line: 930, col: 26, offset: 32943},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 26, offset: 32943},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 930, col: 26, offset: 32943},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 930, col: 26, offset: 32943},
									expr: &litMatcher{
										pos:        position{line: 930, col: 27, offset: 32944},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 31, offset: 32948},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 930, col: 35, offset: 32952},
									expr: &litMatcher{
										pos:        position{line: 930, col: 36, offset: 32953},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 930, col: 40, offset: 32957},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 50, offset: 32967},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 81, offset: 32998},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 33181},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 33181},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 932, col: 5, offset: 33181},
									expr: &litMatcher{
										pos:        position{line: 932, col: 6, offset: 33182},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 11, offset: 33187},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 932, col: 15, offset: 33191},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 932, col: 25, offset: 33201},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 932, col: 25, offset: 33201},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 932, col: 29, offset: 33205},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 60, offset: 33236},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 936, col: 1, offset: 33439},
			expr: &seqExpr{
				pos: position{line: 936, col: 34, offset: 33472},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 936, col: 34, offset: 33472},
						expr: &ruleRefExpr{
							pos:  position{line: 936, col: 35, offset: 33473},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 38, offset: 33476},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 936, col: 67, offset: 33505},
						expr: &seqExpr{
							pos: position{line: 936, col: 68, offset: 33506},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 936, col: 68, offset: 33506},
									expr: &seqExpr{
										pos: position{line: 936, col: 70, offset: 33508},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 936, col: 70, offset: 33508},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 936, col: 74, offset: 33512},
												expr: &ruleRefExpr{
													pos:  position{line: 936, col: 75, offset: 33513},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 936, col: 85, offset: 33523},
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 85, offset: 33523},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 89, offset: 33527},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 938, col: 1, offset: 33559},
			expr: &actionExpr{
				pos: position{line: 938, col: 33, offset: 33591},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 938, col: 33, offset: 33591},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 938, col: 33, offset: 33591},
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 34, offset: 33592},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 938, col: 42, offset: 33600},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 938, col: 51, offset: 33609},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 938, col: 51, offset: 33609},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 33641},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 33661},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 33685},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 33709},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 33735},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 33758},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33780},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 33803},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 33838},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 951, col: 1, offset: 33983},
			expr: &actionExpr{
				pos: position{line: 951, col: 29, offset: 34011},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 951, col: 29, offset: 34011},
					exprs: []interface{}{
						&anyMatcher{
							line: 951, col: 30, offset: 34012,
						},
						&zeroOrMoreExpr{
							pos: position{line: 951, col: 33, offset: 34015},
							expr: &seqExpr{
								pos: position{line: 951, col: 34, offset: 34016},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 951, col: 34, offset: 34016},
										expr: &litMatcher{
											pos:        position{line: 951, col: 35, offset: 34017},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 39, offset: 34021},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 40, offset: 34022},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 951, col: 43, offset: 34025},
										expr: &litMatcher{
											pos:        position{line: 951, col: 44, offset: 34026},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 48, offset: 34030},
										expr: &litMatcher{
											pos:        position{line: 951, col: 49, offset: 34031},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 53, offset: 34035},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 54, offset: 34036},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 951, col: 62, offset: 34044},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 63, offset: 34045},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 951, col: 75, offset: 34057,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 955, col: 1, offset: 34117},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 34143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 34143},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 34143},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 956, col: 5, offset: 34143},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 18, offset: 34156},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 40, offset: 34178},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 956, col: 45, offset: 34183},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 55, offset: 34193},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 86, offset: 34224},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 9, offset: 34381},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 958, col: 9, offset: 34381},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 958, col: 9, offset: 34381},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 22, offset: 34394},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 958, col: 44, offset: 34416},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 958, col: 49, offset: 34421},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 59, offset: 34431},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 958, col: 90, offset: 34462},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 9, offset: 34662},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 961, col: 9, offset: 34662},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 9, offset: 34662},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 22, offset: 34675},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 44, offset: 34697},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 48, offset: 34701},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 58, offset: 34711},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 89, offset: 34742},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 968, col: 1, offset: 34952},
			expr: &choiceExpr{
				pos: position{line: 968, col: 18, offset: 34969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 968, col: 18, offset: 34969},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 45, offset: 34996},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 970, col: 1, offset: 35022},
			expr: &actionExpr{
				pos: position{line: 970, col: 29, offset: 35050},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 970, col: 29, offset: 35050},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 970, col: 29, offset: 35050},
							expr: &litMatcher{
								pos:        position{line: 970, col: 30, offset: 35051},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 35, offset: 35056},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 970, col: 40, offset: 35061},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 50, offset: 35071},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 84, offset: 35105},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 974, col: 1, offset: 35235},
			expr: &seqExpr{
				pos: position{line: 974, col: 37, offset: 35271},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 37, offset: 35271},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 974, col: 69, offset: 35303},
						expr: &seqExpr{
							pos: position{line: 974, col: 70, offset: 35304},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 974, col: 70, offset: 35304},
									expr: &litMatcher{
										pos:        position{line: 974, col: 72, offset: 35306},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 974, col: 79, offset: 35313},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 974, col: 79, offset: 35313},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 974, col: 84, offset: 35318},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 976, col: 1, offset: 35387},
			expr: &actionExpr{
				pos: position{line: 976, col: 36, offset: 35422},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 976, col: 36, offset: 35422},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 976, col: 36, offset: 35422},
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 37, offset: 35423},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 45, offset: 35431},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 976, col: 54, offset: 35440},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 976, col: 54, offset: 35440},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 977, col: 11, offset: 35476},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 978, col: 11, offset: 35495},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 979, col: 11, offset: 35517},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 980, col: 11, offset: 35541},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 35567},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35590},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 35612},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 35635},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 35673},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 989, col: 1, offset: 35818},
			expr: &actionExpr{
				pos: position{line: 989, col: 32, offset: 35849},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 989, col: 32, offset: 35849},
					exprs: []interface{}{
						&anyMatcher{
							line: 989, col: 33, offset: 35850,
						},
						&zeroOrMoreExpr{
							pos: position{line: 989, col: 36, offset: 35853},
							expr: &seqExpr{
								pos: position{line: 989, col: 37, offset: 35854},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 989, col: 37, offset: 35854},
										expr: &litMatcher{
											pos:        position{line: 989, col: 38, offset: 35855},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 43, offset: 35860},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 44, offset: 35861},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 989, col: 47, offset: 35864},
										expr: &litMatcher{
											pos:        position{line: 989, col: 48, offset: 35865},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 52, offset: 35869},
										expr: &litMatcher{
											pos:        position{line: 989, col: 53, offset: 35870},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 57, offset: 35874},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 58, offset: 35875},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 989, col: 66, offset: 35883},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 67, offset: 35884},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 989, col: 79, offset: 35896,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 993, col: 1, offset: 35956},
			expr: &choiceExpr{
				pos: position{line: 993, col: 29, offset: 35984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 993, col: 29, offset: 35984},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 993, col: 29, offset: 35984},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 993, col: 29, offset: 35984},
									expr: &litMatcher{
										pos:        position{line: 993, col: 30, offset: 35985},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 993, col: 34, offset: 35989},
									expr: &litMatcher{
										pos:        position{line: 993, col: 35, offset: 35990},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 40, offset: 35995},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 993, col: 44, offset: 35999},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 54, offset: 36009},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 88, offset: 36043},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 995, col: 5, offset: 36229},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 995, col: 5, offset: 36229},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 995, col: 5, offset: 36229},
									expr: &litMatcher{
										pos:        position{line: 995, col: 6, offset: 36230},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 995, col: 11, offset: 36235},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 995, col: 15, offset: 36239},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 995, col: 25, offset: 36249},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 995, col: 25, offset: 36249},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 995, col: 29, offset: 36253},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 995, col: 63, offset: 36287},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 999, col: 1, offset: 36496},
			expr: &seqExpr{
				pos: position{line: 999, col: 37, offset: 36532},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 999, col: 37, offset: 36532},
						expr: &ruleRefExpr{
							pos:  position{line: 999, col: 38, offset: 36533},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 41, offset: 36536},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 999, col: 73, offset: 36568},
						expr: &seqExpr{
							pos: position{line: 999, col: 74, offset: 36569},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 999, col: 74, offset: 36569},
									expr: &seqExpr{
										pos: position{line: 999, col: 76, offset: 36571},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 999, col: 76, offset: 36571},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 999, col: 80, offset: 36575},
												expr: &ruleRefExpr{
													pos:  position{line: 999, col: 81, offset: 36576},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 999, col: 91, offset: 36586},
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 91, offset: 36586},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 999, col: 95, offset: 36590},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1001, col: 1, offset: 36625},
			expr: &actionExpr{
				pos: position{line: 1001, col: 37, offset: 36661},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1001, col: 37, offset: 36661},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1001, col: 46, offset: 36670},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1001, col: 46, offset: 36670},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 11, offset: 36708},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1003, col: 11, offset: 36744},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 11, offset: 36764},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 11, offset: 36785},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 11, offset: 36809},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 11, offset: 36835},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 11, offset: 36858},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 36880},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 36903},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 11, offset: 36941},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1015, col: 1, offset: 37086},
			expr: &actionExpr{
				pos: position{line: 1015, col: 32, offset: 37117},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 32, offset: 37117},
					exprs: []interface{}{
						&anyMatcher{
							line: 1015, col: 33, offset: 37118,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1015, col: 36, offset: 37121},
							expr: &seqExpr{
								pos: position{line: 1015, col: 37, offset: 37122},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1015, col: 37, offset: 37122},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 38, offset: 37123},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 41, offset: 37126},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 42, offset: 37127},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 46, offset: 37131},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 47, offset: 37132},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 51, offset: 37136},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 52, offset: 37137},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 56, offset: 37141},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 57, offset: 37142},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 65, offset: 37150},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 66, offset: 37151},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1015, col: 78, offset: 37163,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1019, col: 1, offset: 37244},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 5, offset: 37273},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 37273},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 37273},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1020, col: 5, offset: 37273},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 18, offset: 37286},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 40, offset: 37308},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 45, offset: 37313},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 55, offset: 37323},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 89, offset: 37357},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 9, offset: 37514},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1022, col: 9, offset: 37514},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1022, col: 9, offset: 37514},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 22, offset: 37527},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 44, offset: 37549},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 49, offset: 37554},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 59, offset: 37564},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 93, offset: 37598},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 9, offset: 37798},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1025, col: 9, offset: 37798},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 9, offset: 37798},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 22, offset: 37811},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 44, offset: 37833},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 48, offset: 37837},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 58, offset: 37847},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 92, offset: 37881},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1029, col: 1, offset: 38031},
			expr: &actionExpr{
				pos: position{line: 1029, col: 18, offset: 38048},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 18, offset: 38048},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1029, col: 18, offset: 38048},
							expr: &litMatcher{
								pos:        position{line: 1029, col: 19, offset: 38049},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1029, col: 23, offset: 38053},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 27, offset: 38057},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 36, offset: 38066},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1029, col: 58, offset: 38088},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1033, col: 1, offset: 38177},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 25, offset: 38201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1033, col: 25, offset: 38201},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 38, offset: 38214},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1035, col: 1, offset: 38233},
			expr: &actionExpr{
				pos: position{line: 1035, col: 21, offset: 38253},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1035, col: 21, offset: 38253},
					expr: &seqExpr{
						pos: position{line: 1035, col: 22, offset: 38254},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1035, col: 22, offset: 38254},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 23, offset: 38255},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1035, col: 31, offset: 38263},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 32, offset: 38264},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1035, col: 35, offset: 38267},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 36, offset: 38268},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1035, col: 40, offset: 38272,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1039, col: 1, offset: 38305},
			expr: &actionExpr{
				pos: position{line: 1039, col: 25, offset: 38329},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 25, offset: 38329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 25, offset: 38329},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 38, offset: 38342},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 60, offset: 38364},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 64, offset: 38368},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 73, offset: 38377},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 95, offset: 38399},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1043, col: 1, offset: 38528},
			expr: &actionExpr{
				pos: position{line: 1043, col: 20, offset: 38547},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 20, offset: 38547},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1043, col: 20, offset: 38547},
							expr: &litMatcher{
								pos:        position{line: 1043, col: 21, offset: 38548},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 25, offset: 38552},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1043, col: 29, offset: 38556},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1043, col: 38, offset: 38565},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 62, offset: 38589},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1047, col: 1, offset: 38680},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 27, offset: 38706},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 27, offset: 38706},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 40, offset: 38719},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1049, col: 1, offset: 38740},
			expr: &actionExpr{
				pos: position{line: 1049, col: 23, offset: 38762},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1049, col: 23, offset: 38762},
					expr: &seqExpr{
						pos: position{line: 1049, col: 24, offset: 38763},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1049, col: 24, offset: 38763},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 25, offset: 38764},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1049, col: 33, offset: 38772},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 34, offset: 38773},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1049, col: 37, offset: 38776},
								expr: &litMatcher{
									pos:        position{line: 1049, col: 38, offset: 38777},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1049, col: 42, offset: 38781,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1053, col: 1, offset: 38814},
			expr: &actionExpr{
				pos: position{line: 1053, col: 27, offset: 38840},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 27, offset: 38840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 27, offset: 38840},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 40, offset: 38853},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 62, offset: 38875},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 66, offset: 38879},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 75, offset: 38888},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 99, offset: 38912},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1060, col: 1, offset: 39148},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 16, offset: 39163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 16, offset: 39163},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 40, offset: 39187},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 64, offset: 39211},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1062, col: 1, offset: 39229},
			expr: &litMatcher{
				pos:        position{line: 1062, col: 32, offset: 39260},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1064, col: 1, offset: 39265},
			expr: &actionExpr{
				pos: position{line: 1064, col: 26, offset: 39290},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 26, offset: 39290},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1064, col: 26, offset: 39290},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 54, offset: 39318},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 63, offset: 39327},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1064, col: 93, offset: 39357},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1064, col: 121, offset: 39385},
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 122, offset: 39386},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1068, col: 1, offset: 39485},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 33, offset: 39517},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1068, col: 34, offset: 39518},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1068, col: 34, offset: 39518},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1068, col: 35, offset: 39519},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1068, col: 35, offset: 39519},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 36, offset: 39520},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1068, col: 64, offset: 39548},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 65, offset: 39549},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1068, col: 68, offset: 39552},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 69, offset: 39553},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1068, col: 77, offset: 39561,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1068, col: 80, offset: 39564},
									expr: &seqExpr{
										pos: position{line: 1068, col: 81, offset: 39565},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1068, col: 81, offset: 39565},
												expr: &seqExpr{
													pos: position{line: 1068, col: 83, offset: 39567},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1068, col: 83, offset: 39567},
															expr: &ruleRefExpr{
																pos:  position{line: 1068, col: 83, offset: 39567},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1068, col: 87, offset: 39571},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1068, col: 116, offset: 39600},
												expr: &ruleRefExpr{
													pos:  position{line: 1068, col: 117, offset: 39601},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1068, col: 145, offset: 39629},
												expr: &ruleRefExpr{
													pos:  position{line: 1068, col: 146, offset: 39630},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1068, col: 154, offset: 39638,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 7, offset: 39780},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1070, col: 8, offset: 39781},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1070, col: 8, offset: 39781},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 9, offset: 39782},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1070, col: 12, offset: 39785},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 13, offset: 39786},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1070, col: 21, offset: 39794},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 22, offset: 39795},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1070, col: 50, offset: 39823,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1074, col: 1, offset: 39905},
			expr: &litMatcher{
				pos:        position{line: 1074, col: 32, offset: 39936},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1076, col: 1, offset: 39943},
			expr: &actionExpr{
				pos: position{line: 1076, col: 26, offset: 39968},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 26, offset: 39968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1076, col: 26, offset: 39968},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 54, offset: 39996},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 63, offset: 40005},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 93, offset: 40035},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1076, col: 121, offset: 40063},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 122, offset: 40064},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1080, col: 1, offset: 40163},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 33, offset: 40195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 34, offset: 40196},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1080, col: 34, offset: 40196},
							expr: &seqExpr{
								pos: position{line: 1080, col: 35, offset: 40197},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1080, col: 35, offset: 40197},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 36, offset: 40198},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1080, col: 64, offset: 40226,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 7, offset: 40391},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1082, col: 7, offset: 40391},
							expr: &seqExpr{
								pos: position{line: 1082, col: 8, offset: 40392},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1082, col: 8, offset: 40392},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 9, offset: 40393},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1082, col: 12, offset: 40396},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 13, offset: 40397},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1082, col: 21, offset: 40405},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 22, offset: 40406},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1082, col: 50, offset: 40434,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1086, col: 1, offset: 40517},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 21, offset: 40537},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1086, col: 21, offset: 40537},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1086, col: 21, offset: 40537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 21, offset: 40537},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 30, offset: 40546},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1086, col: 38, offset: 40554},
										expr: &ruleRefExpr{
											pos:  position{line: 1086, col: 39, offset: 40555},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 67, offset: 40583},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 40673},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1088, col: 5, offset: 40673},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1088, col: 5, offset: 40673},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 15, offset: 40683},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1088, col: 23, offset: 40691},
										expr: &choiceExpr{
											pos: position{line: 1088, col: 24, offset: 40692},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1088, col: 24, offset: 40692},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1088, col: 37, offset: 40705},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 65, offset: 40733},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1092, col: 1, offset: 40823},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 31, offset: 40853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1092, col: 31, offset: 40853},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 43, offset: 40865},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1092, col: 52, offset: 40874},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1092, col: 53, offset: 40875},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1092, col: 53, offset: 40875},
									expr: &litMatcher{
										pos:        position{line: 1092, col: 54, offset: 40876},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1092, col: 58, offset: 40880,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1099, col: 1, offset: 41050},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 19, offset: 41068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1099, col: 19, offset: 41068},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 44, offset: 41093},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1101, col: 1, offset: 41118},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 27, offset: 41144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1101, col: 27, offset: 41144},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1101, col: 27, offset: 41144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 27, offset: 41144},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 32, offset: 41149},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 36, offset: 41153},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1101, col: 40, offset: 41157},
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 40, offset: 41157},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 44, offset: 41161},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 48, offset: 41165},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 55, offset: 41172},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 76, offset: 41193},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 41276},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 41276},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 5, offset: 41276},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 10, offset: 41281},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 14, offset: 41285},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 18, offset: 41289},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1107, col: 1, offset: 41361},
			expr: &actionExpr{
				pos: position{line: 1107, col: 27, offset: 41387},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 27, offset: 41387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1107, col: 27, offset: 41387},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 35, offset: 41395},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 40, offset: 41400},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 54, offset: 41414},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 72, offset: 41432},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1111, col: 1, offset: 41562},
			expr: &actionExpr{
				pos: position{line: 1111, col: 24, offset: 41585},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1111, col: 24, offset: 41585},
					expr: &choiceExpr{
						pos: position{line: 1111, col: 25, offset: 41586},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1111, col: 25, offset: 41586},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1111, col: 37, offset: 41598},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1111, col: 47, offset: 41608},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1111, col: 47, offset: 41608},
										expr: &litMatcher{
											pos:        position{line: 1111, col: 48, offset: 41609},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1111, col: 54, offset: 41615,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1118, col: 1, offset: 41757},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 9, offset: 41765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 9, offset: 41765},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 24, offset: 41780},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1121, col: 1, offset: 41861},
			expr: &actionExpr{
				pos: position{line: 1121, col: 17, offset: 41877},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 17, offset: 41877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 17, offset: 41877},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 25, offset: 41885},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1121, col: 30, offset: 41890},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1121, col: 30, offset: 41890},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 41, offset: 41901},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 55, offset: 41915},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 73, offset: 41933},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1125, col: 1, offset: 42051},
			expr: &actionExpr{
				pos: position{line: 1125, col: 17, offset: 42067},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 17, offset: 42067},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1125, col: 17, offset: 42067},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 22, offset: 42072},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 32, offset: 42082},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1125, col: 49, offset: 42099},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 50, offset: 42100},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1129, col: 1, offset: 42193},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 19, offset: 42211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 19, offset: 42211},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 44, offset: 42236},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1131, col: 1, offset: 42263},
			expr: &actionExpr{
				pos: position{line: 1131, col: 27, offset: 42289},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 27, offset: 42289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 27, offset: 42289},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 31, offset: 42293},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1131, col: 36, offset: 42298},
								expr: &ruleRefExpr{
									pos:  position{line: 1131, col: 37, offset: 42299},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 66, offset: 42328},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1135, col: 1, offset: 42390},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 42462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 42462},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 42462},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 5, offset: 42462},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 10, offset: 42467},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1137, col: 19, offset: 42476},
										expr: &seqExpr{
											pos: position{line: 1137, col: 20, offset: 42477},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1137, col: 20, offset: 42477},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 21, offset: 42478},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 25, offset: 42482},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 26, offset: 42483},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 30, offset: 42487},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 31, offset: 42488},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1137, col: 37, offset: 42494},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1137, col: 37, offset: 42494},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 50, offset: 42507},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 63, offset: 42520},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1137, col: 73, offset: 42530},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1137, col: 74, offset: 42531},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1137, col: 74, offset: 42531},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1137, col: 75, offset: 42532},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1137, col: 78, offset: 42535,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 11, offset: 42604},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1139, col: 16, offset: 42609},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 16, offset: 42609},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1139, col: 24, offset: 42617},
									expr: &notExpr{
										pos: position{line: 1139, col: 26, offset: 42619},
										expr: &litMatcher{
											pos:        position{line: 1139, col: 27, offset: 42620},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 42745},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 42745},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 42745},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1143, col: 14, offset: 42754},
										expr: &seqExpr{
											pos: position{line: 1143, col: 15, offset: 42755},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1143, col: 15, offset: 42755},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 16, offset: 42756},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1143, col: 20, offset: 42760},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 21, offset: 42761},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1143, col: 26, offset: 42766},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1143, col: 26, offset: 42766},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 39, offset: 42779},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 52, offset: 42792},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1143, col: 62, offset: 42802},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1143, col: 63, offset: 42803},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1143, col: 63, offset: 42803},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1143, col: 64, offset: 42804},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1143, col: 67, offset: 42807,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1145, col: 11, offset: 42876},
									expr: &notExpr{
										pos: position{line: 1145, col: 13, offset: 42878},
										expr: &litMatcher{
											pos:        position{line: 1145, col: 14, offset: 42879},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1150, col: 1, offset: 42959},
			expr: &actionExpr{
				pos: position{line: 1150, col: 30, offset: 42988},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 30, offset: 42988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1150, col: 30, offset: 42988},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 34, offset: 42992},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1150, col: 39, offset: 42997},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 40, offset: 42998},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1150, col: 60, offset: 43018},
							expr: &litMatcher{
								pos:        position{line: 1150, col: 60, offset: 43018},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1150, col: 65, offset: 43023},
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 65, offset: 43023},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 69, offset: 43027},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1150, col: 80, offset: 43038},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 81, offset: 43039},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1150, col: 100, offset: 43058},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1154, col: 1, offset: 43143},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 43206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 43206},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 43206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1156, col: 5, offset: 43206},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 10, offset: 43211},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1156, col: 19, offset: 43220},
										expr: &seqExpr{
											pos: position{line: 1156, col: 20, offset: 43221},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1156, col: 20, offset: 43221},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 21, offset: 43222},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1156, col: 25, offset: 43226},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 26, offset: 43227},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1156, col: 30, offset: 43231},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 31, offset: 43232},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1156, col: 37, offset: 43238},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1156, col: 37, offset: 43238},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1156, col: 50, offset: 43251},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1156, col: 63, offset: 43264},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1156, col: 73, offset: 43274},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1156, col: 74, offset: 43275},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1156, col: 74, offset: 43275},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1156, col: 75, offset: 43276},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1156, col: 92, offset: 43293,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1158, col: 11, offset: 43362},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1158, col: 16, offset: 43367},
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 16, offset: 43367},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1158, col: 24, offset: 43375},
									expr: &notExpr{
										pos: position{line: 1158, col: 26, offset: 43377},
										expr: &litMatcher{
											pos:        position{line: 1158, col: 27, offset: 43378},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1162, col: 5, offset: 43503},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1162, col: 5, offset: 43503},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 5, offset: 43503},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1162, col: 14, offset: 43512},
										expr: &seqExpr{
											pos: position{line: 1162, col: 15, offset: 43513},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1162, col: 15, offset: 43513},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 16, offset: 43514},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1162, col: 20, offset: 43518},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 21, offset: 43519},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1162, col: 25, offset: 43523},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 26, offset: 43524},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1162, col: 31, offset: 43529},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1162, col: 31, offset: 43529},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1162, col: 44, offset: 43542},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1162, col: 57, offset: 43555},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1162, col: 67, offset: 43565},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1162, col: 68, offset: 43566},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1162, col: 68, offset: 43566},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1162, col: 69, offset: 43567},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1162, col: 86, offset: 43584,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1164, col: 11, offset: 43653},
									expr: &notExpr{
										pos: position{line: 1164, col: 13, offset: 43655},
										expr: &litMatcher{
											pos:        position{line: 1164, col: 14, offset: 43656},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1169, col: 1, offset: 43806},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 43826},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 43826},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 43826},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1170, col: 14, offset: 43835},
								expr: &choiceExpr{
									pos: position{line: 1170, col: 15, offset: 43836},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1170, col: 15, offset: 43836},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1171, col: 11, offset: 43857},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1172, col: 11, offset: 43875},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1173, col: 11, offset: 43899},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1174, col: 11, offset: 43919},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1175, col: 11, offset: 43941},
											name: "NEWLINE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 21, offset: 43951},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1179, col: 1, offset: 44021},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 17, offset: 44037},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 17, offset: 44037},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 40, offset: 44060},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1182, col: 1, offset: 44196},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 44220},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 25, offset: 44220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 25, offset: 44220},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 33, offset: 44228},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1182, col: 38, offset: 44233},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1182, col: 38, offset: 44233},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 57, offset: 44252},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 79, offset: 44274},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 97, offset: 44292},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1186, col: 1, offset: 44410},
			expr: &actionExpr{
				pos: position{line: 1186, col: 25, offset: 44434},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 25, offset: 44434},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1186, col: 25, offset: 44434},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 30, offset: 44439},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 48, offset: 44457},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1186, col: 65, offset: 44474},
								expr: &ruleRefExpr{
									pos:  position{line: 1186, col: 66, offset: 44475},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1190, col: 1, offset: 44568},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 15, offset: 44582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 15, offset: 44582},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 30, offset: 44597},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1192, col: 1, offset: 44617},
			expr: &actionExpr{
				pos: position{line: 1192, col: 23, offset: 44639},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 23, offset: 44639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1192, col: 23, offset: 44639},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 28, offset: 44644},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 38, offset: 44654},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 56, offset: 44672},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1199, col: 1, offset: 45007},
			expr: &actionExpr{
				pos: position{line: 1199, col: 15, offset: 45021},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 15, offset: 45021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1199, col: 15, offset: 45021},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1199, col: 26, offset: 45032},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 27, offset: 45033},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1199, col: 47, offset: 45053},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 57, offset: 45063},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1199, col: 63, offset: 45069},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1199, col: 63, offset: 45069},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 74, offset: 45080},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 88, offset: 45094},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 106, offset: 45112},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1199, col: 123, offset: 45129},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1203, col: 1, offset: 45249},
			expr: &actionExpr{
				pos: position{line: 1203, col: 16, offset: 45264},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 16, offset: 45264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1203, col: 16, offset: 45264},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1203, col: 25, offset: 45273},
							expr: &litMatcher{
								pos:        position{line: 1203, col: 26, offset: 45274},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 30, offset: 45278},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1203, col: 36, offset: 45284},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1203, col: 36, offset: 45284},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 47, offset: 45295},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 61, offset: 45309},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 79, offset: 45327},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1207, col: 1, offset: 45448},
			expr: &actionExpr{
				pos: position{line: 1207, col: 20, offset: 45467},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 20, offset: 45467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1207, col: 20, offset: 45467},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 24, offset: 45471},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 28, offset: 45475},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 29, offset: 45476},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 46, offset: 45493},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 46, offset: 45493},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 51, offset: 45498},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 57, offset: 45504},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 58, offset: 45505},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 75, offset: 45522},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 75, offset: 45522},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 80, offset: 45527},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 87, offset: 45534},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 88, offset: 45535},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 105, offset: 45552},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 105, offset: 45552},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1207, col: 110, offset: 45557},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 110, offset: 45557},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 114, offset: 45561},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1207, col: 125, offset: 45572},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 126, offset: 45573},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1207, col: 145, offset: 45592},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1214, col: 1, offset: 45882},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 19, offset: 45900},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 19, offset: 45900},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 19, offset: 45900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1214, col: 19, offset: 45900},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 32, offset: 45913},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 41, offset: 45922},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 58, offset: 45939},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 46007},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 46007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1216, col: 5, offset: 46007},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 21, offset: 46023},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 26, offset: 46028},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 39, offset: 46041},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 43, offset: 46045},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 52, offset: 46054},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 69, offset: 46071},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 46149},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 46149},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 5, offset: 46149},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1218, col: 21, offset: 46165},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 26, offset: 46170},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 39, offset: 46183},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1222, col: 1, offset: 46291},
			expr: &actionExpr{
				pos: position{line: 1222, col: 16, offset: 46306},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1222, col: 16, offset: 46306},
					expr: &choiceExpr{
						pos: position{line: 1222, col: 17, offset: 46307},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1222, col: 17, offset: 46307},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1222, col: 29, offset: 46319},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1222, col: 39, offset: 46329},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1222, col: 39, offset: 46329},
										expr: &litMatcher{
											pos:        position{line: 1222, col: 40, offset: 46330},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1222, col: 44, offset: 46334},
										expr: &litMatcher{
											pos:        position{line: 1222, col: 45, offset: 46335},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1222, col: 49, offset: 46339},
										expr: &ruleRefExpr{
											pos:  position{line: 1222, col: 50, offset: 46340},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1222, col: 55, offset: 46345,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1226, col: 1, offset: 46430},
			expr: &actionExpr{
				pos: position{line: 1226, col: 20, offset: 46449},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1226, col: 20, offset: 46449},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1226, col: 29, offset: 46458},
						expr: &seqExpr{
							pos: position{line: 1226, col: 30, offset: 46459},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1226, col: 30, offset: 46459},
									expr: &litMatcher{
										pos:        position{line: 1226, col: 31, offset: 46460},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1226, col: 35, offset: 46464},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 36, offset: 46465},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1226, col: 40, offset: 46469},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 40, offset: 46469},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1226, col: 44, offset: 46473},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 45, offset: 46474},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1226, col: 61, offset: 46490},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1226, col: 75, offset: 46504},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 75, offset: 46504},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1233, col: 1, offset: 46818},
			expr: &actionExpr{
				pos: position{line: 1233, col: 19, offset: 46836},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 19, offset: 46836},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1233, col: 19, offset: 46836},
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 20, offset: 46837},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 5, offset: 46866},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1234, col: 12, offset: 46873},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 12, offset: 46873},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 46896},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 11, offset: 46920},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 46944},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 11, offset: 46966},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 46988},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 47011},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 47039},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 47055},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1246, col: 1, offset: 47096},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 19, offset: 47114},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 19, offset: 47114},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 19, offset: 47155},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 19, offset: 47195},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 19, offset: 47236},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 19, offset: 47277},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 19, offset: 47318},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 19, offset: 47356},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1258, col: 1, offset: 47575},
			expr: &seqExpr{
				pos: position{line: 1258, col: 25, offset: 47599},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1258, col: 25, offset: 47599},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 31, offset: 47605},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1260, col: 1, offset: 47611},
			expr: &actionExpr{
				pos: position{line: 1260, col: 16, offset: 47626},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 16, offset: 47626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1260, col: 16, offset: 47626},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1260, col: 27, offset: 47637},
								expr: &ruleRefExpr{
									pos:  position{line: 1260, col: 28, offset: 47638},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1260, col: 48, offset: 47658},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 69, offset: 47679},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1260, col: 77, offset: 47687},
								expr: &ruleRefExpr{
									pos:  position{line: 1260, col: 78, offset: 47688},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1260, col: 100, offset: 47710},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1260, col: 100, offset: 47710},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1260, col: 123, offset: 47733},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1264, col: 1, offset: 47841},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 23, offset: 47863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1264, col: 23, offset: 47863},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 35, offset: 47875},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 51, offset: 47891},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 62, offset: 47902},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1267, col: 1, offset: 47942},
			expr: &actionExpr{
				pos: position{line: 1267, col: 25, offset: 47966},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1267, col: 25, offset: 47966},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1267, col: 31, offset: 47972},
						expr: &ruleRefExpr{
							pos:  position{line: 1267, col: 32, offset: 47973},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1271, col: 1, offset: 48086},
			expr: &actionExpr{
				pos: position{line: 1271, col: 29, offset: 48114},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 29, offset: 48114},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1271, col: 29, offset: 48114},
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 30, offset: 48115},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1271, col: 51, offset: 48136},
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 52, offset: 48137},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 62, offset: 48147},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 68, offset: 48153},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1278, col: 1, offset: 48391},
			expr: &seqExpr{
				pos: position{line: 1278, col: 26, offset: 48416},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1278, col: 26, offset: 48416},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 33, offset: 48423},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1280, col: 1, offset: 48429},
			expr: &actionExpr{
				pos: position{line: 1280, col: 17, offset: 48445},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 17, offset: 48445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 17, offset: 48445},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1280, col: 28, offset: 48456},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 29, offset: 48457},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1280, col: 49, offset: 48477},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 71, offset: 48499},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1280, col: 79, offset: 48507},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 80, offset: 48508},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1280, col: 103, offset: 48531},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1280, col: 103, offset: 48531},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1280, col: 127, offset: 48555},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1284, col: 1, offset: 48664},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 24, offset: 48687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 24, offset: 48687},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 40, offset: 48703},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 64, offset: 48727},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1286, col: 1, offset: 48738},
			expr: &actionExpr{
				pos: position{line: 1286, col: 26, offset: 48763},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1286, col: 26, offset: 48763},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1286, col: 32, offset: 48769},
						expr: &ruleRefExpr{
							pos:  position{line: 1286, col: 33, offset: 48770},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1290, col: 1, offset: 48889},
			expr: &actionExpr{
				pos: position{line: 1290, col: 30, offset: 48918},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 30, offset: 48918},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1290, col: 30, offset: 48918},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 31, offset: 48919},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 53, offset: 48941},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1290, col: 59, offset: 48947},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1290, col: 59, offset: 48947},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1290, col: 59, offset: 48947},
											expr: &ruleRefExpr{
												pos:  position{line: 1290, col: 60, offset: 48948},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1290, col: 64, offset: 48952},
											expr: &choiceExpr{
												pos: position{line: 1290, col: 65, offset: 48953},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1290, col: 65, offset: 48953},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1290, col: 77, offset: 48965},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1290, col: 87, offset: 48975},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1290, col: 87, offset: 48975},
																expr: &ruleRefExpr{
																	pos:  position{line: 1290, col: 88, offset: 48976},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1290, col: 92, offset: 48980,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1290, col: 128, offset: 49016},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1297, col: 1, offset: 49342},
			expr: &seqExpr{
				pos: position{line: 1297, col: 26, offset: 49367},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1297, col: 26, offset: 49367},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 33, offset: 49374},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1299, col: 1, offset: 49380},
			expr: &actionExpr{
				pos: position{line: 1299, col: 17, offset: 49396},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 17, offset: 49396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 17, offset: 49396},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1299, col: 28, offset: 49407},
								expr: &ruleRefExpr{
									pos:  position{line: 1299, col: 29, offset: 49408},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 49, offset: 49428},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 71, offset: 49450},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1299, col: 79, offset: 49458},
								expr: &choiceExpr{
									pos: position{line: 1299, col: 80, offset: 49459},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1299, col: 80, offset: 49459},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 92, offset: 49471},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 108, offset: 49487},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 119, offset: 49498},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1299, col: 145, offset: 49524},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1299, col: 145, offset: 49524},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1299, col: 169, offset: 49548},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1304, col: 1, offset: 49675},
			expr: &actionExpr{
				pos: position{line: 1304, col: 26, offset: 49700},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 26, offset: 49700},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1304, col: 32, offset: 49706},
						expr: &ruleRefExpr{
							pos:  position{line: 1304, col: 33, offset: 49707},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1308, col: 1, offset: 49821},
			expr: &actionExpr{
				pos: position{line: 1308, col: 30, offset: 49850},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 30, offset: 49850},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1308, col: 30, offset: 49850},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 31, offset: 49851},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1308, col: 53, offset: 49873},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 54, offset: 49874},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 64, offset: 49884},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 70, offset: 49890},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1315, col: 1, offset: 50126},
			expr: &seqExpr{
				pos: position{line: 1315, col: 24, offset: 50149},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1315, col: 24, offset: 50149},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 31, offset: 50156},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1317, col: 1, offset: 50187},
			expr: &actionExpr{
				pos: position{line: 1317, col: 15, offset: 50201},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 15, offset: 50201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1317, col: 15, offset: 50201},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1317, col: 26, offset: 50212},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 27, offset: 50213},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1317, col: 47, offset: 50233},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 67, offset: 50253},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1317, col: 75, offset: 50261},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 76, offset: 50262},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1317, col: 97, offset: 50283},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1317, col: 97, offset: 50283},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1317, col: 119, offset: 50305},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1321, col: 1, offset: 50412},
			expr: &actionExpr{
				pos: position{line: 1322, col: 5, offset: 50438},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 5, offset: 50438},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1322, col: 5, offset: 50438},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 6, offset: 50439},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1322, col: 26, offset: 50459},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 27, offset: 50460},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 31, offset: 50464},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1322, col: 40, offset: 50473},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 40, offset: 50473},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 15, offset: 50498},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 15, offset: 50526},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 15, offset: 50552},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 15, offset: 50575},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 15, offset: 50601},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 15, offset: 50628},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 15, offset: 50655},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 15, offset: 50682},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 15, offset: 50714},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 15, offset: 50740},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50767},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50788},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50816},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 50860},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 15, offset: 50898},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 15, offset: 50939},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1342, col: 1, offset: 50998},
			expr: &actionExpr{
				pos: position{line: 1342, col: 24, offset: 51021},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1342, col: 24, offset: 51021},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1342, col: 30, offset: 51027},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 31, offset: 51028},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1351, col: 1, offset: 51374},
			expr: &actionExpr{
				pos: position{line: 1351, col: 15, offset: 51388},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 15, offset: 51388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1351, col: 15, offset: 51388},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 27, offset: 51400},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1352, col: 5, offset: 51424},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1356, col: 5, offset: 51610},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1356, col: 25, offset: 51630},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1356, col: 33, offset: 51638},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 34, offset: 51639},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1356, col: 55, offset: 51660},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1356, col: 55, offset: 51660},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 77, offset: 51682},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1360, col: 1, offset: 51797},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 22, offset: 51818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 22, offset: 51818},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 41, offset: 51837},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 53, offset: 51849},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1362, col: 1, offset: 51870},
			expr: &actionExpr{
				pos: position{line: 1362, col: 21, offset: 51890},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 21, offset: 51890},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1362, col: 21, offset: 51890},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 22, offset: 51891},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 42, offset: 51911},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 51, offset: 51920},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1367, col: 1, offset: 51982},
			expr: &actionExpr{
				pos: position{line: 1367, col: 24, offset: 52005},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1367, col: 24, offset: 52005},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1367, col: 30, offset: 52011},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 31, offset: 52012},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1371, col: 1, offset: 52102},
			expr: &actionExpr{
				pos: position{line: 1371, col: 28, offset: 52129},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 28, offset: 52129},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1371, col: 28, offset: 52129},
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 29, offset: 52130},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1371, col: 49, offset: 52150},
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 50, offset: 52151},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1371, col: 60, offset: 52161},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1371, col: 66, offset: 52167},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1371, col: 66, offset: 52167},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1371, col: 66, offset: 52167},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1371, col: 75, offset: 52176},
												expr: &ruleRefExpr{
													pos:  position{line: 1371, col: 76, offset: 52177},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1371, col: 109, offset: 52210},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1377, col: 1, offset: 52306},
			expr: &actionExpr{
				pos: position{line: 1377, col: 35, offset: 52340},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 35, offset: 52340},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 35, offset: 52340},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 36, offset: 52341},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1377, col: 40, offset: 52345},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 41, offset: 52346},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 5, offset: 52361},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1378, col: 14, offset: 52370},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1378, col: 14, offset: 52370},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 11, offset: 52388},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 11, offset: 52411},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 11, offset: 52427},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 11, offset: 52450},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 11, offset: 52476},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 11, offset: 52498},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 52524},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 52551},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 11, offset: 52592},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 11, offset: 52619},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 52639},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1396, col: 1, offset: 52871},
			expr: &seqExpr{
				pos: position{line: 1396, col: 26, offset: 52896},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1396, col: 26, offset: 52896},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 33, offset: 52903},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1398, col: 1, offset: 52909},
			expr: &actionExpr{
				pos: position{line: 1398, col: 17, offset: 52925},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 17, offset: 52925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 17, offset: 52925},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 28, offset: 52936},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 29, offset: 52937},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 49, offset: 52957},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 71, offset: 52979},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1398, col: 79, offset: 52987},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 80, offset: 52988},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1398, col: 104, offset: 53012},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1398, col: 104, offset: 53012},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1398, col: 128, offset: 53036},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1402, col: 1, offset: 53145},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 24, offset: 53168},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1402, col: 24, offset: 53168},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 36, offset: 53180},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 52, offset: 53196},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 63, offset: 53207},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 81, offset: 53225},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1404, col: 1, offset: 53248},
			expr: &actionExpr{
				pos: position{line: 1404, col: 20, offset: 53267},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 20, offset: 53267},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1404, col: 20, offset: 53267},
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 21, offset: 53268},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 34, offset: 53281},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 43, offset: 53290},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1409, col: 1, offset: 53353},
			expr: &actionExpr{
				pos: position{line: 1409, col: 26, offset: 53378},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1409, col: 26, offset: 53378},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1409, col: 32, offset: 53384},
						expr: &ruleRefExpr{
							pos:  position{line: 1409, col: 33, offset: 53385},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1413, col: 1, offset: 53499},
			expr: &actionExpr{
				pos: position{line: 1413, col: 30, offset: 53528},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1413, col: 30, offset: 53528},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1413, col: 30, offset: 53528},
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 31, offset: 53529},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1413, col: 53, offset: 53551},
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 54, offset: 53552},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1413, col: 64, offset: 53562},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 70, offset: 53568},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1421, col: 1, offset: 53799},
			expr: &actionExpr{
				pos: position{line: 1421, col: 10, offset: 53808},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 10, offset: 53808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1421, col: 10, offset: 53808},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1421, col: 21, offset: 53819},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 22, offset: 53820},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1421, col: 42, offset: 53840},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1422, col: 5, offset: 53859},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1422, col: 12, offset: 53866},
								expr: &ruleRefExpr{
									pos:  position{line: 1422, col: 13, offset: 53867},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 5, offset: 53889},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1423, col: 11, offset: 53895},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 12, offset: 53896},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1424, col: 6, offset: 53913},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1424, col: 6, offset: 53913},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 23, offset: 53930},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1428, col: 1, offset: 54045},
			expr: &seqExpr{
				pos: position{line: 1428, col: 23, offset: 54067},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1428, col: 23, offset: 54067},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1428, col: 27, offset: 54071},
						expr: &ruleRefExpr{
							pos:  position{line: 1428, col: 27, offset: 54071},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1430, col: 1, offset: 54076},
			expr: &seqExpr{
				pos: position{line: 1430, col: 19, offset: 54094},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1430, col: 19, offset: 54094},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 26, offset: 54101},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1433, col: 1, offset: 54170},
			expr: &actionExpr{
				pos: position{line: 1433, col: 20, offset: 54189},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 20, offset: 54189},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1433, col: 20, offset: 54189},
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 21, offset: 54190},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 36, offset: 54205},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1433, col: 42, offset: 54211},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 43, offset: 54212},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 55, offset: 54224},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 59, offset: 54228},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1437, col: 1, offset: 54296},
			expr: &actionExpr{
				pos: position{line: 1437, col: 14, offset: 54309},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 14, offset: 54309},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1437, col: 14, offset: 54309},
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 15, offset: 54310},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1437, col: 30, offset: 54325},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1437, col: 36, offset: 54331},
								expr: &ruleRefExpr{
									pos:  position{line: 1437, col: 37, offset: 54332},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1437, col: 49, offset: 54344},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1437, col: 53, offset: 54348},
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 53, offset: 54348},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1441, col: 1, offset: 54417},
			expr: &actionExpr{
				pos: position{line: 1441, col: 14, offset: 54430},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1441, col: 14, offset: 54430},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1441, col: 14, offset: 54430},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 33, offset: 54449},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1441, col: 42, offset: 54458},
								expr: &seqExpr{
									pos: position{line: 1441, col: 43, offset: 54459},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1441, col: 43, offset: 54459},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 44, offset: 54460},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1441, col: 63, offset: 54479},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 64, offset: 54480},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1441, col: 68, offset: 54484},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 68, offset: 54484},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1441, col: 72, offset: 54488},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1441, col: 86, offset: 54502},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 86, offset: 54502},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1448, col: 1, offset: 54748},
			expr: &litMatcher{
				pos:        position{line: 1448, col: 26, offset: 54773},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1450, col: 1, offset: 54781},
			expr: &actionExpr{
				pos: position{line: 1450, col: 17, offset: 54797},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1450, col: 17, offset: 54797},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1450, col: 17, offset: 54797},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1450, col: 39, offset: 54819},
							expr: &ruleRefExpr{
								pos:  position{line: 1450, col: 39, offset: 54819},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1450, col: 43, offset: 54823},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1450, col: 51, offset: 54831},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1450, col: 59, offset: 54839},
								expr: &ruleRefExpr{
									pos:  position{line: 1450, col: 60, offset: 54840},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1450, col: 81, offset: 54861},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1450, col: 82, offset: 54862},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1450, col: 82, offset: 54862},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1450, col: 104, offset: 54884},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 112, offset: 54892},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1454, col: 1, offset: 54998},
			expr: &actionExpr{
				pos: position{line: 1454, col: 21, offset: 55018},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 21, offset: 55018},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1454, col: 21, offset: 55018},
							expr: &choiceExpr{
								pos: position{line: 1454, col: 22, offset: 55019},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1454, col: 22, offset: 55019},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 34, offset: 55031},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1454, col: 44, offset: 55041},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1454, col: 44, offset: 55041},
												expr: &ruleRefExpr{
													pos:  position{line: 1454, col: 45, offset: 55042},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1454, col: 67, offset: 55064},
												expr: &ruleRefExpr{
													pos:  position{line: 1454, col: 68, offset: 55065},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1454, col: 72, offset: 55069,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1454, col: 77, offset: 55074},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1458, col: 1, offset: 55114},
			expr: &actionExpr{
				pos: position{line: 1458, col: 22, offset: 55135},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1458, col: 22, offset: 55135},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1458, col: 22, offset: 55135},
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 23, offset: 55136},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1458, col: 45, offset: 55158},
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 45, offset: 55158},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1458, col: 49, offset: 55162},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1458, col: 54, offset: 55167},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 63, offset: 55176},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1458, col: 89, offset: 55202},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1462, col: 1, offset: 55267},
			expr: &actionExpr{
				pos: position{line: 1462, col: 29, offset: 55295},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1462, col: 29, offset: 55295},
					expr: &choiceExpr{
						pos: position{line: 1462, col: 30, offset: 55296},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1462, col: 30, offset: 55296},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1462, col: 42, offset: 55308},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1462, col: 52, offset: 55318},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1462, col: 52, offset: 55318},
										expr: &ruleRefExpr{
											pos:  position{line: 1462, col: 53, offset: 55319},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1462, col: 58, offset: 55324,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1470, col: 1, offset: 55633},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 17, offset: 55649},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 17, offset: 55649},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 49, offset: 55681},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 78, offset: 55710},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1472, col: 1, offset: 55746},
			expr: &litMatcher{
				pos:        position{line: 1472, col: 26, offset: 55771},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1475, col: 1, offset: 55843},
			expr: &actionExpr{
				pos: position{line: 1475, col: 31, offset: 55873},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1475, col: 31, offset: 55873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1475, col: 31, offset: 55873},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1475, col: 42, offset: 55884},
								expr: &ruleRefExpr{
									pos:  position{line: 1475, col: 43, offset: 55885},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 63, offset: 55905},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 70, offset: 55912},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1480, col: 1, offset: 56142},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 56182},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 56182},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 56182},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1481, col: 16, offset: 56193},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1481, col: 16, offset: 56193},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1481, col: 16, offset: 56193},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1481, col: 19, offset: 56196},
											expr: &choiceExpr{
												pos: position{line: 1481, col: 20, offset: 56197},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1481, col: 20, offset: 56197},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1481, col: 32, offset: 56209},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1481, col: 41, offset: 56218},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1481, col: 42, offset: 56219},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1481, col: 42, offset: 56219},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1481, col: 43, offset: 56220},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1481, col: 48, offset: 56225,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 8, offset: 56316},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 56379},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1486, col: 16, offset: 56390},
								expr: &actionExpr{
									pos: position{line: 1487, col: 9, offset: 56400},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1487, col: 9, offset: 56400},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1487, col: 9, offset: 56400},
												expr: &ruleRefExpr{
													pos:  position{line: 1487, col: 10, offset: 56401},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1488, col: 9, offset: 56420},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1488, col: 20, offset: 56431},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1488, col: 20, offset: 56431},
														expr: &choiceExpr{
															pos: position{line: 1488, col: 21, offset: 56432},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1488, col: 21, offset: 56432},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1488, col: 33, offset: 56444},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1488, col: 43, offset: 56454},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1488, col: 43, offset: 56454},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1488, col: 44, offset: 56455},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1488, col: 49, offset: 56460,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1490, col: 12, offset: 56517},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1497, col: 1, offset: 56747},
			expr: &actionExpr{
				pos: position{line: 1497, col: 39, offset: 56785},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 39, offset: 56785},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1497, col: 39, offset: 56785},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1497, col: 50, offset: 56796},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 51, offset: 56797},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1498, col: 9, offset: 56825},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1498, col: 31, offset: 56847},
							expr: &ruleRefExpr{
								pos:  position{line: 1498, col: 31, offset: 56847},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1498, col: 35, offset: 56851},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1498, col: 43, offset: 56859},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1498, col: 50, offset: 56866},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1498, col: 92, offset: 56908},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1498, col: 93, offset: 56909},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1498, col: 93, offset: 56909},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1498, col: 115, offset: 56931},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 123, offset: 56939},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1503, col: 1, offset: 57098},
			expr: &actionExpr{
				pos: position{line: 1503, col: 44, offset: 57141},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1503, col: 44, offset: 57141},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1503, col: 50, offset: 57147},
						expr: &ruleRefExpr{
							pos:  position{line: 1503, col: 51, offset: 57148},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1507, col: 1, offset: 57232},
			expr: &actionExpr{
				pos: position{line: 1508, col: 5, offset: 57287},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 5, offset: 57287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1508, col: 5, offset: 57287},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1508, col: 11, offset: 57293},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1508, col: 11, offset: 57293},
									expr: &choiceExpr{
										pos: position{line: 1508, col: 12, offset: 57294},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1508, col: 12, offset: 57294},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1508, col: 24, offset: 57306},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1508, col: 34, offset: 57316},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1508, col: 34, offset: 57316},
														expr: &ruleRefExpr{
															pos:  position{line: 1508, col: 35, offset: 57317},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1508, col: 57, offset: 57339},
														expr: &ruleRefExpr{
															pos:  position{line: 1508, col: 58, offset: 57340},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1508, col: 62, offset: 57344,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 8, offset: 57393},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1515, col: 1, offset: 57519},
			expr: &actionExpr{
				pos: position{line: 1516, col: 5, offset: 57557},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 5, offset: 57557},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1516, col: 5, offset: 57557},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1516, col: 16, offset: 57568},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 17, offset: 57569},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1517, col: 5, offset: 57593},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 5, offset: 57807},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 12, offset: 57814},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1528, col: 1, offset: 57964},
			expr: &actionExpr{
				pos: position{line: 1528, col: 16, offset: 57979},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1528, col: 16, offset: 57979},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1533, col: 1, offset: 58062},
			expr: &actionExpr{
				pos: position{line: 1533, col: 39, offset: 58100},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1533, col: 39, offset: 58100},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1533, col: 45, offset: 58106},
						expr: &ruleRefExpr{
							pos:  position{line: 1533, col: 46, offset: 58107},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1537, col: 1, offset: 58187},
			expr: &actionExpr{
				pos: position{line: 1537, col: 38, offset: 58224},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 38, offset: 58224},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 38, offset: 58224},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1537, col: 44, offset: 58230},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1537, col: 44, offset: 58230},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1537, col: 44, offset: 58230},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 46, offset: 58232},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1537, col: 57, offset: 58243},
											expr: &choiceExpr{
												pos: position{line: 1537, col: 58, offset: 58244},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1537, col: 58, offset: 58244},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1537, col: 70, offset: 58256},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1537, col: 80, offset: 58266},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1537, col: 80, offset: 58266},
																expr: &ruleRefExpr{
																	pos:  position{line: 1537, col: 81, offset: 58267},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1537, col: 86, offset: 58272,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1539, col: 4, offset: 58313},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1546, col: 1, offset: 58487},
			expr: &actionExpr{
				pos: position{line: 1546, col: 23, offset: 58509},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1546, col: 23, offset: 58509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1546, col: 23, offset: 58509},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 29, offset: 58515},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 35, offset: 58521},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 45, offset: 58531},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1546, col: 51, offset: 58537},
								expr: &actionExpr{
									pos: position{line: 1546, col: 52, offset: 58538},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1546, col: 52, offset: 58538},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 52, offset: 58538},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 52, offset: 58538},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1546, col: 56, offset: 58542},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 60, offset: 58546},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 60, offset: 58546},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1546, col: 64, offset: 58550},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 72, offset: 58558},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 9, offset: 58606},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1548, col: 15, offset: 58612},
								expr: &actionExpr{
									pos: position{line: 1548, col: 16, offset: 58613},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1548, col: 16, offset: 58613},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 16, offset: 58613},
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 16, offset: 58613},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1548, col: 20, offset: 58617},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 24, offset: 58621},
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 24, offset: 58621},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1548, col: 28, offset: 58625},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 36, offset: 58633},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1550, col: 9, offset: 58681},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1557, col: 1, offset: 58865},
			expr: &actionExpr{
				pos: position{line: 1557, col: 14, offset: 58878},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 14, offset: 58878},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1557, col: 14, offset: 58878},
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 15, offset: 58879},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1557, col: 19, offset: 58883},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1564, col: 1, offset: 59031},
			expr: &charClassMatcher{
				pos:        position{line: 1564, col: 13, offset: 59043},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1566, col: 1, offset: 59053},
			expr: &choiceExpr{
				pos: position{line: 1566, col: 16, offset: 59068},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1566, col: 16, offset: 59068},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 22, offset: 59074},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 28, offset: 59080},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 34, offset: 59086},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 40, offset: 59092},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 46, offset: 59098},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1568, col: 1, offset: 59104},
			expr: &actionExpr{
				pos: position{line: 1568, col: 14, offset: 59117},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1568, col: 14, offset: 59117},
					expr: &charClassMatcher{
						pos:        position{line: 1568, col: 14, offset: 59117},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1572, col: 1, offset: 59163},
			expr: &litMatcher{
				pos:        position{line: 1572, col: 8, offset: 59170},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1574, col: 1, offset: 59175},
			expr: &actionExpr{
				pos: position{line: 1574, col: 15, offset: 59189},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 15, offset: 59189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1574, col: 15, offset: 59189},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1574, col: 25, offset: 59199},
							expr: &choiceExpr{
								pos: position{line: 1574, col: 27, offset: 59201},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1574, col: 27, offset: 59201},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 32, offset: 59206},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1579, col: 1, offset: 59471},
			expr: &actionExpr{
				pos: position{line: 1579, col: 14, offset: 59484},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1579, col: 15, offset: 59485},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1579, col: 15, offset: 59485},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1579, col: 27, offset: 59497},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1579, col: 46, offset: 59516},
							expr: &actionExpr{
								pos: position{line: 1579, col: 47, offset: 59517},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1579, col: 47, offset: 59517},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1579, col: 48, offset: 59518},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1579, col: 48, offset: 59518},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 49, offset: 59519},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 57, offset: 59527},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 58, offset: 59528},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 61, offset: 59531},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 62, offset: 59532},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 66, offset: 59536},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 67, offset: 59537},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 84, offset: 59554},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 85, offset: 59555},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 110, offset: 59580},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 111, offset: 59581},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1579, col: 123, offset: 59593,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1579, col: 126, offset: 59596},
											expr: &ruleRefExpr{
												pos:  position{line: 1579, col: 126, offset: 59596},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1581, col: 7, offset: 59705},
							expr: &litMatcher{
								pos:        position{line: 1581, col: 7, offset: 59705},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1585, col: 1, offset: 59886},
			expr: &oneOrMoreExpr{
				pos: position{line: 1585, col: 11, offset: 59896},
				expr: &ruleRefExpr{
					pos:  position{line: 1585, col: 11, offset: 59896},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1587, col: 1, offset: 59902},
			expr: &actionExpr{
				pos: position{line: 1587, col: 17, offset: 59918},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1587, col: 17, offset: 59918},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1587, col: 26, offset: 59927},
						expr: &choiceExpr{
							pos: position{line: 1587, col: 27, offset: 59928},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1587, col: 27, offset: 59928},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1587, col: 38, offset: 59939},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1591, col: 1, offset: 60031},
			expr: &actionExpr{
				pos: position{line: 1591, col: 25, offset: 60055},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1591, col: 25, offset: 60055},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1591, col: 34, offset: 60064},
						expr: &seqExpr{
							pos: position{line: 1591, col: 35, offset: 60065},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1591, col: 35, offset: 60065},
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 36, offset: 60066},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1591, col: 40, offset: 60070},
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 41, offset: 60071},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1591, col: 44, offset: 60074},
									expr: &litMatcher{
										pos:        position{line: 1591, col: 45, offset: 60075},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1591, col: 49, offset: 60079,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1595, col: 1, offset: 60143},
			expr: &actionExpr{
				pos: position{line: 1595, col: 13, offset: 60155},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1595, col: 13, offset: 60155},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1595, col: 23, offset: 60165},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1595, col: 23, offset: 60165},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1595, col: 34, offset: 60176},
								expr: &choiceExpr{
									pos: position{line: 1595, col: 35, offset: 60177},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1595, col: 35, offset: 60177},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 46, offset: 60188},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1599, col: 1, offset: 60281},
			expr: &oneOrMoreExpr{
				pos: position{line: 1599, col: 13, offset: 60293},
				expr: &choiceExpr{
					pos: position{line: 1599, col: 14, offset: 60294},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1599, col: 14, offset: 60294},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1599, col: 99, offset: 60379},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1599, col: 105, offset: 60385},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1601, col: 1, offset: 60506},
			expr: &actionExpr{
				pos: position{line: 1601, col: 21, offset: 60526},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 21, offset: 60526},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1601, col: 31, offset: 60536},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1601, col: 31, offset: 60536},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1601, col: 42, offset: 60547},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1605, col: 1, offset: 60626},
			expr: &oneOrMoreExpr{
				pos: position{line: 1605, col: 22, offset: 60647},
				expr: &choiceExpr{
					pos: position{line: 1605, col: 23, offset: 60648},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1605, col: 23, offset: 60648},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1605, col: 110, offset: 60735},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1605, col: 116, offset: 60741},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1607, col: 1, offset: 60790},
			expr: &actionExpr{
				pos: position{line: 1607, col: 8, offset: 60797},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1607, col: 8, offset: 60797},
					expr: &choiceExpr{
						pos: position{line: 1607, col: 9, offset: 60798},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1607, col: 9, offset: 60798},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1607, col: 22, offset: 60811},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1607, col: 22, offset: 60811},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 23, offset: 60812},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 31, offset: 60820},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 32, offset: 60821},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 35, offset: 60824},
										expr: &litMatcher{
											pos:        position{line: 1607, col: 36, offset: 60825},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 40, offset: 60829},
										expr: &litMatcher{
											pos:        position{line: 1607, col: 41, offset: 60830},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1607, col: 46, offset: 60835,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1611, col: 1, offset: 60876},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 15, offset: 60890},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1611, col: 15, offset: 60890},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 27, offset: 60902},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 40, offset: 60915},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 51, offset: 60926},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 62, offset: 60937},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1613, col: 1, offset: 60948},
			expr: &actionExpr{
				pos: position{line: 1613, col: 7, offset: 60954},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1613, col: 7, offset: 60954},
					expr: &choiceExpr{
						pos: position{line: 1613, col: 8, offset: 60955},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1613, col: 8, offset: 60955},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1613, col: 21, offset: 60968},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1613, col: 21, offset: 60968},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 22, offset: 60969},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 30, offset: 60977},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 31, offset: 60978},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 34, offset: 60981},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 35, offset: 60982},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 39, offset: 60986},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 40, offset: 60987},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 44, offset: 60991},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 45, offset: 60992},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 50, offset: 60997},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 51, offset: 60998},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 56, offset: 61003},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 57, offset: 61004},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1613, col: 62, offset: 61009,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1617, col: 1, offset: 61050},
			expr: &actionExpr{
				pos: position{line: 1617, col: 10, offset: 61059},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1617, col: 10, offset: 61059},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1621, col: 1, offset: 61101},
			expr: &actionExpr{
				pos: position{line: 1621, col: 11, offset: 61111},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 11, offset: 61111},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1621, col: 11, offset: 61111},
							expr: &litMatcher{
								pos:        position{line: 1621, col: 11, offset: 61111},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1621, col: 16, offset: 61116},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 16, offset: 61116},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1625, col: 1, offset: 61168},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 7, offset: 61174},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1625, col: 7, offset: 61174},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1625, col: 13, offset: 61180},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1625, col: 13, offset: 61180},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1629, col: 1, offset: 61221},
			expr: &choiceExpr{
				pos: position{line: 1629, col: 12, offset: 61232},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1629, col: 12, offset: 61232},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1629, col: 21, offset: 61241},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1629, col: 28, offset: 61248},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1631, col: 1, offset: 61254},
			expr: &notExpr{
				pos: position{line: 1631, col: 8, offset: 61261},
				expr: &anyMatcher{
					line: 1631, col: 9, offset: 61262,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1633, col: 1, offset: 61265},
			expr: &choiceExpr{
				pos: position{line: 1633, col: 8, offset: 61272},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1633, col: 8, offset: 61272},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1633, col: 18, offset: 61282},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1635, col: 1, offset: 61287},
			expr: &seqExpr{
				pos: position{line: 1635, col: 9, offset: 61295},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1635, col: 9, offset: 61295},
						expr: &ruleRefExpr{
							pos:  position{line: 1635, col: 9, offset: 61295},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1635, col: 13, offset: 61299},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
