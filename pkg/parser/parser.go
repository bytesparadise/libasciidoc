// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	"github.com/davecgh/go-spew/spew"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 462},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 486},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 5, offset: 486},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 27, col: 9, offset: 504},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 27, col: 9, offset: 504},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 360, col: 19, offset: 10911},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 360, col: 19, offset: 10911},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 360, col: 19, offset: 10911},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 360, col: 24, offset: 10916},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9737},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9737},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9747},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9748},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 360, col: 45, offset: 10937},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 360, col: 49, offset: 10941},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 362, col: 9, offset: 11032},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 362, col: 9, offset: 11032},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 362, col: 9, offset: 11032},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 362, col: 13, offset: 11036},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9737},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9737},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9747},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9748},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 362, col: 34, offset: 11057},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 362, col: 39, offset: 11062},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 29, col: 11, offset: 560},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 70, col: 10, offset: 1763},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 70, col: 10, offset: 1763},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 70, col: 10, offset: 1763},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 20, offset: 1773},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3552},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3552},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 51, offset: 1804},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 70, col: 55, offset: 1808},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 70, col: 60, offset: 1813},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 70, col: 93, offset: 1846},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 70, col: 97, offset: 1850},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 74, col: 11, offset: 1940},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 74, col: 11, offset: 1940},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 74, col: 11, offset: 1940},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 22, offset: 1951},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 127, col: 28, offset: 3552},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															expr: &charClassMatcher{
																pos:        position{line: 127, col: 28, offset: 3552},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 53, offset: 1982},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 74, col: 57, offset: 1986},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 74, col: 62, offset: 1991},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 74, col: 95, offset: 2024},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 74, col: 99, offset: 2028},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 82, col: 11, offset: 2207},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 82, col: 11, offset: 2207},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 82, col: 11, offset: 2207},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 84, col: 5, offset: 2232},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						run: (*parser).callonDocumentRawLine97,
																						expr: &seqExpr{
																							pos: position{line: 645, col: 5, offset: 20316},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 645, col: 5, offset: 20316},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 645, col: 13, offset: 20324},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine101,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 645, col: 32, offset: 20343},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						run: (*parser).callonDocumentRawLine107,
																						expr: &seqExpr{
																							pos: position{line: 652, col: 5, offset: 20584},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 652, col: 5, offset: 20584},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 652, col: 9, offset: 20588},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine111,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 652, col: 28, offset: 20607},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine118,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						run: (*parser).callonDocumentRawLine123,
																						expr: &seqExpr{
																							pos: position{line: 645, col: 5, offset: 20316},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 645, col: 5, offset: 20316},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 645, col: 13, offset: 20324},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine127,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 645, col: 32, offset: 20343},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						run: (*parser).callonDocumentRawLine133,
																						expr: &seqExpr{
																							pos: position{line: 652, col: 5, offset: 20584},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 652, col: 5, offset: 20584},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 652, col: 9, offset: 20588},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine137,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 652, col: 28, offset: 20607},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine144,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 645, col: 5, offset: 20316},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				run: (*parser).callonDocumentRawLine147,
																				expr: &seqExpr{
																					pos: position{line: 645, col: 5, offset: 20316},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 645, col: 5, offset: 20316},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 645, col: 13, offset: 20324},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonDocumentRawLine151,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 645, col: 32, offset: 20343},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 652, col: 5, offset: 20584},
																				run: (*parser).callonDocumentRawLine157,
																				expr: &seqExpr{
																					pos: position{line: 652, col: 5, offset: 20584},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 652, col: 5, offset: 20584},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 652, col: 9, offset: 20588},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonDocumentRawLine161,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 652, col: 28, offset: 20607},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine167,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine171,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine175,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine179,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2894, col: 12, offset: 91367},
																run: (*parser).callonDocumentRawLine183,
																expr: &seqExpr{
																	pos: position{line: 2894, col: 13, offset: 91368},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2894, col: 13, offset: 91368},
																			expr: &litMatcher{
																				pos:        position{line: 2894, col: 13, offset: 91368},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2894, col: 18, offset: 91373},
																			expr: &charClassMatcher{
																				pos:        position{line: 2894, col: 18, offset: 91373},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 84, col: 35, offset: 2262},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine190,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2274},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 100, col: 5, offset: 2885},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 100, col: 6, offset: 2886},
																run: (*parser).callonDocumentRawLine194,
																expr: &litMatcher{
																	pos:        position{line: 100, col: 6, offset: 2886},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 103, col: 8, offset: 2946},
																run: (*parser).callonDocumentRawLine196,
																expr: &litMatcher{
																	pos:        position{line: 103, col: 8, offset: 2946},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 106, col: 8, offset: 3009},
																run: (*parser).callonDocumentRawLine198,
																expr: &litMatcher{
																	pos:        position{line: 106, col: 8, offset: 3009},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 109, col: 8, offset: 3071},
																run: (*parser).callonDocumentRawLine200,
																expr: &litMatcher{
																	pos:        position{line: 109, col: 8, offset: 3071},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 112, col: 8, offset: 3137},
																run: (*parser).callonDocumentRawLine202,
																expr: &litMatcher{
																	pos:        position{line: 112, col: 8, offset: 3137},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 115, col: 8, offset: 3202},
																run: (*parser).callonDocumentRawLine204,
																expr: &litMatcher{
																	pos:        position{line: 115, col: 8, offset: 3202},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 39, offset: 2308},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine207,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2320},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 92, col: 5, offset: 2495},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 92, col: 6, offset: 2496},
																run: (*parser).callonDocumentRawLine211,
																expr: &seqExpr{
																	pos: position{line: 92, col: 6, offset: 2496},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 92, col: 6, offset: 2496},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 92, col: 11, offset: 2501},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						run: (*parser).callonDocumentRawLine216,
																						expr: &seqExpr{
																							pos: position{line: 645, col: 5, offset: 20316},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 645, col: 5, offset: 20316},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 645, col: 13, offset: 20324},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine220,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 645, col: 32, offset: 20343},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						run: (*parser).callonDocumentRawLine226,
																						expr: &seqExpr{
																							pos: position{line: 652, col: 5, offset: 20584},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 652, col: 5, offset: 20584},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 652, col: 9, offset: 20588},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine230,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 652, col: 28, offset: 20607},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 92, col: 39, offset: 2529},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 93, col: 8, offset: 2560},
																run: (*parser).callonDocumentRawLine237,
																expr: &seqExpr{
																	pos: position{line: 93, col: 8, offset: 2560},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 8, offset: 2560},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 12, offset: 2564},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						run: (*parser).callonDocumentRawLine242,
																						expr: &seqExpr{
																							pos: position{line: 645, col: 5, offset: 20316},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 645, col: 5, offset: 20316},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 645, col: 13, offset: 20324},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine246,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 645, col: 32, offset: 20343},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						run: (*parser).callonDocumentRawLine252,
																						expr: &seqExpr{
																							pos: position{line: 652, col: 5, offset: 20584},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 652, col: 5, offset: 20584},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 652, col: 9, offset: 20588},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonDocumentRawLine256,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 652, col: 28, offset: 20607},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 40, offset: 2592},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2622},
																run: (*parser).callonDocumentRawLine263,
																expr: &labeledExpr{
																	pos:   position{line: 94, col: 8, offset: 2622},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 645, col: 5, offset: 20316},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				run: (*parser).callonDocumentRawLine266,
																				expr: &seqExpr{
																					pos: position{line: 645, col: 5, offset: 20316},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 645, col: 5, offset: 20316},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 645, col: 13, offset: 20324},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonDocumentRawLine270,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 645, col: 32, offset: 20343},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 652, col: 5, offset: 20584},
																				run: (*parser).callonDocumentRawLine276,
																				expr: &seqExpr{
																					pos: position{line: 652, col: 5, offset: 20584},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 652, col: 5, offset: 20584},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 652, col: 9, offset: 20588},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonDocumentRawLine280,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 652, col: 28, offset: 20607},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2676},
																run: (*parser).callonDocumentRawLine286,
																expr: &seqExpr{
																	pos: position{line: 95, col: 8, offset: 2676},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 95, col: 8, offset: 2676},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 95, col: 13, offset: 2681},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 95, col: 16, offset: 2684},
																				run: (*parser).callonDocumentRawLine290,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 95, col: 16, offset: 2684},
																					expr: &charClassMatcher{
																						pos:        position{line: 95, col: 16, offset: 2684},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 95, col: 63, offset: 2731},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2762},
																run: (*parser).callonDocumentRawLine294,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2762},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2762},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 12, offset: 2766},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 15, offset: 2769},
																				run: (*parser).callonDocumentRawLine298,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 15, offset: 2769},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 15, offset: 2769},
																						val:        "[,?!;_-\\pL\\pN]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 62, offset: 2816},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2894, col: 12, offset: 91367},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 2894, col: 13, offset: 91368},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2894, col: 13, offset: 91368},
																			expr: &litMatcher{
																				pos:        position{line: 2894, col: 13, offset: 91368},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2894, col: 18, offset: 91373},
																			expr: &charClassMatcher{
																				pos:        position{line: 2894, col: 18, offset: 91373},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 86, col: 36, offset: 2351},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 87, col: 5, offset: 2360},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine310,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 123, col: 10, offset: 3329},
										run: (*parser).callonDocumentRawLine314,
										expr: &seqExpr{
											pos: position{line: 123, col: 10, offset: 3329},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 123, col: 10, offset: 3329},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 20, offset: 3339},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 25, offset: 3344},
														expr: &actionExpr{
															pos: position{line: 127, col: 28, offset: 3552},
															run: (*parser).callonDocumentRawLine319,
															expr: &oneOrMoreExpr{
																pos: position{line: 127, col: 28, offset: 3552},
																expr: &charClassMatcher{
																	pos:        position{line: 127, col: 28, offset: 3552},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 52, offset: 3371},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 123, col: 56, offset: 3375},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 123, col: 61, offset: 3380},
														expr: &actionExpr{
															pos: position{line: 78, col: 34, offset: 2142},
															run: (*parser).callonDocumentRawLine325,
															expr: &oneOrMoreExpr{
																pos: position{line: 78, col: 34, offset: 2142},
																expr: &charClassMatcher{
																	pos:        position{line: 78, col: 34, offset: 2142},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 123, col: 94, offset: 3413},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 123, col: 98, offset: 3417},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonDocumentRawLine330,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 5, offset: 23039},
										run: (*parser).callonDocumentRawLine334,
										expr: &seqExpr{
											pos: position{line: 724, col: 5, offset: 23039},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 724, col: 5, offset: 23039},
													expr: &charClassMatcher{
														pos:        position{line: 2746, col: 13, offset: 87373},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 725, col: 5, offset: 23069},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 726, col: 9, offset: 23089},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 740, col: 5, offset: 23581},
																run: (*parser).callonDocumentRawLine340,
																expr: &seqExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 740, col: 5, offset: 23581},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 740, col: 16, offset: 23592},
																				run: (*parser).callonDocumentRawLine343,
																				expr: &seqExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 740, col: 16, offset: 23592},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 740, col: 23, offset: 23599},
																							expr: &litMatcher{
																								pos:        position{line: 740, col: 23, offset: 23599},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 742, col: 8, offset: 23683},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine349,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine352,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 747, col: 5, offset: 23829},
																run: (*parser).callonDocumentRawLine359,
																expr: &seqExpr{
																	pos: position{line: 747, col: 5, offset: 23829},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 747, col: 5, offset: 23829},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 747, col: 16, offset: 23840},
																				run: (*parser).callonDocumentRawLine362,
																				expr: &seqExpr{
																					pos: position{line: 747, col: 16, offset: 23840},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 747, col: 16, offset: 23840},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 747, col: 23, offset: 23847},
																							expr: &litMatcher{
																								pos:        position{line: 747, col: 23, offset: 23847},
																								val:        "=",
																								ignoreCase: false,
																								want:       "\"=\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 749, col: 8, offset: 23931},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine368,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine371,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 760, col: 26, offset: 24317},
																run: (*parser).callonDocumentRawLine378,
																expr: &seqExpr{
																	pos: position{line: 760, col: 26, offset: 24317},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 760, col: 26, offset: 24317},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 760, col: 32, offset: 24323},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 764, col: 13, offset: 24453},
																				run: (*parser).callonDocumentRawLine382,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 764, col: 14, offset: 24454},
																					expr: &charClassMatcher{
																						pos:        position{line: 764, col: 14, offset: 24454},
																						val:        "[^\\r\\n` ]",
																						chars:      []rune{'\r', '\n', '`', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 760, col: 52, offset: 24343},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine386,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine389,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 754, col: 5, offset: 24076},
																run: (*parser).callonDocumentRawLine396,
																expr: &seqExpr{
																	pos: position{line: 754, col: 5, offset: 24076},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 754, col: 5, offset: 24076},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 754, col: 16, offset: 24087},
																				run: (*parser).callonDocumentRawLine399,
																				expr: &seqExpr{
																					pos: position{line: 754, col: 16, offset: 24087},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 754, col: 16, offset: 24087},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 754, col: 22, offset: 24093},
																							expr: &litMatcher{
																								pos:        position{line: 754, col: 22, offset: 24093},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 756, col: 8, offset: 24177},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine405,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine408,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 769, col: 5, offset: 24613},
																run: (*parser).callonDocumentRawLine415,
																expr: &seqExpr{
																	pos: position{line: 769, col: 5, offset: 24613},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 769, col: 5, offset: 24613},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 769, col: 16, offset: 24624},
																				run: (*parser).callonDocumentRawLine418,
																				expr: &seqExpr{
																					pos: position{line: 769, col: 16, offset: 24624},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 769, col: 16, offset: 24624},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 769, col: 23, offset: 24631},
																							expr: &litMatcher{
																								pos:        position{line: 769, col: 23, offset: 24631},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 771, col: 8, offset: 24715},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine424,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine427,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 783, col: 5, offset: 25089},
																run: (*parser).callonDocumentRawLine434,
																expr: &seqExpr{
																	pos: position{line: 783, col: 5, offset: 25089},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 783, col: 5, offset: 25089},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 783, col: 16, offset: 25100},
																				run: (*parser).callonDocumentRawLine437,
																				expr: &seqExpr{
																					pos: position{line: 783, col: 16, offset: 25100},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 783, col: 16, offset: 25100},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 783, col: 23, offset: 25107},
																							expr: &litMatcher{
																								pos:        position{line: 783, col: 23, offset: 25107},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 785, col: 8, offset: 25191},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine443,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine446,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 790, col: 5, offset: 25341},
																run: (*parser).callonDocumentRawLine453,
																expr: &seqExpr{
																	pos: position{line: 790, col: 5, offset: 25341},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 790, col: 5, offset: 25341},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 790, col: 16, offset: 25352},
																				run: (*parser).callonDocumentRawLine456,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 16, offset: 25352},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 790, col: 16, offset: 25352},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 790, col: 23, offset: 25359},
																							expr: &litMatcher{
																								pos:        position{line: 790, col: 23, offset: 25359},
																								val:        "+",
																								ignoreCase: false,
																								want:       "\"+\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 792, col: 8, offset: 25443},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine462,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine465,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 797, col: 5, offset: 25591},
																run: (*parser).callonDocumentRawLine472,
																expr: &seqExpr{
																	pos: position{line: 797, col: 5, offset: 25591},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 797, col: 5, offset: 25591},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 797, col: 16, offset: 25602},
																				run: (*parser).callonDocumentRawLine475,
																				expr: &seqExpr{
																					pos: position{line: 797, col: 16, offset: 25602},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 797, col: 16, offset: 25602},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 797, col: 23, offset: 25609},
																							expr: &litMatcher{
																								pos:        position{line: 797, col: 23, offset: 25609},
																								val:        "_",
																								ignoreCase: false,
																								want:       "\"_\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 799, col: 8, offset: 25693},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine481,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine484,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 804, col: 5, offset: 25837},
																run: (*parser).callonDocumentRawLine491,
																expr: &seqExpr{
																	pos: position{line: 804, col: 5, offset: 25837},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 804, col: 5, offset: 25837},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 804, col: 16, offset: 25848},
																				run: (*parser).callonDocumentRawLine494,
																				expr: &seqExpr{
																					pos: position{line: 804, col: 16, offset: 25848},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 804, col: 16, offset: 25848},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 804, col: 23, offset: 25855},
																							expr: &litMatcher{
																								pos:        position{line: 804, col: 23, offset: 25855},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 806, col: 8, offset: 25939},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentRawLine500,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentRawLine503,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 42, col: 5, offset: 929},
										run: (*parser).callonDocumentRawLine510,
										expr: &seqExpr{
											pos: position{line: 42, col: 5, offset: 929},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 42, col: 5, offset: 929},
													run: (*parser).callonDocumentRawLine512,
												},
												&andCodeExpr{
													pos: position{line: 46, col: 5, offset: 1073},
													run: (*parser).callonDocumentRawLine513,
												},
												&labeledExpr{
													pos:   position{line: 49, col: 5, offset: 1136},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 49, col: 12, offset: 1143},
														run: (*parser).callonDocumentRawLine515,
														expr: &oneOrMoreExpr{
															pos: position{line: 49, col: 12, offset: 1143},
															expr: &litMatcher{
																pos:        position{line: 49, col: 13, offset: 1144},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 53, col: 5, offset: 1252},
													run: (*parser).callonDocumentRawLine518,
												},
												&actionExpr{
													pos: position{line: 2906, col: 11, offset: 91601},
													run: (*parser).callonDocumentRawLine519,
													expr: &oneOrMoreExpr{
														pos: position{line: 2906, col: 11, offset: 91601},
														expr: &charClassMatcher{
															pos:        position{line: 2906, col: 11, offset: 91601},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&actionExpr{
													pos: position{line: 2852, col: 14, offset: 90052},
													run: (*parser).callonDocumentRawLine522,
													expr: &oneOrMoreExpr{
														pos: position{line: 2852, col: 14, offset: 90052},
														expr: &charClassMatcher{
															pos:        position{line: 2852, col: 14, offset: 90052},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 134, col: 1, offset: 3752},
			expr: &actionExpr{
				pos: position{line: 135, col: 5, offset: 3774},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 135, col: 5, offset: 3774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3774},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 136, col: 9, offset: 3789},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 136, col: 9, offset: 3789},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 136, col: 9, offset: 3789},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 137, col: 9, offset: 3810},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 2856, col: 17, offset: 90122},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 2856, col: 17, offset: 90122},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2856, col: 22, offset: 90127},
														expr: &choiceExpr{
															pos: position{line: 2856, col: 23, offset: 90128},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2873, col: 5, offset: 90621},
																	run: (*parser).callonFileInclusion12,
																	expr: &seqExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2873, col: 5, offset: 90621},
																				expr: &litMatcher{
																					pos:        position{line: 2873, col: 6, offset: 90622},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2874, col: 5, offset: 90646},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2874, col: 14, offset: 90655},
																					expr: &choiceExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2875, col: 9, offset: 90665},
																								run: (*parser).callonFileInclusion19,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2875, col: 9, offset: 90665},
																									expr: &charClassMatcher{
																										pos:        position{line: 2875, col: 10, offset: 90666},
																										val:        "[^\\r\\n[]�{,;?!>. ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2878, col: 11, offset: 90917},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2801, col: 8, offset: 88554},
																										run: (*parser).callonFileInclusion23,
																										expr: &seqExpr{
																											pos: position{line: 2801, col: 9, offset: 88555},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2801, col: 9, offset: 88555},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																												&andExpr{
																													pos: position{line: 2801, col: 13, offset: 88559},
																													expr: &notExpr{
																														pos: position{line: 2801, col: 15, offset: 88561},
																														expr: &litMatcher{
																															pos:        position{line: 2801, col: 16, offset: 88562},
																															val:        "..",
																															ignoreCase: false,
																															want:       "\"..\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2878, col: 15, offset: 90921},
																										expr: &notExpr{
																											pos: position{line: 2878, col: 17, offset: 90923},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 19, offset: 90925},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonFileInclusion34,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2879, col: 11, offset: 90949},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2807, col: 5, offset: 88736},
																										run: (*parser).callonFileInclusion37,
																										expr: &choiceExpr{
																											pos: position{line: 2808, col: 9, offset: 88746},
																											alternatives: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2808, col: 10, offset: 88747},
																													val:        "[,;?)!/=-]",
																													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&seqExpr{
																													pos: position{line: 2809, col: 12, offset: 88822},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2809, col: 12, offset: 88822},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&andExpr{
																															pos: position{line: 2809, col: 16, offset: 88826},
																															expr: &choiceExpr{
																																pos: position{line: 2809, col: 18, offset: 88828},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2902, col: 10, offset: 91540},
																																		run: (*parser).callonFileInclusion44,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 10, offset: 91540},
																																			val:        "[\\t ]",
																																			chars:      []rune{'\t', ' '},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2911, col: 12, offset: 91711},
																																		run: (*parser).callonFileInclusion46,
																																		expr: &choiceExpr{
																																			pos: position{line: 2911, col: 13, offset: 91712},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 13, offset: 91712},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 20, offset: 91719},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 29, offset: 91728},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2921, col: 8, offset: 91888},
																																		expr: &anyMatcher{
																																			line: 2921, col: 9, offset: 91889,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2811, col: 13, offset: 88897},
																															run: (*parser).callonFileInclusion54,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2814, col: 14, offset: 89033},
																															val:        "[\"\\()]",
																															chars:      []rune{'"', '\'', '(', ')'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2817, col: 13, offset: 89090},
																															run: (*parser).callonFileInclusion57,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2820, col: 14, offset: 89179},
																															val:        "[:@]",
																															chars:      []rune{':', '@'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2823, col: 13, offset: 89224},
																															run: (*parser).callonFileInclusion60,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2826, col: 14, offset: 89313},
																															val:        "[*_`#]",
																															chars:      []rune{'*', '_', '`', '#'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2829, col: 13, offset: 89370},
																															run: (*parser).callonFileInclusion63,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2832, col: 14, offset: 89526},
																															val:        "[[]]",
																															chars:      []rune{'[', ']'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2879, col: 23, offset: 90961},
																										expr: &notExpr{
																											pos: position{line: 2879, col: 25, offset: 90963},
																											expr: &choiceExpr{
																												pos: position{line: 2879, col: 27, offset: 90965},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonFileInclusion70,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 636, col: 5, offset: 20111},
																								run: (*parser).callonFileInclusion72,
																								expr: &seqExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 636, col: 5, offset: 20111},
																											run: (*parser).callonFileInclusion74,
																										},
																										&labeledExpr{
																											pos:   position{line: 639, col: 5, offset: 20178},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 639, col: 14, offset: 20187},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 645, col: 5, offset: 20316},
																														run: (*parser).callonFileInclusion77,
																														expr: &seqExpr{
																															pos: position{line: 645, col: 5, offset: 20316},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 645, col: 5, offset: 20316},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 645, col: 13, offset: 20324},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonFileInclusion81,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 645, col: 32, offset: 20343},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 652, col: 5, offset: 20584},
																														run: (*parser).callonFileInclusion87,
																														expr: &seqExpr{
																															pos: position{line: 652, col: 5, offset: 20584},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 652, col: 5, offset: 20584},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 652, col: 9, offset: 20588},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonFileInclusion91,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 652, col: 28, offset: 20607},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 658, col: 25, offset: 20788},
																														run: (*parser).callonFileInclusion97,
																														expr: &seqExpr{
																															pos: position{line: 658, col: 25, offset: 20788},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 658, col: 25, offset: 20788},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 37, offset: 20800},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonFileInclusion101,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 56, offset: 20819},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 658, col: 62, offset: 20825},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonFileInclusion108,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonFileInclusion113,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonFileInclusion115,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 658, col: 78, offset: 20841},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 662, col: 25, offset: 20959},
																														run: (*parser).callonFileInclusion119,
																														expr: &seqExpr{
																															pos: position{line: 662, col: 25, offset: 20959},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 662, col: 25, offset: 20959},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 38, offset: 20972},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonFileInclusion123,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 57, offset: 20991},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 662, col: 63, offset: 20997},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonFileInclusion130,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonFileInclusion135,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonFileInclusion137,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 662, col: 79, offset: 21013},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2881, col: 11, offset: 91036},
																								run: (*parser).callonFileInclusion141,
																								expr: &litMatcher{
																									pos:        position{line: 2881, col: 11, offset: 91036},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1198, col: 23, offset: 36969},
																	run: (*parser).callonFileInclusion143,
																	expr: &seqExpr{
																		pos: position{line: 1198, col: 23, offset: 36969},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1198, col: 51, offset: 36997},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1198, col: 56, offset: 37002},
																					run: (*parser).callonFileInclusion147,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1198, col: 56, offset: 37002},
																						expr: &charClassMatcher{
																							pos:        position{line: 1198, col: 56, offset: 37002},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3839},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 138, col: 21, offset: 3851},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 5, offset: 4006},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonFileInclusion154,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonFileInclusion157,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 149, col: 1, offset: 4139},
			expr: &actionExpr{
				pos: position{line: 149, col: 15, offset: 4153},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 149, col: 15, offset: 4153},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 149, col: 15, offset: 4153},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 149, col: 22, offset: 4160},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 156, col: 23, offset: 4343},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 156, col: 23, offset: 4343},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 156, col: 23, offset: 4343},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 156, col: 30, offset: 4350},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 165, col: 19, offset: 4708},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 165, col: 19, offset: 4708},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 165, col: 19, offset: 4708},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 2894, col: 12, offset: 91367},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 2894, col: 13, offset: 91368},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2894, col: 13, offset: 91368},
																							expr: &litMatcher{
																								pos:        position{line: 2894, col: 13, offset: 91368},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2894, col: 18, offset: 91373},
																							expr: &charClassMatcher{
																								pos:        position{line: 2894, col: 18, offset: 91373},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 165, col: 35, offset: 4724},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 165, col: 40, offset: 4729},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 2894, col: 12, offset: 91367},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 2894, col: 13, offset: 91368},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 2894, col: 13, offset: 91368},
																							expr: &litMatcher{
																								pos:        position{line: 2894, col: 13, offset: 91368},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 2894, col: 18, offset: 91373},
																							expr: &charClassMatcher{
																								pos:        position{line: 2894, col: 18, offset: 91373},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 169, col: 20, offset: 4850},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 169, col: 20, offset: 4850},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 2894, col: 12, offset: 91367},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 2894, col: 13, offset: 91368},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2894, col: 13, offset: 91368},
																					expr: &litMatcher{
																						pos:        position{line: 2894, col: 13, offset: 91368},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2894, col: 18, offset: 91373},
																					expr: &charClassMatcher{
																						pos:        position{line: 2894, col: 18, offset: 91373},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 5, offset: 4389},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 157, col: 12, offset: 4396},
														expr: &actionExpr{
															pos: position{line: 158, col: 9, offset: 4406},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 158, col: 9, offset: 4406},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 158, col: 10, offset: 4407},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 159, col: 9, offset: 4524},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 159, col: 16, offset: 4531},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 165, col: 19, offset: 4708},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 165, col: 19, offset: 4708},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 165, col: 19, offset: 4708},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 2894, col: 12, offset: 91367},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 2894, col: 13, offset: 91368},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2894, col: 13, offset: 91368},
																												expr: &litMatcher{
																													pos:        position{line: 2894, col: 13, offset: 91368},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2894, col: 18, offset: 91373},
																												expr: &charClassMatcher{
																													pos:        position{line: 2894, col: 18, offset: 91373},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 165, col: 35, offset: 4724},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 165, col: 40, offset: 4729},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 2894, col: 12, offset: 91367},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 2894, col: 13, offset: 91368},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 2894, col: 13, offset: 91368},
																												expr: &litMatcher{
																													pos:        position{line: 2894, col: 13, offset: 91368},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 2894, col: 18, offset: 91373},
																												expr: &charClassMatcher{
																													pos:        position{line: 2894, col: 18, offset: 91373},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 169, col: 20, offset: 4850},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 169, col: 20, offset: 4850},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 2894, col: 12, offset: 91367},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 2894, col: 13, offset: 91368},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 2894, col: 13, offset: 91368},
																										expr: &litMatcher{
																											pos:        position{line: 2894, col: 13, offset: 91368},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 2894, col: 18, offset: 91373},
																										expr: &charClassMatcher{
																											pos:        position{line: 2894, col: 18, offset: 91373},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 165, col: 19, offset: 4708},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 165, col: 19, offset: 4708},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 165, col: 19, offset: 4708},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 2894, col: 12, offset: 91367},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 2894, col: 13, offset: 91368},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2894, col: 13, offset: 91368},
																	expr: &litMatcher{
																		pos:        position{line: 2894, col: 13, offset: 91368},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2894, col: 18, offset: 91373},
																	expr: &charClassMatcher{
																		pos:        position{line: 2894, col: 18, offset: 91373},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 165, col: 35, offset: 4724},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 165, col: 40, offset: 4729},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 2894, col: 12, offset: 91367},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 2894, col: 13, offset: 91368},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 2894, col: 13, offset: 91368},
																	expr: &litMatcher{
																		pos:        position{line: 2894, col: 13, offset: 91368},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 2894, col: 18, offset: 91373},
																	expr: &charClassMatcher{
																		pos:        position{line: 2894, col: 18, offset: 91373},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 169, col: 20, offset: 4850},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 169, col: 20, offset: 4850},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 2894, col: 12, offset: 91367},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 2894, col: 13, offset: 91368},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 2894, col: 13, offset: 91368},
															expr: &litMatcher{
																pos:        position{line: 2894, col: 13, offset: 91368},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 2894, col: 18, offset: 91373},
															expr: &charClassMatcher{
																pos:        position{line: 2894, col: 18, offset: 91373},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 174, col: 1, offset: 4986},
			expr: &actionExpr{
				pos: position{line: 174, col: 14, offset: 4999},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 174, col: 14, offset: 4999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 174, col: 14, offset: 4999},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 178, col: 22, offset: 5136},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 178, col: 22, offset: 5136},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 178, col: 22, offset: 5136},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 187, col: 13, offset: 5446},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 187, col: 13, offset: 5446},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 187, col: 13, offset: 5446},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 187, col: 18, offset: 5451},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2750, col: 14, offset: 87447},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2750, col: 14, offset: 87447},
																			expr: &charClassMatcher{
																				pos:        position{line: 2750, col: 14, offset: 87447},
																				val:        "[\\pL\\pN]",
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 193, col: 16, offset: 5651},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 193, col: 16, offset: 5651},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 193, col: 16, offset: 5651},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 193, col: 23, offset: 5658},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 193, col: 23, offset: 5658},
																							expr: &litMatcher{
																								pos:        position{line: 193, col: 24, offset: 5659},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 196, col: 5, offset: 5713},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 189, col: 9, offset: 5539},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 189, col: 9, offset: 5539},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 189, col: 9, offset: 5539},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 189, col: 13, offset: 5543},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 189, col: 18, offset: 5548},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2750, col: 14, offset: 87447},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2750, col: 14, offset: 87447},
																					expr: &charClassMatcher{
																						pos:        position{line: 2750, col: 14, offset: 87447},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 193, col: 16, offset: 5651},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 193, col: 16, offset: 5651},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 193, col: 16, offset: 5651},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 193, col: 23, offset: 5658},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 193, col: 23, offset: 5658},
																									expr: &litMatcher{
																										pos:        position{line: 193, col: 24, offset: 5659},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 196, col: 5, offset: 5713},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 179, col: 5, offset: 5157},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 179, col: 12, offset: 5164},
												expr: &actionExpr{
													pos: position{line: 180, col: 9, offset: 5174},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 180, col: 9, offset: 5174},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 180, col: 10, offset: 5175},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 181, col: 9, offset: 5292},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 187, col: 13, offset: 5446},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 187, col: 13, offset: 5446},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 187, col: 13, offset: 5446},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 187, col: 18, offset: 5451},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2750, col: 14, offset: 87447},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2750, col: 14, offset: 87447},
																								expr: &charClassMatcher{
																									pos:        position{line: 2750, col: 14, offset: 87447},
																									val:        "[\\pL\\pN]",
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 193, col: 16, offset: 5651},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 193, col: 16, offset: 5651},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 193, col: 16, offset: 5651},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 193, col: 23, offset: 5658},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 193, col: 23, offset: 5658},
																												expr: &litMatcher{
																													pos:        position{line: 193, col: 24, offset: 5659},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 196, col: 5, offset: 5713},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 189, col: 9, offset: 5539},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 189, col: 9, offset: 5539},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 189, col: 9, offset: 5539},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 189, col: 13, offset: 5543},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 189, col: 18, offset: 5548},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2750, col: 14, offset: 87447},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2750, col: 14, offset: 87447},
																										expr: &charClassMatcher{
																											pos:        position{line: 2750, col: 14, offset: 87447},
																											val:        "[\\pL\\pN]",
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 193, col: 16, offset: 5651},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 193, col: 16, offset: 5651},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 193, col: 16, offset: 5651},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 193, col: 23, offset: 5658},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 193, col: 23, offset: 5658},
																														expr: &litMatcher{
																															pos:        position{line: 193, col: 24, offset: 5659},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 196, col: 5, offset: 5713},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 203, col: 1, offset: 5880},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 5900},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 5900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 203, col: 21, offset: 5900},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 203, col: 29, offset: 5908},
								expr: &choiceExpr{
									pos: position{line: 203, col: 30, offset: 5909},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 207, col: 25, offset: 6089},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 207, col: 25, offset: 6089},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 207, col: 25, offset: 6089},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 207, col: 33, offset: 6097},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 207, col: 38, offset: 6102},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2750, col: 14, offset: 87447},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2750, col: 14, offset: 87447},
																	expr: &charClassMatcher{
																		pos:        position{line: 2750, col: 14, offset: 87447},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 207, col: 78, offset: 6142},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 211, col: 23, offset: 6237},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 211, col: 23, offset: 6237},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 211, col: 23, offset: 6237},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 211, col: 31, offset: 6245},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 211, col: 36, offset: 6250},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2750, col: 14, offset: 87447},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2750, col: 14, offset: 87447},
																	expr: &charClassMatcher{
																		pos:        position{line: 2750, col: 14, offset: 87447},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 211, col: 76, offset: 6290},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 203, col: 74, offset: 5953},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 203, col: 74, offset: 5953,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 227, col: 1, offset: 6776},
			expr: &actionExpr{
				pos: position{line: 228, col: 5, offset: 6800},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 228, col: 5, offset: 6800},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6811},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 229, col: 16, offset: 6822},
								expr: &ruleRefExpr{
									pos:  position{line: 229, col: 17, offset: 6823},
									name: "BlockAttributes",
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 230, col: 5, offset: 6846},
							run: (*parser).callonDocumentFragment8,
						},
						&labeledExpr{
							pos:   position{line: 236, col: 5, offset: 7000},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 236, col: 13, offset: 7008},
								expr: &choiceExpr{
									pos: position{line: 237, col: 9, offset: 7018},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 237, col: 9, offset: 7018},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 238, col: 11, offset: 7079},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 11, offset: 7144},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 240, col: 11, offset: 7172},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 360, col: 19, offset: 10911},
											run: (*parser).callonDocumentFragment16,
											expr: &seqExpr{
												pos: position{line: 360, col: 19, offset: 10911},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 360, col: 19, offset: 10911},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 360, col: 24, offset: 10916},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															run: (*parser).callonDocumentFragment20,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9737},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9747},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9748},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 360, col: 45, offset: 10937},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 360, col: 49, offset: 10941},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentFragment27,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment30,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 362, col: 9, offset: 11032},
											run: (*parser).callonDocumentFragment37,
											expr: &seqExpr{
												pos: position{line: 362, col: 9, offset: 11032},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 362, col: 9, offset: 11032},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 362, col: 13, offset: 11036},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															run: (*parser).callonDocumentFragment41,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9737},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9747},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9748},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 362, col: 34, offset: 11057},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 362, col: 39, offset: 11062},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentFragment48,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment51,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 677, col: 14, offset: 21486},
											run: (*parser).callonDocumentFragment58,
											expr: &seqExpr{
												pos: position{line: 677, col: 14, offset: 21486},
												exprs: []interface{}{
													&andExpr{
														pos: position{line: 2919, col: 11, offset: 91874},
														expr: &anyMatcher{
															line: 2919, col: 13, offset: 91876,
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 677, col: 21, offset: 21493},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentFragment63,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment66,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 243, col: 11, offset: 7248},
											name: "DocumentHeader",
										},
										&ruleRefExpr{
											pos:  position{line: 244, col: 11, offset: 7274},
											name: "Section",
										},
										&actionExpr{
											pos: position{line: 820, col: 5, offset: 26321},
											run: (*parser).callonDocumentFragment75,
											expr: &seqExpr{
												pos: position{line: 820, col: 5, offset: 26321},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 740, col: 5, offset: 23581},
														run: (*parser).callonDocumentFragment77,
														expr: &seqExpr{
															pos: position{line: 740, col: 5, offset: 23581},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 740, col: 5, offset: 23581},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 740, col: 16, offset: 23592},
																		run: (*parser).callonDocumentFragment80,
																		expr: &seqExpr{
																			pos: position{line: 740, col: 16, offset: 23592},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 740, col: 16, offset: 23592},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 740, col: 23, offset: 23599},
																					expr: &litMatcher{
																						pos:        position{line: 740, col: 23, offset: 23599},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 742, col: 8, offset: 23683},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonDocumentFragment86,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonDocumentFragment89,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 821, col: 5, offset: 26352},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 831, col: 5, offset: 26638},
															expr: &actionExpr{
																pos: position{line: 831, col: 6, offset: 26639},
																run: (*parser).callonDocumentFragment98,
																expr: &seqExpr{
																	pos: position{line: 831, col: 6, offset: 26639},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 831, col: 6, offset: 26639},
																			expr: &choiceExpr{
																				pos: position{line: 828, col: 29, offset: 26581},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						run: (*parser).callonDocumentFragment102,
																						expr: &seqExpr{
																							pos: position{line: 740, col: 5, offset: 23581},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 740, col: 5, offset: 23581},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										run: (*parser).callonDocumentFragment105,
																										expr: &seqExpr{
																											pos: position{line: 740, col: 16, offset: 23592},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 740, col: 16, offset: 23592},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 740, col: 23, offset: 23599},
																													expr: &litMatcher{
																														pos:        position{line: 740, col: 23, offset: 23599},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 742, col: 8, offset: 23683},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonDocumentFragment111,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonDocumentFragment114,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 832, col: 5, offset: 26669},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment124,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment129,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment133,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 822, col: 5, offset: 26386},
														expr: &choiceExpr{
															pos: position{line: 828, col: 29, offset: 26581},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	run: (*parser).callonDocumentFragment142,
																	expr: &seqExpr{
																		pos: position{line: 740, col: 5, offset: 23581},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 740, col: 5, offset: 23581},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					run: (*parser).callonDocumentFragment145,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 16, offset: 23592},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 740, col: 16, offset: 23592},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 740, col: 23, offset: 23599},
																								expr: &litMatcher{
																									pos:        position{line: 740, col: 23, offset: 23599},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 742, col: 8, offset: 23683},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonDocumentFragment151,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonDocumentFragment154,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 840, col: 5, offset: 26822},
											run: (*parser).callonDocumentFragment163,
											expr: &seqExpr{
												pos: position{line: 840, col: 5, offset: 26822},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 840, col: 5, offset: 26822},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 747, col: 5, offset: 23829},
															run: (*parser).callonDocumentFragment166,
															expr: &seqExpr{
																pos: position{line: 747, col: 5, offset: 23829},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 747, col: 5, offset: 23829},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 747, col: 16, offset: 23840},
																			run: (*parser).callonDocumentFragment169,
																			expr: &seqExpr{
																				pos: position{line: 747, col: 16, offset: 23840},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 747, col: 16, offset: 23840},
																						val:        "====",
																						ignoreCase: false,
																						want:       "\"====\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 747, col: 23, offset: 23847},
																						expr: &litMatcher{
																							pos:        position{line: 747, col: 23, offset: 23847},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 749, col: 8, offset: 23931},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment175,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment178,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 841, col: 5, offset: 26861},
														run: (*parser).callonDocumentFragment185,
													},
													&labeledExpr{
														pos:   position{line: 844, col: 5, offset: 26953},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 859, col: 4, offset: 27350},
															expr: &actionExpr{
																pos: position{line: 859, col: 5, offset: 27351},
																run: (*parser).callonDocumentFragment188,
																expr: &seqExpr{
																	pos: position{line: 859, col: 5, offset: 27351},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 859, col: 5, offset: 27351},
																			expr: &choiceExpr{
																				pos: position{line: 852, col: 5, offset: 27193},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 852, col: 5, offset: 27193},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 852, col: 5, offset: 27193},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 747, col: 5, offset: 23829},
																									run: (*parser).callonDocumentFragment194,
																									expr: &seqExpr{
																										pos: position{line: 747, col: 5, offset: 23829},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 747, col: 5, offset: 23829},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 747, col: 16, offset: 23840},
																													run: (*parser).callonDocumentFragment197,
																													expr: &seqExpr{
																														pos: position{line: 747, col: 16, offset: 23840},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 747, col: 16, offset: 23840},
																																val:        "====",
																																ignoreCase: false,
																																want:       "\"====\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 747, col: 23, offset: 23847},
																																expr: &litMatcher{
																																	pos:        position{line: 747, col: 23, offset: 23847},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 749, col: 8, offset: 23931},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment203,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment206,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 853, col: 5, offset: 27224},
																								run: (*parser).callonDocumentFragment213,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 860, col: 5, offset: 27381},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment217,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment222,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment226,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 845, col: 5, offset: 26987},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 845, col: 9, offset: 26991},
															expr: &choiceExpr{
																pos: position{line: 852, col: 5, offset: 27193},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 852, col: 5, offset: 27193},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 852, col: 5, offset: 27193},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 747, col: 5, offset: 23829},
																					run: (*parser).callonDocumentFragment238,
																					expr: &seqExpr{
																						pos: position{line: 747, col: 5, offset: 23829},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 747, col: 5, offset: 23829},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 747, col: 16, offset: 23840},
																									run: (*parser).callonDocumentFragment241,
																									expr: &seqExpr{
																										pos: position{line: 747, col: 16, offset: 23840},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 747, col: 16, offset: 23840},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 747, col: 23, offset: 23847},
																												expr: &litMatcher{
																													pos:        position{line: 747, col: 23, offset: 23847},
																													val:        "=",
																													ignoreCase: false,
																													want:       "\"=\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 749, col: 8, offset: 23931},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment247,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment250,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 853, col: 5, offset: 27224},
																				run: (*parser).callonDocumentFragment257,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 952, col: 5, offset: 29673},
											run: (*parser).callonDocumentFragment260,
											expr: &seqExpr{
												pos: position{line: 952, col: 5, offset: 29673},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 952, col: 5, offset: 29673},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 760, col: 26, offset: 24317},
															run: (*parser).callonDocumentFragment263,
															expr: &seqExpr{
																pos: position{line: 760, col: 26, offset: 24317},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 760, col: 26, offset: 24317},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 760, col: 32, offset: 24323},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 764, col: 13, offset: 24453},
																			run: (*parser).callonDocumentFragment267,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 764, col: 14, offset: 24454},
																				expr: &charClassMatcher{
																					pos:        position{line: 764, col: 14, offset: 24454},
																					val:        "[^\\r\\n` ]",
																					chars:      []rune{'\r', '\n', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 760, col: 52, offset: 24343},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment271,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment274,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 953, col: 5, offset: 29719},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 966, col: 5, offset: 30192},
															expr: &actionExpr{
																pos: position{line: 966, col: 6, offset: 30193},
																run: (*parser).callonDocumentFragment283,
																expr: &seqExpr{
																	pos: position{line: 966, col: 6, offset: 30193},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 966, col: 6, offset: 30193},
																			expr: &seqExpr{
																				pos: position{line: 963, col: 34, offset: 30140},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 963, col: 34, offset: 30140},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 963, col: 40, offset: 30146},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonDocumentFragment289,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonDocumentFragment292,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 967, col: 5, offset: 30228},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment300,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment305,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment309,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 954, col: 5, offset: 29758},
														expr: &seqExpr{
															pos: position{line: 963, col: 34, offset: 30140},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 963, col: 34, offset: 30140},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 963, col: 40, offset: 30146},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonDocumentFragment320,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonDocumentFragment323,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 868, col: 5, offset: 27534},
											run: (*parser).callonDocumentFragment330,
											expr: &seqExpr{
												pos: position{line: 868, col: 5, offset: 27534},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 868, col: 5, offset: 27534},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 754, col: 5, offset: 24076},
															run: (*parser).callonDocumentFragment333,
															expr: &seqExpr{
																pos: position{line: 754, col: 5, offset: 24076},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 754, col: 5, offset: 24076},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 754, col: 16, offset: 24087},
																			run: (*parser).callonDocumentFragment336,
																			expr: &seqExpr{
																				pos: position{line: 754, col: 16, offset: 24087},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 754, col: 16, offset: 24087},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 754, col: 22, offset: 24093},
																						expr: &litMatcher{
																							pos:        position{line: 754, col: 22, offset: 24093},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 756, col: 8, offset: 24177},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment342,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment345,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 869, col: 5, offset: 27572},
														run: (*parser).callonDocumentFragment352,
													},
													&labeledExpr{
														pos:   position{line: 872, col: 5, offset: 27664},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 887, col: 5, offset: 28054},
															expr: &actionExpr{
																pos: position{line: 887, col: 6, offset: 28055},
																run: (*parser).callonDocumentFragment355,
																expr: &seqExpr{
																	pos: position{line: 887, col: 6, offset: 28055},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 887, col: 6, offset: 28055},
																			expr: &choiceExpr{
																				pos: position{line: 880, col: 5, offset: 27898},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 880, col: 5, offset: 27898},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 880, col: 5, offset: 27898},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 754, col: 5, offset: 24076},
																									run: (*parser).callonDocumentFragment361,
																									expr: &seqExpr{
																										pos: position{line: 754, col: 5, offset: 24076},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 754, col: 5, offset: 24076},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 754, col: 16, offset: 24087},
																													run: (*parser).callonDocumentFragment364,
																													expr: &seqExpr{
																														pos: position{line: 754, col: 16, offset: 24087},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 754, col: 16, offset: 24087},
																																val:        "```",
																																ignoreCase: false,
																																want:       "\"```\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 754, col: 22, offset: 24093},
																																expr: &litMatcher{
																																	pos:        position{line: 754, col: 22, offset: 24093},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 756, col: 8, offset: 24177},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment370,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment373,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 881, col: 5, offset: 27928},
																								run: (*parser).callonDocumentFragment380,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 888, col: 5, offset: 28084},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment384,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment389,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment393,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 873, col: 5, offset: 27697},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 873, col: 9, offset: 27701},
															expr: &choiceExpr{
																pos: position{line: 880, col: 5, offset: 27898},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 880, col: 5, offset: 27898},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 880, col: 5, offset: 27898},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 754, col: 5, offset: 24076},
																					run: (*parser).callonDocumentFragment405,
																					expr: &seqExpr{
																						pos: position{line: 754, col: 5, offset: 24076},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 754, col: 5, offset: 24076},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 754, col: 16, offset: 24087},
																									run: (*parser).callonDocumentFragment408,
																									expr: &seqExpr{
																										pos: position{line: 754, col: 16, offset: 24087},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 754, col: 16, offset: 24087},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 754, col: 22, offset: 24093},
																												expr: &litMatcher{
																													pos:        position{line: 754, col: 22, offset: 24093},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 756, col: 8, offset: 24177},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment414,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment417,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 881, col: 5, offset: 27928},
																				run: (*parser).callonDocumentFragment424,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 896, col: 5, offset: 28239},
											run: (*parser).callonDocumentFragment427,
											expr: &seqExpr{
												pos: position{line: 896, col: 5, offset: 28239},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 896, col: 5, offset: 28239},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 769, col: 5, offset: 24613},
															run: (*parser).callonDocumentFragment430,
															expr: &seqExpr{
																pos: position{line: 769, col: 5, offset: 24613},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 769, col: 5, offset: 24613},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 769, col: 16, offset: 24624},
																			run: (*parser).callonDocumentFragment433,
																			expr: &seqExpr{
																				pos: position{line: 769, col: 16, offset: 24624},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 769, col: 16, offset: 24624},
																						val:        "----",
																						ignoreCase: false,
																						want:       "\"----\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 769, col: 23, offset: 24631},
																						expr: &litMatcher{
																							pos:        position{line: 769, col: 23, offset: 24631},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 771, col: 8, offset: 24715},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment439,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment442,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 897, col: 5, offset: 28278},
														run: (*parser).callonDocumentFragment449,
													},
													&labeledExpr{
														pos:   position{line: 900, col: 5, offset: 28370},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 915, col: 5, offset: 28768},
															expr: &actionExpr{
																pos: position{line: 915, col: 6, offset: 28769},
																run: (*parser).callonDocumentFragment452,
																expr: &seqExpr{
																	pos: position{line: 915, col: 6, offset: 28769},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 915, col: 6, offset: 28769},
																			expr: &choiceExpr{
																				pos: position{line: 908, col: 5, offset: 28610},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 908, col: 5, offset: 28610},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 908, col: 5, offset: 28610},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 769, col: 5, offset: 24613},
																									run: (*parser).callonDocumentFragment458,
																									expr: &seqExpr{
																										pos: position{line: 769, col: 5, offset: 24613},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 769, col: 5, offset: 24613},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 769, col: 16, offset: 24624},
																													run: (*parser).callonDocumentFragment461,
																													expr: &seqExpr{
																														pos: position{line: 769, col: 16, offset: 24624},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 769, col: 16, offset: 24624},
																																val:        "----",
																																ignoreCase: false,
																																want:       "\"----\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 769, col: 23, offset: 24631},
																																expr: &litMatcher{
																																	pos:        position{line: 769, col: 23, offset: 24631},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 771, col: 8, offset: 24715},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment467,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment470,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 909, col: 5, offset: 28641},
																								run: (*parser).callonDocumentFragment477,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 916, col: 5, offset: 28799},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment481,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment486,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment490,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 901, col: 5, offset: 28404},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 901, col: 9, offset: 28408},
															expr: &choiceExpr{
																pos: position{line: 908, col: 5, offset: 28610},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 908, col: 5, offset: 28610},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 908, col: 5, offset: 28610},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 769, col: 5, offset: 24613},
																					run: (*parser).callonDocumentFragment502,
																					expr: &seqExpr{
																						pos: position{line: 769, col: 5, offset: 24613},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 769, col: 5, offset: 24613},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 769, col: 16, offset: 24624},
																									run: (*parser).callonDocumentFragment505,
																									expr: &seqExpr{
																										pos: position{line: 769, col: 16, offset: 24624},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 769, col: 16, offset: 24624},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 769, col: 23, offset: 24631},
																												expr: &litMatcher{
																													pos:        position{line: 769, col: 23, offset: 24631},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 771, col: 8, offset: 24715},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment511,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment514,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 909, col: 5, offset: 28641},
																				run: (*parser).callonDocumentFragment521,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 924, col: 5, offset: 28954},
											run: (*parser).callonDocumentFragment524,
											expr: &seqExpr{
												pos: position{line: 924, col: 5, offset: 28954},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 924, col: 5, offset: 28954},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 783, col: 5, offset: 25089},
															run: (*parser).callonDocumentFragment527,
															expr: &seqExpr{
																pos: position{line: 783, col: 5, offset: 25089},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 783, col: 5, offset: 25089},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 783, col: 16, offset: 25100},
																			run: (*parser).callonDocumentFragment530,
																			expr: &seqExpr{
																				pos: position{line: 783, col: 16, offset: 25100},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 783, col: 16, offset: 25100},
																						val:        "....",
																						ignoreCase: false,
																						want:       "\"....\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 783, col: 23, offset: 25107},
																						expr: &litMatcher{
																							pos:        position{line: 783, col: 23, offset: 25107},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 785, col: 8, offset: 25191},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment536,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment539,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 925, col: 5, offset: 28993},
														run: (*parser).callonDocumentFragment546,
													},
													&labeledExpr{
														pos:   position{line: 928, col: 5, offset: 29085},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 943, col: 5, offset: 29483},
															expr: &actionExpr{
																pos: position{line: 943, col: 6, offset: 29484},
																run: (*parser).callonDocumentFragment549,
																expr: &seqExpr{
																	pos: position{line: 943, col: 6, offset: 29484},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 943, col: 6, offset: 29484},
																			expr: &choiceExpr{
																				pos: position{line: 936, col: 5, offset: 29325},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 936, col: 5, offset: 29325},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 936, col: 5, offset: 29325},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 783, col: 5, offset: 25089},
																									run: (*parser).callonDocumentFragment555,
																									expr: &seqExpr{
																										pos: position{line: 783, col: 5, offset: 25089},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 783, col: 5, offset: 25089},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 783, col: 16, offset: 25100},
																													run: (*parser).callonDocumentFragment558,
																													expr: &seqExpr{
																														pos: position{line: 783, col: 16, offset: 25100},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 783, col: 16, offset: 25100},
																																val:        "....",
																																ignoreCase: false,
																																want:       "\"....\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 783, col: 23, offset: 25107},
																																expr: &litMatcher{
																																	pos:        position{line: 783, col: 23, offset: 25107},
																																	val:        ".",
																																	ignoreCase: false,
																																	want:       "\".\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 785, col: 8, offset: 25191},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment564,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment567,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 937, col: 5, offset: 29356},
																								run: (*parser).callonDocumentFragment574,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 944, col: 5, offset: 29514},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment578,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment583,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment587,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 929, col: 5, offset: 29119},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 929, col: 9, offset: 29123},
															expr: &choiceExpr{
																pos: position{line: 936, col: 5, offset: 29325},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 936, col: 5, offset: 29325},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 936, col: 5, offset: 29325},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 783, col: 5, offset: 25089},
																					run: (*parser).callonDocumentFragment599,
																					expr: &seqExpr{
																						pos: position{line: 783, col: 5, offset: 25089},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 783, col: 5, offset: 25089},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 783, col: 16, offset: 25100},
																									run: (*parser).callonDocumentFragment602,
																									expr: &seqExpr{
																										pos: position{line: 783, col: 16, offset: 25100},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 783, col: 16, offset: 25100},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 783, col: 23, offset: 25107},
																												expr: &litMatcher{
																													pos:        position{line: 783, col: 23, offset: 25107},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 785, col: 8, offset: 25191},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment608,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment611,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 937, col: 5, offset: 29356},
																				run: (*parser).callonDocumentFragment618,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 975, col: 5, offset: 30397},
											run: (*parser).callonDocumentFragment621,
											expr: &seqExpr{
												pos: position{line: 975, col: 5, offset: 30397},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 975, col: 5, offset: 30397},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 982, col: 5, offset: 30656},
															run: (*parser).callonDocumentFragment624,
															expr: &seqExpr{
																pos: position{line: 982, col: 5, offset: 30656},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 982, col: 5, offset: 30656},
																		expr: &actionExpr{
																			pos: position{line: 677, col: 14, offset: 21486},
																			run: (*parser).callonDocumentFragment627,
																			expr: &seqExpr{
																				pos: position{line: 677, col: 14, offset: 21486},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 677, col: 21, offset: 21493},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonDocumentFragment632,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonDocumentFragment635,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 983, col: 5, offset: 30671},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 984, col: 5, offset: 30681},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2852, col: 14, offset: 90052},
																			run: (*parser).callonDocumentFragment644,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2852, col: 14, offset: 90052},
																				expr: &charClassMatcher{
																					pos:        position{line: 2852, col: 14, offset: 90052},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment648,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 976, col: 5, offset: 30434},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 976, col: 16, offset: 30445},
															expr: &choiceExpr{
																pos: position{line: 976, col: 17, offset: 30446},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 982, col: 5, offset: 30656},
																		run: (*parser).callonDocumentFragment658,
																		expr: &seqExpr{
																			pos: position{line: 982, col: 5, offset: 30656},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 982, col: 5, offset: 30656},
																					expr: &actionExpr{
																						pos: position{line: 677, col: 14, offset: 21486},
																						run: (*parser).callonDocumentFragment661,
																						expr: &seqExpr{
																							pos: position{line: 677, col: 14, offset: 21486},
																							exprs: []interface{}{
																								&andExpr{
																									pos: position{line: 2919, col: 11, offset: 91874},
																									expr: &anyMatcher{
																										line: 2919, col: 13, offset: 91876,
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 677, col: 21, offset: 21493},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonDocumentFragment666,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonDocumentFragment669,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 983, col: 5, offset: 30671},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 984, col: 5, offset: 30681},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2852, col: 14, offset: 90052},
																						run: (*parser).callonDocumentFragment678,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2852, col: 14, offset: 90052},
																							expr: &charClassMatcher{
																								pos:        position{line: 2852, col: 14, offset: 90052},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonDocumentFragment682,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1785, col: 5, offset: 57639},
																		run: (*parser).callonDocumentFragment689,
																		expr: &seqExpr{
																			pos: position{line: 1785, col: 5, offset: 57639},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1785, col: 5, offset: 57639},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2852, col: 14, offset: 90052},
																						run: (*parser).callonDocumentFragment692,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2852, col: 14, offset: 90052},
																							expr: &charClassMatcher{
																								pos:        position{line: 2852, col: 14, offset: 90052},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1786, col: 5, offset: 57663},
																					run: (*parser).callonDocumentFragment695,
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonDocumentFragment697,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 997, col: 5, offset: 30946},
											run: (*parser).callonDocumentFragment704,
											expr: &seqExpr{
												pos: position{line: 997, col: 5, offset: 30946},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 997, col: 5, offset: 30946},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 776, col: 5, offset: 24858},
															run: (*parser).callonDocumentFragment707,
															expr: &seqExpr{
																pos: position{line: 776, col: 5, offset: 24858},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 776, col: 5, offset: 24858},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 776, col: 16, offset: 24869},
																			run: (*parser).callonDocumentFragment710,
																			expr: &litMatcher{
																				pos:        position{line: 776, col: 16, offset: 24869},
																				val:        "--",
																				ignoreCase: false,
																				want:       "\"--\"",
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 778, col: 8, offset: 24946},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment713,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment716,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 998, col: 5, offset: 30982},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1008, col: 5, offset: 31250},
															expr: &actionExpr{
																pos: position{line: 1008, col: 6, offset: 31251},
																run: (*parser).callonDocumentFragment725,
																expr: &seqExpr{
																	pos: position{line: 1008, col: 6, offset: 31251},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1008, col: 6, offset: 31251},
																			expr: &choiceExpr{
																				pos: position{line: 1005, col: 26, offset: 31199},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 776, col: 5, offset: 24858},
																						run: (*parser).callonDocumentFragment729,
																						expr: &seqExpr{
																							pos: position{line: 776, col: 5, offset: 24858},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 776, col: 5, offset: 24858},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 776, col: 16, offset: 24869},
																										run: (*parser).callonDocumentFragment732,
																										expr: &litMatcher{
																											pos:        position{line: 776, col: 16, offset: 24869},
																											val:        "--",
																											ignoreCase: false,
																											want:       "\"--\"",
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 778, col: 8, offset: 24946},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonDocumentFragment735,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonDocumentFragment738,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1009, col: 5, offset: 31278},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment748,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment753,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment757,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 999, col: 5, offset: 31013},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 999, col: 9, offset: 31017},
															expr: &choiceExpr{
																pos: position{line: 1005, col: 26, offset: 31199},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 776, col: 5, offset: 24858},
																		run: (*parser).callonDocumentFragment767,
																		expr: &seqExpr{
																			pos: position{line: 776, col: 5, offset: 24858},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 776, col: 5, offset: 24858},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 776, col: 16, offset: 24869},
																						run: (*parser).callonDocumentFragment770,
																						expr: &litMatcher{
																							pos:        position{line: 776, col: 16, offset: 24869},
																							val:        "--",
																							ignoreCase: false,
																							want:       "\"--\"",
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 778, col: 8, offset: 24946},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonDocumentFragment773,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonDocumentFragment776,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1017, col: 5, offset: 31441},
											run: (*parser).callonDocumentFragment785,
											expr: &seqExpr{
												pos: position{line: 1017, col: 5, offset: 31441},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1017, col: 5, offset: 31441},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 790, col: 5, offset: 25341},
															run: (*parser).callonDocumentFragment788,
															expr: &seqExpr{
																pos: position{line: 790, col: 5, offset: 25341},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 790, col: 5, offset: 25341},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 790, col: 16, offset: 25352},
																			run: (*parser).callonDocumentFragment791,
																			expr: &seqExpr{
																				pos: position{line: 790, col: 16, offset: 25352},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 790, col: 16, offset: 25352},
																						val:        "++++",
																						ignoreCase: false,
																						want:       "\"++++\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 790, col: 23, offset: 25359},
																						expr: &litMatcher{
																							pos:        position{line: 790, col: 23, offset: 25359},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 792, col: 8, offset: 25443},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment797,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment800,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1018, col: 5, offset: 31484},
														run: (*parser).callonDocumentFragment807,
													},
													&labeledExpr{
														pos:   position{line: 1021, col: 5, offset: 31576},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1036, col: 5, offset: 32006},
															expr: &actionExpr{
																pos: position{line: 1036, col: 6, offset: 32007},
																run: (*parser).callonDocumentFragment810,
																expr: &seqExpr{
																	pos: position{line: 1036, col: 6, offset: 32007},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1036, col: 6, offset: 32007},
																			expr: &choiceExpr{
																				pos: position{line: 1029, col: 5, offset: 31840},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1029, col: 5, offset: 31840},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1029, col: 5, offset: 31840},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 790, col: 5, offset: 25341},
																									run: (*parser).callonDocumentFragment816,
																									expr: &seqExpr{
																										pos: position{line: 790, col: 5, offset: 25341},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 790, col: 5, offset: 25341},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 790, col: 16, offset: 25352},
																													run: (*parser).callonDocumentFragment819,
																													expr: &seqExpr{
																														pos: position{line: 790, col: 16, offset: 25352},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 790, col: 16, offset: 25352},
																																val:        "++++",
																																ignoreCase: false,
																																want:       "\"++++\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 790, col: 23, offset: 25359},
																																expr: &litMatcher{
																																	pos:        position{line: 790, col: 23, offset: 25359},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 792, col: 8, offset: 25443},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment825,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment828,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1030, col: 5, offset: 31875},
																								run: (*parser).callonDocumentFragment835,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1037, col: 5, offset: 32041},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment839,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment844,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment848,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1022, col: 5, offset: 31614},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1022, col: 9, offset: 31618},
															expr: &choiceExpr{
																pos: position{line: 1029, col: 5, offset: 31840},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1029, col: 5, offset: 31840},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1029, col: 5, offset: 31840},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 790, col: 5, offset: 25341},
																					run: (*parser).callonDocumentFragment860,
																					expr: &seqExpr{
																						pos: position{line: 790, col: 5, offset: 25341},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 790, col: 5, offset: 25341},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 790, col: 16, offset: 25352},
																									run: (*parser).callonDocumentFragment863,
																									expr: &seqExpr{
																										pos: position{line: 790, col: 16, offset: 25352},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 790, col: 16, offset: 25352},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 790, col: 23, offset: 25359},
																												expr: &litMatcher{
																													pos:        position{line: 790, col: 23, offset: 25359},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 792, col: 8, offset: 25443},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment869,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment872,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1030, col: 5, offset: 31875},
																				run: (*parser).callonDocumentFragment879,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1045, col: 5, offset: 32192},
											run: (*parser).callonDocumentFragment882,
											expr: &seqExpr{
												pos: position{line: 1045, col: 5, offset: 32192},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1045, col: 5, offset: 32192},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 797, col: 5, offset: 25591},
															run: (*parser).callonDocumentFragment885,
															expr: &seqExpr{
																pos: position{line: 797, col: 5, offset: 25591},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 797, col: 5, offset: 25591},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 797, col: 16, offset: 25602},
																			run: (*parser).callonDocumentFragment888,
																			expr: &seqExpr{
																				pos: position{line: 797, col: 16, offset: 25602},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 797, col: 16, offset: 25602},
																						val:        "____",
																						ignoreCase: false,
																						want:       "\"____\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 797, col: 23, offset: 25609},
																						expr: &litMatcher{
																							pos:        position{line: 797, col: 23, offset: 25609},
																							val:        "_",
																							ignoreCase: false,
																							want:       "\"_\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 799, col: 8, offset: 25693},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment894,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment897,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1046, col: 5, offset: 32229},
														run: (*parser).callonDocumentFragment904,
													},
													&labeledExpr{
														pos:   position{line: 1049, col: 5, offset: 32321},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1064, col: 4, offset: 32702},
															expr: &actionExpr{
																pos: position{line: 1064, col: 5, offset: 32703},
																run: (*parser).callonDocumentFragment907,
																expr: &seqExpr{
																	pos: position{line: 1064, col: 5, offset: 32703},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1064, col: 5, offset: 32703},
																			expr: &choiceExpr{
																				pos: position{line: 1057, col: 5, offset: 32549},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1057, col: 5, offset: 32549},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1057, col: 5, offset: 32549},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 797, col: 5, offset: 25591},
																									run: (*parser).callonDocumentFragment913,
																									expr: &seqExpr{
																										pos: position{line: 797, col: 5, offset: 25591},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 797, col: 5, offset: 25591},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 797, col: 16, offset: 25602},
																													run: (*parser).callonDocumentFragment916,
																													expr: &seqExpr{
																														pos: position{line: 797, col: 16, offset: 25602},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 797, col: 16, offset: 25602},
																																val:        "____",
																																ignoreCase: false,
																																want:       "\"____\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 797, col: 23, offset: 25609},
																																expr: &litMatcher{
																																	pos:        position{line: 797, col: 23, offset: 25609},
																																	val:        "_",
																																	ignoreCase: false,
																																	want:       "\"_\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 799, col: 8, offset: 25693},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment922,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment925,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1058, col: 5, offset: 32578},
																								run: (*parser).callonDocumentFragment932,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1065, col: 5, offset: 32731},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment936,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment941,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment945,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1050, col: 5, offset: 32353},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1050, col: 9, offset: 32357},
															expr: &choiceExpr{
																pos: position{line: 1057, col: 5, offset: 32549},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1057, col: 5, offset: 32549},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1057, col: 5, offset: 32549},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 797, col: 5, offset: 25591},
																					run: (*parser).callonDocumentFragment957,
																					expr: &seqExpr{
																						pos: position{line: 797, col: 5, offset: 25591},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 797, col: 5, offset: 25591},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 797, col: 16, offset: 25602},
																									run: (*parser).callonDocumentFragment960,
																									expr: &seqExpr{
																										pos: position{line: 797, col: 16, offset: 25602},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 797, col: 16, offset: 25602},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 797, col: 23, offset: 25609},
																												expr: &litMatcher{
																													pos:        position{line: 797, col: 23, offset: 25609},
																													val:        "_",
																													ignoreCase: false,
																													want:       "\"_\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 799, col: 8, offset: 25693},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment966,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment969,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1058, col: 5, offset: 32578},
																				run: (*parser).callonDocumentFragment976,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1073, col: 5, offset: 32886},
											run: (*parser).callonDocumentFragment979,
											expr: &seqExpr{
												pos: position{line: 1073, col: 5, offset: 32886},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1073, col: 5, offset: 32886},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 804, col: 5, offset: 25837},
															run: (*parser).callonDocumentFragment982,
															expr: &seqExpr{
																pos: position{line: 804, col: 5, offset: 25837},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 804, col: 5, offset: 25837},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 804, col: 16, offset: 25848},
																			run: (*parser).callonDocumentFragment985,
																			expr: &seqExpr{
																				pos: position{line: 804, col: 16, offset: 25848},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 804, col: 16, offset: 25848},
																						val:        "****",
																						ignoreCase: false,
																						want:       "\"****\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 804, col: 23, offset: 25855},
																						expr: &litMatcher{
																							pos:        position{line: 804, col: 23, offset: 25855},
																							val:        "*",
																							ignoreCase: false,
																							want:       "\"*\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 806, col: 8, offset: 25939},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment991,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment994,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1074, col: 5, offset: 32925},
														run: (*parser).callonDocumentFragment1001,
													},
													&labeledExpr{
														pos:   position{line: 1077, col: 5, offset: 33017},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1092, col: 4, offset: 33414},
															expr: &actionExpr{
																pos: position{line: 1092, col: 5, offset: 33415},
																run: (*parser).callonDocumentFragment1004,
																expr: &seqExpr{
																	pos: position{line: 1092, col: 5, offset: 33415},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1092, col: 5, offset: 33415},
																			expr: &choiceExpr{
																				pos: position{line: 1085, col: 5, offset: 33257},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1085, col: 5, offset: 33257},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1085, col: 5, offset: 33257},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 804, col: 5, offset: 25837},
																									run: (*parser).callonDocumentFragment1010,
																									expr: &seqExpr{
																										pos: position{line: 804, col: 5, offset: 25837},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 804, col: 5, offset: 25837},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 804, col: 16, offset: 25848},
																													run: (*parser).callonDocumentFragment1013,
																													expr: &seqExpr{
																														pos: position{line: 804, col: 16, offset: 25848},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 804, col: 16, offset: 25848},
																																val:        "****",
																																ignoreCase: false,
																																want:       "\"****\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 804, col: 23, offset: 25855},
																																expr: &litMatcher{
																																	pos:        position{line: 804, col: 23, offset: 25855},
																																	val:        "*",
																																	ignoreCase: false,
																																	want:       "\"*\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 806, col: 8, offset: 25939},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment1019,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment1022,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1086, col: 5, offset: 33288},
																								run: (*parser).callonDocumentFragment1029,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1093, col: 5, offset: 33445},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentFragment1033,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentFragment1038,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentFragment1042,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1078, col: 5, offset: 33051},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1078, col: 9, offset: 33055},
															expr: &choiceExpr{
																pos: position{line: 1085, col: 5, offset: 33257},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1085, col: 5, offset: 33257},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1085, col: 5, offset: 33257},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 804, col: 5, offset: 25837},
																					run: (*parser).callonDocumentFragment1054,
																					expr: &seqExpr{
																						pos: position{line: 804, col: 5, offset: 25837},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 804, col: 5, offset: 25837},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 804, col: 16, offset: 25848},
																									run: (*parser).callonDocumentFragment1057,
																									expr: &seqExpr{
																										pos: position{line: 804, col: 16, offset: 25848},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 804, col: 16, offset: 25848},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 804, col: 23, offset: 25855},
																												expr: &litMatcher{
																													pos:        position{line: 804, col: 23, offset: 25855},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 806, col: 8, offset: 25939},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentFragment1063,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentFragment1066,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1086, col: 5, offset: 33288},
																				run: (*parser).callonDocumentFragment1073,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2701, col: 18, offset: 85868},
											run: (*parser).callonDocumentFragment1076,
											expr: &seqExpr{
												pos: position{line: 2701, col: 18, offset: 85868},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2702, col: 9, offset: 85878},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2702, col: 9, offset: 85878},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 11, offset: 85914},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 19, offset: 85922},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 29, offset: 85932},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 37, offset: 85940},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 47, offset: 85950},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2703, col: 55, offset: 85958},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2704, col: 11, offset: 86016},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentFragment1087,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment1090,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment1098,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 247, col: 11, offset: 7379},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2592, col: 5, offset: 82805},
											run: (*parser).callonDocumentFragment1106,
											expr: &seqExpr{
												pos: position{line: 2592, col: 5, offset: 82805},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2598, col: 19, offset: 82962},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2598, col: 26, offset: 82969},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentFragment1110,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment1113,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2593, col: 5, offset: 82829},
														label: "lines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2593, col: 11, offset: 82835},
															expr: &choiceExpr{
																pos: position{line: 2593, col: 12, offset: 82836},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 677, col: 14, offset: 21486},
																		run: (*parser).callonDocumentFragment1123,
																		expr: &seqExpr{
																			pos: position{line: 677, col: 14, offset: 21486},
																			exprs: []interface{}{
																				&andExpr{
																					pos: position{line: 2919, col: 11, offset: 91874},
																					expr: &anyMatcher{
																						line: 2919, col: 13, offset: 91876,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 677, col: 21, offset: 21493},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonDocumentFragment1128,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonDocumentFragment1131,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2605, col: 5, offset: 83081},
																		run: (*parser).callonDocumentFragment1138,
																		expr: &seqExpr{
																			pos: position{line: 2605, col: 5, offset: 83081},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2605, col: 5, offset: 83081},
																					expr: &choiceExpr{
																						pos: position{line: 2602, col: 22, offset: 83042},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2598, col: 19, offset: 82962},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2598, col: 19, offset: 82962},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2598, col: 26, offset: 82969},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 10, offset: 91540},
																											run: (*parser).callonDocumentFragment1145,
																											expr: &charClassMatcher{
																												pos:        position{line: 2902, col: 10, offset: 91540},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2924, col: 8, offset: 91938},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2911, col: 12, offset: 91711},
																												run: (*parser).callonDocumentFragment1148,
																												expr: &choiceExpr{
																													pos: position{line: 2911, col: 13, offset: 91712},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2911, col: 13, offset: 91712},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 20, offset: 91719},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 29, offset: 91728},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2606, col: 5, offset: 83104},
																					label: "content",
																					expr: &choiceExpr{
																						pos: position{line: 2607, col: 9, offset: 83122},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2607, col: 10, offset: 83123},
																								run: (*parser).callonDocumentFragment1159,
																								expr: &labeledExpr{
																									pos:   position{line: 2607, col: 10, offset: 83123},
																									label: "cells",
																									expr: &choiceExpr{
																										pos: position{line: 2607, col: 17, offset: 83130},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2615, col: 21, offset: 83326},
																												run: (*parser).callonDocumentFragment1162,
																												expr: &seqExpr{
																													pos: position{line: 2615, col: 21, offset: 83326},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 2615, col: 21, offset: 83326},
																															label: "cells",
																															expr: &oneOrMoreExpr{
																																pos: position{line: 2615, col: 27, offset: 83332},
																																expr: &actionExpr{
																																	pos: position{line: 2620, col: 5, offset: 83407},
																																	run: (*parser).callonDocumentFragment1166,
																																	expr: &seqExpr{
																																		pos: position{line: 2620, col: 5, offset: 83407},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2620, col: 5, offset: 83407},
																																				val:        "|",
																																				ignoreCase: false,
																																				want:       "\"|\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 2620, col: 9, offset: 83411},
																																				expr: &actionExpr{
																																					pos: position{line: 2902, col: 10, offset: 91540},
																																					run: (*parser).callonDocumentFragment1170,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2902, col: 10, offset: 91540},
																																						val:        "[\\t ]",
																																						chars:      []rune{'\t', ' '},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 2620, col: 16, offset: 83418},
																																				label: "content",
																																				expr: &actionExpr{
																																					pos: position{line: 2626, col: 5, offset: 83617},
																																					run: (*parser).callonDocumentFragment1173,
																																					expr: &labeledExpr{
																																						pos:   position{line: 2626, col: 5, offset: 83617},
																																						label: "content",
																																						expr: &actionExpr{
																																							pos: position{line: 2626, col: 14, offset: 83626},
																																							run: (*parser).callonDocumentFragment1175,
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 2626, col: 14, offset: 83626},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2626, col: 14, offset: 83626},
																																									val:        "[^|\\r\\n]",
																																									chars:      []rune{'|', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 2924, col: 8, offset: 91938},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 2911, col: 12, offset: 91711},
																																	run: (*parser).callonDocumentFragment1179,
																																	expr: &choiceExpr{
																																		pos: position{line: 2911, col: 13, offset: 91712},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 2911, col: 13, offset: 91712},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2911, col: 20, offset: 91719},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 2911, col: 29, offset: 91728},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2921, col: 8, offset: 91888},
																																	expr: &anyMatcher{
																																		line: 2921, col: 9, offset: 91889,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2632, col: 24, offset: 83762},
																												run: (*parser).callonDocumentFragment1186,
																												expr: &labeledExpr{
																													pos:   position{line: 2632, col: 24, offset: 83762},
																													label: "cells",
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2632, col: 30, offset: 83768},
																														expr: &actionExpr{
																															pos: position{line: 2637, col: 5, offset: 83844},
																															run: (*parser).callonDocumentFragment1189,
																															expr: &seqExpr{
																																pos: position{line: 2637, col: 5, offset: 83844},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 2637, col: 5, offset: 83844},
																																		expr: &choiceExpr{
																																			pos: position{line: 2602, col: 22, offset: 83042},
																																			alternatives: []interface{}{
																																				&seqExpr{
																																					pos: position{line: 2598, col: 19, offset: 82962},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 2598, col: 19, offset: 82962},
																																							val:        "|===",
																																							ignoreCase: false,
																																							want:       "\"|===\"",
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 2598, col: 26, offset: 82969},
																																							expr: &actionExpr{
																																								pos: position{line: 2902, col: 10, offset: 91540},
																																								run: (*parser).callonDocumentFragment1196,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2902, col: 10, offset: 91540},
																																									val:        "[\\t ]",
																																									chars:      []rune{'\t', ' '},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																						&choiceExpr{
																																							pos: position{line: 2924, col: 8, offset: 91938},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 2911, col: 12, offset: 91711},
																																									run: (*parser).callonDocumentFragment1199,
																																									expr: &choiceExpr{
																																										pos: position{line: 2911, col: 13, offset: 91712},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 13, offset: 91712},
																																												val:        "\n",
																																												ignoreCase: false,
																																												want:       "\"\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 20, offset: 91719},
																																												val:        "\r\n",
																																												ignoreCase: false,
																																												want:       "\"\\r\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 29, offset: 91728},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2921, col: 8, offset: 91888},
																																									expr: &anyMatcher{
																																										line: 2921, col: 9, offset: 91889,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 2921, col: 8, offset: 91888},
																																					expr: &anyMatcher{
																																						line: 2921, col: 9, offset: 91889,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2638, col: 5, offset: 83867},
																																		expr: &actionExpr{
																																			pos: position{line: 677, col: 14, offset: 21486},
																																			run: (*parser).callonDocumentFragment1209,
																																			expr: &seqExpr{
																																				pos: position{line: 677, col: 14, offset: 21486},
																																				exprs: []interface{}{
																																					&andExpr{
																																						pos: position{line: 2919, col: 11, offset: 91874},
																																						expr: &anyMatcher{
																																							line: 2919, col: 13, offset: 91876,
																																						},
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 677, col: 21, offset: 21493},
																																						expr: &actionExpr{
																																							pos: position{line: 2902, col: 10, offset: 91540},
																																							run: (*parser).callonDocumentFragment1214,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2902, col: 10, offset: 91540},
																																								val:        "[\\t ]",
																																								chars:      []rune{'\t', ' '},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2924, col: 8, offset: 91938},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2911, col: 12, offset: 91711},
																																								run: (*parser).callonDocumentFragment1217,
																																								expr: &choiceExpr{
																																									pos: position{line: 2911, col: 13, offset: 91712},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 13, offset: 91712},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 20, offset: 91719},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 29, offset: 91728},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2921, col: 8, offset: 91888},
																																								expr: &anyMatcher{
																																									line: 2921, col: 9, offset: 91889,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 2639, col: 5, offset: 83882},
																																		label: "format",
																																		expr: &zeroOrOneExpr{
																																			pos: position{line: 2639, col: 12, offset: 83889},
																																			expr: &actionExpr{
																																				pos: position{line: 2656, col: 20, offset: 84353},
																																				run: (*parser).callonDocumentFragment1226,
																																				expr: &zeroOrMoreExpr{
																																					pos: position{line: 2656, col: 20, offset: 84353},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 2656, col: 20, offset: 84353},
																																						val:        "[^ |\\r\\n]",
																																						chars:      []rune{' ', '|', '\r', '\n'},
																																						ignoreCase: false,
																																						inverted:   true,
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2639, col: 31, offset: 83908},
																																		val:        "|",
																																		ignoreCase: false,
																																		want:       "\"|\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2639, col: 35, offset: 83912},
																																		expr: &actionExpr{
																																			pos: position{line: 2902, col: 10, offset: 91540},
																																			run: (*parser).callonDocumentFragment1231,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2902, col: 10, offset: 91540},
																																				val:        "[\\t ]",
																																				chars:      []rune{'\t', ' '},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&zeroOrOneExpr{
																																		pos: position{line: 2639, col: 42, offset: 83919},
																																		expr: &actionExpr{
																																			pos: position{line: 2911, col: 12, offset: 91711},
																																			run: (*parser).callonDocumentFragment1234,
																																			expr: &choiceExpr{
																																				pos: position{line: 2911, col: 13, offset: 91712},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2911, col: 13, offset: 91712},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2911, col: 20, offset: 91719},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 2911, col: 29, offset: 91728},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 2639, col: 51, offset: 83928},
																																		label: "content",
																																		expr: &zeroOrMoreExpr{
																																			pos: position{line: 2645, col: 5, offset: 84087},
																																			expr: &actionExpr{
																																				pos: position{line: 2646, col: 9, offset: 84097},
																																				run: (*parser).callonDocumentFragment1241,
																																				expr: &seqExpr{
																																					pos: position{line: 2646, col: 9, offset: 84097},
																																					exprs: []interface{}{
																																						&notExpr{
																																							pos: position{line: 2646, col: 9, offset: 84097},
																																							expr: &choiceExpr{
																																								pos: position{line: 2602, col: 22, offset: 83042},
																																								alternatives: []interface{}{
																																									&seqExpr{
																																										pos: position{line: 2598, col: 19, offset: 82962},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2598, col: 19, offset: 82962},
																																												val:        "|===",
																																												ignoreCase: false,
																																												want:       "\"|===\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 2598, col: 26, offset: 82969},
																																												expr: &actionExpr{
																																													pos: position{line: 2902, col: 10, offset: 91540},
																																													run: (*parser).callonDocumentFragment1248,
																																													expr: &charClassMatcher{
																																														pos:        position{line: 2902, col: 10, offset: 91540},
																																														val:        "[\\t ]",
																																														chars:      []rune{'\t', ' '},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																											&choiceExpr{
																																												pos: position{line: 2924, col: 8, offset: 91938},
																																												alternatives: []interface{}{
																																													&actionExpr{
																																														pos: position{line: 2911, col: 12, offset: 91711},
																																														run: (*parser).callonDocumentFragment1251,
																																														expr: &choiceExpr{
																																															pos: position{line: 2911, col: 13, offset: 91712},
																																															alternatives: []interface{}{
																																																&litMatcher{
																																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																																	val:        "\n",
																																																	ignoreCase: false,
																																																	want:       "\"\\n\"",
																																																},
																																																&litMatcher{
																																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																																	val:        "\r\n",
																																																	ignoreCase: false,
																																																	want:       "\"\\r\\n\"",
																																																},
																																																&litMatcher{
																																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																																	val:        "\r",
																																																	ignoreCase: false,
																																																	want:       "\"\\r\"",
																																																},
																																															},
																																														},
																																													},
																																													&notExpr{
																																														pos: position{line: 2921, col: 8, offset: 91888},
																																														expr: &anyMatcher{
																																															line: 2921, col: 9, offset: 91889,
																																														},
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2921, col: 8, offset: 91888},
																																										expr: &anyMatcher{
																																											line: 2921, col: 9, offset: 91889,
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2647, col: 9, offset: 84124},
																																							expr: &actionExpr{
																																								pos: position{line: 677, col: 14, offset: 21486},
																																								run: (*parser).callonDocumentFragment1261,
																																								expr: &seqExpr{
																																									pos: position{line: 677, col: 14, offset: 21486},
																																									exprs: []interface{}{
																																										&andExpr{
																																											pos: position{line: 2919, col: 11, offset: 91874},
																																											expr: &anyMatcher{
																																												line: 2919, col: 13, offset: 91876,
																																											},
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 677, col: 21, offset: 21493},
																																											expr: &actionExpr{
																																												pos: position{line: 2902, col: 10, offset: 91540},
																																												run: (*parser).callonDocumentFragment1266,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2902, col: 10, offset: 91540},
																																													val:        "[\\t ]",
																																													chars:      []rune{'\t', ' '},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																										&choiceExpr{
																																											pos: position{line: 2924, col: 8, offset: 91938},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 2911, col: 12, offset: 91711},
																																													run: (*parser).callonDocumentFragment1269,
																																													expr: &choiceExpr{
																																														pos: position{line: 2911, col: 13, offset: 91712},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 13, offset: 91712},
																																																val:        "\n",
																																																ignoreCase: false,
																																																want:       "\"\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 20, offset: 91719},
																																																val:        "\r\n",
																																																ignoreCase: false,
																																																want:       "\"\\r\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 29, offset: 91728},
																																																val:        "\r",
																																																ignoreCase: false,
																																																want:       "\"\\r\"",
																																															},
																																														},
																																													},
																																												},
																																												&notExpr{
																																													pos: position{line: 2921, col: 8, offset: 91888},
																																													expr: &anyMatcher{
																																														line: 2921, col: 9, offset: 91889,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2648, col: 9, offset: 84143},
																																							expr: &seqExpr{
																																								pos: position{line: 2648, col: 11, offset: 84145},
																																								exprs: []interface{}{
																																									&labeledExpr{
																																										pos:   position{line: 2648, col: 11, offset: 84145},
																																										label: "format",
																																										expr: &zeroOrOneExpr{
																																											pos: position{line: 2648, col: 18, offset: 84152},
																																											expr: &actionExpr{
																																												pos: position{line: 2656, col: 20, offset: 84353},
																																												run: (*parser).callonDocumentFragment1280,
																																												expr: &zeroOrMoreExpr{
																																													pos: position{line: 2656, col: 20, offset: 84353},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 2656, col: 20, offset: 84353},
																																														val:        "[^ |\\r\\n]",
																																														chars:      []rune{' ', '|', '\r', '\n'},
																																														ignoreCase: false,
																																														inverted:   true,
																																													},
																																												},
																																											},
																																										},
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2648, col: 37, offset: 84171},
																																										val:        "|",
																																										ignoreCase: false,
																																										want:       "\"|\"",
																																									},
																																								},
																																							},
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 2649, col: 9, offset: 84184},
																																							label: "content",
																																							expr: &actionExpr{
																																								pos: position{line: 2649, col: 18, offset: 84193},
																																								run: (*parser).callonDocumentFragment1285,
																																								expr: &zeroOrMoreExpr{
																																									pos: position{line: 2649, col: 18, offset: 84193},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 2649, col: 18, offset: 84193},
																																										val:        "[^|\\r\\n]",
																																										chars:      []rune{'|', '\r', '\n'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																						&zeroOrOneExpr{
																																							pos: position{line: 2651, col: 12, offset: 84255},
																																							expr: &choiceExpr{
																																								pos: position{line: 2924, col: 8, offset: 91938},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 2911, col: 12, offset: 91711},
																																										run: (*parser).callonDocumentFragment1290,
																																										expr: &choiceExpr{
																																											pos: position{line: 2911, col: 13, offset: 91712},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 2911, col: 13, offset: 91712},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2911, col: 20, offset: 91719},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 2911, col: 29, offset: 91728},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 2921, col: 8, offset: 91888},
																																										expr: &anyMatcher{
																																											line: 2921, col: 9, offset: 91889,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 677, col: 14, offset: 21486},
																								run: (*parser).callonDocumentFragment1297,
																								expr: &seqExpr{
																									pos: position{line: 677, col: 14, offset: 21486},
																									exprs: []interface{}{
																										&andExpr{
																											pos: position{line: 2919, col: 11, offset: 91874},
																											expr: &anyMatcher{
																												line: 2919, col: 13, offset: 91876,
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 677, col: 21, offset: 21493},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonDocumentFragment1302,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonDocumentFragment1305,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2602, col: 22, offset: 83042},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2598, col: 19, offset: 82962},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2598, col: 19, offset: 82962},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2598, col: 26, offset: 82969},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment1316,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment1319,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											run: (*parser).callonDocumentFragment1328,
											expr: &seqExpr{
												pos: position{line: 2466, col: 22, offset: 79269},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2471, col: 31, offset: 79490},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2471, col: 36, offset: 79495},
														expr: &litMatcher{
															pos:        position{line: 2471, col: 37, offset: 79496},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2466, col: 49, offset: 79296},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															run: (*parser).callonDocumentFragment1334,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2848, col: 13, offset: 89985},
																expr: &charClassMatcher{
																	pos:        position{line: 2848, col: 13, offset: 89985},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentFragment1338,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1222, col: 5, offset: 37858},
											run: (*parser).callonDocumentFragment1345,
											expr: &seqExpr{
												pos: position{line: 1222, col: 5, offset: 37858},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1222, col: 5, offset: 37858},
														run: (*parser).callonDocumentFragment1347,
													},
													&labeledExpr{
														pos:   position{line: 1225, col: 5, offset: 37916},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1230, col: 20, offset: 38011},
															run: (*parser).callonDocumentFragment1349,
															expr: &seqExpr{
																pos: position{line: 1230, col: 20, offset: 38011},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1234, col: 30, offset: 38183},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1234, col: 36, offset: 38189},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment1353,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment1356,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1230, col: 45, offset: 38036},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1230, col: 53, offset: 38044},
																			expr: &actionExpr{
																				pos: position{line: 1236, col: 27, offset: 38227},
																				run: (*parser).callonDocumentFragment1365,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1236, col: 27, offset: 38227},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1236, col: 28, offset: 38228},
																						expr: &seqExpr{
																							pos: position{line: 1236, col: 29, offset: 38229},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1236, col: 29, offset: 38229},
																									expr: &seqExpr{
																										pos: position{line: 1234, col: 30, offset: 38183},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1234, col: 30, offset: 38183},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1234, col: 36, offset: 38189},
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonDocumentFragment1373,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 2924, col: 8, offset: 91938},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonDocumentFragment1376,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1236, col: 55, offset: 38255,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1234, col: 30, offset: 38183},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1234, col: 36, offset: 38189},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonDocumentFragment1386,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentFragment1389,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 11, offset: 7468},
											name: "Paragraph",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 253, col: 5, offset: 7556},
							run: (*parser).callonDocumentFragment1397,
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 276, col: 1, offset: 8258},
			expr: &actionExpr{
				pos: position{line: 277, col: 5, offset: 8289},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 277, col: 5, offset: 8289},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 277, col: 5, offset: 8289},
							run: (*parser).callonDelimitedBlockElements3,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 5, offset: 8370},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 14, offset: 8379},
								expr: &choiceExpr{
									pos: position{line: 282, col: 9, offset: 8389},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1198, col: 23, offset: 36969},
											run: (*parser).callonDelimitedBlockElements7,
											expr: &seqExpr{
												pos: position{line: 1198, col: 23, offset: 36969},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1196, col: 32, offset: 36937},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1198, col: 51, offset: 36997},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1198, col: 56, offset: 37002},
															run: (*parser).callonDelimitedBlockElements11,
															expr: &oneOrMoreExpr{
																pos: position{line: 1198, col: 56, offset: 37002},
																expr: &charClassMatcher{
																	pos:        position{line: 1198, col: 56, offset: 37002},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1196, col: 32, offset: 36937},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 283, col: 11, offset: 8451},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 302, col: 1, offset: 9154},
			expr: &actionExpr{
				pos: position{line: 303, col: 5, offset: 9183},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 303, col: 5, offset: 9183},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 5, offset: 9183},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 303, col: 9, offset: 9187},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 318, col: 18, offset: 9737},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 318, col: 18, offset: 9737},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 318, col: 18, offset: 9737},
											val:        "[_\\pL\\pN]",
											chars:      []rune{'_'},
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 318, col: 28, offset: 9747},
											expr: &charClassMatcher{
												pos:        position{line: 318, col: 29, offset: 9748},
												val:        "[-\\pL\\pN]",
												chars:      []rune{'-'},
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 30, offset: 9208},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 304, col: 5, offset: 9217},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 11, offset: 9223},
								expr: &actionExpr{
									pos: position{line: 305, col: 9, offset: 9233},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 305, col: 9, offset: 9233},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 2906, col: 11, offset: 91601},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 2906, col: 11, offset: 91601},
													expr: &charClassMatcher{
														pos:        position{line: 2906, col: 11, offset: 91601},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 306, col: 9, offset: 9325},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 306, col: 16, offset: 9332},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 322, col: 1, offset: 9804},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 9838},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 9838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 9838},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 15, offset: 9848},
								name: "AttributeDeclarationValueElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 5, offset: 9888},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 19, offset: 9902},
								expr: &actionExpr{
									pos: position{line: 325, col: 9, offset: 9912},
									run: (*parser).callonAttributeDeclarationValue7,
									expr: &seqExpr{
										pos: position{line: 325, col: 9, offset: 9912},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 325, col: 9, offset: 9912},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 2911, col: 12, offset: 91711},
												run: (*parser).callonAttributeDeclarationValue10,
												expr: &choiceExpr{
													pos: position{line: 2911, col: 13, offset: 91712},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2911, col: 13, offset: 91712},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 20, offset: 91719},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 29, offset: 91728},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 326, col: 9, offset: 9934},
												expr: &actionExpr{
													pos: position{line: 2902, col: 10, offset: 91540},
													run: (*parser).callonAttributeDeclarationValue16,
													expr: &charClassMatcher{
														pos:        position{line: 2902, col: 10, offset: 91540},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 327, col: 9, offset: 9949},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 19, offset: 9959},
													name: "AttributeDeclarationValueElements",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElements",
			pos:  position{line: 338, col: 1, offset: 10289},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 10331},
				run: (*parser).callonAttributeDeclarationValueElements1,
				expr: &labeledExpr{
					pos:   position{line: 339, col: 5, offset: 10331},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 339, col: 14, offset: 10340},
						expr: &ruleRefExpr{
							pos:  position{line: 339, col: 15, offset: 10341},
							name: "AttributeDeclarationValueElement",
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValueElement",
			pos:  position{line: 343, col: 1, offset: 10430},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 10471},
				run: (*parser).callonAttributeDeclarationValueElement1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 10471},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 344, col: 5, offset: 10471},
							expr: &seqExpr{
								pos: position{line: 344, col: 7, offset: 10473},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 344, col: 7, offset: 10473},
										expr: &litMatcher{
											pos:        position{line: 344, col: 7, offset: 10473},
											val:        "\\",
											ignoreCase: false,
											want:       "\"\\\\\"",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 344, col: 13, offset: 10479},
										expr: &actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonAttributeDeclarationValueElement8,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 2924, col: 8, offset: 91938},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2911, col: 12, offset: 91711},
												run: (*parser).callonAttributeDeclarationValueElement11,
												expr: &choiceExpr{
													pos: position{line: 2911, col: 13, offset: 91712},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2911, col: 13, offset: 91712},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 20, offset: 91719},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 29, offset: 91728},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2921, col: 8, offset: 91888},
												expr: &anyMatcher{
													line: 2921, col: 9, offset: 91889,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 5, offset: 10495},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 346, col: 9, offset: 10513},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 346, col: 9, offset: 10513},
										name: "InlinePassthrough",
									},
									&actionExpr{
										pos: position{line: 347, col: 12, offset: 10542},
										run: (*parser).callonAttributeDeclarationValueElement21,
										expr: &oneOrMoreExpr{
											pos: position{line: 347, col: 12, offset: 10542},
											expr: &charClassMatcher{
												pos:        position{line: 347, col: 12, offset: 10542},
												val:        "[^\\r\\n<>&{ ]",
												chars:      []rune{'\r', '\n', '<', '>', '&', '{', ' '},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2453, col: 5, offset: 78820},
										run: (*parser).callonAttributeDeclarationValueElement24,
										expr: &seqExpr{
											pos: position{line: 2453, col: 5, offset: 78820},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2453, col: 5, offset: 78820},
													run: (*parser).callonAttributeDeclarationValueElement26,
												},
												&labeledExpr{
													pos:   position{line: 2456, col: 5, offset: 78891},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2457, col: 9, offset: 78909},
														run: (*parser).callonAttributeDeclarationValueElement28,
														expr: &charClassMatcher{
															pos:        position{line: 2457, col: 10, offset: 78910},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2902, col: 10, offset: 91540},
										run: (*parser).callonAttributeDeclarationValueElement30,
										expr: &charClassMatcher{
											pos:        position{line: 2902, col: 10, offset: 91540},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 636, col: 5, offset: 20111},
										run: (*parser).callonAttributeDeclarationValueElement32,
										expr: &seqExpr{
											pos: position{line: 636, col: 5, offset: 20111},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 636, col: 5, offset: 20111},
													run: (*parser).callonAttributeDeclarationValueElement34,
												},
												&labeledExpr{
													pos:   position{line: 639, col: 5, offset: 20178},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 639, col: 14, offset: 20187},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 645, col: 5, offset: 20316},
																run: (*parser).callonAttributeDeclarationValueElement37,
																expr: &seqExpr{
																	pos: position{line: 645, col: 5, offset: 20316},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 645, col: 5, offset: 20316},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 645, col: 13, offset: 20324},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonAttributeDeclarationValueElement41,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 645, col: 32, offset: 20343},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 652, col: 5, offset: 20584},
																run: (*parser).callonAttributeDeclarationValueElement47,
																expr: &seqExpr{
																	pos: position{line: 652, col: 5, offset: 20584},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 652, col: 5, offset: 20584},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 652, col: 9, offset: 20588},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonAttributeDeclarationValueElement51,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 652, col: 28, offset: 20607},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 658, col: 25, offset: 20788},
																run: (*parser).callonAttributeDeclarationValueElement57,
																expr: &seqExpr{
																	pos: position{line: 658, col: 25, offset: 20788},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 658, col: 25, offset: 20788},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 37, offset: 20800},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonAttributeDeclarationValueElement61,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 56, offset: 20819},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 658, col: 62, offset: 20825},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonAttributeDeclarationValueElement68,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonAttributeDeclarationValueElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonAttributeDeclarationValueElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 658, col: 78, offset: 20841},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 662, col: 25, offset: 20959},
																run: (*parser).callonAttributeDeclarationValueElement79,
																expr: &seqExpr{
																	pos: position{line: 662, col: 25, offset: 20959},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 662, col: 25, offset: 20959},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 38, offset: 20972},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonAttributeDeclarationValueElement83,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 57, offset: 20991},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 662, col: 63, offset: 20997},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonAttributeDeclarationValueElement90,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonAttributeDeclarationValueElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonAttributeDeclarationValueElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 662, col: 79, offset: 21013},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 369, col: 1, offset: 11361},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 11384},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 5, offset: 11384},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 370, col: 16, offset: 11395},
						expr: &choiceExpr{
							pos: position{line: 372, col: 9, offset: 11462},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 372, col: 10, offset: 11463},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 372, col: 10, offset: 11463},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 372, col: 10, offset: 11463},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 404, col: 5, offset: 12338},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 404, col: 5, offset: 12338},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 404, col: 5, offset: 12338},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 405, col: 5, offset: 12348},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 406, col: 9, offset: 12361},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 406, col: 9, offset: 12361},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 406, col: 18, offset: 12370},
																			expr: &choiceExpr{
																				pos: position{line: 407, col: 13, offset: 12384},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 407, col: 14, offset: 12385},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 407, col: 14, offset: 12385},
																							expr: &charClassMatcher{
																								pos:        position{line: 407, col: 14, offset: 12385},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1198, col: 23, offset: 36969},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1198, col: 23, offset: 36969},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1196, col: 32, offset: 36937},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1198, col: 51, offset: 36997},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1198, col: 56, offset: 37002},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1198, col: 56, offset: 37002},
																											expr: &charClassMatcher{
																												pos:        position{line: 1198, col: 56, offset: 37002},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1196, col: 32, offset: 36937},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonBlockAttributes42,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonBlockAttributes46,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonBlockAttributes52,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonBlockAttributes56,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonBlockAttributes63,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonBlockAttributes68,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonBlockAttributes74,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonBlockAttributes78,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonBlockAttributes85,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonBlockAttributes90,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonBlockAttributes92,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 412, col: 16, offset: 12618},
																						run: (*parser).callonBlockAttributes96,
																						expr: &litMatcher{
																							pos:        position{line: 412, col: 16, offset: 12618},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 418, col: 5, offset: 12804},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 372, col: 35, offset: 11488},
												expr: &actionExpr{
													pos: position{line: 2902, col: 10, offset: 91540},
													run: (*parser).callonBlockAttributes100,
													expr: &charClassMatcher{
														pos:        position{line: 2902, col: 10, offset: 91540},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2924, col: 8, offset: 91938},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2911, col: 12, offset: 91711},
														run: (*parser).callonBlockAttributes103,
														expr: &choiceExpr{
															pos: position{line: 2911, col: 13, offset: 91712},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2911, col: 13, offset: 91712},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 20, offset: 91719},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 29, offset: 91728},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2921, col: 8, offset: 91888},
														expr: &anyMatcher{
															line: 2921, col: 9, offset: 91889,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 372, col: 46, offset: 11499},
												expr: &actionExpr{
													pos: position{line: 677, col: 14, offset: 21486},
													run: (*parser).callonBlockAttributes111,
													expr: &seqExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 2919, col: 11, offset: 91874},
																expr: &anyMatcher{
																	line: 2919, col: 13, offset: 91876,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 677, col: 21, offset: 21493},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonBlockAttributes116,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonBlockAttributes119,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 376, col: 12, offset: 11620},
									run: (*parser).callonBlockAttributes126,
									expr: &seqExpr{
										pos: position{line: 376, col: 12, offset: 11620},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 376, col: 12, offset: 11620},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 423, col: 19, offset: 12923},
													run: (*parser).callonBlockAttributes129,
													expr: &seqExpr{
														pos: position{line: 423, col: 19, offset: 12923},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 423, col: 19, offset: 12923},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&notExpr{
																pos: position{line: 424, col: 5, offset: 12932},
																expr: &charClassMatcher{
																	pos:        position{line: 424, col: 6, offset: 12933},
																	val:        "[. ]",
																	chars:      []rune{'.', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 425, col: 5, offset: 13045},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 425, col: 14, offset: 13054},
																	expr: &choiceExpr{
																		pos: position{line: 426, col: 9, offset: 13064},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2755, col: 5, offset: 87520},
																				run: (*parser).callonBlockAttributes137,
																				expr: &seqExpr{
																					pos: position{line: 2755, col: 5, offset: 87520},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2755, col: 5, offset: 87520},
																							expr: &charClassMatcher{
																								pos:        position{line: 2755, col: 5, offset: 87520},
																								val:        "[\\pL\\pN]",
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2771, col: 9, offset: 87859},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonBlockAttributes142,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																								&actionExpr{
																									pos: position{line: 2801, col: 8, offset: 88554},
																									run: (*parser).callonBlockAttributes144,
																									expr: &seqExpr{
																										pos: position{line: 2801, col: 9, offset: 88555},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2801, col: 9, offset: 88555},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																											&andExpr{
																												pos: position{line: 2801, col: 13, offset: 88559},
																												expr: &notExpr{
																													pos: position{line: 2801, col: 15, offset: 88561},
																													expr: &litMatcher{
																														pos:        position{line: 2801, col: 16, offset: 88562},
																														val:        "..",
																														ignoreCase: false,
																														want:       "\"..\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 2773, col: 11, offset: 87889},
																									run: (*parser).callonBlockAttributes150,
																								},
																								&andExpr{
																									pos: position{line: 2776, col: 11, offset: 87967},
																									expr: &seqExpr{
																										pos: position{line: 2777, col: 13, offset: 87982},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 2777, col: 13, offset: 87982},
																												expr: &seqExpr{
																													pos: position{line: 2777, col: 15, offset: 87984},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2777, col: 15, offset: 87984},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&notExpr{
																															pos: position{line: 2777, col: 19, offset: 87988},
																															expr: &choiceExpr{
																																pos: position{line: 2777, col: 21, offset: 87990},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2902, col: 10, offset: 91540},
																																		run: (*parser).callonBlockAttributes158,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 10, offset: 91540},
																																			val:        "[\\t ]",
																																			chars:      []rune{'\t', ' '},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2911, col: 12, offset: 91711},
																																		run: (*parser).callonBlockAttributes160,
																																		expr: &choiceExpr{
																																			pos: position{line: 2911, col: 13, offset: 91712},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 13, offset: 91712},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 20, offset: 91719},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 29, offset: 91728},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2921, col: 8, offset: 91888},
																																		expr: &anyMatcher{
																																			line: 2921, col: 9, offset: 91889,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2778, col: 13, offset: 88016},
																												expr: &litMatcher{
																													pos:        position{line: 2778, col: 14, offset: 88017},
																													val:        "@",
																													ignoreCase: false,
																													want:       "\"@\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonBlockAttributes169,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2807, col: 5, offset: 88736},
																				run: (*parser).callonBlockAttributes171,
																				expr: &choiceExpr{
																					pos: position{line: 2808, col: 9, offset: 88746},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2808, col: 10, offset: 88747},
																							val:        "[,;?)!/=-]",
																							chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&seqExpr{
																							pos: position{line: 2809, col: 12, offset: 88822},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2809, col: 12, offset: 88822},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&andExpr{
																									pos: position{line: 2809, col: 16, offset: 88826},
																									expr: &choiceExpr{
																										pos: position{line: 2809, col: 18, offset: 88828},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonBlockAttributes178,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2911, col: 12, offset: 91711},
																												run: (*parser).callonBlockAttributes180,
																												expr: &choiceExpr{
																													pos: position{line: 2911, col: 13, offset: 91712},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2911, col: 13, offset: 91712},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 20, offset: 91719},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 29, offset: 91728},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2811, col: 13, offset: 88897},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2811, col: 13, offset: 88897},
																									run: (*parser).callonBlockAttributes188,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2814, col: 14, offset: 89033},
																									val:        "[\"\\()]",
																									chars:      []rune{'"', '\'', '(', ')'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2817, col: 13, offset: 89090},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2817, col: 13, offset: 89090},
																									run: (*parser).callonBlockAttributes191,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2820, col: 14, offset: 89179},
																									val:        "[:@]",
																									chars:      []rune{':', '@'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2823, col: 13, offset: 89224},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2823, col: 13, offset: 89224},
																									run: (*parser).callonBlockAttributes194,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2826, col: 14, offset: 89313},
																									val:        "[*_`#]",
																									chars:      []rune{'*', '_', '`', '#'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&seqExpr{
																							pos: position{line: 2829, col: 13, offset: 89370},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2829, col: 13, offset: 89370},
																									run: (*parser).callonBlockAttributes197,
																								},
																								&charClassMatcher{
																									pos:        position{line: 2832, col: 14, offset: 89526},
																									val:        "[[]]",
																									chars:      []rune{'[', ']'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				run: (*parser).callonBlockAttributes199,
																				expr: &seqExpr{
																					pos: position{line: 645, col: 5, offset: 20316},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 645, col: 5, offset: 20316},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 645, col: 13, offset: 20324},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonBlockAttributes203,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 645, col: 32, offset: 20343},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 652, col: 5, offset: 20584},
																				run: (*parser).callonBlockAttributes209,
																				expr: &seqExpr{
																					pos: position{line: 652, col: 5, offset: 20584},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 652, col: 5, offset: 20584},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 652, col: 9, offset: 20588},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								run: (*parser).callonBlockAttributes213,
																								expr: &seqExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 318, col: 18, offset: 9737},
																											val:        "[_\\pL\\pN]",
																											chars:      []rune{'_'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 318, col: 28, offset: 9747},
																											expr: &charClassMatcher{
																												pos:        position{line: 318, col: 29, offset: 9748},
																												val:        "[-\\pL\\pN]",
																												chars:      []rune{'-'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 652, col: 28, offset: 20607},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2841, col: 12, offset: 89767},
																				run: (*parser).callonBlockAttributes219,
																				expr: &charClassMatcher{
																					pos:        position{line: 2841, col: 12, offset: 89767},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 35, offset: 11643},
												expr: &actionExpr{
													pos: position{line: 2902, col: 10, offset: 91540},
													run: (*parser).callonBlockAttributes222,
													expr: &charClassMatcher{
														pos:        position{line: 2902, col: 10, offset: 91540},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2924, col: 8, offset: 91938},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2911, col: 12, offset: 91711},
														run: (*parser).callonBlockAttributes225,
														expr: &choiceExpr{
															pos: position{line: 2911, col: 13, offset: 91712},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2911, col: 13, offset: 91712},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 20, offset: 91719},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 29, offset: 91728},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2921, col: 8, offset: 91888},
														expr: &anyMatcher{
															line: 2921, col: 9, offset: 91889,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 46, offset: 11654},
												expr: &actionExpr{
													pos: position{line: 677, col: 14, offset: 21486},
													run: (*parser).callonBlockAttributes233,
													expr: &seqExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 2919, col: 11, offset: 91874},
																expr: &anyMatcher{
																	line: 2919, col: 13, offset: 91876,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 677, col: 21, offset: 21493},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonBlockAttributes238,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonBlockAttributes241,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 380, col: 12, offset: 11744},
									run: (*parser).callonBlockAttributes248,
									expr: &seqExpr{
										pos: position{line: 380, col: 12, offset: 11744},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 380, col: 12, offset: 11744},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 380, col: 24, offset: 11756},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 44, offset: 11776},
												expr: &actionExpr{
													pos: position{line: 2902, col: 10, offset: 91540},
													run: (*parser).callonBlockAttributes253,
													expr: &charClassMatcher{
														pos:        position{line: 2902, col: 10, offset: 91540},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 2924, col: 8, offset: 91938},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2911, col: 12, offset: 91711},
														run: (*parser).callonBlockAttributes256,
														expr: &choiceExpr{
															pos: position{line: 2911, col: 13, offset: 91712},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2911, col: 13, offset: 91712},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 20, offset: 91719},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 29, offset: 91728},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2921, col: 8, offset: 91888},
														expr: &anyMatcher{
															line: 2921, col: 9, offset: 91889,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 55, offset: 11787},
												expr: &actionExpr{
													pos: position{line: 677, col: 14, offset: 21486},
													run: (*parser).callonBlockAttributes264,
													expr: &seqExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 2919, col: 11, offset: 91874},
																expr: &anyMatcher{
																	line: 2919, col: 13, offset: 91876,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 677, col: 21, offset: 21493},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonBlockAttributes269,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonBlockAttributes272,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 388, col: 1, offset: 11971},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11995},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11995},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 5, offset: 12003},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 390, col: 16, offset: 12014},
								expr: &actionExpr{
									pos: position{line: 391, col: 9, offset: 12024},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 392, col: 13, offset: 12038},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 392, col: 13, offset: 12038},
												expr: &litMatcher{
													pos:        position{line: 392, col: 14, offset: 12039},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 393, col: 13, offset: 12071},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 12082},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 12082},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 46, offset: 12104},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 398, col: 5, offset: 12187},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 437, col: 1, offset: 13446},
			expr: &actionExpr{
				pos: position{line: 438, col: 5, offset: 13472},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 438, col: 5, offset: 13472},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 438, col: 5, offset: 13472},
							expr: &litMatcher{
								pos:        position{line: 438, col: 6, offset: 13473},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 438, col: 10, offset: 13477},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 438, col: 14, offset: 13481},
							expr: &litMatcher{
								pos:        position{line: 438, col: 15, offset: 13482},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 13595},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 31, offset: 13621},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 32, offset: 13622},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 5, offset: 13654},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 440, col: 21, offset: 13670},
								expr: &choiceExpr{
									pos: position{line: 440, col: 22, offset: 13671},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 440, col: 22, offset: 13671},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 440, col: 44, offset: 13693},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 5, offset: 13714},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 454, col: 1, offset: 14242},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 14276},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 455, col: 5, offset: 14276},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 5, offset: 14276},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 455, col: 10, offset: 14281},
								expr: &ruleRefExpr{
									pos:  position{line: 456, col: 9, offset: 14291},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 458, col: 5, offset: 14321},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 458, col: 12, offset: 14328},
								expr: &actionExpr{
									pos: position{line: 459, col: 9, offset: 14339},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 459, col: 9, offset: 14339},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 459, col: 9, offset: 14339},
												expr: &litMatcher{
													pos:        position{line: 459, col: 10, offset: 14340},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 459, col: 14, offset: 14344},
												expr: &litMatcher{
													pos:        position{line: 459, col: 15, offset: 14345},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 460, col: 9, offset: 14357},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 461, col: 13, offset: 14377},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 461, col: 13, offset: 14377},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 462, col: 15, offset: 14413},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 463, col: 15, offset: 14452},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 466, col: 8, offset: 14528},
							expr: &seqExpr{
								pos: position{line: 466, col: 9, offset: 14529},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 466, col: 9, offset: 14529},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 466, col: 13, offset: 14533},
										expr: &actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonFirstPositionalAttributes23,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 467, col: 5, offset: 14547},
							run: (*parser).callonFirstPositionalAttributes25,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 483, col: 1, offset: 14963},
			expr: &actionExpr{
				pos: position{line: 483, col: 25, offset: 14987},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 483, col: 25, offset: 14987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 25, offset: 14987},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 483, col: 29, offset: 14991},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 33, offset: 14995},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 487, col: 1, offset: 15069},
			expr: &actionExpr{
				pos: position{line: 487, col: 23, offset: 15091},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 487, col: 23, offset: 15091},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 487, col: 30, offset: 15098},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 492, col: 1, offset: 15224},
			expr: &actionExpr{
				pos: position{line: 492, col: 30, offset: 15253},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 492, col: 30, offset: 15253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 492, col: 30, offset: 15253},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 34, offset: 15257},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 40, offset: 15263},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 497, col: 1, offset: 15385},
			expr: &actionExpr{
				pos: position{line: 497, col: 29, offset: 15413},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 497, col: 29, offset: 15413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 497, col: 29, offset: 15413},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 497, col: 33, offset: 15417},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 41, offset: 15425},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 502, col: 1, offset: 15538},
			expr: &choiceExpr{
				pos: position{line: 503, col: 5, offset: 15570},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 15570},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 7, offset: 15604},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 505, col: 7, offset: 15638},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 505, col: 7, offset: 15638},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 505, col: 7, offset: 15638},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 505, col: 16, offset: 15647},
										expr: &choiceExpr{
											pos: position{line: 508, col: 9, offset: 15829},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 508, col: 9, offset: 15829},
													name: "QuotationMark",
												},
												&actionExpr{
													pos: position{line: 509, col: 12, offset: 15855},
													run: (*parser).callonShortHandAttributeValue10,
													expr: &oneOrMoreExpr{
														pos: position{line: 509, col: 12, offset: 15855},
														expr: &charClassMatcher{
															pos:        position{line: 509, col: 12, offset: 15855},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 636, col: 5, offset: 20111},
													run: (*parser).callonShortHandAttributeValue13,
													expr: &seqExpr{
														pos: position{line: 636, col: 5, offset: 20111},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 636, col: 5, offset: 20111},
																run: (*parser).callonShortHandAttributeValue15,
															},
															&labeledExpr{
																pos:   position{line: 639, col: 5, offset: 20178},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 639, col: 14, offset: 20187},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 645, col: 5, offset: 20316},
																			run: (*parser).callonShortHandAttributeValue18,
																			expr: &seqExpr{
																				pos: position{line: 645, col: 5, offset: 20316},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 645, col: 5, offset: 20316},
																						val:        "\\{",
																						ignoreCase: false,
																						want:       "\"\\\\{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 645, col: 13, offset: 20324},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 318, col: 18, offset: 9737},
																							run: (*parser).callonShortHandAttributeValue22,
																							expr: &seqExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 318, col: 18, offset: 9737},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 318, col: 28, offset: 9747},
																										expr: &charClassMatcher{
																											pos:        position{line: 318, col: 29, offset: 9748},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 645, col: 32, offset: 20343},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 652, col: 5, offset: 20584},
																			run: (*parser).callonShortHandAttributeValue28,
																			expr: &seqExpr{
																				pos: position{line: 652, col: 5, offset: 20584},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 652, col: 5, offset: 20584},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 652, col: 9, offset: 20588},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 318, col: 18, offset: 9737},
																							run: (*parser).callonShortHandAttributeValue32,
																							expr: &seqExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 318, col: 18, offset: 9737},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 318, col: 28, offset: 9747},
																										expr: &charClassMatcher{
																											pos:        position{line: 318, col: 29, offset: 9748},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 652, col: 28, offset: 20607},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 658, col: 25, offset: 20788},
																			run: (*parser).callonShortHandAttributeValue38,
																			expr: &seqExpr{
																				pos: position{line: 658, col: 25, offset: 20788},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 658, col: 25, offset: 20788},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 658, col: 37, offset: 20800},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 318, col: 18, offset: 9737},
																							run: (*parser).callonShortHandAttributeValue42,
																							expr: &seqExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 318, col: 18, offset: 9737},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 318, col: 28, offset: 9747},
																										expr: &charClassMatcher{
																											pos:        position{line: 318, col: 29, offset: 9748},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 658, col: 56, offset: 20819},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 658, col: 62, offset: 20825},
																							expr: &actionExpr{
																								pos: position{line: 666, col: 17, offset: 21120},
																								run: (*parser).callonShortHandAttributeValue49,
																								expr: &seqExpr{
																									pos: position{line: 666, col: 17, offset: 21120},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 666, col: 17, offset: 21120},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 666, col: 21, offset: 21124},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 666, col: 28, offset: 21131},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 666, col: 28, offset: 21131},
																														run: (*parser).callonShortHandAttributeValue54,
																														expr: &charClassMatcher{
																															pos:        position{line: 666, col: 28, offset: 21131},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 668, col: 9, offset: 21185},
																														run: (*parser).callonShortHandAttributeValue56,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 668, col: 9, offset: 21185},
																															expr: &charClassMatcher{
																																pos:        position{line: 668, col: 9, offset: 21185},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 658, col: 78, offset: 20841},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 662, col: 25, offset: 20959},
																			run: (*parser).callonShortHandAttributeValue60,
																			expr: &seqExpr{
																				pos: position{line: 662, col: 25, offset: 20959},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 662, col: 25, offset: 20959},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 662, col: 38, offset: 20972},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 318, col: 18, offset: 9737},
																							run: (*parser).callonShortHandAttributeValue64,
																							expr: &seqExpr{
																								pos: position{line: 318, col: 18, offset: 9737},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 318, col: 18, offset: 9737},
																										val:        "[_\\pL\\pN]",
																										chars:      []rune{'_'},
																										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 318, col: 28, offset: 9747},
																										expr: &charClassMatcher{
																											pos:        position{line: 318, col: 29, offset: 9748},
																											val:        "[-\\pL\\pN]",
																											chars:      []rune{'-'},
																											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 662, col: 57, offset: 20991},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 662, col: 63, offset: 20997},
																							expr: &actionExpr{
																								pos: position{line: 666, col: 17, offset: 21120},
																								run: (*parser).callonShortHandAttributeValue71,
																								expr: &seqExpr{
																									pos: position{line: 666, col: 17, offset: 21120},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 666, col: 17, offset: 21120},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 666, col: 21, offset: 21124},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 666, col: 28, offset: 21131},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 666, col: 28, offset: 21131},
																														run: (*parser).callonShortHandAttributeValue76,
																														expr: &charClassMatcher{
																															pos:        position{line: 666, col: 28, offset: 21131},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 668, col: 9, offset: 21185},
																														run: (*parser).callonShortHandAttributeValue78,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 668, col: 9, offset: 21185},
																															expr: &charClassMatcher{
																																pos:        position{line: 668, col: 9, offset: 21185},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 662, col: 79, offset: 21013},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 514, col: 12, offset: 16023},
													run: (*parser).callonShortHandAttributeValue82,
													expr: &litMatcher{
														pos:        position{line: 514, col: 12, offset: 16023},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 518, col: 5, offset: 16111},
									expr: &notExpr{
										pos: position{line: 518, col: 7, offset: 16113},
										expr: &seqExpr{
											pos: position{line: 518, col: 9, offset: 16115},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 518, col: 9, offset: 16115},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonShortHandAttributeValue88,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 518, col: 16, offset: 16122},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 523, col: 1, offset: 16200},
			expr: &choiceExpr{
				pos: position{line: 523, col: 24, offset: 16223},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 524, col: 5, offset: 16229},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 524, col: 5, offset: 16229},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 524, col: 5, offset: 16229},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 12, offset: 16236},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 524, col: 29, offset: 16253},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 524, col: 29, offset: 16253},
											expr: &seqExpr{
												pos: position{line: 524, col: 30, offset: 16254},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 524, col: 30, offset: 16254},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 524, col: 34, offset: 16258},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 524, col: 45, offset: 16269},
											expr: &litMatcher{
												pos:        position{line: 524, col: 46, offset: 16270},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 6, offset: 16415},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 529, col: 6, offset: 16415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 529, col: 6, offset: 16415},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 529, col: 13, offset: 16422},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 529, col: 13, offset: 16422},
												expr: &actionExpr{
													pos: position{line: 2902, col: 10, offset: 91540},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 2902, col: 10, offset: 91540},
														val:        "[\\t ]",
														chars:      []rune{'\t', ' '},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 529, col: 21, offset: 16430},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 529, col: 22, offset: 16431},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 529, col: 22, offset: 16431},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 529, col: 26, offset: 16435},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 529, col: 36, offset: 16445},
														expr: &litMatcher{
															pos:        position{line: 529, col: 37, offset: 16446},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 530, col: 5, offset: 16456},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 540, col: 1, offset: 16771},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 16794},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 16794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 541, col: 5, offset: 16794},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 549, col: 22, offset: 17082},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 549, col: 22, offset: 17082},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 549, col: 22, offset: 17082},
											expr: &actionExpr{
												pos: position{line: 2902, col: 10, offset: 91540},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 2902, col: 10, offset: 91540},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 549, col: 29, offset: 17089},
											expr: &charClassMatcher{
												pos:        position{line: 549, col: 29, offset: 17089},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 542, col: 5, offset: 16823},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 542, col: 9, offset: 16827},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonNamedAttribute13,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 543, col: 5, offset: 16839},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 16846},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 543, col: 28, offset: 16862},
							expr: &seqExpr{
								pos: position{line: 543, col: 29, offset: 16863},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 543, col: 29, offset: 16863},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 543, col: 33, offset: 16867},
										expr: &actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonNamedAttribute21,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 553, col: 1, offset: 17146},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 17169},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 17169},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 17169},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 555, col: 9, offset: 17185},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 555, col: 9, offset: 17185},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 556, col: 11, offset: 17223},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 557, col: 11, offset: 17261},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 559, col: 5, offset: 17295},
							expr: &notExpr{
								pos: position{line: 559, col: 7, offset: 17297},
								expr: &seqExpr{
									pos: position{line: 559, col: 9, offset: 17299},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 559, col: 9, offset: 17299},
											expr: &actionExpr{
												pos: position{line: 2902, col: 10, offset: 91540},
												run: (*parser).callonAttributeValue12,
												expr: &charClassMatcher{
													pos:        position{line: 2902, col: 10, offset: 91540},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 559, col: 16, offset: 17306},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 563, col: 1, offset: 17347},
			expr: &actionExpr{
				pos: position{line: 564, col: 5, offset: 17382},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 564, col: 5, offset: 17382},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 564, col: 5, offset: 17382},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 564, col: 9, offset: 17386},
							expr: &litMatcher{
								pos:        position{line: 564, col: 10, offset: 17387},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 17466},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 14, offset: 17475},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 566, col: 5, offset: 17514},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 570, col: 1, offset: 17555},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 17597},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 571, col: 5, offset: 17597},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 571, col: 14, offset: 17606},
						expr: &choiceExpr{
							pos: position{line: 572, col: 9, offset: 17616},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2750, col: 14, offset: 87447},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2750, col: 14, offset: 87447},
										expr: &charClassMatcher{
											pos:        position{line: 2750, col: 14, offset: 87447},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2902, col: 10, offset: 91540},
									run: (*parser).callonSingleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2902, col: 10, offset: 91540},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 11, offset: 17652},
									name: "QuotationMark",
								},
								&actionExpr{
									pos: position{line: 636, col: 5, offset: 20111},
									run: (*parser).callonSingleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 636, col: 5, offset: 20111},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 636, col: 5, offset: 20111},
												run: (*parser).callonSingleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 639, col: 5, offset: 20178},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 639, col: 14, offset: 20187},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 645, col: 5, offset: 20316},
															run: (*parser).callonSingleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 645, col: 5, offset: 20316},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 645, col: 5, offset: 20316},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 645, col: 13, offset: 20324},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonSingleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 645, col: 32, offset: 20343},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 652, col: 5, offset: 20584},
															run: (*parser).callonSingleQuotedAttributeValueContent26,
															expr: &seqExpr{
																pos: position{line: 652, col: 5, offset: 20584},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 652, col: 5, offset: 20584},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 652, col: 9, offset: 20588},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonSingleQuotedAttributeValueContent30,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 652, col: 28, offset: 20607},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 658, col: 25, offset: 20788},
															run: (*parser).callonSingleQuotedAttributeValueContent36,
															expr: &seqExpr{
																pos: position{line: 658, col: 25, offset: 20788},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 658, col: 25, offset: 20788},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 658, col: 37, offset: 20800},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonSingleQuotedAttributeValueContent40,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 658, col: 56, offset: 20819},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 658, col: 62, offset: 20825},
																			expr: &actionExpr{
																				pos: position{line: 666, col: 17, offset: 21120},
																				run: (*parser).callonSingleQuotedAttributeValueContent47,
																				expr: &seqExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 666, col: 17, offset: 21120},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 666, col: 21, offset: 21124},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 666, col: 28, offset: 21131},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										run: (*parser).callonSingleQuotedAttributeValueContent52,
																										expr: &charClassMatcher{
																											pos:        position{line: 666, col: 28, offset: 21131},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 668, col: 9, offset: 21185},
																										run: (*parser).callonSingleQuotedAttributeValueContent54,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											expr: &charClassMatcher{
																												pos:        position{line: 668, col: 9, offset: 21185},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 658, col: 78, offset: 20841},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 662, col: 25, offset: 20959},
															run: (*parser).callonSingleQuotedAttributeValueContent58,
															expr: &seqExpr{
																pos: position{line: 662, col: 25, offset: 20959},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 662, col: 25, offset: 20959},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 662, col: 38, offset: 20972},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonSingleQuotedAttributeValueContent62,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 662, col: 57, offset: 20991},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 662, col: 63, offset: 20997},
																			expr: &actionExpr{
																				pos: position{line: 666, col: 17, offset: 21120},
																				run: (*parser).callonSingleQuotedAttributeValueContent69,
																				expr: &seqExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 666, col: 17, offset: 21120},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 666, col: 21, offset: 21124},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 666, col: 28, offset: 21131},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										run: (*parser).callonSingleQuotedAttributeValueContent74,
																										expr: &charClassMatcher{
																											pos:        position{line: 666, col: 28, offset: 21131},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 668, col: 9, offset: 21185},
																										run: (*parser).callonSingleQuotedAttributeValueContent76,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											expr: &charClassMatcher{
																												pos:        position{line: 668, col: 9, offset: 21185},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 662, col: 79, offset: 21013},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 576, col: 12, offset: 17706},
									run: (*parser).callonSingleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 576, col: 12, offset: 17706},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&litMatcher{
									pos:        position{line: 579, col: 13, offset: 17808},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&litMatcher{
									pos:        position{line: 579, col: 20, offset: 17815},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&actionExpr{
									pos: position{line: 579, col: 27, offset: 17822},
									run: (*parser).callonSingleQuotedAttributeValueContent84,
									expr: &litMatcher{
										pos:        position{line: 579, col: 27, offset: 17822},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&actionExpr{
									pos: position{line: 582, col: 12, offset: 17982},
									run: (*parser).callonSingleQuotedAttributeValueContent86,
									expr: &oneOrMoreExpr{
										pos: position{line: 582, col: 12, offset: 17982},
										expr: &charClassMatcher{
											pos:        position{line: 582, col: 12, offset: 17982},
											val:        "[^\\r\\n\\\\\\ ]",
											chars:      []rune{'\r', '\n', '\\', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 589, col: 1, offset: 18179},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 18214},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 18214},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 590, col: 5, offset: 18214},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 590, col: 10, offset: 18219},
							expr: &litMatcher{
								pos:        position{line: 590, col: 11, offset: 18220},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 18299},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 14, offset: 18308},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 592, col: 5, offset: 18347},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 592, col: 10, offset: 18352},
							expr: &notExpr{
								pos: position{line: 592, col: 12, offset: 18354},
								expr: &seqExpr{
									pos: position{line: 592, col: 14, offset: 18356},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 592, col: 14, offset: 18356},
											expr: &actionExpr{
												pos: position{line: 2902, col: 10, offset: 91540},
												run: (*parser).callonDoubleQuotedAttributeValue13,
												expr: &charClassMatcher{
													pos:        position{line: 2902, col: 10, offset: 91540},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 592, col: 21, offset: 18363},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 596, col: 1, offset: 18406},
			expr: &actionExpr{
				pos: position{line: 597, col: 5, offset: 18448},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 597, col: 5, offset: 18448},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 597, col: 14, offset: 18457},
						expr: &choiceExpr{
							pos: position{line: 598, col: 9, offset: 18467},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2750, col: 14, offset: 87447},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2750, col: 14, offset: 87447},
										expr: &charClassMatcher{
											pos:        position{line: 2750, col: 14, offset: 87447},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 2902, col: 10, offset: 91540},
									run: (*parser).callonDoubleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 2902, col: 10, offset: 91540},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 11, offset: 18503},
									name: "QuotationMark",
								},
								&actionExpr{
									pos: position{line: 636, col: 5, offset: 20111},
									run: (*parser).callonDoubleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 636, col: 5, offset: 20111},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 636, col: 5, offset: 20111},
												run: (*parser).callonDoubleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 639, col: 5, offset: 20178},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 639, col: 14, offset: 20187},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 645, col: 5, offset: 20316},
															run: (*parser).callonDoubleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 645, col: 5, offset: 20316},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 645, col: 5, offset: 20316},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 645, col: 13, offset: 20324},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonDoubleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 645, col: 32, offset: 20343},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 652, col: 5, offset: 20584},
															run: (*parser).callonDoubleQuotedAttributeValueContent26,
															expr: &seqExpr{
																pos: position{line: 652, col: 5, offset: 20584},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 652, col: 5, offset: 20584},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 652, col: 9, offset: 20588},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonDoubleQuotedAttributeValueContent30,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 652, col: 28, offset: 20607},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 658, col: 25, offset: 20788},
															run: (*parser).callonDoubleQuotedAttributeValueContent36,
															expr: &seqExpr{
																pos: position{line: 658, col: 25, offset: 20788},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 658, col: 25, offset: 20788},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 658, col: 37, offset: 20800},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonDoubleQuotedAttributeValueContent40,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 658, col: 56, offset: 20819},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 658, col: 62, offset: 20825},
																			expr: &actionExpr{
																				pos: position{line: 666, col: 17, offset: 21120},
																				run: (*parser).callonDoubleQuotedAttributeValueContent47,
																				expr: &seqExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 666, col: 17, offset: 21120},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 666, col: 21, offset: 21124},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 666, col: 28, offset: 21131},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										run: (*parser).callonDoubleQuotedAttributeValueContent52,
																										expr: &charClassMatcher{
																											pos:        position{line: 666, col: 28, offset: 21131},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 668, col: 9, offset: 21185},
																										run: (*parser).callonDoubleQuotedAttributeValueContent54,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											expr: &charClassMatcher{
																												pos:        position{line: 668, col: 9, offset: 21185},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 658, col: 78, offset: 20841},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 662, col: 25, offset: 20959},
															run: (*parser).callonDoubleQuotedAttributeValueContent58,
															expr: &seqExpr{
																pos: position{line: 662, col: 25, offset: 20959},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 662, col: 25, offset: 20959},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 662, col: 38, offset: 20972},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 318, col: 18, offset: 9737},
																			run: (*parser).callonDoubleQuotedAttributeValueContent62,
																			expr: &seqExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 318, col: 18, offset: 9737},
																						val:        "[_\\pL\\pN]",
																						chars:      []rune{'_'},
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 318, col: 28, offset: 9747},
																						expr: &charClassMatcher{
																							pos:        position{line: 318, col: 29, offset: 9748},
																							val:        "[-\\pL\\pN]",
																							chars:      []rune{'-'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 662, col: 57, offset: 20991},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 662, col: 63, offset: 20997},
																			expr: &actionExpr{
																				pos: position{line: 666, col: 17, offset: 21120},
																				run: (*parser).callonDoubleQuotedAttributeValueContent69,
																				expr: &seqExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 666, col: 17, offset: 21120},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 666, col: 21, offset: 21124},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 666, col: 28, offset: 21131},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										run: (*parser).callonDoubleQuotedAttributeValueContent74,
																										expr: &charClassMatcher{
																											pos:        position{line: 666, col: 28, offset: 21131},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 668, col: 9, offset: 21185},
																										run: (*parser).callonDoubleQuotedAttributeValueContent76,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											expr: &charClassMatcher{
																												pos:        position{line: 668, col: 9, offset: 21185},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 662, col: 79, offset: 21013},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 602, col: 12, offset: 18558},
									run: (*parser).callonDoubleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 602, col: 12, offset: 18558},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&litMatcher{
									pos:        position{line: 605, col: 13, offset: 18660},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&litMatcher{
									pos:        position{line: 605, col: 21, offset: 18668},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&litMatcher{
									pos:        position{line: 605, col: 29, offset: 18676},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&actionExpr{
									pos: position{line: 605, col: 35, offset: 18682},
									run: (*parser).callonDoubleQuotedAttributeValueContent85,
									expr: &litMatcher{
										pos:        position{line: 605, col: 35, offset: 18682},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 608, col: 12, offset: 18865},
									run: (*parser).callonDoubleQuotedAttributeValueContent87,
									expr: &oneOrMoreExpr{
										pos: position{line: 608, col: 12, offset: 18865},
										expr: &charClassMatcher{
											pos:        position{line: 608, col: 12, offset: 18865},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 616, col: 1, offset: 19139},
			expr: &actionExpr{
				pos: position{line: 619, col: 5, offset: 19323},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 619, col: 5, offset: 19323},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 619, col: 5, offset: 19323},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 620, col: 5, offset: 19392},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 620, col: 14, offset: 19401},
								expr: &choiceExpr{
									pos: position{line: 621, col: 9, offset: 19411},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 621, col: 10, offset: 19412},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 621, col: 10, offset: 19412},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 621, col: 14, offset: 19416},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 621, col: 37, offset: 19439},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 636, col: 5, offset: 20111},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &seqExpr{
												pos: position{line: 636, col: 5, offset: 20111},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 636, col: 5, offset: 20111},
														run: (*parser).callonUnquotedAttributeValue15,
													},
													&labeledExpr{
														pos:   position{line: 639, col: 5, offset: 20178},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 639, col: 14, offset: 20187},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 645, col: 5, offset: 20316},
																	run: (*parser).callonUnquotedAttributeValue18,
																	expr: &seqExpr{
																		pos: position{line: 645, col: 5, offset: 20316},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 645, col: 5, offset: 20316},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 645, col: 13, offset: 20324},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					run: (*parser).callonUnquotedAttributeValue22,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9737},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9737},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9747},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9748},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 645, col: 32, offset: 20343},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 652, col: 5, offset: 20584},
																	run: (*parser).callonUnquotedAttributeValue28,
																	expr: &seqExpr{
																		pos: position{line: 652, col: 5, offset: 20584},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 652, col: 5, offset: 20584},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 652, col: 9, offset: 20588},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					run: (*parser).callonUnquotedAttributeValue32,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9737},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9737},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9747},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9748},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 652, col: 28, offset: 20607},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 658, col: 25, offset: 20788},
																	run: (*parser).callonUnquotedAttributeValue38,
																	expr: &seqExpr{
																		pos: position{line: 658, col: 25, offset: 20788},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 658, col: 25, offset: 20788},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 658, col: 37, offset: 20800},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					run: (*parser).callonUnquotedAttributeValue42,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9737},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9737},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9747},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9748},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 658, col: 56, offset: 20819},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 658, col: 62, offset: 20825},
																					expr: &actionExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						run: (*parser).callonUnquotedAttributeValue49,
																						expr: &seqExpr{
																							pos: position{line: 666, col: 17, offset: 21120},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 666, col: 17, offset: 21120},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 666, col: 21, offset: 21124},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 28, offset: 21131},
																												run: (*parser).callonUnquotedAttributeValue54,
																												expr: &charClassMatcher{
																													pos:        position{line: 666, col: 28, offset: 21131},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												run: (*parser).callonUnquotedAttributeValue56,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 668, col: 9, offset: 21185},
																													expr: &charClassMatcher{
																														pos:        position{line: 668, col: 9, offset: 21185},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 658, col: 78, offset: 20841},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 662, col: 25, offset: 20959},
																	run: (*parser).callonUnquotedAttributeValue60,
																	expr: &seqExpr{
																		pos: position{line: 662, col: 25, offset: 20959},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 662, col: 25, offset: 20959},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 662, col: 38, offset: 20972},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					run: (*parser).callonUnquotedAttributeValue64,
																					expr: &seqExpr{
																						pos: position{line: 318, col: 18, offset: 9737},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 318, col: 18, offset: 9737},
																								val:        "[_\\pL\\pN]",
																								chars:      []rune{'_'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 318, col: 28, offset: 9747},
																								expr: &charClassMatcher{
																									pos:        position{line: 318, col: 29, offset: 9748},
																									val:        "[-\\pL\\pN]",
																									chars:      []rune{'-'},
																									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 662, col: 57, offset: 20991},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 662, col: 63, offset: 20997},
																					expr: &actionExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						run: (*parser).callonUnquotedAttributeValue71,
																						expr: &seqExpr{
																							pos: position{line: 666, col: 17, offset: 21120},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 666, col: 17, offset: 21120},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 666, col: 21, offset: 21124},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 666, col: 28, offset: 21131},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 666, col: 28, offset: 21131},
																												run: (*parser).callonUnquotedAttributeValue76,
																												expr: &charClassMatcher{
																													pos:        position{line: 666, col: 28, offset: 21131},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												run: (*parser).callonUnquotedAttributeValue78,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 668, col: 9, offset: 21185},
																													expr: &charClassMatcher{
																														pos:        position{line: 668, col: 9, offset: 21185},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 662, col: 79, offset: 21013},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 622, col: 32, offset: 19526},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
										&actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonUnquotedAttributeValue83,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 624, col: 12, offset: 19611},
											run: (*parser).callonUnquotedAttributeValue85,
											expr: &oneOrMoreExpr{
												pos: position{line: 624, col: 12, offset: 19611},
												expr: &charClassMatcher{
													pos:        position{line: 624, col: 12, offset: 19611},
													val:        "[^=,]{ ]",
													chars:      []rune{'=', ',', ']', '{', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 684, col: 1, offset: 21747},
			expr: &choiceExpr{
				pos: position{line: 684, col: 19, offset: 21765},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 686, col: 27, offset: 21841},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 686, col: 27, offset: 21841},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 27, offset: 21841},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 32, offset: 21846},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2887, col: 7, offset: 91192},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 2887, col: 7, offset: 91192},
											expr: &charClassMatcher{
												pos:        position{line: 2887, col: 7, offset: 91192},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 686, col: 40, offset: 21854},
									expr: &actionExpr{
										pos: position{line: 2902, col: 10, offset: 91540},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 2902, col: 10, offset: 91540},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 686, col: 47, offset: 21861},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 686, col: 51, offset: 21865},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 696, col: 24, offset: 22266},
										expr: &choiceExpr{
											pos: position{line: 697, col: 5, offset: 22272},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 697, col: 6, offset: 22273},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 697, col: 6, offset: 22273},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 697, col: 6, offset: 22273},
																val:        "[\\pL\\pN]",
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 697, col: 14, offset: 22281},
																expr: &charClassMatcher{
																	pos:        position{line: 697, col: 14, offset: 22281},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 645, col: 5, offset: 20316},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 645, col: 5, offset: 20316},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 645, col: 5, offset: 20316},
																val:        "\\{",
																ignoreCase: false,
																want:       "\"\\\\{\"",
															},
															&labeledExpr{
																pos:   position{line: 645, col: 13, offset: 20324},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 318, col: 18, offset: 9737},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 318, col: 18, offset: 9737},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 318, col: 28, offset: 9747},
																				expr: &charClassMatcher{
																					pos:        position{line: 318, col: 29, offset: 9748},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 645, col: 32, offset: 20343},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 652, col: 5, offset: 20584},
													run: (*parser).callonCrossReference31,
													expr: &seqExpr{
														pos: position{line: 652, col: 5, offset: 20584},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 652, col: 5, offset: 20584},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 652, col: 9, offset: 20588},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	run: (*parser).callonCrossReference35,
																	expr: &seqExpr{
																		pos: position{line: 318, col: 18, offset: 9737},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 318, col: 18, offset: 9737},
																				val:        "[_\\pL\\pN]",
																				chars:      []rune{'_'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 318, col: 28, offset: 9747},
																				expr: &charClassMatcher{
																					pos:        position{line: 318, col: 29, offset: 9748},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 652, col: 28, offset: 20607},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 701, col: 8, offset: 22507},
													run: (*parser).callonCrossReference41,
													expr: &litMatcher{
														pos:        position{line: 701, col: 8, offset: 22507},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 686, col: 79, offset: 21893},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 688, col: 9, offset: 21966},
						run: (*parser).callonCrossReference44,
						expr: &seqExpr{
							pos: position{line: 688, col: 9, offset: 21966},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 688, col: 9, offset: 21966},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 688, col: 14, offset: 21971},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 2887, col: 7, offset: 91192},
										run: (*parser).callonCrossReference48,
										expr: &oneOrMoreExpr{
											pos: position{line: 2887, col: 7, offset: 91192},
											expr: &charClassMatcher{
												pos:        position{line: 2887, col: 7, offset: 91192},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 688, col: 22, offset: 21979},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 684, col: 44, offset: 21790},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 692, col: 1, offset: 22050},
			expr: &actionExpr{
				pos: position{line: 692, col: 27, offset: 22076},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 692, col: 27, offset: 22076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 692, col: 27, offset: 22076},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 35, offset: 22084},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 2856, col: 17, offset: 90122},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 2856, col: 17, offset: 90122},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 2856, col: 22, offset: 90127},
										expr: &choiceExpr{
											pos: position{line: 2856, col: 23, offset: 90128},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2873, col: 5, offset: 90621},
													run: (*parser).callonExternalCrossReference9,
													expr: &seqExpr{
														pos: position{line: 2873, col: 5, offset: 90621},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																expr: &litMatcher{
																	pos:        position{line: 2873, col: 6, offset: 90622},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 2874, col: 5, offset: 90646},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 2874, col: 14, offset: 90655},
																	expr: &choiceExpr{
																		pos: position{line: 2875, col: 9, offset: 90665},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				run: (*parser).callonExternalCrossReference16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2875, col: 9, offset: 90665},
																					expr: &charClassMatcher{
																						pos:        position{line: 2875, col: 10, offset: 90666},
																						val:        "[^\\r\\n[]�{,;?!>. ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2878, col: 11, offset: 90917},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2801, col: 8, offset: 88554},
																						run: (*parser).callonExternalCrossReference20,
																						expr: &seqExpr{
																							pos: position{line: 2801, col: 9, offset: 88555},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2801, col: 9, offset: 88555},
																									val:        ".",
																									ignoreCase: false,
																									want:       "\".\"",
																								},
																								&andExpr{
																									pos: position{line: 2801, col: 13, offset: 88559},
																									expr: &notExpr{
																										pos: position{line: 2801, col: 15, offset: 88561},
																										expr: &litMatcher{
																											pos:        position{line: 2801, col: 16, offset: 88562},
																											val:        "..",
																											ignoreCase: false,
																											want:       "\"..\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2878, col: 15, offset: 90921},
																						expr: &notExpr{
																							pos: position{line: 2878, col: 17, offset: 90923},
																							expr: &choiceExpr{
																								pos: position{line: 2878, col: 19, offset: 90925},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonExternalCrossReference31,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 2879, col: 11, offset: 90949},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 2807, col: 5, offset: 88736},
																						run: (*parser).callonExternalCrossReference34,
																						expr: &choiceExpr{
																							pos: position{line: 2808, col: 9, offset: 88746},
																							alternatives: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 2808, col: 10, offset: 88747},
																									val:        "[,;?)!/=-]",
																									chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&seqExpr{
																									pos: position{line: 2809, col: 12, offset: 88822},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2809, col: 12, offset: 88822},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&andExpr{
																											pos: position{line: 2809, col: 16, offset: 88826},
																											expr: &choiceExpr{
																												pos: position{line: 2809, col: 18, offset: 88828},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonExternalCrossReference41,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2911, col: 12, offset: 91711},
																														run: (*parser).callonExternalCrossReference43,
																														expr: &choiceExpr{
																															pos: position{line: 2911, col: 13, offset: 91712},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 2911, col: 13, offset: 91712},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 20, offset: 91719},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 2911, col: 29, offset: 91728},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2811, col: 13, offset: 88897},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											run: (*parser).callonExternalCrossReference51,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2814, col: 14, offset: 89033},
																											val:        "[\"\\()]",
																											chars:      []rune{'"', '\'', '(', ')'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2817, col: 13, offset: 89090},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											run: (*parser).callonExternalCrossReference54,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2820, col: 14, offset: 89179},
																											val:        "[:@]",
																											chars:      []rune{':', '@'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2823, col: 13, offset: 89224},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											run: (*parser).callonExternalCrossReference57,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2826, col: 14, offset: 89313},
																											val:        "[*_`#]",
																											chars:      []rune{'*', '_', '`', '#'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&seqExpr{
																									pos: position{line: 2829, col: 13, offset: 89370},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											run: (*parser).callonExternalCrossReference60,
																										},
																										&charClassMatcher{
																											pos:        position{line: 2832, col: 14, offset: 89526},
																											val:        "[[]]",
																											chars:      []rune{'[', ']'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2879, col: 23, offset: 90961},
																						expr: &notExpr{
																							pos: position{line: 2879, col: 25, offset: 90963},
																							expr: &choiceExpr{
																								pos: position{line: 2879, col: 27, offset: 90965},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonExternalCrossReference67,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 636, col: 5, offset: 20111},
																				run: (*parser).callonExternalCrossReference69,
																				expr: &seqExpr{
																					pos: position{line: 636, col: 5, offset: 20111},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							run: (*parser).callonExternalCrossReference71,
																						},
																						&labeledExpr{
																							pos:   position{line: 639, col: 5, offset: 20178},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 639, col: 14, offset: 20187},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 645, col: 5, offset: 20316},
																										run: (*parser).callonExternalCrossReference74,
																										expr: &seqExpr{
																											pos: position{line: 645, col: 5, offset: 20316},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 645, col: 5, offset: 20316},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 645, col: 13, offset: 20324},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9737},
																														run: (*parser).callonExternalCrossReference78,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9737},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9737},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9747},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9748},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 645, col: 32, offset: 20343},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 652, col: 5, offset: 20584},
																										run: (*parser).callonExternalCrossReference84,
																										expr: &seqExpr{
																											pos: position{line: 652, col: 5, offset: 20584},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 652, col: 5, offset: 20584},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 652, col: 9, offset: 20588},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9737},
																														run: (*parser).callonExternalCrossReference88,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9737},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9737},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9747},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9748},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 652, col: 28, offset: 20607},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 658, col: 25, offset: 20788},
																										run: (*parser).callonExternalCrossReference94,
																										expr: &seqExpr{
																											pos: position{line: 658, col: 25, offset: 20788},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 658, col: 25, offset: 20788},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 658, col: 37, offset: 20800},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9737},
																														run: (*parser).callonExternalCrossReference98,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9737},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9737},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9747},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9748},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 658, col: 56, offset: 20819},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 658, col: 62, offset: 20825},
																														expr: &actionExpr{
																															pos: position{line: 666, col: 17, offset: 21120},
																															run: (*parser).callonExternalCrossReference105,
																															expr: &seqExpr{
																																pos: position{line: 666, col: 17, offset: 21120},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 666, col: 17, offset: 21120},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 666, col: 21, offset: 21124},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 666, col: 28, offset: 21131},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					run: (*parser).callonExternalCrossReference110,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 666, col: 28, offset: 21131},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 668, col: 9, offset: 21185},
																																					run: (*parser).callonExternalCrossReference112,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 668, col: 9, offset: 21185},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 668, col: 9, offset: 21185},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 658, col: 78, offset: 20841},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 662, col: 25, offset: 20959},
																										run: (*parser).callonExternalCrossReference116,
																										expr: &seqExpr{
																											pos: position{line: 662, col: 25, offset: 20959},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 662, col: 25, offset: 20959},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 662, col: 38, offset: 20972},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 318, col: 18, offset: 9737},
																														run: (*parser).callonExternalCrossReference120,
																														expr: &seqExpr{
																															pos: position{line: 318, col: 18, offset: 9737},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 318, col: 18, offset: 9737},
																																	val:        "[_\\pL\\pN]",
																																	chars:      []rune{'_'},
																																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 318, col: 28, offset: 9747},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 318, col: 29, offset: 9748},
																																		val:        "[-\\pL\\pN]",
																																		chars:      []rune{'-'},
																																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 662, col: 57, offset: 20991},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 662, col: 63, offset: 20997},
																														expr: &actionExpr{
																															pos: position{line: 666, col: 17, offset: 21120},
																															run: (*parser).callonExternalCrossReference127,
																															expr: &seqExpr{
																																pos: position{line: 666, col: 17, offset: 21120},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 666, col: 17, offset: 21120},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 666, col: 21, offset: 21124},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 666, col: 28, offset: 21131},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					run: (*parser).callonExternalCrossReference132,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 666, col: 28, offset: 21131},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 668, col: 9, offset: 21185},
																																					run: (*parser).callonExternalCrossReference134,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 668, col: 9, offset: 21185},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 668, col: 9, offset: 21185},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 662, col: 79, offset: 21013},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2881, col: 11, offset: 91036},
																				run: (*parser).callonExternalCrossReference138,
																				expr: &litMatcher{
																					pos:        position{line: 2881, col: 11, offset: 91036},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1198, col: 23, offset: 36969},
													run: (*parser).callonExternalCrossReference140,
													expr: &seqExpr{
														pos: position{line: 1198, col: 23, offset: 36969},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1196, col: 32, offset: 36937},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1198, col: 51, offset: 36997},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1198, col: 56, offset: 37002},
																	run: (*parser).callonExternalCrossReference144,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1198, col: 56, offset: 37002},
																		expr: &charClassMatcher{
																			pos:        position{line: 1198, col: 56, offset: 37002},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1196, col: 32, offset: 36937},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 54, offset: 22103},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 66, offset: 22115},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 988, col: 1, offset: 30764},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 30797},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 30797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 989, col: 5, offset: 30797},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 989, col: 11, offset: 30803},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 2852, col: 14, offset: 90052},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2852, col: 14, offset: 90052},
									expr: &charClassMatcher{
										pos:        position{line: 2852, col: 14, offset: 90052},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1100, col: 1, offset: 33720},
			expr: &actionExpr{
				pos: position{line: 1101, col: 5, offset: 33743},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1101, col: 5, offset: 33743},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1101, col: 5, offset: 33743},
							run: (*parser).callonDocumentHeader3,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1104, col: 5, offset: 33804},
							expr: &choiceExpr{
								pos: position{line: 1104, col: 6, offset: 33805},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2466, col: 22, offset: 79269},
										run: (*parser).callonDocumentHeader6,
										expr: &seqExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2471, col: 31, offset: 79490},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2471, col: 36, offset: 79495},
													expr: &litMatcher{
														pos:        position{line: 2471, col: 37, offset: 79496},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2466, col: 49, offset: 79296},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2848, col: 13, offset: 89985},
														run: (*parser).callonDocumentHeader12,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															expr: &charClassMatcher{
																pos:        position{line: 2848, col: 13, offset: 89985},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonDocumentHeader16,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 820, col: 5, offset: 26321},
										run: (*parser).callonDocumentHeader23,
										expr: &seqExpr{
											pos: position{line: 820, col: 5, offset: 26321},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 740, col: 5, offset: 23581},
													run: (*parser).callonDocumentHeader25,
													expr: &seqExpr{
														pos: position{line: 740, col: 5, offset: 23581},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 740, col: 5, offset: 23581},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 740, col: 16, offset: 23592},
																	run: (*parser).callonDocumentHeader28,
																	expr: &seqExpr{
																		pos: position{line: 740, col: 16, offset: 23592},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 740, col: 16, offset: 23592},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 740, col: 23, offset: 23599},
																				expr: &litMatcher{
																					pos:        position{line: 740, col: 23, offset: 23599},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 742, col: 8, offset: 23683},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonDocumentHeader34,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonDocumentHeader37,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 821, col: 5, offset: 26352},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 831, col: 5, offset: 26638},
														expr: &actionExpr{
															pos: position{line: 831, col: 6, offset: 26639},
															run: (*parser).callonDocumentHeader46,
															expr: &seqExpr{
																pos: position{line: 831, col: 6, offset: 26639},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 831, col: 6, offset: 26639},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 29, offset: 26581},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 740, col: 5, offset: 23581},
																					run: (*parser).callonDocumentHeader50,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 740, col: 5, offset: 23581},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 740, col: 16, offset: 23592},
																									run: (*parser).callonDocumentHeader53,
																									expr: &seqExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 740, col: 16, offset: 23592},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 740, col: 23, offset: 23599},
																												expr: &litMatcher{
																													pos:        position{line: 740, col: 23, offset: 23599},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 742, col: 8, offset: 23683},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentHeader59,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentHeader62,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 832, col: 5, offset: 26669},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonDocumentHeader72,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonDocumentHeader77,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonDocumentHeader81,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 822, col: 5, offset: 26386},
													expr: &choiceExpr{
														pos: position{line: 828, col: 29, offset: 26581},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 740, col: 5, offset: 23581},
																run: (*parser).callonDocumentHeader90,
																expr: &seqExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 740, col: 5, offset: 23581},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 740, col: 16, offset: 23592},
																				run: (*parser).callonDocumentHeader93,
																				expr: &seqExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 740, col: 16, offset: 23592},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 740, col: 23, offset: 23599},
																							expr: &litMatcher{
																								pos:        position{line: 740, col: 23, offset: 23599},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 742, col: 8, offset: 23683},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentHeader99,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentHeader102,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1105, col: 5, offset: 33901},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 12, offset: 33908},
								name: "DocumentTitle",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1106, col: 5, offset: 33927},
							expr: &choiceExpr{
								pos: position{line: 1106, col: 6, offset: 33928},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2466, col: 22, offset: 79269},
										run: (*parser).callonDocumentHeader115,
										expr: &seqExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2471, col: 31, offset: 79490},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2471, col: 36, offset: 79495},
													expr: &litMatcher{
														pos:        position{line: 2471, col: 37, offset: 79496},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2466, col: 49, offset: 79296},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2848, col: 13, offset: 89985},
														run: (*parser).callonDocumentHeader121,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															expr: &charClassMatcher{
																pos:        position{line: 2848, col: 13, offset: 89985},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonDocumentHeader125,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 820, col: 5, offset: 26321},
										run: (*parser).callonDocumentHeader132,
										expr: &seqExpr{
											pos: position{line: 820, col: 5, offset: 26321},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 740, col: 5, offset: 23581},
													run: (*parser).callonDocumentHeader134,
													expr: &seqExpr{
														pos: position{line: 740, col: 5, offset: 23581},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 740, col: 5, offset: 23581},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 740, col: 16, offset: 23592},
																	run: (*parser).callonDocumentHeader137,
																	expr: &seqExpr{
																		pos: position{line: 740, col: 16, offset: 23592},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 740, col: 16, offset: 23592},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 740, col: 23, offset: 23599},
																				expr: &litMatcher{
																					pos:        position{line: 740, col: 23, offset: 23599},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 742, col: 8, offset: 23683},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonDocumentHeader143,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonDocumentHeader146,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 821, col: 5, offset: 26352},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 831, col: 5, offset: 26638},
														expr: &actionExpr{
															pos: position{line: 831, col: 6, offset: 26639},
															run: (*parser).callonDocumentHeader155,
															expr: &seqExpr{
																pos: position{line: 831, col: 6, offset: 26639},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 831, col: 6, offset: 26639},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 29, offset: 26581},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 740, col: 5, offset: 23581},
																					run: (*parser).callonDocumentHeader159,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 740, col: 5, offset: 23581},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 740, col: 16, offset: 23592},
																									run: (*parser).callonDocumentHeader162,
																									expr: &seqExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 740, col: 16, offset: 23592},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 740, col: 23, offset: 23599},
																												expr: &litMatcher{
																													pos:        position{line: 740, col: 23, offset: 23599},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 742, col: 8, offset: 23683},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentHeader168,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentHeader171,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 832, col: 5, offset: 26669},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonDocumentHeader181,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonDocumentHeader186,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonDocumentHeader190,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 822, col: 5, offset: 26386},
													expr: &choiceExpr{
														pos: position{line: 828, col: 29, offset: 26581},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 740, col: 5, offset: 23581},
																run: (*parser).callonDocumentHeader199,
																expr: &seqExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 740, col: 5, offset: 23581},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 740, col: 16, offset: 23592},
																				run: (*parser).callonDocumentHeader202,
																				expr: &seqExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 740, col: 16, offset: 23592},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 740, col: 23, offset: 23599},
																							expr: &litMatcher{
																								pos:        position{line: 740, col: 23, offset: 23599},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 742, col: 8, offset: 23683},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonDocumentHeader208,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonDocumentHeader211,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 5, offset: 34024},
							label: "authorsAndRevision",
							expr: &zeroOrOneExpr{
								pos: position{line: 1107, col: 24, offset: 34043},
								expr: &actionExpr{
									pos: position{line: 1118, col: 5, offset: 34418},
									run: (*parser).callonDocumentHeader222,
									expr: &seqExpr{
										pos: position{line: 1118, col: 5, offset: 34418},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1118, col: 5, offset: 34418},
												expr: &litMatcher{
													pos:        position{line: 1118, col: 6, offset: 34419},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 1119, col: 5, offset: 34427},
												label: "authors",
												expr: &actionExpr{
													pos: position{line: 1125, col: 20, offset: 34683},
													run: (*parser).callonDocumentHeader227,
													expr: &seqExpr{
														pos: position{line: 1125, col: 20, offset: 34683},
														exprs: []interface{}{
															&zeroOrMoreExpr{
																pos: position{line: 1125, col: 20, offset: 34683},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonDocumentHeader230,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1125, col: 27, offset: 34690},
																label: "authors",
																expr: &oneOrMoreExpr{
																	pos: position{line: 1125, col: 36, offset: 34699},
																	expr: &actionExpr{
																		pos: position{line: 1130, col: 5, offset: 34812},
																		run: (*parser).callonDocumentHeader234,
																		expr: &seqExpr{
																			pos: position{line: 1130, col: 5, offset: 34812},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1130, col: 5, offset: 34812},
																					label: "fullName",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1130, col: 14, offset: 34821},
																						expr: &actionExpr{
																							pos: position{line: 1141, col: 5, offset: 35201},
																							run: (*parser).callonDocumentHeader238,
																							expr: &seqExpr{
																								pos: position{line: 1141, col: 5, offset: 35201},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1141, col: 5, offset: 35201},
																										label: "part1",
																										expr: &actionExpr{
																											pos: position{line: 1141, col: 12, offset: 35208},
																											run: (*parser).callonDocumentHeader241,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1141, col: 12, offset: 35208},
																												expr: &charClassMatcher{
																													pos:        position{line: 1141, col: 12, offset: 35208},
																													val:        "[^<;\\r\\n ]",
																													chars:      []rune{'<', ';', '\r', '\n', ' '},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1144, col: 5, offset: 35288},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 10, offset: 91540},
																											run: (*parser).callonDocumentHeader245,
																											expr: &charClassMatcher{
																												pos:        position{line: 2902, col: 10, offset: 91540},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1145, col: 5, offset: 35299},
																										label: "part2",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1145, col: 11, offset: 35305},
																											expr: &actionExpr{
																												pos: position{line: 1145, col: 12, offset: 35306},
																												run: (*parser).callonDocumentHeader249,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1145, col: 12, offset: 35306},
																													expr: &charClassMatcher{
																														pos:        position{line: 1145, col: 12, offset: 35306},
																														val:        "[^<;\\r\\n ]",
																														chars:      []rune{'<', ';', '\r', '\n', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1148, col: 5, offset: 35387},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 10, offset: 91540},
																											run: (*parser).callonDocumentHeader253,
																											expr: &charClassMatcher{
																												pos:        position{line: 2902, col: 10, offset: 91540},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1149, col: 5, offset: 35398},
																										label: "part3",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 1149, col: 11, offset: 35404},
																											expr: &actionExpr{
																												pos: position{line: 1149, col: 12, offset: 35405},
																												run: (*parser).callonDocumentHeader257,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1149, col: 12, offset: 35405},
																													expr: &charClassMatcher{
																														pos:        position{line: 1149, col: 12, offset: 35405},
																														val:        "[^<;\\r\\n]",
																														chars:      []rune{'<', ';', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 1152, col: 5, offset: 35484},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 10, offset: 91540},
																											run: (*parser).callonDocumentHeader261,
																											expr: &charClassMatcher{
																												pos:        position{line: 2902, col: 10, offset: 91540},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1130, col: 40, offset: 34847},
																					label: "email",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 1130, col: 46, offset: 34853},
																						expr: &actionExpr{
																							pos: position{line: 1158, col: 5, offset: 35606},
																							run: (*parser).callonDocumentHeader265,
																							expr: &seqExpr{
																								pos: position{line: 1158, col: 5, offset: 35606},
																								exprs: []interface{}{
																									&andExpr{
																										pos: position{line: 2919, col: 11, offset: 91874},
																										expr: &anyMatcher{
																											line: 2919, col: 13, offset: 91876,
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1159, col: 5, offset: 35618},
																										val:        "<",
																										ignoreCase: false,
																										want:       "\"<\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1160, col: 5, offset: 35627},
																										label: "email",
																										expr: &actionExpr{
																											pos: position{line: 1160, col: 12, offset: 35634},
																											run: (*parser).callonDocumentHeader271,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1160, col: 13, offset: 35635},
																												expr: &charClassMatcher{
																													pos:        position{line: 1160, col: 13, offset: 35635},
																													val:        "[^>\\r\\n]",
																													chars:      []rune{'>', '\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1163, col: 5, offset: 35695},
																										val:        ">",
																										ignoreCase: false,
																										want:       "\">\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1130, col: 69, offset: 34876},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonDocumentHeader276,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&zeroOrOneExpr{
																					pos: position{line: 1130, col: 76, offset: 34883},
																					expr: &litMatcher{
																						pos:        position{line: 1130, col: 76, offset: 34883},
																						val:        ";",
																						ignoreCase: false,
																						want:       "\";\"",
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1130, col: 81, offset: 34888},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonDocumentHeader281,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1131, col: 5, offset: 34900},
																					run: (*parser).callonDocumentHeader283,
																				},
																			},
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonDocumentHeader285,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1120, col: 5, offset: 34457},
												expr: &choiceExpr{
													pos: position{line: 1120, col: 6, offset: 34458},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2466, col: 22, offset: 79269},
															run: (*parser).callonDocumentHeader294,
															expr: &seqExpr{
																pos: position{line: 2466, col: 22, offset: 79269},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2471, col: 31, offset: 79490},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2471, col: 36, offset: 79495},
																		expr: &litMatcher{
																			pos:        position{line: 2471, col: 37, offset: 79496},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2466, col: 49, offset: 79296},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 13, offset: 89985},
																			run: (*parser).callonDocumentHeader300,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2848, col: 13, offset: 89985},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 13, offset: 89985},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonDocumentHeader304,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 820, col: 5, offset: 26321},
															run: (*parser).callonDocumentHeader311,
															expr: &seqExpr{
																pos: position{line: 820, col: 5, offset: 26321},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 740, col: 5, offset: 23581},
																		run: (*parser).callonDocumentHeader313,
																		expr: &seqExpr{
																			pos: position{line: 740, col: 5, offset: 23581},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 740, col: 5, offset: 23581},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 740, col: 16, offset: 23592},
																						run: (*parser).callonDocumentHeader316,
																						expr: &seqExpr{
																							pos: position{line: 740, col: 16, offset: 23592},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 740, col: 16, offset: 23592},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 740, col: 23, offset: 23599},
																									expr: &litMatcher{
																										pos:        position{line: 740, col: 23, offset: 23599},
																										val:        "/",
																										ignoreCase: false,
																										want:       "\"/\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 742, col: 8, offset: 23683},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonDocumentHeader322,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonDocumentHeader325,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 821, col: 5, offset: 26352},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 831, col: 5, offset: 26638},
																			expr: &actionExpr{
																				pos: position{line: 831, col: 6, offset: 26639},
																				run: (*parser).callonDocumentHeader334,
																				expr: &seqExpr{
																					pos: position{line: 831, col: 6, offset: 26639},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 831, col: 6, offset: 26639},
																							expr: &choiceExpr{
																								pos: position{line: 828, col: 29, offset: 26581},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 740, col: 5, offset: 23581},
																										run: (*parser).callonDocumentHeader338,
																										expr: &seqExpr{
																											pos: position{line: 740, col: 5, offset: 23581},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 740, col: 5, offset: 23581},
																													label: "delimiter",
																													expr: &actionExpr{
																														pos: position{line: 740, col: 16, offset: 23592},
																														run: (*parser).callonDocumentHeader341,
																														expr: &seqExpr{
																															pos: position{line: 740, col: 16, offset: 23592},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 740, col: 16, offset: 23592},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 740, col: 23, offset: 23599},
																																	expr: &litMatcher{
																																		pos:        position{line: 740, col: 23, offset: 23599},
																																		val:        "/",
																																		ignoreCase: false,
																																		want:       "\"/\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 742, col: 8, offset: 23683},
																													expr: &actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonDocumentHeader347,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2924, col: 8, offset: 91938},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2911, col: 12, offset: 91711},
																															run: (*parser).callonDocumentHeader350,
																															expr: &choiceExpr{
																																pos: position{line: 2911, col: 13, offset: 91712},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 13, offset: 91712},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 20, offset: 91719},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 29, offset: 91728},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2921, col: 8, offset: 91888},
																															expr: &anyMatcher{
																																line: 2921, col: 9, offset: 91889,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 832, col: 5, offset: 26669},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 811, col: 5, offset: 26085},
																								run: (*parser).callonDocumentHeader360,
																								expr: &seqExpr{
																									pos: position{line: 811, col: 5, offset: 26085},
																									exprs: []interface{}{
																										&andExpr{
																											pos: position{line: 2919, col: 11, offset: 91874},
																											expr: &anyMatcher{
																												line: 2919, col: 13, offset: 91876,
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 812, col: 5, offset: 26160},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2848, col: 13, offset: 89985},
																												run: (*parser).callonDocumentHeader365,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2848, col: 13, offset: 89985},
																													expr: &charClassMatcher{
																														pos:        position{line: 2848, col: 13, offset: 89985},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonDocumentHeader369,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 822, col: 5, offset: 26386},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 29, offset: 26581},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 740, col: 5, offset: 23581},
																					run: (*parser).callonDocumentHeader378,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 740, col: 5, offset: 23581},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 740, col: 16, offset: 23592},
																									run: (*parser).callonDocumentHeader381,
																									expr: &seqExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 740, col: 16, offset: 23592},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 740, col: 23, offset: 23599},
																												expr: &litMatcher{
																													pos:        position{line: 740, col: 23, offset: 23599},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 742, col: 8, offset: 23683},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonDocumentHeader387,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonDocumentHeader390,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1121, col: 5, offset: 34532},
												label: "revision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1121, col: 14, offset: 34541},
													expr: &actionExpr{
														pos: position{line: 1169, col: 21, offset: 35884},
														run: (*parser).callonDocumentHeader401,
														expr: &seqExpr{
															pos: position{line: 1169, col: 21, offset: 35884},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1169, col: 21, offset: 35884},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonDocumentHeader404,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1169, col: 28, offset: 35891},
																	expr: &litMatcher{
																		pos:        position{line: 1169, col: 29, offset: 35892},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1169, col: 33, offset: 35896},
																	label: "revision",
																	expr: &choiceExpr{
																		pos: position{line: 1170, col: 9, offset: 35915},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1170, col: 10, offset: 35916},
																				run: (*parser).callonDocumentHeader410,
																				expr: &seqExpr{
																					pos: position{line: 1170, col: 10, offset: 35916},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1170, col: 10, offset: 35916},
																							label: "revnumber",
																							expr: &choiceExpr{
																								pos: position{line: 1179, col: 27, offset: 36433},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1179, col: 27, offset: 36433},
																										run: (*parser).callonDocumentHeader414,
																										expr: &seqExpr{
																											pos: position{line: 1179, col: 27, offset: 36433},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1179, col: 27, offset: 36433},
																													val:        "v",
																													ignoreCase: true,
																													want:       "\"v\"i",
																												},
																												&charClassMatcher{
																													pos:        position{line: 1179, col: 32, offset: 36438},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1179, col: 38, offset: 36444},
																													expr: &charClassMatcher{
																														pos:        position{line: 1179, col: 38, offset: 36444},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1181, col: 5, offset: 36492},
																										run: (*parser).callonDocumentHeader420,
																										expr: &seqExpr{
																											pos: position{line: 1181, col: 5, offset: 36492},
																											exprs: []interface{}{
																												&zeroOrOneExpr{
																													pos: position{line: 1181, col: 5, offset: 36492},
																													expr: &litMatcher{
																														pos:        position{line: 1181, col: 5, offset: 36492},
																														val:        "v",
																														ignoreCase: true,
																														want:       "\"v\"i",
																													},
																												},
																												&charClassMatcher{
																													pos:        position{line: 1181, col: 11, offset: 36498},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 1181, col: 17, offset: 36504},
																													expr: &charClassMatcher{
																														pos:        position{line: 1181, col: 17, offset: 36504},
																														val:        "[^:,\\r\\n]",
																														chars:      []rune{':', ',', '\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1181, col: 28, offset: 36515},
																													expr: &actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonDocumentHeader428,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&andExpr{
																													pos: position{line: 1181, col: 35, offset: 36522},
																													expr: &litMatcher{
																														pos:        position{line: 1181, col: 36, offset: 36523},
																														val:        ",",
																														ignoreCase: false,
																														want:       "\",\"",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1170, col: 45, offset: 35951},
																							expr: &litMatcher{
																								pos:        position{line: 1170, col: 45, offset: 35951},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1170, col: 50, offset: 35956},
																							label: "revdate",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1170, col: 58, offset: 35964},
																								expr: &actionExpr{
																									pos: position{line: 1185, col: 25, offset: 36587},
																									run: (*parser).callonDocumentHeader436,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1185, col: 25, offset: 36587},
																										expr: &charClassMatcher{
																											pos:        position{line: 1185, col: 25, offset: 36587},
																											val:        "[^:\\r\\n]",
																											chars:      []rune{':', '\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1170, col: 82, offset: 35988},
																							expr: &litMatcher{
																								pos:        position{line: 1170, col: 82, offset: 35988},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1170, col: 87, offset: 35993},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1170, col: 97, offset: 36003},
																								expr: &actionExpr{
																									pos: position{line: 1189, col: 27, offset: 36659},
																									run: (*parser).callonDocumentHeader443,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1189, col: 27, offset: 36659},
																										expr: &charClassMatcher{
																											pos:        position{line: 1189, col: 27, offset: 36659},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1172, col: 15, offset: 36121},
																				run: (*parser).callonDocumentHeader446,
																				expr: &seqExpr{
																					pos: position{line: 1172, col: 15, offset: 36121},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1172, col: 15, offset: 36121},
																							label: "revdate",
																							expr: &actionExpr{
																								pos: position{line: 1185, col: 25, offset: 36587},
																								run: (*parser).callonDocumentHeader449,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1185, col: 25, offset: 36587},
																									expr: &charClassMatcher{
																										pos:        position{line: 1185, col: 25, offset: 36587},
																										val:        "[^:\\r\\n]",
																										chars:      []rune{':', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 1172, col: 46, offset: 36152},
																							expr: &litMatcher{
																								pos:        position{line: 1172, col: 46, offset: 36152},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1172, col: 51, offset: 36157},
																							label: "revremark",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1172, col: 61, offset: 36167},
																								expr: &actionExpr{
																									pos: position{line: 1189, col: 27, offset: 36659},
																									run: (*parser).callonDocumentHeader456,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1189, col: 27, offset: 36659},
																										expr: &charClassMatcher{
																											pos:        position{line: 1189, col: 27, offset: 36659},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonDocumentHeader460,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 34078},
							label: "extraElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1108, col: 19, offset: 34092},
								expr: &choiceExpr{
									pos: position{line: 1108, col: 20, offset: 34093},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1108, col: 20, offset: 34093},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 360, col: 19, offset: 10911},
											run: (*parser).callonDocumentHeader471,
											expr: &seqExpr{
												pos: position{line: 360, col: 19, offset: 10911},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 360, col: 19, offset: 10911},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 360, col: 24, offset: 10916},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															run: (*parser).callonDocumentHeader475,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9737},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9747},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9748},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 360, col: 45, offset: 10937},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 360, col: 49, offset: 10941},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentHeader482,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentHeader485,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 362, col: 9, offset: 11032},
											run: (*parser).callonDocumentHeader492,
											expr: &seqExpr{
												pos: position{line: 362, col: 9, offset: 11032},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 362, col: 9, offset: 11032},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 362, col: 13, offset: 11036},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															run: (*parser).callonDocumentHeader496,
															expr: &seqExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 318, col: 18, offset: 9737},
																		val:        "[_\\pL\\pN]",
																		chars:      []rune{'_'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 318, col: 28, offset: 9747},
																		expr: &charClassMatcher{
																			pos:        position{line: 318, col: 29, offset: 9748},
																			val:        "[-\\pL\\pN]",
																			chars:      []rune{'-'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 362, col: 34, offset: 11057},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 362, col: 39, offset: 11062},
														expr: &actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonDocumentHeader503,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentHeader506,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											run: (*parser).callonDocumentHeader513,
											expr: &seqExpr{
												pos: position{line: 2466, col: 22, offset: 79269},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2471, col: 31, offset: 79490},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2471, col: 36, offset: 79495},
														expr: &litMatcher{
															pos:        position{line: 2471, col: 37, offset: 79496},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2466, col: 49, offset: 79296},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															run: (*parser).callonDocumentHeader519,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2848, col: 13, offset: 89985},
																expr: &charClassMatcher{
																	pos:        position{line: 2848, col: 13, offset: 89985},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonDocumentHeader523,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 820, col: 5, offset: 26321},
											run: (*parser).callonDocumentHeader530,
											expr: &seqExpr{
												pos: position{line: 820, col: 5, offset: 26321},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 740, col: 5, offset: 23581},
														run: (*parser).callonDocumentHeader532,
														expr: &seqExpr{
															pos: position{line: 740, col: 5, offset: 23581},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 740, col: 5, offset: 23581},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 740, col: 16, offset: 23592},
																		run: (*parser).callonDocumentHeader535,
																		expr: &seqExpr{
																			pos: position{line: 740, col: 16, offset: 23592},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 740, col: 16, offset: 23592},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 740, col: 23, offset: 23599},
																					expr: &litMatcher{
																						pos:        position{line: 740, col: 23, offset: 23599},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 742, col: 8, offset: 23683},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonDocumentHeader541,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonDocumentHeader544,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 821, col: 5, offset: 26352},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 831, col: 5, offset: 26638},
															expr: &actionExpr{
																pos: position{line: 831, col: 6, offset: 26639},
																run: (*parser).callonDocumentHeader553,
																expr: &seqExpr{
																	pos: position{line: 831, col: 6, offset: 26639},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 831, col: 6, offset: 26639},
																			expr: &choiceExpr{
																				pos: position{line: 828, col: 29, offset: 26581},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						run: (*parser).callonDocumentHeader557,
																						expr: &seqExpr{
																							pos: position{line: 740, col: 5, offset: 23581},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 740, col: 5, offset: 23581},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										run: (*parser).callonDocumentHeader560,
																										expr: &seqExpr{
																											pos: position{line: 740, col: 16, offset: 23592},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 740, col: 16, offset: 23592},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 740, col: 23, offset: 23599},
																													expr: &litMatcher{
																														pos:        position{line: 740, col: 23, offset: 23599},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 742, col: 8, offset: 23683},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonDocumentHeader566,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonDocumentHeader569,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 832, col: 5, offset: 26669},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				run: (*parser).callonDocumentHeader579,
																				expr: &seqExpr{
																					pos: position{line: 811, col: 5, offset: 26085},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 812, col: 5, offset: 26160},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								run: (*parser).callonDocumentHeader584,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2848, col: 13, offset: 89985},
																									expr: &charClassMatcher{
																										pos:        position{line: 2848, col: 13, offset: 89985},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonDocumentHeader588,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 822, col: 5, offset: 26386},
														expr: &choiceExpr{
															pos: position{line: 828, col: 29, offset: 26581},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	run: (*parser).callonDocumentHeader597,
																	expr: &seqExpr{
																		pos: position{line: 740, col: 5, offset: 23581},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 740, col: 5, offset: 23581},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					run: (*parser).callonDocumentHeader600,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 16, offset: 23592},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 740, col: 16, offset: 23592},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 740, col: 23, offset: 23599},
																								expr: &litMatcher{
																									pos:        position{line: 740, col: 23, offset: 23599},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 742, col: 8, offset: 23683},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonDocumentHeader606,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonDocumentHeader609,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentTitle",
			pos:  position{line: 1112, col: 1, offset: 34290},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 34312},
				run: (*parser).callonDocumentTitle1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 5, offset: 34312},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 5, offset: 34312},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&actionExpr{
							pos: position{line: 2906, col: 11, offset: 91601},
							run: (*parser).callonDocumentTitle4,
							expr: &oneOrMoreExpr{
								pos: position{line: 2906, col: 11, offset: 91601},
								expr: &charClassMatcher{
									pos:        position{line: 2906, col: 11, offset: 91601},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1113, col: 16, offset: 34323},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 23, offset: 34330},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonDocumentTitle10,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorFullName",
			pos:  position{line: 1140, col: 1, offset: 35170},
			expr: &actionExpr{
				pos: position{line: 1141, col: 5, offset: 35201},
				run: (*parser).callonDocumentAuthorFullName1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 5, offset: 35201},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1141, col: 5, offset: 35201},
							label: "part1",
							expr: &actionExpr{
								pos: position{line: 1141, col: 12, offset: 35208},
								run: (*parser).callonDocumentAuthorFullName4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1141, col: 12, offset: 35208},
									expr: &charClassMatcher{
										pos:        position{line: 1141, col: 12, offset: 35208},
										val:        "[^<;\\r\\n ]",
										chars:      []rune{'<', ';', '\r', '\n', ' '},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1144, col: 5, offset: 35288},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonDocumentAuthorFullName8,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1145, col: 5, offset: 35299},
							label: "part2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1145, col: 11, offset: 35305},
								expr: &actionExpr{
									pos: position{line: 1145, col: 12, offset: 35306},
									run: (*parser).callonDocumentAuthorFullName12,
									expr: &oneOrMoreExpr{
										pos: position{line: 1145, col: 12, offset: 35306},
										expr: &charClassMatcher{
											pos:        position{line: 1145, col: 12, offset: 35306},
											val:        "[^<;\\r\\n ]",
											chars:      []rune{'<', ';', '\r', '\n', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1148, col: 5, offset: 35387},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonDocumentAuthorFullName16,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 35398},
							label: "part3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1149, col: 11, offset: 35404},
								expr: &actionExpr{
									pos: position{line: 1149, col: 12, offset: 35405},
									run: (*parser).callonDocumentAuthorFullName20,
									expr: &oneOrMoreExpr{
										pos: position{line: 1149, col: 12, offset: 35405},
										expr: &charClassMatcher{
											pos:        position{line: 1149, col: 12, offset: 35405},
											val:        "[^<;\\r\\n]",
											chars:      []rune{'<', ';', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1152, col: 5, offset: 35484},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonDocumentAuthorFullName24,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineButton",
			pos:  position{line: 1265, col: 1, offset: 39208},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 39229},
				run: (*parser).callonInlineButton1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 39229},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1266, col: 5, offset: 39229},
							run: (*parser).callonInlineButton3,
						},
						&litMatcher{
							pos:        position{line: 1269, col: 5, offset: 39288},
							val:        "btn:",
							ignoreCase: false,
							want:       "\"btn:\"",
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 12, offset: 39295},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 24, offset: 39307},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMenu",
			pos:  position{line: 1276, col: 1, offset: 39595},
			expr: &actionExpr{
				pos: position{line: 1277, col: 5, offset: 39614},
				run: (*parser).callonInlineMenu1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 5, offset: 39614},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1277, col: 5, offset: 39614},
							run: (*parser).callonInlineMenu3,
						},
						&litMatcher{
							pos:        position{line: 1280, col: 5, offset: 39673},
							val:        "menu:",
							ignoreCase: false,
							want:       "\"menu:\"",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 13, offset: 39681},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 2887, col: 7, offset: 91192},
								run: (*parser).callonInlineMenu6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2887, col: 7, offset: 91192},
									expr: &charClassMatcher{
										pos:        position{line: 2887, col: 7, offset: 91192},
										val:        "[^[]<>,]",
										chars:      []rune{'[', ']', '<', '>', ','},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 21, offset: 39689},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 33, offset: 39701},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1287, col: 1, offset: 40000},
			expr: &actionExpr{
				pos: position{line: 1287, col: 14, offset: 40013},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1287, col: 14, offset: 40013},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1287, col: 14, offset: 40013},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1287, col: 19, offset: 40018},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1287, col: 25, offset: 40024},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1287, col: 43, offset: 40042},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1291, col: 1, offset: 40111},
			expr: &actionExpr{
				pos: position{line: 1291, col: 21, offset: 40131},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1291, col: 21, offset: 40131},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1291, col: 30, offset: 40140},
						expr: &choiceExpr{
							pos: position{line: 1291, col: 31, offset: 40141},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2755, col: 5, offset: 87520},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 2755, col: 5, offset: 87520},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 2755, col: 5, offset: 87520},
												expr: &charClassMatcher{
													pos:        position{line: 2755, col: 5, offset: 87520},
													val:        "[\\pL\\pN]",
													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&choiceExpr{
												pos: position{line: 2771, col: 9, offset: 87859},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonIndexTermContent10,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&actionExpr{
														pos: position{line: 2801, col: 8, offset: 88554},
														run: (*parser).callonIndexTermContent12,
														expr: &seqExpr{
															pos: position{line: 2801, col: 9, offset: 88555},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2801, col: 9, offset: 88555},
																	val:        ".",
																	ignoreCase: false,
																	want:       "\".\"",
																},
																&andExpr{
																	pos: position{line: 2801, col: 13, offset: 88559},
																	expr: &notExpr{
																		pos: position{line: 2801, col: 15, offset: 88561},
																		expr: &litMatcher{
																			pos:        position{line: 2801, col: 16, offset: 88562},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2773, col: 11, offset: 87889},
														run: (*parser).callonIndexTermContent18,
													},
													&andExpr{
														pos: position{line: 2776, col: 11, offset: 87967},
														expr: &seqExpr{
															pos: position{line: 2777, col: 13, offset: 87982},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 2777, col: 13, offset: 87982},
																	expr: &seqExpr{
																		pos: position{line: 2777, col: 15, offset: 87984},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2777, col: 15, offset: 87984},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&notExpr{
																				pos: position{line: 2777, col: 19, offset: 87988},
																				expr: &choiceExpr{
																					pos: position{line: 2777, col: 21, offset: 87990},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonIndexTermContent26,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonIndexTermContent28,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2778, col: 13, offset: 88016},
																	expr: &litMatcher{
																		pos:        position{line: 2778, col: 14, offset: 88017},
																		val:        "@",
																		ignoreCase: false,
																		want:       "\"@\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1291, col: 44, offset: 40154},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 2902, col: 10, offset: 91540},
									run: (*parser).callonIndexTermContent38,
									expr: &charClassMatcher{
										pos:        position{line: 2902, col: 10, offset: 91540},
										val:        "[\\t ]",
										chars:      []rune{'\t', ' '},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2453, col: 5, offset: 78820},
									run: (*parser).callonIndexTermContent40,
									expr: &seqExpr{
										pos: position{line: 2453, col: 5, offset: 78820},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2453, col: 5, offset: 78820},
												run: (*parser).callonIndexTermContent42,
											},
											&labeledExpr{
												pos:   position{line: 2456, col: 5, offset: 78891},
												label: "element",
												expr: &actionExpr{
													pos: position{line: 2457, col: 9, offset: 78909},
													run: (*parser).callonIndexTermContent44,
													expr: &charClassMatcher{
														pos:        position{line: 2457, col: 10, offset: 78910},
														val:        "[<>&]",
														chars:      []rune{'<', '>', '&'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1198, col: 23, offset: 36969},
									run: (*parser).callonIndexTermContent46,
									expr: &seqExpr{
										pos: position{line: 1198, col: 23, offset: 36969},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1196, col: 32, offset: 36937},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1198, col: 51, offset: 36997},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1198, col: 56, offset: 37002},
													run: (*parser).callonIndexTermContent50,
													expr: &oneOrMoreExpr{
														pos: position{line: 1198, col: 56, offset: 37002},
														expr: &charClassMatcher{
															pos:        position{line: 1198, col: 56, offset: 37002},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1196, col: 32, offset: 36937},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1291, col: 105, offset: 40215},
									run: (*parser).callonIndexTermContent54,
									expr: &seqExpr{
										pos: position{line: 1291, col: 106, offset: 40216},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1291, col: 106, offset: 40216},
												expr: &litMatcher{
													pos:        position{line: 1291, col: 107, offset: 40217},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1291, col: 112, offset: 40222,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1311, col: 1, offset: 40931},
			expr: &actionExpr{
				pos: position{line: 1312, col: 5, offset: 40950},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 5, offset: 40950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1312, col: 5, offset: 40950},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 15, offset: 40960},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2860, col: 13, offset: 90240},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 2860, col: 13, offset: 90240},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2860, col: 13, offset: 90240},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2860, col: 20, offset: 90247},
												expr: &actionExpr{
													pos: position{line: 2868, col: 11, offset: 90509},
													run: (*parser).callonImageBlock9,
													expr: &choiceExpr{
														pos: position{line: 2868, col: 12, offset: 90510},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2868, col: 12, offset: 90510},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 24, offset: 90522},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 37, offset: 90535},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 48, offset: 90546},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 59, offset: 90557},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2860, col: 30, offset: 90257},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2860, col: 35, offset: 90262},
												expr: &choiceExpr{
													pos: position{line: 2860, col: 36, offset: 90263},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2873, col: 5, offset: 90621},
															run: (*parser).callonImageBlock19,
															expr: &seqExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		expr: &litMatcher{
																			pos:        position{line: 2873, col: 6, offset: 90622},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2874, col: 5, offset: 90646},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2874, col: 14, offset: 90655},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						run: (*parser).callonImageBlock26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2875, col: 9, offset: 90665},
																							expr: &charClassMatcher{
																								pos:        position{line: 2875, col: 10, offset: 90666},
																								val:        "[^\\r\\n[]�{,;?!>. ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2878, col: 11, offset: 90917},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2801, col: 8, offset: 88554},
																								run: (*parser).callonImageBlock30,
																								expr: &seqExpr{
																									pos: position{line: 2801, col: 9, offset: 88555},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2801, col: 9, offset: 88555},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																										&andExpr{
																											pos: position{line: 2801, col: 13, offset: 88559},
																											expr: &notExpr{
																												pos: position{line: 2801, col: 15, offset: 88561},
																												expr: &litMatcher{
																													pos:        position{line: 2801, col: 16, offset: 88562},
																													val:        "..",
																													ignoreCase: false,
																													want:       "\"..\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2878, col: 15, offset: 90921},
																								expr: &notExpr{
																									pos: position{line: 2878, col: 17, offset: 90923},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 19, offset: 90925},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonImageBlock41,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2879, col: 11, offset: 90949},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2807, col: 5, offset: 88736},
																								run: (*parser).callonImageBlock44,
																								expr: &choiceExpr{
																									pos: position{line: 2808, col: 9, offset: 88746},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2808, col: 10, offset: 88747},
																											val:        "[,;?)!/=-]",
																											chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 2809, col: 12, offset: 88822},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2809, col: 12, offset: 88822},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&andExpr{
																													pos: position{line: 2809, col: 16, offset: 88826},
																													expr: &choiceExpr{
																														pos: position{line: 2809, col: 18, offset: 88828},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2902, col: 10, offset: 91540},
																																run: (*parser).callonImageBlock51,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2902, col: 10, offset: 91540},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonImageBlock53,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													run: (*parser).callonImageBlock61,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2814, col: 14, offset: 89033},
																													val:        "[\"\\()]",
																													chars:      []rune{'"', '\'', '(', ')'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													run: (*parser).callonImageBlock64,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2820, col: 14, offset: 89179},
																													val:        "[:@]",
																													chars:      []rune{':', '@'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													run: (*parser).callonImageBlock67,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2826, col: 14, offset: 89313},
																													val:        "[*_`#]",
																													chars:      []rune{'*', '_', '`', '#'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													run: (*parser).callonImageBlock70,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2832, col: 14, offset: 89526},
																													val:        "[[]]",
																													chars:      []rune{'[', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2879, col: 23, offset: 90961},
																								expr: &notExpr{
																									pos: position{line: 2879, col: 25, offset: 90963},
																									expr: &choiceExpr{
																										pos: position{line: 2879, col: 27, offset: 90965},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonImageBlock77,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonImageBlock79,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonImageBlock81,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonImageBlock84,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonImageBlock88,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonImageBlock94,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonImageBlock98,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonImageBlock104,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonImageBlock108,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonImageBlock115,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonImageBlock120,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonImageBlock122,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonImageBlock126,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonImageBlock130,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonImageBlock137,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonImageBlock142,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonImageBlock144,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2881, col: 11, offset: 91036},
																						run: (*parser).callonImageBlock148,
																						expr: &litMatcher{
																							pos:        position{line: 2881, col: 11, offset: 91036},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1198, col: 23, offset: 36969},
															run: (*parser).callonImageBlock150,
															expr: &seqExpr{
																pos: position{line: 1198, col: 23, offset: 36969},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1198, col: 51, offset: 36997},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1198, col: 56, offset: 37002},
																			run: (*parser).callonImageBlock154,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1198, col: 56, offset: 37002},
																				expr: &charClassMatcher{
																					pos:        position{line: 1198, col: 56, offset: 37002},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 31, offset: 40976},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 43, offset: 40988},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1312, col: 61, offset: 41006},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonImageBlock161,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonImageBlock164,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1317, col: 1, offset: 41223},
			expr: &actionExpr{
				pos: position{line: 1317, col: 16, offset: 41238},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 16, offset: 41238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1317, col: 16, offset: 41238},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1317, col: 25, offset: 41247},
							expr: &litMatcher{
								pos:        position{line: 1317, col: 26, offset: 41248},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 30, offset: 41252},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 2860, col: 13, offset: 90240},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 2860, col: 13, offset: 90240},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 2860, col: 13, offset: 90240},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 2860, col: 20, offset: 90247},
												expr: &actionExpr{
													pos: position{line: 2868, col: 11, offset: 90509},
													run: (*parser).callonInlineImage11,
													expr: &choiceExpr{
														pos: position{line: 2868, col: 12, offset: 90510},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2868, col: 12, offset: 90510},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 24, offset: 90522},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 37, offset: 90535},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 48, offset: 90546},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 2868, col: 59, offset: 90557},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 2860, col: 30, offset: 90257},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 2860, col: 35, offset: 90262},
												expr: &choiceExpr{
													pos: position{line: 2860, col: 36, offset: 90263},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2873, col: 5, offset: 90621},
															run: (*parser).callonInlineImage21,
															expr: &seqExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		expr: &litMatcher{
																			pos:        position{line: 2873, col: 6, offset: 90622},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2874, col: 5, offset: 90646},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2874, col: 14, offset: 90655},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						run: (*parser).callonInlineImage28,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2875, col: 9, offset: 90665},
																							expr: &charClassMatcher{
																								pos:        position{line: 2875, col: 10, offset: 90666},
																								val:        "[^\\r\\n[]�{,;?!>. ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2878, col: 11, offset: 90917},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2801, col: 8, offset: 88554},
																								run: (*parser).callonInlineImage32,
																								expr: &seqExpr{
																									pos: position{line: 2801, col: 9, offset: 88555},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2801, col: 9, offset: 88555},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																										&andExpr{
																											pos: position{line: 2801, col: 13, offset: 88559},
																											expr: &notExpr{
																												pos: position{line: 2801, col: 15, offset: 88561},
																												expr: &litMatcher{
																													pos:        position{line: 2801, col: 16, offset: 88562},
																													val:        "..",
																													ignoreCase: false,
																													want:       "\"..\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2878, col: 15, offset: 90921},
																								expr: &notExpr{
																									pos: position{line: 2878, col: 17, offset: 90923},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 19, offset: 90925},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonInlineImage43,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2879, col: 11, offset: 90949},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2807, col: 5, offset: 88736},
																								run: (*parser).callonInlineImage46,
																								expr: &choiceExpr{
																									pos: position{line: 2808, col: 9, offset: 88746},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2808, col: 10, offset: 88747},
																											val:        "[,;?)!/=-]",
																											chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 2809, col: 12, offset: 88822},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2809, col: 12, offset: 88822},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&andExpr{
																													pos: position{line: 2809, col: 16, offset: 88826},
																													expr: &choiceExpr{
																														pos: position{line: 2809, col: 18, offset: 88828},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2902, col: 10, offset: 91540},
																																run: (*parser).callonInlineImage53,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2902, col: 10, offset: 91540},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonInlineImage55,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													run: (*parser).callonInlineImage63,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2814, col: 14, offset: 89033},
																													val:        "[\"\\()]",
																													chars:      []rune{'"', '\'', '(', ')'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													run: (*parser).callonInlineImage66,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2820, col: 14, offset: 89179},
																													val:        "[:@]",
																													chars:      []rune{':', '@'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													run: (*parser).callonInlineImage69,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2826, col: 14, offset: 89313},
																													val:        "[*_`#]",
																													chars:      []rune{'*', '_', '`', '#'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													run: (*parser).callonInlineImage72,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2832, col: 14, offset: 89526},
																													val:        "[[]]",
																													chars:      []rune{'[', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2879, col: 23, offset: 90961},
																								expr: &notExpr{
																									pos: position{line: 2879, col: 25, offset: 90963},
																									expr: &choiceExpr{
																										pos: position{line: 2879, col: 27, offset: 90965},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonInlineImage79,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonInlineImage81,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonInlineImage83,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonInlineImage86,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonInlineImage90,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonInlineImage96,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonInlineImage100,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonInlineImage106,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonInlineImage110,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonInlineImage117,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonInlineImage122,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonInlineImage124,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonInlineImage128,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonInlineImage132,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonInlineImage139,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonInlineImage144,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonInlineImage146,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2881, col: 11, offset: 91036},
																						run: (*parser).callonInlineImage150,
																						expr: &litMatcher{
																							pos:        position{line: 2881, col: 11, offset: 91036},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1198, col: 23, offset: 36969},
															run: (*parser).callonInlineImage152,
															expr: &seqExpr{
																pos: position{line: 1198, col: 23, offset: 36969},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1198, col: 51, offset: 36997},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1198, col: 56, offset: 37002},
																			run: (*parser).callonInlineImage156,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1198, col: 56, offset: 37002},
																				expr: &charClassMatcher{
																					pos:        position{line: 1198, col: 56, offset: 37002},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 46, offset: 41268},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 58, offset: 41280},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1324, col: 1, offset: 41676},
			expr: &actionExpr{
				pos: position{line: 1324, col: 15, offset: 41690},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 15, offset: 41690},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1324, col: 15, offset: 41690},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 23, offset: 41698},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1324, col: 29, offset: 41704},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1324, col: 29, offset: 41704},
									expr: &charClassMatcher{
										pos:        position{line: 1324, col: 29, offset: 41704},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 73, offset: 41748},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1324, col: 85, offset: 41760},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1331, col: 1, offset: 42126},
			expr: &actionExpr{
				pos: position{line: 1331, col: 19, offset: 42144},
				run: (*parser).callonInlineFootnote1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 19, offset: 42144},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1331, col: 19, offset: 42144},
							val:        "footnote:",
							ignoreCase: false,
							want:       "\"footnote:\"",
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 31, offset: 42156},
							label: "ref",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 35, offset: 42160},
								expr: &actionExpr{
									pos: position{line: 2750, col: 14, offset: 87447},
									run: (*parser).callonInlineFootnote6,
									expr: &oneOrMoreExpr{
										pos: position{line: 2750, col: 14, offset: 87447},
										expr: &charClassMatcher{
											pos:        position{line: 2750, col: 14, offset: 87447},
											val:        "[\\pL\\pN]",
											classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 50, offset: 42175},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 54, offset: 42179},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1331, col: 64, offset: 42189},
								name: "FootnoteElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 82, offset: 42207},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElements",
			pos:  position{line: 1337, col: 1, offset: 42364},
			expr: &actionExpr{
				pos: position{line: 1337, col: 21, offset: 42384},
				run: (*parser).callonFootnoteElements1,
				expr: &labeledExpr{
					pos:   position{line: 1337, col: 21, offset: 42384},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1337, col: 30, offset: 42393},
						expr: &ruleRefExpr{
							pos:  position{line: 1337, col: 31, offset: 42394},
							name: "FootnoteElement",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElement",
			pos:  position{line: 1341, col: 1, offset: 42486},
			expr: &actionExpr{
				pos: position{line: 1342, col: 5, offset: 42510},
				run: (*parser).callonFootnoteElement1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 5, offset: 42510},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1342, col: 5, offset: 42510},
							expr: &litMatcher{
								pos:        position{line: 1342, col: 6, offset: 42511},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 5, offset: 42520},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1344, col: 9, offset: 42538},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2755, col: 5, offset: 87520},
										run: (*parser).callonFootnoteElement7,
										expr: &seqExpr{
											pos: position{line: 2755, col: 5, offset: 87520},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2755, col: 5, offset: 87520},
													expr: &charClassMatcher{
														pos:        position{line: 2755, col: 5, offset: 87520},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2771, col: 9, offset: 87859},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonFootnoteElement12,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 8, offset: 88554},
															run: (*parser).callonFootnoteElement14,
															expr: &seqExpr{
																pos: position{line: 2801, col: 9, offset: 88555},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2801, col: 9, offset: 88555},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&andExpr{
																		pos: position{line: 2801, col: 13, offset: 88559},
																		expr: &notExpr{
																			pos: position{line: 2801, col: 15, offset: 88561},
																			expr: &litMatcher{
																				pos:        position{line: 2801, col: 16, offset: 88562},
																				val:        "..",
																				ignoreCase: false,
																				want:       "\"..\"",
																			},
																		},
																	},
																},
															},
														},
														&andCodeExpr{
															pos: position{line: 2773, col: 11, offset: 87889},
															run: (*parser).callonFootnoteElement20,
														},
														&andExpr{
															pos: position{line: 2776, col: 11, offset: 87967},
															expr: &seqExpr{
																pos: position{line: 2777, col: 13, offset: 87982},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2777, col: 13, offset: 87982},
																		expr: &seqExpr{
																			pos: position{line: 2777, col: 15, offset: 87984},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2777, col: 15, offset: 87984},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																				&notExpr{
																					pos: position{line: 2777, col: 19, offset: 87988},
																					expr: &choiceExpr{
																						pos: position{line: 2777, col: 21, offset: 87990},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonFootnoteElement28,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonFootnoteElement30,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2778, col: 13, offset: 88016},
																		expr: &litMatcher{
																			pos:        position{line: 2778, col: 14, offset: 88017},
																			val:        "@",
																			ignoreCase: false,
																			want:       "\"@\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2906, col: 11, offset: 91601},
										run: (*parser).callonFootnoteElement39,
										expr: &oneOrMoreExpr{
											pos: position{line: 2906, col: 11, offset: 91601},
											expr: &charClassMatcher{
												pos:        position{line: 2906, col: 11, offset: 91601},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 8, offset: 88554},
										run: (*parser).callonFootnoteElement42,
										expr: &seqExpr{
											pos: position{line: 2801, col: 9, offset: 88555},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2801, col: 9, offset: 88555},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&andExpr{
													pos: position{line: 2801, col: 13, offset: 88559},
													expr: &notExpr{
														pos: position{line: 2801, col: 15, offset: 88561},
														expr: &litMatcher{
															pos:        position{line: 2801, col: 16, offset: 88562},
															val:        "..",
															ignoreCase: false,
															want:       "\"..\"",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2484, col: 5, offset: 79986},
										run: (*parser).callonFootnoteElement48,
										expr: &seqExpr{
											pos: position{line: 2484, col: 5, offset: 79986},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2484, col: 5, offset: 79986},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2484, col: 10, offset: 79991},
													expr: &charClassMatcher{
														pos:        position{line: 2484, col: 11, offset: 79992},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2490, col: 5, offset: 80184},
										run: (*parser).callonFootnoteElement53,
										expr: &seqExpr{
											pos: position{line: 2490, col: 5, offset: 80184},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2490, col: 5, offset: 80184},
													run: (*parser).callonFootnoteElement55,
												},
												&andCodeExpr{
													pos: position{line: 2493, col: 5, offset: 80250},
													run: (*parser).callonFootnoteElement56,
												},
												&litMatcher{
													pos:        position{line: 2497, col: 5, offset: 80375},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2497, col: 9, offset: 80379},
													expr: &charClassMatcher{
														pos:        position{line: 2497, col: 10, offset: 80380},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1348, col: 11, offset: 42619},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 11, offset: 42635},
										name: "Replacement",
									},
									&ruleRefExpr{
										pos:  position{line: 1350, col: 11, offset: 42657},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2807, col: 5, offset: 88736},
										run: (*parser).callonFootnoteElement63,
										expr: &choiceExpr{
											pos: position{line: 2808, col: 9, offset: 88746},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2808, col: 10, offset: 88747},
													val:        "[,;?)!/=-]",
													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2809, col: 12, offset: 88822},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2809, col: 12, offset: 88822},
															val:        ":",
															ignoreCase: false,
															want:       "\":\"",
														},
														&andExpr{
															pos: position{line: 2809, col: 16, offset: 88826},
															expr: &choiceExpr{
																pos: position{line: 2809, col: 18, offset: 88828},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonFootnoteElement70,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonFootnoteElement72,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2811, col: 13, offset: 88897},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2811, col: 13, offset: 88897},
															run: (*parser).callonFootnoteElement80,
														},
														&charClassMatcher{
															pos:        position{line: 2814, col: 14, offset: 89033},
															val:        "[\"\\()]",
															chars:      []rune{'"', '\'', '(', ')'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89090},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89090},
															run: (*parser).callonFootnoteElement83,
														},
														&charClassMatcher{
															pos:        position{line: 2820, col: 14, offset: 89179},
															val:        "[:@]",
															chars:      []rune{':', '@'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89224},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89224},
															run: (*parser).callonFootnoteElement86,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89313},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2829, col: 13, offset: 89370},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2829, col: 13, offset: 89370},
															run: (*parser).callonFootnoteElement89,
														},
														&charClassMatcher{
															pos:        position{line: 2832, col: 14, offset: 89526},
															val:        "[[]]",
															chars:      []rune{'[', ']'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1206, col: 5, offset: 37415},
										run: (*parser).callonFootnoteElement91,
										expr: &seqExpr{
											pos: position{line: 1206, col: 5, offset: 37415},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 1206, col: 5, offset: 37415},
													run: (*parser).callonFootnoteElement93,
												},
												&litMatcher{
													pos:        position{line: 1209, col: 5, offset: 37486},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&andCodeExpr{
													pos: position{line: 1210, col: 5, offset: 37494},
													run: (*parser).callonFootnoteElement95,
												},
												&zeroOrMoreExpr{
													pos: position{line: 1214, col: 5, offset: 37581},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonFootnoteElement97,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 1214, col: 12, offset: 37588},
													expr: &choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonFootnoteElement101,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 636, col: 5, offset: 20111},
										run: (*parser).callonFootnoteElement108,
										expr: &seqExpr{
											pos: position{line: 636, col: 5, offset: 20111},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 636, col: 5, offset: 20111},
													run: (*parser).callonFootnoteElement110,
												},
												&labeledExpr{
													pos:   position{line: 639, col: 5, offset: 20178},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 639, col: 14, offset: 20187},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 645, col: 5, offset: 20316},
																run: (*parser).callonFootnoteElement113,
																expr: &seqExpr{
																	pos: position{line: 645, col: 5, offset: 20316},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 645, col: 5, offset: 20316},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 645, col: 13, offset: 20324},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonFootnoteElement117,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 645, col: 32, offset: 20343},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 652, col: 5, offset: 20584},
																run: (*parser).callonFootnoteElement123,
																expr: &seqExpr{
																	pos: position{line: 652, col: 5, offset: 20584},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 652, col: 5, offset: 20584},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 652, col: 9, offset: 20588},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonFootnoteElement127,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 652, col: 28, offset: 20607},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 658, col: 25, offset: 20788},
																run: (*parser).callonFootnoteElement133,
																expr: &seqExpr{
																	pos: position{line: 658, col: 25, offset: 20788},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 658, col: 25, offset: 20788},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 37, offset: 20800},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonFootnoteElement137,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 56, offset: 20819},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 658, col: 62, offset: 20825},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonFootnoteElement144,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonFootnoteElement149,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonFootnoteElement151,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 658, col: 78, offset: 20841},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 662, col: 25, offset: 20959},
																run: (*parser).callonFootnoteElement155,
																expr: &seqExpr{
																	pos: position{line: 662, col: 25, offset: 20959},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 662, col: 25, offset: 20959},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 38, offset: 20972},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonFootnoteElement159,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 57, offset: 20991},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 662, col: 63, offset: 20997},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonFootnoteElement166,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonFootnoteElement171,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonFootnoteElement173,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 662, col: 79, offset: 21013},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2453, col: 5, offset: 78820},
										run: (*parser).callonFootnoteElement177,
										expr: &seqExpr{
											pos: position{line: 2453, col: 5, offset: 78820},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2453, col: 5, offset: 78820},
													run: (*parser).callonFootnoteElement179,
												},
												&labeledExpr{
													pos:   position{line: 2456, col: 5, offset: 78891},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2457, col: 9, offset: 78909},
														run: (*parser).callonFootnoteElement181,
														expr: &charClassMatcher{
															pos:        position{line: 2457, col: 10, offset: 78910},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2911, col: 12, offset: 91711},
										run: (*parser).callonFootnoteElement183,
										expr: &choiceExpr{
											pos: position{line: 2911, col: 13, offset: 91712},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2911, col: 13, offset: 91712},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 20, offset: 91719},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 29, offset: 91728},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2841, col: 12, offset: 89767},
										run: (*parser).callonFootnoteElement188,
										expr: &charClassMatcher{
											pos:        position{line: 2841, col: 12, offset: 89767},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1390, col: 1, offset: 44553},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 21, offset: 44573},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1390, col: 21, offset: 44573},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1390, col: 21, offset: 44573},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1390, col: 21, offset: 44573},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 30, offset: 44582},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1390, col: 38, offset: 44590},
										expr: &actionExpr{
											pos: position{line: 1396, col: 30, offset: 44916},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1396, col: 30, offset: 44916},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 67, offset: 44619},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1392, col: 9, offset: 44723},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1392, col: 9, offset: 44723},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1392, col: 9, offset: 44723},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 19, offset: 44733},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1392, col: 27, offset: 44741},
										expr: &choiceExpr{
											pos: position{line: 1392, col: 28, offset: 44742},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1392, col: 28, offset: 44742},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1396, col: 30, offset: 44916},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1396, col: 30, offset: 44916},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 69, offset: 44783},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1403, col: 1, offset: 45172},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 9, offset: 45180},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1406, col: 5, offset: 45249},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1406, col: 5, offset: 45249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1406, col: 5, offset: 45249},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1407, col: 5, offset: 45258},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2864, col: 23, offset: 90389},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 2864, col: 23, offset: 90389},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2864, col: 23, offset: 90389},
													expr: &litMatcher{
														pos:        position{line: 2864, col: 24, offset: 90390},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 28, offset: 90394},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2868, col: 11, offset: 90509},
														run: (*parser).callonLink11,
														expr: &choiceExpr{
															pos: position{line: 2868, col: 12, offset: 90510},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2868, col: 12, offset: 90510},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 24, offset: 90522},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 37, offset: 90535},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 48, offset: 90546},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 59, offset: 90557},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 44, offset: 90410},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 49, offset: 90415},
														expr: &actionExpr{
															pos: position{line: 2873, col: 5, offset: 90621},
															run: (*parser).callonLink20,
															expr: &seqExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		expr: &litMatcher{
																			pos:        position{line: 2873, col: 6, offset: 90622},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2874, col: 5, offset: 90646},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2874, col: 14, offset: 90655},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						run: (*parser).callonLink27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2875, col: 9, offset: 90665},
																							expr: &charClassMatcher{
																								pos:        position{line: 2875, col: 10, offset: 90666},
																								val:        "[^\\r\\n[]�{,;?!>. ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2878, col: 11, offset: 90917},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2801, col: 8, offset: 88554},
																								run: (*parser).callonLink31,
																								expr: &seqExpr{
																									pos: position{line: 2801, col: 9, offset: 88555},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2801, col: 9, offset: 88555},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																										&andExpr{
																											pos: position{line: 2801, col: 13, offset: 88559},
																											expr: &notExpr{
																												pos: position{line: 2801, col: 15, offset: 88561},
																												expr: &litMatcher{
																													pos:        position{line: 2801, col: 16, offset: 88562},
																													val:        "..",
																													ignoreCase: false,
																													want:       "\"..\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2878, col: 15, offset: 90921},
																								expr: &notExpr{
																									pos: position{line: 2878, col: 17, offset: 90923},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 19, offset: 90925},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonLink42,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2879, col: 11, offset: 90949},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2807, col: 5, offset: 88736},
																								run: (*parser).callonLink45,
																								expr: &choiceExpr{
																									pos: position{line: 2808, col: 9, offset: 88746},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2808, col: 10, offset: 88747},
																											val:        "[,;?)!/=-]",
																											chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 2809, col: 12, offset: 88822},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2809, col: 12, offset: 88822},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&andExpr{
																													pos: position{line: 2809, col: 16, offset: 88826},
																													expr: &choiceExpr{
																														pos: position{line: 2809, col: 18, offset: 88828},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2902, col: 10, offset: 91540},
																																run: (*parser).callonLink52,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2902, col: 10, offset: 91540},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonLink54,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													run: (*parser).callonLink62,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2814, col: 14, offset: 89033},
																													val:        "[\"\\()]",
																													chars:      []rune{'"', '\'', '(', ')'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													run: (*parser).callonLink65,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2820, col: 14, offset: 89179},
																													val:        "[:@]",
																													chars:      []rune{':', '@'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													run: (*parser).callonLink68,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2826, col: 14, offset: 89313},
																													val:        "[*_`#]",
																													chars:      []rune{'*', '_', '`', '#'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													run: (*parser).callonLink71,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2832, col: 14, offset: 89526},
																													val:        "[[]]",
																													chars:      []rune{'[', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2879, col: 23, offset: 90961},
																								expr: &notExpr{
																									pos: position{line: 2879, col: 25, offset: 90963},
																									expr: &choiceExpr{
																										pos: position{line: 2879, col: 27, offset: 90965},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonLink78,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonLink80,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonLink82,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonLink85,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonLink89,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonLink95,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonLink99,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonLink105,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonLink109,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonLink116,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonLink121,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonLink123,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonLink127,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonLink131,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonLink138,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonLink143,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonLink145,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2881, col: 11, offset: 91036},
																						run: (*parser).callonLink149,
																						expr: &litMatcher{
																							pos:        position{line: 2881, col: 11, offset: 91036},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1412, col: 5, offset: 45477},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 19, offset: 45190},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 34, offset: 45205},
						name: "ExternalLink",
					},
					&actionExpr{
						pos: position{line: 1441, col: 17, offset: 46470},
						run: (*parser).callonLink154,
						expr: &seqExpr{
							pos: position{line: 1441, col: 17, offset: 46470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1441, col: 17, offset: 46470},
									label: "local",
									expr: &actionExpr{
										pos: position{line: 1446, col: 5, offset: 46635},
										run: (*parser).callonLink157,
										expr: &seqExpr{
											pos: position{line: 1446, col: 5, offset: 46635},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1446, col: 5, offset: 46635},
													label: "local",
													expr: &actionExpr{
														pos: position{line: 1446, col: 12, offset: 46642},
														run: (*parser).callonLink160,
														expr: &oneOrMoreExpr{
															pos: position{line: 1446, col: 12, offset: 46642},
															expr: &charClassMatcher{
																pos:        position{line: 1446, col: 12, offset: 46642},
																val:        "[!#$%&\\*=?^_`{|}~.+-/\\pL\\pN]",
																chars:      []rune{'!', '#', '$', '%', '&', '\'', '*', '=', '?', '^', '_', '`', '{', '|', '}', '~', '.'},
																ranges:     []rune{'+', '/'},
																classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1449, col: 5, offset: 46726},
													run: (*parser).callonLink163,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 43, offset: 46496},
									val:        "@",
									ignoreCase: false,
									want:       "\"@\"",
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 47, offset: 46500},
									label: "domain",
									expr: &actionExpr{
										pos: position{line: 1458, col: 23, offset: 47020},
										run: (*parser).callonLink166,
										expr: &seqExpr{
											pos: position{line: 1458, col: 23, offset: 47020},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1458, col: 23, offset: 47020},
													label: "domain",
													expr: &actionExpr{
														pos: position{line: 1458, col: 31, offset: 47028},
														run: (*parser).callonLink169,
														expr: &seqExpr{
															pos: position{line: 1458, col: 31, offset: 47028},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 1458, col: 31, offset: 47028},
																	expr: &charClassMatcher{
																		pos:        position{line: 1458, col: 31, offset: 47028},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1458, col: 41, offset: 47038},
																	expr: &seqExpr{
																		pos: position{line: 1458, col: 42, offset: 47039},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1458, col: 42, offset: 47039},
																				val:        ".",
																				ignoreCase: false,
																				want:       "\".\"",
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 1458, col: 46, offset: 47043},
																				expr: &charClassMatcher{
																					pos:        position{line: 1458, col: 46, offset: 47043},
																					val:        "[-\\pL\\pN]",
																					chars:      []rune{'-'},
																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1461, col: 5, offset: 47104},
													run: (*parser).callonLink178,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1418, col: 1, offset: 45625},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 5, offset: 45661},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1420, col: 5, offset: 45661},
						run: (*parser).callonRelativeLink2,
						expr: &seqExpr{
							pos: position{line: 1420, col: 5, offset: 45661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1420, col: 5, offset: 45661},
									val:        "\\link:",
									ignoreCase: false,
									want:       "\"\\\\link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 17, offset: 45673},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2860, col: 13, offset: 90240},
										run: (*parser).callonRelativeLink6,
										expr: &seqExpr{
											pos: position{line: 2860, col: 13, offset: 90240},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2860, col: 13, offset: 90240},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2860, col: 20, offset: 90247},
														expr: &actionExpr{
															pos: position{line: 2868, col: 11, offset: 90509},
															run: (*parser).callonRelativeLink10,
															expr: &choiceExpr{
																pos: position{line: 2868, col: 12, offset: 90510},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2868, col: 12, offset: 90510},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 24, offset: 90522},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 37, offset: 90535},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 48, offset: 90546},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 59, offset: 90557},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2860, col: 30, offset: 90257},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2860, col: 35, offset: 90262},
														expr: &choiceExpr{
															pos: position{line: 2860, col: 36, offset: 90263},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2873, col: 5, offset: 90621},
																	run: (*parser).callonRelativeLink20,
																	expr: &seqExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2873, col: 5, offset: 90621},
																				expr: &litMatcher{
																					pos:        position{line: 2873, col: 6, offset: 90622},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2874, col: 5, offset: 90646},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2874, col: 14, offset: 90655},
																					expr: &choiceExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2875, col: 9, offset: 90665},
																								run: (*parser).callonRelativeLink27,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2875, col: 9, offset: 90665},
																									expr: &charClassMatcher{
																										pos:        position{line: 2875, col: 10, offset: 90666},
																										val:        "[^\\r\\n[]�{,;?!>. ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2878, col: 11, offset: 90917},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2801, col: 8, offset: 88554},
																										run: (*parser).callonRelativeLink31,
																										expr: &seqExpr{
																											pos: position{line: 2801, col: 9, offset: 88555},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2801, col: 9, offset: 88555},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																												&andExpr{
																													pos: position{line: 2801, col: 13, offset: 88559},
																													expr: &notExpr{
																														pos: position{line: 2801, col: 15, offset: 88561},
																														expr: &litMatcher{
																															pos:        position{line: 2801, col: 16, offset: 88562},
																															val:        "..",
																															ignoreCase: false,
																															want:       "\"..\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2878, col: 15, offset: 90921},
																										expr: &notExpr{
																											pos: position{line: 2878, col: 17, offset: 90923},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 19, offset: 90925},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonRelativeLink42,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2879, col: 11, offset: 90949},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2807, col: 5, offset: 88736},
																										run: (*parser).callonRelativeLink45,
																										expr: &choiceExpr{
																											pos: position{line: 2808, col: 9, offset: 88746},
																											alternatives: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2808, col: 10, offset: 88747},
																													val:        "[,;?)!/=-]",
																													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&seqExpr{
																													pos: position{line: 2809, col: 12, offset: 88822},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2809, col: 12, offset: 88822},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&andExpr{
																															pos: position{line: 2809, col: 16, offset: 88826},
																															expr: &choiceExpr{
																																pos: position{line: 2809, col: 18, offset: 88828},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2902, col: 10, offset: 91540},
																																		run: (*parser).callonRelativeLink52,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 10, offset: 91540},
																																			val:        "[\\t ]",
																																			chars:      []rune{'\t', ' '},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2911, col: 12, offset: 91711},
																																		run: (*parser).callonRelativeLink54,
																																		expr: &choiceExpr{
																																			pos: position{line: 2911, col: 13, offset: 91712},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 13, offset: 91712},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 20, offset: 91719},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 29, offset: 91728},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2921, col: 8, offset: 91888},
																																		expr: &anyMatcher{
																																			line: 2921, col: 9, offset: 91889,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2811, col: 13, offset: 88897},
																															run: (*parser).callonRelativeLink62,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2814, col: 14, offset: 89033},
																															val:        "[\"\\()]",
																															chars:      []rune{'"', '\'', '(', ')'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2817, col: 13, offset: 89090},
																															run: (*parser).callonRelativeLink65,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2820, col: 14, offset: 89179},
																															val:        "[:@]",
																															chars:      []rune{':', '@'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2823, col: 13, offset: 89224},
																															run: (*parser).callonRelativeLink68,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2826, col: 14, offset: 89313},
																															val:        "[*_`#]",
																															chars:      []rune{'*', '_', '`', '#'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2829, col: 13, offset: 89370},
																															run: (*parser).callonRelativeLink71,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2832, col: 14, offset: 89526},
																															val:        "[[]]",
																															chars:      []rune{'[', ']'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2879, col: 23, offset: 90961},
																										expr: &notExpr{
																											pos: position{line: 2879, col: 25, offset: 90963},
																											expr: &choiceExpr{
																												pos: position{line: 2879, col: 27, offset: 90965},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonRelativeLink78,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 636, col: 5, offset: 20111},
																								run: (*parser).callonRelativeLink80,
																								expr: &seqExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 636, col: 5, offset: 20111},
																											run: (*parser).callonRelativeLink82,
																										},
																										&labeledExpr{
																											pos:   position{line: 639, col: 5, offset: 20178},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 639, col: 14, offset: 20187},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 645, col: 5, offset: 20316},
																														run: (*parser).callonRelativeLink85,
																														expr: &seqExpr{
																															pos: position{line: 645, col: 5, offset: 20316},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 645, col: 5, offset: 20316},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 645, col: 13, offset: 20324},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink89,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 645, col: 32, offset: 20343},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 652, col: 5, offset: 20584},
																														run: (*parser).callonRelativeLink95,
																														expr: &seqExpr{
																															pos: position{line: 652, col: 5, offset: 20584},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 652, col: 5, offset: 20584},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 652, col: 9, offset: 20588},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink99,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 652, col: 28, offset: 20607},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 658, col: 25, offset: 20788},
																														run: (*parser).callonRelativeLink105,
																														expr: &seqExpr{
																															pos: position{line: 658, col: 25, offset: 20788},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 658, col: 25, offset: 20788},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 37, offset: 20800},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink109,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 56, offset: 20819},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 658, col: 62, offset: 20825},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonRelativeLink116,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonRelativeLink121,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonRelativeLink123,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 658, col: 78, offset: 20841},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 662, col: 25, offset: 20959},
																														run: (*parser).callonRelativeLink127,
																														expr: &seqExpr{
																															pos: position{line: 662, col: 25, offset: 20959},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 662, col: 25, offset: 20959},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 38, offset: 20972},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink131,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 57, offset: 20991},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 662, col: 63, offset: 20997},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonRelativeLink138,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonRelativeLink143,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonRelativeLink145,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 662, col: 79, offset: 21013},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2881, col: 11, offset: 91036},
																								run: (*parser).callonRelativeLink149,
																								expr: &litMatcher{
																									pos:        position{line: 2881, col: 11, offset: 91036},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1198, col: 23, offset: 36969},
																	run: (*parser).callonRelativeLink151,
																	expr: &seqExpr{
																		pos: position{line: 1198, col: 23, offset: 36969},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1198, col: 51, offset: 36997},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1198, col: 56, offset: 37002},
																					run: (*parser).callonRelativeLink155,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1198, col: 56, offset: 37002},
																						expr: &charClassMatcher{
																							pos:        position{line: 1198, col: 56, offset: 37002},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1420, col: 32, offset: 45688},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1420, col: 44, offset: 45700},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 45832},
						run: (*parser).callonRelativeLink161,
						expr: &seqExpr{
							pos: position{line: 1425, col: 5, offset: 45832},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1425, col: 5, offset: 45832},
									val:        "link:",
									ignoreCase: false,
									want:       "\"link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 13, offset: 45840},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2860, col: 13, offset: 90240},
										run: (*parser).callonRelativeLink165,
										expr: &seqExpr{
											pos: position{line: 2860, col: 13, offset: 90240},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 2860, col: 13, offset: 90240},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 2860, col: 20, offset: 90247},
														expr: &actionExpr{
															pos: position{line: 2868, col: 11, offset: 90509},
															run: (*parser).callonRelativeLink169,
															expr: &choiceExpr{
																pos: position{line: 2868, col: 12, offset: 90510},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2868, col: 12, offset: 90510},
																		val:        "http://",
																		ignoreCase: false,
																		want:       "\"http://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 24, offset: 90522},
																		val:        "https://",
																		ignoreCase: false,
																		want:       "\"https://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 37, offset: 90535},
																		val:        "ftp://",
																		ignoreCase: false,
																		want:       "\"ftp://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 48, offset: 90546},
																		val:        "irc://",
																		ignoreCase: false,
																		want:       "\"irc://\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2868, col: 59, offset: 90557},
																		val:        "mailto:",
																		ignoreCase: false,
																		want:       "\"mailto:\"",
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2860, col: 30, offset: 90257},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2860, col: 35, offset: 90262},
														expr: &choiceExpr{
															pos: position{line: 2860, col: 36, offset: 90263},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2873, col: 5, offset: 90621},
																	run: (*parser).callonRelativeLink179,
																	expr: &seqExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2873, col: 5, offset: 90621},
																				expr: &litMatcher{
																					pos:        position{line: 2873, col: 6, offset: 90622},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2874, col: 5, offset: 90646},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2874, col: 14, offset: 90655},
																					expr: &choiceExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2875, col: 9, offset: 90665},
																								run: (*parser).callonRelativeLink186,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2875, col: 9, offset: 90665},
																									expr: &charClassMatcher{
																										pos:        position{line: 2875, col: 10, offset: 90666},
																										val:        "[^\\r\\n[]�{,;?!>. ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2878, col: 11, offset: 90917},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2801, col: 8, offset: 88554},
																										run: (*parser).callonRelativeLink190,
																										expr: &seqExpr{
																											pos: position{line: 2801, col: 9, offset: 88555},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2801, col: 9, offset: 88555},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																												&andExpr{
																													pos: position{line: 2801, col: 13, offset: 88559},
																													expr: &notExpr{
																														pos: position{line: 2801, col: 15, offset: 88561},
																														expr: &litMatcher{
																															pos:        position{line: 2801, col: 16, offset: 88562},
																															val:        "..",
																															ignoreCase: false,
																															want:       "\"..\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2878, col: 15, offset: 90921},
																										expr: &notExpr{
																											pos: position{line: 2878, col: 17, offset: 90923},
																											expr: &choiceExpr{
																												pos: position{line: 2878, col: 19, offset: 90925},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonRelativeLink201,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 2879, col: 11, offset: 90949},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 2807, col: 5, offset: 88736},
																										run: (*parser).callonRelativeLink204,
																										expr: &choiceExpr{
																											pos: position{line: 2808, col: 9, offset: 88746},
																											alternatives: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 2808, col: 10, offset: 88747},
																													val:        "[,;?)!/=-]",
																													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&seqExpr{
																													pos: position{line: 2809, col: 12, offset: 88822},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2809, col: 12, offset: 88822},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&andExpr{
																															pos: position{line: 2809, col: 16, offset: 88826},
																															expr: &choiceExpr{
																																pos: position{line: 2809, col: 18, offset: 88828},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 2902, col: 10, offset: 91540},
																																		run: (*parser).callonRelativeLink211,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 10, offset: 91540},
																																			val:        "[\\t ]",
																																			chars:      []rune{'\t', ' '},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 2911, col: 12, offset: 91711},
																																		run: (*parser).callonRelativeLink213,
																																		expr: &choiceExpr{
																																			pos: position{line: 2911, col: 13, offset: 91712},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 13, offset: 91712},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 20, offset: 91719},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 29, offset: 91728},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 2921, col: 8, offset: 91888},
																																		expr: &anyMatcher{
																																			line: 2921, col: 9, offset: 91889,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2811, col: 13, offset: 88897},
																															run: (*parser).callonRelativeLink221,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2814, col: 14, offset: 89033},
																															val:        "[\"\\()]",
																															chars:      []rune{'"', '\'', '(', ')'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2817, col: 13, offset: 89090},
																															run: (*parser).callonRelativeLink224,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2820, col: 14, offset: 89179},
																															val:        "[:@]",
																															chars:      []rune{':', '@'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2823, col: 13, offset: 89224},
																															run: (*parser).callonRelativeLink227,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2826, col: 14, offset: 89313},
																															val:        "[*_`#]",
																															chars:      []rune{'*', '_', '`', '#'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&seqExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													exprs: []interface{}{
																														&andCodeExpr{
																															pos: position{line: 2829, col: 13, offset: 89370},
																															run: (*parser).callonRelativeLink230,
																														},
																														&charClassMatcher{
																															pos:        position{line: 2832, col: 14, offset: 89526},
																															val:        "[[]]",
																															chars:      []rune{'[', ']'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&andExpr{
																										pos: position{line: 2879, col: 23, offset: 90961},
																										expr: &notExpr{
																											pos: position{line: 2879, col: 25, offset: 90963},
																											expr: &choiceExpr{
																												pos: position{line: 2879, col: 27, offset: 90965},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 2921, col: 8, offset: 91888},
																														expr: &anyMatcher{
																															line: 2921, col: 9, offset: 91889,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonRelativeLink237,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 636, col: 5, offset: 20111},
																								run: (*parser).callonRelativeLink239,
																								expr: &seqExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 636, col: 5, offset: 20111},
																											run: (*parser).callonRelativeLink241,
																										},
																										&labeledExpr{
																											pos:   position{line: 639, col: 5, offset: 20178},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 639, col: 14, offset: 20187},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 645, col: 5, offset: 20316},
																														run: (*parser).callonRelativeLink244,
																														expr: &seqExpr{
																															pos: position{line: 645, col: 5, offset: 20316},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 645, col: 5, offset: 20316},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 645, col: 13, offset: 20324},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink248,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 645, col: 32, offset: 20343},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 652, col: 5, offset: 20584},
																														run: (*parser).callonRelativeLink254,
																														expr: &seqExpr{
																															pos: position{line: 652, col: 5, offset: 20584},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 652, col: 5, offset: 20584},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 652, col: 9, offset: 20588},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink258,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 652, col: 28, offset: 20607},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 658, col: 25, offset: 20788},
																														run: (*parser).callonRelativeLink264,
																														expr: &seqExpr{
																															pos: position{line: 658, col: 25, offset: 20788},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 658, col: 25, offset: 20788},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 37, offset: 20800},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink268,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 658, col: 56, offset: 20819},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 658, col: 62, offset: 20825},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonRelativeLink275,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonRelativeLink280,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonRelativeLink282,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 658, col: 78, offset: 20841},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 662, col: 25, offset: 20959},
																														run: (*parser).callonRelativeLink286,
																														expr: &seqExpr{
																															pos: position{line: 662, col: 25, offset: 20959},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 662, col: 25, offset: 20959},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 38, offset: 20972},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		run: (*parser).callonRelativeLink290,
																																		expr: &seqExpr{
																																			pos: position{line: 318, col: 18, offset: 9737},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 318, col: 18, offset: 9737},
																																					val:        "[_\\pL\\pN]",
																																					chars:      []rune{'_'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 318, col: 28, offset: 9747},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 318, col: 29, offset: 9748},
																																						val:        "[-\\pL\\pN]",
																																						chars:      []rune{'-'},
																																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 662, col: 57, offset: 20991},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 662, col: 63, offset: 20997},
																																		expr: &actionExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			run: (*parser).callonRelativeLink297,
																																			expr: &seqExpr{
																																				pos: position{line: 666, col: 17, offset: 21120},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 666, col: 17, offset: 21120},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 666, col: 21, offset: 21124},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 666, col: 28, offset: 21131},
																																									run: (*parser).callonRelativeLink302,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 666, col: 28, offset: 21131},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									run: (*parser).callonRelativeLink304,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 668, col: 9, offset: 21185},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 668, col: 9, offset: 21185},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 662, col: 79, offset: 21013},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2881, col: 11, offset: 91036},
																								run: (*parser).callonRelativeLink308,
																								expr: &litMatcher{
																									pos:        position{line: 2881, col: 11, offset: 91036},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1198, col: 23, offset: 36969},
																	run: (*parser).callonRelativeLink310,
																	expr: &seqExpr{
																		pos: position{line: 1198, col: 23, offset: 36969},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1198, col: 51, offset: 36997},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1198, col: 56, offset: 37002},
																					run: (*parser).callonRelativeLink314,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1198, col: 56, offset: 37002},
																						expr: &charClassMatcher{
																							pos:        position{line: 1198, col: 56, offset: 37002},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1196, col: 32, offset: 36937},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 28, offset: 45855},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1425, col: 40, offset: 45867},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1429, col: 1, offset: 45983},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 5, offset: 46145},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 46145},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1432, col: 5, offset: 46145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1432, col: 5, offset: 46145},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 9, offset: 46149},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2864, col: 23, offset: 90389},
										run: (*parser).callonExternalLink6,
										expr: &seqExpr{
											pos: position{line: 2864, col: 23, offset: 90389},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2864, col: 23, offset: 90389},
													expr: &litMatcher{
														pos:        position{line: 2864, col: 24, offset: 90390},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 28, offset: 90394},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2868, col: 11, offset: 90509},
														run: (*parser).callonExternalLink11,
														expr: &choiceExpr{
															pos: position{line: 2868, col: 12, offset: 90510},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2868, col: 12, offset: 90510},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 24, offset: 90522},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 37, offset: 90535},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 48, offset: 90546},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 59, offset: 90557},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 44, offset: 90410},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 49, offset: 90415},
														expr: &actionExpr{
															pos: position{line: 2873, col: 5, offset: 90621},
															run: (*parser).callonExternalLink20,
															expr: &seqExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		expr: &litMatcher{
																			pos:        position{line: 2873, col: 6, offset: 90622},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2874, col: 5, offset: 90646},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2874, col: 14, offset: 90655},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						run: (*parser).callonExternalLink27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2875, col: 9, offset: 90665},
																							expr: &charClassMatcher{
																								pos:        position{line: 2875, col: 10, offset: 90666},
																								val:        "[^\\r\\n[]�{,;?!>. ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2878, col: 11, offset: 90917},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2801, col: 8, offset: 88554},
																								run: (*parser).callonExternalLink31,
																								expr: &seqExpr{
																									pos: position{line: 2801, col: 9, offset: 88555},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2801, col: 9, offset: 88555},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																										&andExpr{
																											pos: position{line: 2801, col: 13, offset: 88559},
																											expr: &notExpr{
																												pos: position{line: 2801, col: 15, offset: 88561},
																												expr: &litMatcher{
																													pos:        position{line: 2801, col: 16, offset: 88562},
																													val:        "..",
																													ignoreCase: false,
																													want:       "\"..\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2878, col: 15, offset: 90921},
																								expr: &notExpr{
																									pos: position{line: 2878, col: 17, offset: 90923},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 19, offset: 90925},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonExternalLink42,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2879, col: 11, offset: 90949},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2807, col: 5, offset: 88736},
																								run: (*parser).callonExternalLink45,
																								expr: &choiceExpr{
																									pos: position{line: 2808, col: 9, offset: 88746},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2808, col: 10, offset: 88747},
																											val:        "[,;?)!/=-]",
																											chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 2809, col: 12, offset: 88822},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2809, col: 12, offset: 88822},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&andExpr{
																													pos: position{line: 2809, col: 16, offset: 88826},
																													expr: &choiceExpr{
																														pos: position{line: 2809, col: 18, offset: 88828},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2902, col: 10, offset: 91540},
																																run: (*parser).callonExternalLink52,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2902, col: 10, offset: 91540},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonExternalLink54,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													run: (*parser).callonExternalLink62,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2814, col: 14, offset: 89033},
																													val:        "[\"\\()]",
																													chars:      []rune{'"', '\'', '(', ')'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													run: (*parser).callonExternalLink65,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2820, col: 14, offset: 89179},
																													val:        "[:@]",
																													chars:      []rune{':', '@'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													run: (*parser).callonExternalLink68,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2826, col: 14, offset: 89313},
																													val:        "[*_`#]",
																													chars:      []rune{'*', '_', '`', '#'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													run: (*parser).callonExternalLink71,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2832, col: 14, offset: 89526},
																													val:        "[[]]",
																													chars:      []rune{'[', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2879, col: 23, offset: 90961},
																								expr: &notExpr{
																									pos: position{line: 2879, col: 25, offset: 90963},
																									expr: &choiceExpr{
																										pos: position{line: 2879, col: 27, offset: 90965},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonExternalLink78,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonExternalLink80,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonExternalLink82,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonExternalLink85,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink89,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonExternalLink95,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink99,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonExternalLink105,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink109,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonExternalLink116,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonExternalLink121,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonExternalLink123,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonExternalLink127,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink131,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonExternalLink138,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonExternalLink143,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonExternalLink145,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2881, col: 11, offset: 91036},
																						run: (*parser).callonExternalLink149,
																						expr: &litMatcher{
																							pos:        position{line: 2881, col: 11, offset: 91036},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 34, offset: 46174},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1432, col: 45, offset: 46185},
										expr: &ruleRefExpr{
											pos:  position{line: 1432, col: 46, offset: 46186},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1437, col: 5, offset: 46319},
						run: (*parser).callonExternalLink154,
						expr: &seqExpr{
							pos: position{line: 1437, col: 5, offset: 46319},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1437, col: 5, offset: 46319},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 2864, col: 23, offset: 90389},
										run: (*parser).callonExternalLink157,
										expr: &seqExpr{
											pos: position{line: 2864, col: 23, offset: 90389},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2864, col: 23, offset: 90389},
													expr: &litMatcher{
														pos:        position{line: 2864, col: 24, offset: 90390},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 28, offset: 90394},
													label: "scheme",
													expr: &actionExpr{
														pos: position{line: 2868, col: 11, offset: 90509},
														run: (*parser).callonExternalLink162,
														expr: &choiceExpr{
															pos: position{line: 2868, col: 12, offset: 90510},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2868, col: 12, offset: 90510},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 24, offset: 90522},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 37, offset: 90535},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 48, offset: 90546},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 2868, col: 59, offset: 90557},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2864, col: 44, offset: 90410},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 2864, col: 49, offset: 90415},
														expr: &actionExpr{
															pos: position{line: 2873, col: 5, offset: 90621},
															run: (*parser).callonExternalLink171,
															expr: &seqExpr{
																pos: position{line: 2873, col: 5, offset: 90621},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2873, col: 5, offset: 90621},
																		expr: &litMatcher{
																			pos:        position{line: 2873, col: 6, offset: 90622},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2874, col: 5, offset: 90646},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2874, col: 14, offset: 90655},
																			expr: &choiceExpr{
																				pos: position{line: 2875, col: 9, offset: 90665},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2875, col: 9, offset: 90665},
																						run: (*parser).callonExternalLink178,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 2875, col: 9, offset: 90665},
																							expr: &charClassMatcher{
																								pos:        position{line: 2875, col: 10, offset: 90666},
																								val:        "[^\\r\\n[]�{,;?!>. ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2878, col: 11, offset: 90917},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2801, col: 8, offset: 88554},
																								run: (*parser).callonExternalLink182,
																								expr: &seqExpr{
																									pos: position{line: 2801, col: 9, offset: 88555},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2801, col: 9, offset: 88555},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																										&andExpr{
																											pos: position{line: 2801, col: 13, offset: 88559},
																											expr: &notExpr{
																												pos: position{line: 2801, col: 15, offset: 88561},
																												expr: &litMatcher{
																													pos:        position{line: 2801, col: 16, offset: 88562},
																													val:        "..",
																													ignoreCase: false,
																													want:       "\"..\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2878, col: 15, offset: 90921},
																								expr: &notExpr{
																									pos: position{line: 2878, col: 17, offset: 90923},
																									expr: &choiceExpr{
																										pos: position{line: 2878, col: 19, offset: 90925},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonExternalLink193,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 2879, col: 11, offset: 90949},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 2807, col: 5, offset: 88736},
																								run: (*parser).callonExternalLink196,
																								expr: &choiceExpr{
																									pos: position{line: 2808, col: 9, offset: 88746},
																									alternatives: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 2808, col: 10, offset: 88747},
																											val:        "[,;?)!/=-]",
																											chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&seqExpr{
																											pos: position{line: 2809, col: 12, offset: 88822},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2809, col: 12, offset: 88822},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&andExpr{
																													pos: position{line: 2809, col: 16, offset: 88826},
																													expr: &choiceExpr{
																														pos: position{line: 2809, col: 18, offset: 88828},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2902, col: 10, offset: 91540},
																																run: (*parser).callonExternalLink203,
																																expr: &charClassMatcher{
																																	pos:        position{line: 2902, col: 10, offset: 91540},
																																	val:        "[\\t ]",
																																	chars:      []rune{'\t', ' '},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonExternalLink205,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2811, col: 13, offset: 88897},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2811, col: 13, offset: 88897},
																													run: (*parser).callonExternalLink213,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2814, col: 14, offset: 89033},
																													val:        "[\"\\()]",
																													chars:      []rune{'"', '\'', '(', ')'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2817, col: 13, offset: 89090},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2817, col: 13, offset: 89090},
																													run: (*parser).callonExternalLink216,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2820, col: 14, offset: 89179},
																													val:        "[:@]",
																													chars:      []rune{':', '@'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2823, col: 13, offset: 89224},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2823, col: 13, offset: 89224},
																													run: (*parser).callonExternalLink219,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2826, col: 14, offset: 89313},
																													val:        "[*_`#]",
																													chars:      []rune{'*', '_', '`', '#'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&seqExpr{
																											pos: position{line: 2829, col: 13, offset: 89370},
																											exprs: []interface{}{
																												&andCodeExpr{
																													pos: position{line: 2829, col: 13, offset: 89370},
																													run: (*parser).callonExternalLink222,
																												},
																												&charClassMatcher{
																													pos:        position{line: 2832, col: 14, offset: 89526},
																													val:        "[[]]",
																													chars:      []rune{'[', ']'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&andExpr{
																								pos: position{line: 2879, col: 23, offset: 90961},
																								expr: &notExpr{
																									pos: position{line: 2879, col: 25, offset: 90963},
																									expr: &choiceExpr{
																										pos: position{line: 2879, col: 27, offset: 90965},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonExternalLink229,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 636, col: 5, offset: 20111},
																						run: (*parser).callonExternalLink231,
																						expr: &seqExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 636, col: 5, offset: 20111},
																									run: (*parser).callonExternalLink233,
																								},
																								&labeledExpr{
																									pos:   position{line: 639, col: 5, offset: 20178},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 639, col: 14, offset: 20187},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 645, col: 5, offset: 20316},
																												run: (*parser).callonExternalLink236,
																												expr: &seqExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 645, col: 5, offset: 20316},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 645, col: 13, offset: 20324},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink240,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 645, col: 32, offset: 20343},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 652, col: 5, offset: 20584},
																												run: (*parser).callonExternalLink246,
																												expr: &seqExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 652, col: 5, offset: 20584},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 652, col: 9, offset: 20588},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink250,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 652, col: 28, offset: 20607},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 658, col: 25, offset: 20788},
																												run: (*parser).callonExternalLink256,
																												expr: &seqExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 658, col: 25, offset: 20788},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 37, offset: 20800},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink260,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 658, col: 56, offset: 20819},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 658, col: 62, offset: 20825},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonExternalLink267,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonExternalLink272,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonExternalLink274,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 658, col: 78, offset: 20841},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 662, col: 25, offset: 20959},
																												run: (*parser).callonExternalLink278,
																												expr: &seqExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 662, col: 25, offset: 20959},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 38, offset: 20972},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 318, col: 18, offset: 9737},
																																run: (*parser).callonExternalLink282,
																																expr: &seqExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 318, col: 18, offset: 9737},
																																			val:        "[_\\pL\\pN]",
																																			chars:      []rune{'_'},
																																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 318, col: 28, offset: 9747},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 318, col: 29, offset: 9748},
																																				val:        "[-\\pL\\pN]",
																																				chars:      []rune{'-'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 662, col: 57, offset: 20991},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 662, col: 63, offset: 20997},
																																expr: &actionExpr{
																																	pos: position{line: 666, col: 17, offset: 21120},
																																	run: (*parser).callonExternalLink289,
																																	expr: &seqExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 666, col: 17, offset: 21120},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 666, col: 21, offset: 21124},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 666, col: 28, offset: 21131},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 666, col: 28, offset: 21131},
																																							run: (*parser).callonExternalLink294,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 666, col: 28, offset: 21131},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 668, col: 9, offset: 21185},
																																							run: (*parser).callonExternalLink296,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 668, col: 9, offset: 21185},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 662, col: 79, offset: 21013},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2881, col: 11, offset: 91036},
																						run: (*parser).callonExternalLink300,
																						expr: &litMatcher{
																							pos:        position{line: 2881, col: 11, offset: 91036},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1437, col: 30, offset: 46344},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1437, col: 41, offset: 46355},
										expr: &ruleRefExpr{
											pos:  position{line: 1437, col: 42, offset: 46356},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1471, col: 1, offset: 47497},
			expr: &actionExpr{
				pos: position{line: 1472, col: 5, offset: 47518},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1472, col: 5, offset: 47518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1472, col: 5, offset: 47518},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1478, col: 5, offset: 47720},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1571, col: 5, offset: 50654},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1571, col: 5, offset: 50654},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1571, col: 5, offset: 50654},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1578, col: 5, offset: 50862},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1578, col: 5, offset: 50862},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1578, col: 5, offset: 50862},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1578, col: 12, offset: 50869},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1580, col: 9, offset: 50932},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1580, col: 9, offset: 50932},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1580, col: 9, offset: 50932},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1580, col: 9, offset: 50932},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1580, col: 16, offset: 50939},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1580, col: 16, offset: 50939},
																									expr: &litMatcher{
																										pos:        position{line: 1580, col: 17, offset: 50940},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1584, col: 9, offset: 51040},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1603, col: 11, offset: 51757},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1603, col: 11, offset: 51757},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1603, col: 11, offset: 51757},
																							expr: &charClassMatcher{
																								pos:        position{line: 1603, col: 12, offset: 51758},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1603, col: 20, offset: 51766},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 13, offset: 51883},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 13, offset: 51883},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1605, col: 14, offset: 51884},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 21, offset: 51891},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 52011},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 52011},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 52012},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 52019},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52139},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52139},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1609, col: 13, offset: 52139},
																							expr: &charClassMatcher{
																								pos:        position{line: 1609, col: 14, offset: 52140},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 26, offset: 52152},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52272},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52272},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52272},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52273},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52285},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1572, col: 5, offset: 50693},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListElements53,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListElements57,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1621, col: 5, offset: 52551},
										run: (*parser).callonListElements64,
										expr: &seqExpr{
											pos: position{line: 1621, col: 5, offset: 52551},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1621, col: 5, offset: 52551},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1628, col: 5, offset: 52824},
														run: (*parser).callonListElements67,
														expr: &seqExpr{
															pos: position{line: 1628, col: 5, offset: 52824},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1628, col: 5, offset: 52824},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListElements70,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1629, col: 5, offset: 52836},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1630, col: 9, offset: 52852},
																		run: (*parser).callonListElements73,
																		expr: &choiceExpr{
																			pos: position{line: 1630, col: 10, offset: 52853},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1630, col: 11, offset: 52854},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1630, col: 18, offset: 52861},
																					expr: &litMatcher{
																						pos:        position{line: 1630, col: 19, offset: 52862},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1633, col: 7, offset: 52952},
																	run: (*parser).callonListElements78,
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListElements79,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1622, col: 5, offset: 52592},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1622, col: 16, offset: 52603},
														expr: &actionExpr{
															pos: position{line: 1643, col: 5, offset: 53217},
															run: (*parser).callonListElements84,
															expr: &seqExpr{
																pos: position{line: 1643, col: 5, offset: 53217},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1643, col: 5, offset: 53217},
																		expr: &litMatcher{
																			pos:        position{line: 1643, col: 6, offset: 53218},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1643, col: 10, offset: 53222},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1644, col: 7, offset: 53236},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1644, col: 7, offset: 53236},
																					run: (*parser).callonListElements90,
																					expr: &litMatcher{
																						pos:        position{line: 1644, col: 7, offset: 53236},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1645, col: 7, offset: 53281},
																					run: (*parser).callonListElements92,
																					expr: &litMatcher{
																						pos:        position{line: 1645, col: 7, offset: 53281},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1646, col: 7, offset: 53324},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1646, col: 7, offset: 53324},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		run: (*parser).callonListElements96,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2906, col: 11, offset: 91601},
																			expr: &charClassMatcher{
																				pos:        position{line: 2906, col: 11, offset: 91601},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1623, col: 5, offset: 52642},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListElements100,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListElements104,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListElements108,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1711, col: 5, offset: 55159},
										run: (*parser).callonListElements115,
										expr: &seqExpr{
											pos: position{line: 1711, col: 5, offset: 55159},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1711, col: 5, offset: 55159},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1717, col: 5, offset: 55356},
														run: (*parser).callonListElements118,
														expr: &seqExpr{
															pos: position{line: 1717, col: 5, offset: 55356},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1717, col: 5, offset: 55356},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1717, col: 9, offset: 55360},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1717, col: 14, offset: 55365},
																		run: (*parser).callonListElements122,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1717, col: 14, offset: 55365},
																			expr: &charClassMatcher{
																				pos:        position{line: 1717, col: 14, offset: 55365},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1717, col: 62, offset: 55413},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListElements126,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1712, col: 5, offset: 55195},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListElements130,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListElements134,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListElements138,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1655, col: 5, offset: 53517},
										run: (*parser).callonListElements145,
										expr: &seqExpr{
											pos: position{line: 1655, col: 5, offset: 53517},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1655, col: 5, offset: 53517},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1663, col: 5, offset: 53843},
														run: (*parser).callonListElements148,
														expr: &oneOrMoreExpr{
															pos: position{line: 1663, col: 5, offset: 53843},
															expr: &seqExpr{
																pos: position{line: 1663, col: 6, offset: 53844},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1663, col: 6, offset: 53844},
																		expr: &actionExpr{
																			pos: position{line: 1668, col: 5, offset: 53994},
																			run: (*parser).callonListElements152,
																			expr: &seqExpr{
																				pos: position{line: 1668, col: 5, offset: 53994},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1668, col: 5, offset: 53994},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1668, col: 16, offset: 54005},
																							run: (*parser).callonListElements155,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1668, col: 16, offset: 54005},
																								expr: &litMatcher{
																									pos:        position{line: 1668, col: 17, offset: 54006},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1671, col: 5, offset: 54063},
																						run: (*parser).callonListElements158,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1663, col: 35, offset: 53873},
																		expr: &choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListElements161,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1663, col: 40, offset: 53878,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1656, col: 5, offset: 53552},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1668, col: 5, offset: 53994},
														run: (*parser).callonListElements170,
														expr: &seqExpr{
															pos: position{line: 1668, col: 5, offset: 53994},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1668, col: 5, offset: 53994},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1668, col: 16, offset: 54005},
																		run: (*parser).callonListElements173,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1668, col: 16, offset: 54005},
																			expr: &litMatcher{
																				pos:        position{line: 1668, col: 17, offset: 54006},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1671, col: 5, offset: 54063},
																	run: (*parser).callonListElements176,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1657, col: 5, offset: 53597},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1679, col: 5, offset: 54312},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1681, col: 9, offset: 54378},
																run: (*parser).callonListElements179,
																expr: &seqExpr{
																	pos: position{line: 1681, col: 9, offset: 54378},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1681, col: 9, offset: 54378},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonListElements182,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListElements185,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1682, col: 9, offset: 54397},
																			expr: &actionExpr{
																				pos: position{line: 677, col: 14, offset: 21486},
																				run: (*parser).callonListElements193,
																				expr: &seqExpr{
																					pos: position{line: 677, col: 14, offset: 21486},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 677, col: 21, offset: 21493},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListElements198,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListElements201,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1688, col: 9, offset: 54526},
																run: (*parser).callonListElements208,
																expr: &seqExpr{
																	pos: position{line: 1688, col: 9, offset: 54526},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2906, col: 11, offset: 91601},
																			run: (*parser).callonListElements210,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2906, col: 11, offset: 91601},
																				expr: &charClassMatcher{
																					pos:        position{line: 2906, col: 11, offset: 91601},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1689, col: 9, offset: 54599},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1689, col: 18, offset: 54608},
																				run: (*parser).callonListElements214,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1689, col: 18, offset: 54608},
																					expr: &charClassMatcher{
																						pos:        position{line: 1689, col: 18, offset: 54608},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListElements218,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 5, offset: 47549},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 20, offset: 47564},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1483, col: 1, offset: 47819},
			expr: &actionExpr{
				pos: position{line: 1483, col: 22, offset: 47840},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1483, col: 22, offset: 47840},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1483, col: 31, offset: 47849},
						expr: &ruleRefExpr{
							pos:  position{line: 1483, col: 32, offset: 47850},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1487, col: 1, offset: 47930},
			expr: &actionExpr{
				pos: position{line: 1488, col: 5, offset: 48069},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 5, offset: 48069},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 5, offset: 48081},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1490, col: 9, offset: 48099},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1490, col: 13, offset: 48103},
										run: (*parser).callonExtraListElement7,
										expr: &seqExpr{
											pos: position{line: 1490, col: 13, offset: 48103},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1490, col: 13, offset: 48103},
													expr: &actionExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														run: (*parser).callonExtraListElement10,
														expr: &seqExpr{
															pos: position{line: 677, col: 14, offset: 21486},
															exprs: []interface{}{
																&andExpr{
																	pos: position{line: 2919, col: 11, offset: 91874},
																	expr: &anyMatcher{
																		line: 2919, col: 13, offset: 91876,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 677, col: 21, offset: 21493},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonExtraListElement15,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonExtraListElement18,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1491, col: 13, offset: 48127},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1491, col: 22, offset: 48136},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1571, col: 5, offset: 50654},
																run: (*parser).callonExtraListElement27,
																expr: &seqExpr{
																	pos: position{line: 1571, col: 5, offset: 50654},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1571, col: 5, offset: 50654},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1578, col: 5, offset: 50862},
																				run: (*parser).callonExtraListElement30,
																				expr: &seqExpr{
																					pos: position{line: 1578, col: 5, offset: 50862},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1578, col: 5, offset: 50862},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement33,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1578, col: 12, offset: 50869},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1580, col: 9, offset: 50932},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1580, col: 9, offset: 50932},
																										run: (*parser).callonExtraListElement37,
																										expr: &seqExpr{
																											pos: position{line: 1580, col: 9, offset: 50932},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 1580, col: 9, offset: 50932},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1580, col: 16, offset: 50939},
																														run: (*parser).callonExtraListElement40,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1580, col: 16, offset: 50939},
																															expr: &litMatcher{
																																pos:        position{line: 1580, col: 17, offset: 50940},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1584, col: 9, offset: 51040},
																													run: (*parser).callonExtraListElement43,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1603, col: 11, offset: 51757},
																										run: (*parser).callonExtraListElement44,
																										expr: &seqExpr{
																											pos: position{line: 1603, col: 11, offset: 51757},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1603, col: 11, offset: 51757},
																													expr: &charClassMatcher{
																														pos:        position{line: 1603, col: 12, offset: 51758},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1603, col: 20, offset: 51766},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1605, col: 13, offset: 51883},
																										run: (*parser).callonExtraListElement49,
																										expr: &seqExpr{
																											pos: position{line: 1605, col: 13, offset: 51883},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1605, col: 14, offset: 51884},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1605, col: 21, offset: 51891},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1607, col: 13, offset: 52011},
																										run: (*parser).callonExtraListElement53,
																										expr: &seqExpr{
																											pos: position{line: 1607, col: 13, offset: 52011},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1607, col: 14, offset: 52012},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1607, col: 21, offset: 52019},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1609, col: 13, offset: 52139},
																										run: (*parser).callonExtraListElement57,
																										expr: &seqExpr{
																											pos: position{line: 1609, col: 13, offset: 52139},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1609, col: 13, offset: 52139},
																													expr: &charClassMatcher{
																														pos:        position{line: 1609, col: 14, offset: 52140},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1609, col: 26, offset: 52152},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 13, offset: 52272},
																										run: (*parser).callonExtraListElement62,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 13, offset: 52272},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 13, offset: 52272},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 14, offset: 52273},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 26, offset: 52285},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement67,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1572, col: 5, offset: 50693},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement71,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement75,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement79,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1621, col: 5, offset: 52551},
																run: (*parser).callonExtraListElement86,
																expr: &seqExpr{
																	pos: position{line: 1621, col: 5, offset: 52551},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1621, col: 5, offset: 52551},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1628, col: 5, offset: 52824},
																				run: (*parser).callonExtraListElement89,
																				expr: &seqExpr{
																					pos: position{line: 1628, col: 5, offset: 52824},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1628, col: 5, offset: 52824},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement92,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1629, col: 5, offset: 52836},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1630, col: 9, offset: 52852},
																								run: (*parser).callonExtraListElement95,
																								expr: &choiceExpr{
																									pos: position{line: 1630, col: 10, offset: 52853},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1630, col: 11, offset: 52854},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1630, col: 18, offset: 52861},
																											expr: &litMatcher{
																												pos:        position{line: 1630, col: 19, offset: 52862},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1633, col: 7, offset: 52952},
																							run: (*parser).callonExtraListElement100,
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement101,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1622, col: 5, offset: 52592},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1622, col: 16, offset: 52603},
																				expr: &actionExpr{
																					pos: position{line: 1643, col: 5, offset: 53217},
																					run: (*parser).callonExtraListElement106,
																					expr: &seqExpr{
																						pos: position{line: 1643, col: 5, offset: 53217},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 1643, col: 5, offset: 53217},
																								expr: &litMatcher{
																									pos:        position{line: 1643, col: 6, offset: 53218},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1643, col: 10, offset: 53222},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1644, col: 7, offset: 53236},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1644, col: 7, offset: 53236},
																											run: (*parser).callonExtraListElement112,
																											expr: &litMatcher{
																												pos:        position{line: 1644, col: 7, offset: 53236},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1645, col: 7, offset: 53281},
																											run: (*parser).callonExtraListElement114,
																											expr: &litMatcher{
																												pos:        position{line: 1645, col: 7, offset: 53281},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1646, col: 7, offset: 53324},
																											run: (*parser).callonExtraListElement116,
																											expr: &litMatcher{
																												pos:        position{line: 1646, col: 7, offset: 53324},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								run: (*parser).callonExtraListElement118,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2906, col: 11, offset: 91601},
																									expr: &charClassMatcher{
																										pos:        position{line: 2906, col: 11, offset: 91601},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1623, col: 5, offset: 52642},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement122,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement126,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement130,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1711, col: 5, offset: 55159},
																run: (*parser).callonExtraListElement137,
																expr: &seqExpr{
																	pos: position{line: 1711, col: 5, offset: 55159},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1711, col: 5, offset: 55159},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1717, col: 5, offset: 55356},
																				run: (*parser).callonExtraListElement140,
																				expr: &seqExpr{
																					pos: position{line: 1717, col: 5, offset: 55356},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1717, col: 5, offset: 55356},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1717, col: 9, offset: 55360},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1717, col: 14, offset: 55365},
																								run: (*parser).callonExtraListElement144,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1717, col: 14, offset: 55365},
																									expr: &charClassMatcher{
																										pos:        position{line: 1717, col: 14, offset: 55365},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1717, col: 62, offset: 55413},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement148,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1712, col: 5, offset: 55195},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement152,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement156,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement160,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1655, col: 5, offset: 53517},
																run: (*parser).callonExtraListElement167,
																expr: &seqExpr{
																	pos: position{line: 1655, col: 5, offset: 53517},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1655, col: 5, offset: 53517},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1663, col: 5, offset: 53843},
																				run: (*parser).callonExtraListElement170,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1663, col: 5, offset: 53843},
																					expr: &seqExpr{
																						pos: position{line: 1663, col: 6, offset: 53844},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1663, col: 6, offset: 53844},
																								expr: &actionExpr{
																									pos: position{line: 1668, col: 5, offset: 53994},
																									run: (*parser).callonExtraListElement174,
																									expr: &seqExpr{
																										pos: position{line: 1668, col: 5, offset: 53994},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1668, col: 5, offset: 53994},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1668, col: 16, offset: 54005},
																													run: (*parser).callonExtraListElement177,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1668, col: 16, offset: 54005},
																														expr: &litMatcher{
																															pos:        position{line: 1668, col: 17, offset: 54006},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1671, col: 5, offset: 54063},
																												run: (*parser).callonExtraListElement180,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1663, col: 35, offset: 53873},
																								expr: &choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement183,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1663, col: 40, offset: 53878,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1656, col: 5, offset: 53552},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1668, col: 5, offset: 53994},
																				run: (*parser).callonExtraListElement192,
																				expr: &seqExpr{
																					pos: position{line: 1668, col: 5, offset: 53994},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1668, col: 5, offset: 53994},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1668, col: 16, offset: 54005},
																								run: (*parser).callonExtraListElement195,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1668, col: 16, offset: 54005},
																									expr: &litMatcher{
																										pos:        position{line: 1668, col: 17, offset: 54006},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1671, col: 5, offset: 54063},
																							run: (*parser).callonExtraListElement198,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1657, col: 5, offset: 53597},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1679, col: 5, offset: 54312},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1681, col: 9, offset: 54378},
																						run: (*parser).callonExtraListElement201,
																						expr: &seqExpr{
																							pos: position{line: 1681, col: 9, offset: 54378},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 1681, col: 9, offset: 54378},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonExtraListElement204,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement207,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1682, col: 9, offset: 54397},
																									expr: &actionExpr{
																										pos: position{line: 677, col: 14, offset: 21486},
																										run: (*parser).callonExtraListElement215,
																										expr: &seqExpr{
																											pos: position{line: 677, col: 14, offset: 21486},
																											exprs: []interface{}{
																												&andExpr{
																													pos: position{line: 2919, col: 11, offset: 91874},
																													expr: &anyMatcher{
																														line: 2919, col: 13, offset: 91876,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 677, col: 21, offset: 21493},
																													expr: &actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonExtraListElement220,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2924, col: 8, offset: 91938},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2911, col: 12, offset: 91711},
																															run: (*parser).callonExtraListElement223,
																															expr: &choiceExpr{
																																pos: position{line: 2911, col: 13, offset: 91712},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 13, offset: 91712},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 20, offset: 91719},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 29, offset: 91728},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2921, col: 8, offset: 91888},
																															expr: &anyMatcher{
																																line: 2921, col: 9, offset: 91889,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1688, col: 9, offset: 54526},
																						run: (*parser).callonExtraListElement230,
																						expr: &seqExpr{
																							pos: position{line: 1688, col: 9, offset: 54526},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2906, col: 11, offset: 91601},
																									run: (*parser).callonExtraListElement232,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2906, col: 11, offset: 91601},
																										expr: &charClassMatcher{
																											pos:        position{line: 2906, col: 11, offset: 91601},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1689, col: 9, offset: 54599},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1689, col: 18, offset: 54608},
																										run: (*parser).callonExtraListElement236,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1689, col: 18, offset: 54608},
																											expr: &charClassMatcher{
																												pos:        position{line: 1689, col: 18, offset: 54608},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement240,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1494, col: 13, offset: 48287},
										run: (*parser).callonExtraListElement247,
										expr: &seqExpr{
											pos: position{line: 1494, col: 13, offset: 48287},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1494, col: 13, offset: 48287},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1494, col: 24, offset: 48298},
														expr: &ruleRefExpr{
															pos:  position{line: 1494, col: 25, offset: 48299},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1495, col: 13, offset: 48330},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 1495, col: 22, offset: 48339},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1571, col: 5, offset: 50654},
																run: (*parser).callonExtraListElement254,
																expr: &seqExpr{
																	pos: position{line: 1571, col: 5, offset: 50654},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1571, col: 5, offset: 50654},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1578, col: 5, offset: 50862},
																				run: (*parser).callonExtraListElement257,
																				expr: &seqExpr{
																					pos: position{line: 1578, col: 5, offset: 50862},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1578, col: 5, offset: 50862},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement260,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1578, col: 12, offset: 50869},
																							label: "prefix",
																							expr: &choiceExpr{
																								pos: position{line: 1580, col: 9, offset: 50932},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 1580, col: 9, offset: 50932},
																										run: (*parser).callonExtraListElement264,
																										expr: &seqExpr{
																											pos: position{line: 1580, col: 9, offset: 50932},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 1580, col: 9, offset: 50932},
																													label: "depth",
																													expr: &actionExpr{
																														pos: position{line: 1580, col: 16, offset: 50939},
																														run: (*parser).callonExtraListElement267,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1580, col: 16, offset: 50939},
																															expr: &litMatcher{
																																pos:        position{line: 1580, col: 17, offset: 50940},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																												&andCodeExpr{
																													pos: position{line: 1584, col: 9, offset: 51040},
																													run: (*parser).callonExtraListElement270,
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1603, col: 11, offset: 51757},
																										run: (*parser).callonExtraListElement271,
																										expr: &seqExpr{
																											pos: position{line: 1603, col: 11, offset: 51757},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1603, col: 11, offset: 51757},
																													expr: &charClassMatcher{
																														pos:        position{line: 1603, col: 12, offset: 51758},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1603, col: 20, offset: 51766},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1605, col: 13, offset: 51883},
																										run: (*parser).callonExtraListElement276,
																										expr: &seqExpr{
																											pos: position{line: 1605, col: 13, offset: 51883},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1605, col: 14, offset: 51884},
																													val:        "[a-z]",
																													ranges:     []rune{'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1605, col: 21, offset: 51891},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1607, col: 13, offset: 52011},
																										run: (*parser).callonExtraListElement280,
																										expr: &seqExpr{
																											pos: position{line: 1607, col: 13, offset: 52011},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 1607, col: 14, offset: 52012},
																													val:        "[A-Z]",
																													ranges:     []rune{'A', 'Z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&litMatcher{
																													pos:        position{line: 1607, col: 21, offset: 52019},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1609, col: 13, offset: 52139},
																										run: (*parser).callonExtraListElement284,
																										expr: &seqExpr{
																											pos: position{line: 1609, col: 13, offset: 52139},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1609, col: 13, offset: 52139},
																													expr: &charClassMatcher{
																														pos:        position{line: 1609, col: 14, offset: 52140},
																														val:        "[ivxdlcm]",
																														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1609, col: 26, offset: 52152},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 1611, col: 13, offset: 52272},
																										run: (*parser).callonExtraListElement289,
																										expr: &seqExpr{
																											pos: position{line: 1611, col: 13, offset: 52272},
																											exprs: []interface{}{
																												&oneOrMoreExpr{
																													pos: position{line: 1611, col: 13, offset: 52272},
																													expr: &charClassMatcher{
																														pos:        position{line: 1611, col: 14, offset: 52273},
																														val:        "[IVXDLCM]",
																														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 1611, col: 26, offset: 52285},
																													val:        ")",
																													ignoreCase: false,
																													want:       "\")\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement294,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1572, col: 5, offset: 50693},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement298,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement302,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement306,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1621, col: 5, offset: 52551},
																run: (*parser).callonExtraListElement313,
																expr: &seqExpr{
																	pos: position{line: 1621, col: 5, offset: 52551},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1621, col: 5, offset: 52551},
																			label: "prefix",
																			expr: &actionExpr{
																				pos: position{line: 1628, col: 5, offset: 52824},
																				run: (*parser).callonExtraListElement316,
																				expr: &seqExpr{
																					pos: position{line: 1628, col: 5, offset: 52824},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1628, col: 5, offset: 52824},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement319,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1629, col: 5, offset: 52836},
																							label: "style",
																							expr: &actionExpr{
																								pos: position{line: 1630, col: 9, offset: 52852},
																								run: (*parser).callonExtraListElement322,
																								expr: &choiceExpr{
																									pos: position{line: 1630, col: 10, offset: 52853},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1630, col: 11, offset: 52854},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																										&oneOrMoreExpr{
																											pos: position{line: 1630, col: 18, offset: 52861},
																											expr: &litMatcher{
																												pos:        position{line: 1630, col: 19, offset: 52862},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1633, col: 7, offset: 52952},
																							run: (*parser).callonExtraListElement327,
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement328,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1622, col: 5, offset: 52592},
																			label: "checkstyle",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1622, col: 16, offset: 52603},
																				expr: &actionExpr{
																					pos: position{line: 1643, col: 5, offset: 53217},
																					run: (*parser).callonExtraListElement333,
																					expr: &seqExpr{
																						pos: position{line: 1643, col: 5, offset: 53217},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 1643, col: 5, offset: 53217},
																								expr: &litMatcher{
																									pos:        position{line: 1643, col: 6, offset: 53218},
																									val:        "[",
																									ignoreCase: false,
																									want:       "\"[\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1643, col: 10, offset: 53222},
																								label: "style",
																								expr: &choiceExpr{
																									pos: position{line: 1644, col: 7, offset: 53236},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1644, col: 7, offset: 53236},
																											run: (*parser).callonExtraListElement339,
																											expr: &litMatcher{
																												pos:        position{line: 1644, col: 7, offset: 53236},
																												val:        "[ ]",
																												ignoreCase: false,
																												want:       "\"[ ]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1645, col: 7, offset: 53281},
																											run: (*parser).callonExtraListElement341,
																											expr: &litMatcher{
																												pos:        position{line: 1645, col: 7, offset: 53281},
																												val:        "[*]",
																												ignoreCase: false,
																												want:       "\"[*]\"",
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1646, col: 7, offset: 53324},
																											run: (*parser).callonExtraListElement343,
																											expr: &litMatcher{
																												pos:        position{line: 1646, col: 7, offset: 53324},
																												val:        "[x]",
																												ignoreCase: false,
																												want:       "\"[x]\"",
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								run: (*parser).callonExtraListElement345,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 2906, col: 11, offset: 91601},
																									expr: &charClassMatcher{
																										pos:        position{line: 2906, col: 11, offset: 91601},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1623, col: 5, offset: 52642},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement349,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement353,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement357,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1711, col: 5, offset: 55159},
																run: (*parser).callonExtraListElement364,
																expr: &seqExpr{
																	pos: position{line: 1711, col: 5, offset: 55159},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1711, col: 5, offset: 55159},
																			label: "ref",
																			expr: &actionExpr{
																				pos: position{line: 1717, col: 5, offset: 55356},
																				run: (*parser).callonExtraListElement367,
																				expr: &seqExpr{
																					pos: position{line: 1717, col: 5, offset: 55356},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 1717, col: 5, offset: 55356},
																							val:        "<",
																							ignoreCase: false,
																							want:       "\"<\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 1717, col: 9, offset: 55360},
																							label: "ref",
																							expr: &actionExpr{
																								pos: position{line: 1717, col: 14, offset: 55365},
																								run: (*parser).callonExtraListElement371,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1717, col: 14, offset: 55365},
																									expr: &charClassMatcher{
																										pos:        position{line: 1717, col: 14, offset: 55365},
																										val:        "[0-9]",
																										ranges:     []rune{'0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1717, col: 62, offset: 55413},
																							val:        ">",
																							ignoreCase: false,
																							want:       "\">\"",
																						},
																						&actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonExtraListElement375,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1712, col: 5, offset: 55195},
																			label: "description",
																			expr: &actionExpr{
																				pos: position{line: 1519, col: 5, offset: 49160},
																				run: (*parser).callonExtraListElement379,
																				expr: &seqExpr{
																					pos: position{line: 1519, col: 5, offset: 49160},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1519, col: 5, offset: 49160},
																							label: "rawLines",
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1519, col: 14, offset: 49169},
																								expr: &actionExpr{
																									pos: position{line: 1519, col: 15, offset: 49170},
																									run: (*parser).callonExtraListElement383,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1519, col: 15, offset: 49170},
																										expr: &charClassMatcher{
																											pos:        position{line: 1519, col: 15, offset: 49170},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement387,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1655, col: 5, offset: 53517},
																run: (*parser).callonExtraListElement394,
																expr: &seqExpr{
																	pos: position{line: 1655, col: 5, offset: 53517},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1655, col: 5, offset: 53517},
																			label: "term",
																			expr: &actionExpr{
																				pos: position{line: 1663, col: 5, offset: 53843},
																				run: (*parser).callonExtraListElement397,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1663, col: 5, offset: 53843},
																					expr: &seqExpr{
																						pos: position{line: 1663, col: 6, offset: 53844},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1663, col: 6, offset: 53844},
																								expr: &actionExpr{
																									pos: position{line: 1668, col: 5, offset: 53994},
																									run: (*parser).callonExtraListElement401,
																									expr: &seqExpr{
																										pos: position{line: 1668, col: 5, offset: 53994},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1668, col: 5, offset: 53994},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1668, col: 16, offset: 54005},
																													run: (*parser).callonExtraListElement404,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1668, col: 16, offset: 54005},
																														expr: &litMatcher{
																															pos:        position{line: 1668, col: 17, offset: 54006},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1671, col: 5, offset: 54063},
																												run: (*parser).callonExtraListElement407,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1663, col: 35, offset: 53873},
																								expr: &choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement410,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1663, col: 40, offset: 53878,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1656, col: 5, offset: 53552},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1668, col: 5, offset: 53994},
																				run: (*parser).callonExtraListElement419,
																				expr: &seqExpr{
																					pos: position{line: 1668, col: 5, offset: 53994},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1668, col: 5, offset: 53994},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1668, col: 16, offset: 54005},
																								run: (*parser).callonExtraListElement422,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1668, col: 16, offset: 54005},
																									expr: &litMatcher{
																										pos:        position{line: 1668, col: 17, offset: 54006},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1671, col: 5, offset: 54063},
																							run: (*parser).callonExtraListElement425,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1657, col: 5, offset: 53597},
																			label: "description",
																			expr: &choiceExpr{
																				pos: position{line: 1679, col: 5, offset: 54312},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 1681, col: 9, offset: 54378},
																						run: (*parser).callonExtraListElement428,
																						expr: &seqExpr{
																							pos: position{line: 1681, col: 9, offset: 54378},
																							exprs: []interface{}{
																								&zeroOrMoreExpr{
																									pos: position{line: 1681, col: 9, offset: 54378},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonExtraListElement431,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement434,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 1682, col: 9, offset: 54397},
																									expr: &actionExpr{
																										pos: position{line: 677, col: 14, offset: 21486},
																										run: (*parser).callonExtraListElement442,
																										expr: &seqExpr{
																											pos: position{line: 677, col: 14, offset: 21486},
																											exprs: []interface{}{
																												&andExpr{
																													pos: position{line: 2919, col: 11, offset: 91874},
																													expr: &anyMatcher{
																														line: 2919, col: 13, offset: 91876,
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 677, col: 21, offset: 21493},
																													expr: &actionExpr{
																														pos: position{line: 2902, col: 10, offset: 91540},
																														run: (*parser).callonExtraListElement447,
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 10, offset: 91540},
																															val:        "[\\t ]",
																															chars:      []rune{'\t', ' '},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 2924, col: 8, offset: 91938},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 2911, col: 12, offset: 91711},
																															run: (*parser).callonExtraListElement450,
																															expr: &choiceExpr{
																																pos: position{line: 2911, col: 13, offset: 91712},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 13, offset: 91712},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 20, offset: 91719},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 2911, col: 29, offset: 91728},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 2921, col: 8, offset: 91888},
																															expr: &anyMatcher{
																																line: 2921, col: 9, offset: 91889,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1688, col: 9, offset: 54526},
																						run: (*parser).callonExtraListElement457,
																						expr: &seqExpr{
																							pos: position{line: 1688, col: 9, offset: 54526},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2906, col: 11, offset: 91601},
																									run: (*parser).callonExtraListElement459,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2906, col: 11, offset: 91601},
																										expr: &charClassMatcher{
																											pos:        position{line: 2906, col: 11, offset: 91601},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 1689, col: 9, offset: 54599},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1689, col: 18, offset: 54608},
																										run: (*parser).callonExtraListElement463,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1689, col: 18, offset: 54608},
																											expr: &charClassMatcher{
																												pos:        position{line: 1689, col: 18, offset: 54608},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonExtraListElement467,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1498, col: 11, offset: 48524},
										name: "ListContinuation",
									},
									&actionExpr{
										pos: position{line: 2466, col: 22, offset: 79269},
										run: (*parser).callonExtraListElement475,
										expr: &seqExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2471, col: 31, offset: 79490},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2471, col: 36, offset: 79495},
													expr: &litMatcher{
														pos:        position{line: 2471, col: 37, offset: 79496},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2466, col: 49, offset: 79296},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2848, col: 13, offset: 89985},
														run: (*parser).callonExtraListElement481,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															expr: &charClassMatcher{
																pos:        position{line: 2848, col: 13, offset: 89985},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonExtraListElement485,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1506, col: 5, offset: 48802},
										run: (*parser).callonExtraListElement492,
										expr: &seqExpr{
											pos: position{line: 1506, col: 5, offset: 48802},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1506, col: 5, offset: 48802},
													expr: &actionExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														run: (*parser).callonExtraListElement495,
														expr: &seqExpr{
															pos: position{line: 677, col: 14, offset: 21486},
															exprs: []interface{}{
																&andExpr{
																	pos: position{line: 2919, col: 11, offset: 91874},
																	expr: &anyMatcher{
																		line: 2919, col: 13, offset: 91876,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 677, col: 21, offset: 21493},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonExtraListElement500,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonExtraListElement503,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1507, col: 5, offset: 48817},
													expr: &seqExpr{
														pos: position{line: 1537, col: 27, offset: 49643},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1537, col: 27, offset: 49643},
																val:        "+",
																ignoreCase: false,
																want:       "\"+\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 1537, col: 31, offset: 49647},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonExtraListElement514,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonExtraListElement516,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1508, col: 5, offset: 48845},
													expr: &actionExpr{
														pos: position{line: 1578, col: 5, offset: 50862},
														run: (*parser).callonExtraListElement522,
														expr: &seqExpr{
															pos: position{line: 1578, col: 5, offset: 50862},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1578, col: 5, offset: 50862},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonExtraListElement525,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1578, col: 12, offset: 50869},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1580, col: 9, offset: 50932},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1580, col: 9, offset: 50932},
																				run: (*parser).callonExtraListElement529,
																				expr: &seqExpr{
																					pos: position{line: 1580, col: 9, offset: 50932},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1580, col: 9, offset: 50932},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1580, col: 16, offset: 50939},
																								run: (*parser).callonExtraListElement532,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1580, col: 16, offset: 50939},
																									expr: &litMatcher{
																										pos:        position{line: 1580, col: 17, offset: 50940},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1584, col: 9, offset: 51040},
																							run: (*parser).callonExtraListElement535,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1603, col: 11, offset: 51757},
																				run: (*parser).callonExtraListElement536,
																				expr: &seqExpr{
																					pos: position{line: 1603, col: 11, offset: 51757},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1603, col: 11, offset: 51757},
																							expr: &charClassMatcher{
																								pos:        position{line: 1603, col: 12, offset: 51758},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1603, col: 20, offset: 51766},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 13, offset: 51883},
																				run: (*parser).callonExtraListElement541,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 13, offset: 51883},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1605, col: 14, offset: 51884},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 21, offset: 51891},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 52011},
																				run: (*parser).callonExtraListElement545,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 52011},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 52012},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 52019},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52139},
																				run: (*parser).callonExtraListElement549,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52139},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1609, col: 13, offset: 52139},
																							expr: &charClassMatcher{
																								pos:        position{line: 1609, col: 14, offset: 52140},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 26, offset: 52152},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52272},
																				run: (*parser).callonExtraListElement554,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52272},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52272},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52273},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52285},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonExtraListElement559,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1509, col: 5, offset: 48875},
													expr: &actionExpr{
														pos: position{line: 1628, col: 5, offset: 52824},
														run: (*parser).callonExtraListElement563,
														expr: &seqExpr{
															pos: position{line: 1628, col: 5, offset: 52824},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1628, col: 5, offset: 52824},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonExtraListElement566,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1629, col: 5, offset: 52836},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1630, col: 9, offset: 52852},
																		run: (*parser).callonExtraListElement569,
																		expr: &choiceExpr{
																			pos: position{line: 1630, col: 10, offset: 52853},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1630, col: 11, offset: 52854},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1630, col: 18, offset: 52861},
																					expr: &litMatcher{
																						pos:        position{line: 1630, col: 19, offset: 52862},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1633, col: 7, offset: 52952},
																	run: (*parser).callonExtraListElement574,
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonExtraListElement575,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1510, col: 5, offset: 48907},
													expr: &actionExpr{
														pos: position{line: 1717, col: 5, offset: 55356},
														run: (*parser).callonExtraListElement579,
														expr: &seqExpr{
															pos: position{line: 1717, col: 5, offset: 55356},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1717, col: 5, offset: 55356},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1717, col: 9, offset: 55360},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1717, col: 14, offset: 55365},
																		run: (*parser).callonExtraListElement583,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1717, col: 14, offset: 55365},
																			expr: &charClassMatcher{
																				pos:        position{line: 1717, col: 14, offset: 55365},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1717, col: 62, offset: 55413},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonExtraListElement587,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1511, col: 5, offset: 48937},
													expr: &seqExpr{
														pos: position{line: 1511, col: 7, offset: 48939},
														exprs: []interface{}{
															&actionExpr{
																pos: position{line: 1663, col: 5, offset: 53843},
																run: (*parser).callonExtraListElement592,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1663, col: 5, offset: 53843},
																	expr: &seqExpr{
																		pos: position{line: 1663, col: 6, offset: 53844},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1663, col: 6, offset: 53844},
																				expr: &actionExpr{
																					pos: position{line: 1668, col: 5, offset: 53994},
																					run: (*parser).callonExtraListElement596,
																					expr: &seqExpr{
																						pos: position{line: 1668, col: 5, offset: 53994},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1668, col: 5, offset: 53994},
																								label: "separator",
																								expr: &actionExpr{
																									pos: position{line: 1668, col: 16, offset: 54005},
																									run: (*parser).callonExtraListElement599,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1668, col: 16, offset: 54005},
																										expr: &litMatcher{
																											pos:        position{line: 1668, col: 17, offset: 54006},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1671, col: 5, offset: 54063},
																								run: (*parser).callonExtraListElement602,
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1663, col: 35, offset: 53873},
																				expr: &choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonExtraListElement605,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																			&anyMatcher{
																				line: 1663, col: 40, offset: 53878,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1668, col: 5, offset: 53994},
																run: (*parser).callonExtraListElement613,
																expr: &seqExpr{
																	pos: position{line: 1668, col: 5, offset: 53994},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1668, col: 5, offset: 53994},
																			label: "separator",
																			expr: &actionExpr{
																				pos: position{line: 1668, col: 16, offset: 54005},
																				run: (*parser).callonExtraListElement616,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1668, col: 16, offset: 54005},
																					expr: &litMatcher{
																						pos:        position{line: 1668, col: 17, offset: 54006},
																						val:        ":",
																						ignoreCase: false,
																						want:       "\":\"",
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1671, col: 5, offset: 54063},
																			run: (*parser).callonExtraListElement619,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 1512, col: 5, offset: 48995},
													expr: &actionExpr{
														pos: position{line: 724, col: 5, offset: 23039},
														run: (*parser).callonExtraListElement621,
														expr: &seqExpr{
															pos: position{line: 724, col: 5, offset: 23039},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 724, col: 5, offset: 23039},
																	expr: &charClassMatcher{
																		pos:        position{line: 2746, col: 13, offset: 87373},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&labeledExpr{
																	pos:   position{line: 725, col: 5, offset: 23069},
																	label: "delimiter",
																	expr: &choiceExpr{
																		pos: position{line: 726, col: 9, offset: 23089},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 740, col: 5, offset: 23581},
																				run: (*parser).callonExtraListElement627,
																				expr: &seqExpr{
																					pos: position{line: 740, col: 5, offset: 23581},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 740, col: 5, offset: 23581},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 740, col: 16, offset: 23592},
																								run: (*parser).callonExtraListElement630,
																								expr: &seqExpr{
																									pos: position{line: 740, col: 16, offset: 23592},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 740, col: 16, offset: 23592},
																											val:        "////",
																											ignoreCase: false,
																											want:       "\"////\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 740, col: 23, offset: 23599},
																											expr: &litMatcher{
																												pos:        position{line: 740, col: 23, offset: 23599},
																												val:        "/",
																												ignoreCase: false,
																												want:       "\"/\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 742, col: 8, offset: 23683},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement636,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement639,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 747, col: 5, offset: 23829},
																				run: (*parser).callonExtraListElement646,
																				expr: &seqExpr{
																					pos: position{line: 747, col: 5, offset: 23829},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 747, col: 5, offset: 23829},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 747, col: 16, offset: 23840},
																								run: (*parser).callonExtraListElement649,
																								expr: &seqExpr{
																									pos: position{line: 747, col: 16, offset: 23840},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 747, col: 16, offset: 23840},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 747, col: 23, offset: 23847},
																											expr: &litMatcher{
																												pos:        position{line: 747, col: 23, offset: 23847},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 749, col: 8, offset: 23931},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement655,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement658,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 760, col: 26, offset: 24317},
																				run: (*parser).callonExtraListElement665,
																				expr: &seqExpr{
																					pos: position{line: 760, col: 26, offset: 24317},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 760, col: 26, offset: 24317},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 760, col: 32, offset: 24323},
																							label: "language",
																							expr: &actionExpr{
																								pos: position{line: 764, col: 13, offset: 24453},
																								run: (*parser).callonExtraListElement669,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 764, col: 14, offset: 24454},
																									expr: &charClassMatcher{
																										pos:        position{line: 764, col: 14, offset: 24454},
																										val:        "[^\\r\\n` ]",
																										chars:      []rune{'\r', '\n', '`', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 760, col: 52, offset: 24343},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement673,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement676,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 754, col: 5, offset: 24076},
																				run: (*parser).callonExtraListElement683,
																				expr: &seqExpr{
																					pos: position{line: 754, col: 5, offset: 24076},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 754, col: 5, offset: 24076},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 754, col: 16, offset: 24087},
																								run: (*parser).callonExtraListElement686,
																								expr: &seqExpr{
																									pos: position{line: 754, col: 16, offset: 24087},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 754, col: 16, offset: 24087},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 754, col: 22, offset: 24093},
																											expr: &litMatcher{
																												pos:        position{line: 754, col: 22, offset: 24093},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 756, col: 8, offset: 24177},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement692,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement695,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 769, col: 5, offset: 24613},
																				run: (*parser).callonExtraListElement702,
																				expr: &seqExpr{
																					pos: position{line: 769, col: 5, offset: 24613},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 769, col: 5, offset: 24613},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 769, col: 16, offset: 24624},
																								run: (*parser).callonExtraListElement705,
																								expr: &seqExpr{
																									pos: position{line: 769, col: 16, offset: 24624},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 769, col: 16, offset: 24624},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 769, col: 23, offset: 24631},
																											expr: &litMatcher{
																												pos:        position{line: 769, col: 23, offset: 24631},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 771, col: 8, offset: 24715},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement711,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement714,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 783, col: 5, offset: 25089},
																				run: (*parser).callonExtraListElement721,
																				expr: &seqExpr{
																					pos: position{line: 783, col: 5, offset: 25089},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 783, col: 5, offset: 25089},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 783, col: 16, offset: 25100},
																								run: (*parser).callonExtraListElement724,
																								expr: &seqExpr{
																									pos: position{line: 783, col: 16, offset: 25100},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 783, col: 16, offset: 25100},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 783, col: 23, offset: 25107},
																											expr: &litMatcher{
																												pos:        position{line: 783, col: 23, offset: 25107},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 785, col: 8, offset: 25191},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement730,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement733,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 790, col: 5, offset: 25341},
																				run: (*parser).callonExtraListElement740,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 25341},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 25341},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 790, col: 16, offset: 25352},
																								run: (*parser).callonExtraListElement743,
																								expr: &seqExpr{
																									pos: position{line: 790, col: 16, offset: 25352},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 790, col: 16, offset: 25352},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 790, col: 23, offset: 25359},
																											expr: &litMatcher{
																												pos:        position{line: 790, col: 23, offset: 25359},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 792, col: 8, offset: 25443},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement749,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement752,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 797, col: 5, offset: 25591},
																				run: (*parser).callonExtraListElement759,
																				expr: &seqExpr{
																					pos: position{line: 797, col: 5, offset: 25591},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 797, col: 5, offset: 25591},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 797, col: 16, offset: 25602},
																								run: (*parser).callonExtraListElement762,
																								expr: &seqExpr{
																									pos: position{line: 797, col: 16, offset: 25602},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 797, col: 16, offset: 25602},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 797, col: 23, offset: 25609},
																											expr: &litMatcher{
																												pos:        position{line: 797, col: 23, offset: 25609},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 799, col: 8, offset: 25693},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement768,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement771,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 804, col: 5, offset: 25837},
																				run: (*parser).callonExtraListElement778,
																				expr: &seqExpr{
																					pos: position{line: 804, col: 5, offset: 25837},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 804, col: 5, offset: 25837},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 804, col: 16, offset: 25848},
																								run: (*parser).callonExtraListElement781,
																								expr: &seqExpr{
																									pos: position{line: 804, col: 16, offset: 25848},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 804, col: 16, offset: 25848},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 804, col: 23, offset: 25855},
																											expr: &litMatcher{
																												pos:        position{line: 804, col: 23, offset: 25855},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 806, col: 8, offset: 25939},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonExtraListElement787,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonExtraListElement790,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1513, col: 5, offset: 49015},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2852, col: 14, offset: 90052},
														run: (*parser).callonExtraListElement798,
														expr: &oneOrMoreExpr{
															pos: position{line: 2852, col: 14, offset: 90052},
															expr: &charClassMatcher{
																pos:        position{line: 2852, col: 14, offset: 90052},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonExtraListElement802,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuation",
			pos:  position{line: 1529, col: 1, offset: 49406},
			expr: &actionExpr{
				pos: position{line: 1530, col: 5, offset: 49431},
				run: (*parser).callonListContinuation1,
				expr: &seqExpr{
					pos: position{line: 1530, col: 5, offset: 49431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1530, col: 5, offset: 49431},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1530, col: 12, offset: 49438},
								expr: &seqExpr{
									pos: position{line: 1530, col: 13, offset: 49439},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1530, col: 13, offset: 49439},
											expr: &actionExpr{
												pos: position{line: 2902, col: 10, offset: 91540},
												run: (*parser).callonListContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 2902, col: 10, offset: 91540},
													val:        "[\\t ]",
													chars:      []rune{'\t', ' '},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 2911, col: 12, offset: 91711},
											run: (*parser).callonListContinuation9,
											expr: &choiceExpr{
												pos: position{line: 2911, col: 13, offset: 91712},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 2911, col: 13, offset: 91712},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2911, col: 20, offset: 91719},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 2911, col: 29, offset: 91728},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1537, col: 27, offset: 49643},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1537, col: 31, offset: 49647},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonListContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 2911, col: 12, offset: 91711},
							run: (*parser).callonListContinuation18,
							expr: &choiceExpr{
								pos: position{line: 2911, col: 13, offset: 91712},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 2911, col: 13, offset: 91712},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2911, col: 20, offset: 91719},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 2911, col: 29, offset: 91728},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 5, offset: 49488},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 13, offset: 49496},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 13, offset: 49496},
									name: "ListContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListContinuationElement",
			pos:  position{line: 1539, col: 1, offset: 49663},
			expr: &actionExpr{
				pos: position{line: 1540, col: 5, offset: 49734},
				run: (*parser).callonListContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 5, offset: 49734},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 1541, col: 5, offset: 49762},
							expr: &choiceExpr{
								pos: position{line: 1478, col: 5, offset: 47720},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1571, col: 5, offset: 50654},
										run: (*parser).callonListContinuationElement7,
										expr: &seqExpr{
											pos: position{line: 1571, col: 5, offset: 50654},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1571, col: 5, offset: 50654},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1578, col: 5, offset: 50862},
														run: (*parser).callonListContinuationElement10,
														expr: &seqExpr{
															pos: position{line: 1578, col: 5, offset: 50862},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1578, col: 5, offset: 50862},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement13,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1578, col: 12, offset: 50869},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1580, col: 9, offset: 50932},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1580, col: 9, offset: 50932},
																				run: (*parser).callonListContinuationElement17,
																				expr: &seqExpr{
																					pos: position{line: 1580, col: 9, offset: 50932},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1580, col: 9, offset: 50932},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1580, col: 16, offset: 50939},
																								run: (*parser).callonListContinuationElement20,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1580, col: 16, offset: 50939},
																									expr: &litMatcher{
																										pos:        position{line: 1580, col: 17, offset: 50940},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1584, col: 9, offset: 51040},
																							run: (*parser).callonListContinuationElement23,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1603, col: 11, offset: 51757},
																				run: (*parser).callonListContinuationElement24,
																				expr: &seqExpr{
																					pos: position{line: 1603, col: 11, offset: 51757},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1603, col: 11, offset: 51757},
																							expr: &charClassMatcher{
																								pos:        position{line: 1603, col: 12, offset: 51758},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1603, col: 20, offset: 51766},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1605, col: 13, offset: 51883},
																				run: (*parser).callonListContinuationElement29,
																				expr: &seqExpr{
																					pos: position{line: 1605, col: 13, offset: 51883},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1605, col: 14, offset: 51884},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1605, col: 21, offset: 51891},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1607, col: 13, offset: 52011},
																				run: (*parser).callonListContinuationElement33,
																				expr: &seqExpr{
																					pos: position{line: 1607, col: 13, offset: 52011},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1607, col: 14, offset: 52012},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1607, col: 21, offset: 52019},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1609, col: 13, offset: 52139},
																				run: (*parser).callonListContinuationElement37,
																				expr: &seqExpr{
																					pos: position{line: 1609, col: 13, offset: 52139},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1609, col: 13, offset: 52139},
																							expr: &charClassMatcher{
																								pos:        position{line: 1609, col: 14, offset: 52140},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1609, col: 26, offset: 52152},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1611, col: 13, offset: 52272},
																				run: (*parser).callonListContinuationElement42,
																				expr: &seqExpr{
																					pos: position{line: 1611, col: 13, offset: 52272},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1611, col: 13, offset: 52272},
																							expr: &charClassMatcher{
																								pos:        position{line: 1611, col: 14, offset: 52273},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1611, col: 26, offset: 52285},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListContinuationElement47,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1572, col: 5, offset: 50693},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListContinuationElement51,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListContinuationElement55,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1621, col: 5, offset: 52551},
										run: (*parser).callonListContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1621, col: 5, offset: 52551},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1621, col: 5, offset: 52551},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1628, col: 5, offset: 52824},
														run: (*parser).callonListContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1628, col: 5, offset: 52824},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1628, col: 5, offset: 52824},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1629, col: 5, offset: 52836},
																	label: "style",
																	expr: &actionExpr{
																		pos: position{line: 1630, col: 9, offset: 52852},
																		run: (*parser).callonListContinuationElement75,
																		expr: &choiceExpr{
																			pos: position{line: 1630, col: 10, offset: 52853},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1630, col: 11, offset: 52854},
																					val:        "-",
																					ignoreCase: false,
																					want:       "\"-\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1630, col: 18, offset: 52861},
																					expr: &litMatcher{
																						pos:        position{line: 1630, col: 19, offset: 52862},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1633, col: 7, offset: 52952},
																	run: (*parser).callonListContinuationElement80,
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListContinuationElement81,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1622, col: 5, offset: 52592},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1622, col: 16, offset: 52603},
														expr: &actionExpr{
															pos: position{line: 1643, col: 5, offset: 53217},
															run: (*parser).callonListContinuationElement86,
															expr: &seqExpr{
																pos: position{line: 1643, col: 5, offset: 53217},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1643, col: 5, offset: 53217},
																		expr: &litMatcher{
																			pos:        position{line: 1643, col: 6, offset: 53218},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1643, col: 10, offset: 53222},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1644, col: 7, offset: 53236},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1644, col: 7, offset: 53236},
																					run: (*parser).callonListContinuationElement92,
																					expr: &litMatcher{
																						pos:        position{line: 1644, col: 7, offset: 53236},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1645, col: 7, offset: 53281},
																					run: (*parser).callonListContinuationElement94,
																					expr: &litMatcher{
																						pos:        position{line: 1645, col: 7, offset: 53281},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1646, col: 7, offset: 53324},
																					run: (*parser).callonListContinuationElement96,
																					expr: &litMatcher{
																						pos:        position{line: 1646, col: 7, offset: 53324},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		run: (*parser).callonListContinuationElement98,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2906, col: 11, offset: 91601},
																			expr: &charClassMatcher{
																				pos:        position{line: 2906, col: 11, offset: 91601},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1623, col: 5, offset: 52642},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListContinuationElement102,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListContinuationElement106,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement110,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1711, col: 5, offset: 55159},
										run: (*parser).callonListContinuationElement117,
										expr: &seqExpr{
											pos: position{line: 1711, col: 5, offset: 55159},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1711, col: 5, offset: 55159},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1717, col: 5, offset: 55356},
														run: (*parser).callonListContinuationElement120,
														expr: &seqExpr{
															pos: position{line: 1717, col: 5, offset: 55356},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1717, col: 5, offset: 55356},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1717, col: 9, offset: 55360},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1717, col: 14, offset: 55365},
																		run: (*parser).callonListContinuationElement124,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1717, col: 14, offset: 55365},
																			expr: &charClassMatcher{
																				pos:        position{line: 1717, col: 14, offset: 55365},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1717, col: 62, offset: 55413},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonListContinuationElement128,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1712, col: 5, offset: 55195},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1519, col: 5, offset: 49160},
														run: (*parser).callonListContinuationElement132,
														expr: &seqExpr{
															pos: position{line: 1519, col: 5, offset: 49160},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1519, col: 5, offset: 49160},
																	label: "rawLines",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1519, col: 14, offset: 49169},
																		expr: &actionExpr{
																			pos: position{line: 1519, col: 15, offset: 49170},
																			run: (*parser).callonListContinuationElement136,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1519, col: 15, offset: 49170},
																				expr: &charClassMatcher{
																					pos:        position{line: 1519, col: 15, offset: 49170},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement140,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1655, col: 5, offset: 53517},
										run: (*parser).callonListContinuationElement147,
										expr: &seqExpr{
											pos: position{line: 1655, col: 5, offset: 53517},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1655, col: 5, offset: 53517},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1663, col: 5, offset: 53843},
														run: (*parser).callonListContinuationElement150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1663, col: 5, offset: 53843},
															expr: &seqExpr{
																pos: position{line: 1663, col: 6, offset: 53844},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1663, col: 6, offset: 53844},
																		expr: &actionExpr{
																			pos: position{line: 1668, col: 5, offset: 53994},
																			run: (*parser).callonListContinuationElement154,
																			expr: &seqExpr{
																				pos: position{line: 1668, col: 5, offset: 53994},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1668, col: 5, offset: 53994},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1668, col: 16, offset: 54005},
																							run: (*parser).callonListContinuationElement157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1668, col: 16, offset: 54005},
																								expr: &litMatcher{
																									pos:        position{line: 1668, col: 17, offset: 54006},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1671, col: 5, offset: 54063},
																						run: (*parser).callonListContinuationElement160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1663, col: 35, offset: 53873},
																		expr: &choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListContinuationElement163,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1663, col: 40, offset: 53878,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1656, col: 5, offset: 53552},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1668, col: 5, offset: 53994},
														run: (*parser).callonListContinuationElement172,
														expr: &seqExpr{
															pos: position{line: 1668, col: 5, offset: 53994},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1668, col: 5, offset: 53994},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1668, col: 16, offset: 54005},
																		run: (*parser).callonListContinuationElement175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1668, col: 16, offset: 54005},
																			expr: &litMatcher{
																				pos:        position{line: 1668, col: 17, offset: 54006},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1671, col: 5, offset: 54063},
																	run: (*parser).callonListContinuationElement178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1657, col: 5, offset: 53597},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1679, col: 5, offset: 54312},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1681, col: 9, offset: 54378},
																run: (*parser).callonListContinuationElement181,
																expr: &seqExpr{
																	pos: position{line: 1681, col: 9, offset: 54378},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1681, col: 9, offset: 54378},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonListContinuationElement184,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListContinuationElement187,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1682, col: 9, offset: 54397},
																			expr: &actionExpr{
																				pos: position{line: 677, col: 14, offset: 21486},
																				run: (*parser).callonListContinuationElement195,
																				expr: &seqExpr{
																					pos: position{line: 677, col: 14, offset: 21486},
																					exprs: []interface{}{
																						&andExpr{
																							pos: position{line: 2919, col: 11, offset: 91874},
																							expr: &anyMatcher{
																								line: 2919, col: 13, offset: 91876,
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 677, col: 21, offset: 21493},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement200,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement203,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1688, col: 9, offset: 54526},
																run: (*parser).callonListContinuationElement210,
																expr: &seqExpr{
																	pos: position{line: 1688, col: 9, offset: 54526},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 2906, col: 11, offset: 91601},
																			run: (*parser).callonListContinuationElement212,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2906, col: 11, offset: 91601},
																				expr: &charClassMatcher{
																					pos:        position{line: 2906, col: 11, offset: 91601},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1689, col: 9, offset: 54599},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1689, col: 18, offset: 54608},
																				run: (*parser).callonListContinuationElement216,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1689, col: 18, offset: 54608},
																					expr: &charClassMatcher{
																						pos:        position{line: 1689, col: 18, offset: 54608},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListContinuationElement220,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1542, col: 5, offset: 49779},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1542, col: 16, offset: 49790},
								expr: &ruleRefExpr{
									pos:  position{line: 1542, col: 17, offset: 49791},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 5, offset: 49813},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1544, col: 9, offset: 49831},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 677, col: 14, offset: 21486},
										run: (*parser).callonListContinuationElement232,
										expr: &seqExpr{
											pos: position{line: 677, col: 14, offset: 21486},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 2919, col: 11, offset: 91874},
													expr: &anyMatcher{
														line: 2919, col: 13, offset: 91876,
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 677, col: 21, offset: 21493},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonListContinuationElement237,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement240,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 11, offset: 49851},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 360, col: 19, offset: 10911},
										run: (*parser).callonListContinuationElement248,
										expr: &seqExpr{
											pos: position{line: 360, col: 19, offset: 10911},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 360, col: 19, offset: 10911},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 360, col: 24, offset: 10916},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9737},
														run: (*parser).callonListContinuationElement252,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9737},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9747},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9748},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 360, col: 45, offset: 10937},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 360, col: 49, offset: 10941},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonListContinuationElement259,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement262,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 362, col: 9, offset: 11032},
										run: (*parser).callonListContinuationElement269,
										expr: &seqExpr{
											pos: position{line: 362, col: 9, offset: 11032},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 362, col: 9, offset: 11032},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 362, col: 13, offset: 11036},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 318, col: 18, offset: 9737},
														run: (*parser).callonListContinuationElement273,
														expr: &seqExpr{
															pos: position{line: 318, col: 18, offset: 9737},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 318, col: 18, offset: 9737},
																	val:        "[_\\pL\\pN]",
																	chars:      []rune{'_'},
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 318, col: 28, offset: 9747},
																	expr: &charClassMatcher{
																		pos:        position{line: 318, col: 29, offset: 9748},
																		val:        "[-\\pL\\pN]",
																		chars:      []rune{'-'},
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 362, col: 34, offset: 11057},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 362, col: 39, offset: 11062},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonListContinuationElement280,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement283,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 820, col: 5, offset: 26321},
										run: (*parser).callonListContinuationElement290,
										expr: &seqExpr{
											pos: position{line: 820, col: 5, offset: 26321},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 740, col: 5, offset: 23581},
													run: (*parser).callonListContinuationElement292,
													expr: &seqExpr{
														pos: position{line: 740, col: 5, offset: 23581},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 740, col: 5, offset: 23581},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 740, col: 16, offset: 23592},
																	run: (*parser).callonListContinuationElement295,
																	expr: &seqExpr{
																		pos: position{line: 740, col: 16, offset: 23592},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 740, col: 16, offset: 23592},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 740, col: 23, offset: 23599},
																				expr: &litMatcher{
																					pos:        position{line: 740, col: 23, offset: 23599},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 742, col: 8, offset: 23683},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonListContinuationElement301,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonListContinuationElement304,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 821, col: 5, offset: 26352},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 831, col: 5, offset: 26638},
														expr: &actionExpr{
															pos: position{line: 831, col: 6, offset: 26639},
															run: (*parser).callonListContinuationElement313,
															expr: &seqExpr{
																pos: position{line: 831, col: 6, offset: 26639},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 831, col: 6, offset: 26639},
																		expr: &choiceExpr{
																			pos: position{line: 828, col: 29, offset: 26581},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 740, col: 5, offset: 23581},
																					run: (*parser).callonListContinuationElement317,
																					expr: &seqExpr{
																						pos: position{line: 740, col: 5, offset: 23581},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 740, col: 5, offset: 23581},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 740, col: 16, offset: 23592},
																									run: (*parser).callonListContinuationElement320,
																									expr: &seqExpr{
																										pos: position{line: 740, col: 16, offset: 23592},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 740, col: 16, offset: 23592},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 740, col: 23, offset: 23599},
																												expr: &litMatcher{
																													pos:        position{line: 740, col: 23, offset: 23599},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 742, col: 8, offset: 23683},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonListContinuationElement326,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonListContinuationElement329,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 832, col: 5, offset: 26669},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement339,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement344,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement348,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 822, col: 5, offset: 26386},
													expr: &choiceExpr{
														pos: position{line: 828, col: 29, offset: 26581},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 740, col: 5, offset: 23581},
																run: (*parser).callonListContinuationElement357,
																expr: &seqExpr{
																	pos: position{line: 740, col: 5, offset: 23581},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 740, col: 5, offset: 23581},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 740, col: 16, offset: 23592},
																				run: (*parser).callonListContinuationElement360,
																				expr: &seqExpr{
																					pos: position{line: 740, col: 16, offset: 23592},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 740, col: 16, offset: 23592},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 740, col: 23, offset: 23599},
																							expr: &litMatcher{
																								pos:        position{line: 740, col: 23, offset: 23599},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 742, col: 8, offset: 23683},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonListContinuationElement366,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonListContinuationElement369,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 840, col: 5, offset: 26822},
										run: (*parser).callonListContinuationElement378,
										expr: &seqExpr{
											pos: position{line: 840, col: 5, offset: 26822},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 840, col: 5, offset: 26822},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 747, col: 5, offset: 23829},
														run: (*parser).callonListContinuationElement381,
														expr: &seqExpr{
															pos: position{line: 747, col: 5, offset: 23829},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 747, col: 5, offset: 23829},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 747, col: 16, offset: 23840},
																		run: (*parser).callonListContinuationElement384,
																		expr: &seqExpr{
																			pos: position{line: 747, col: 16, offset: 23840},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 747, col: 16, offset: 23840},
																					val:        "====",
																					ignoreCase: false,
																					want:       "\"====\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 747, col: 23, offset: 23847},
																					expr: &litMatcher{
																						pos:        position{line: 747, col: 23, offset: 23847},
																						val:        "=",
																						ignoreCase: false,
																						want:       "\"=\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 749, col: 8, offset: 23931},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement390,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement393,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 841, col: 5, offset: 26861},
													run: (*parser).callonListContinuationElement400,
												},
												&labeledExpr{
													pos:   position{line: 844, col: 5, offset: 26953},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 859, col: 4, offset: 27350},
														expr: &actionExpr{
															pos: position{line: 859, col: 5, offset: 27351},
															run: (*parser).callonListContinuationElement403,
															expr: &seqExpr{
																pos: position{line: 859, col: 5, offset: 27351},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 859, col: 5, offset: 27351},
																		expr: &choiceExpr{
																			pos: position{line: 852, col: 5, offset: 27193},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 852, col: 5, offset: 27193},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 852, col: 5, offset: 27193},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 747, col: 5, offset: 23829},
																								run: (*parser).callonListContinuationElement409,
																								expr: &seqExpr{
																									pos: position{line: 747, col: 5, offset: 23829},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 747, col: 5, offset: 23829},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 747, col: 16, offset: 23840},
																												run: (*parser).callonListContinuationElement412,
																												expr: &seqExpr{
																													pos: position{line: 747, col: 16, offset: 23840},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 747, col: 16, offset: 23840},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 747, col: 23, offset: 23847},
																															expr: &litMatcher{
																																pos:        position{line: 747, col: 23, offset: 23847},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 749, col: 8, offset: 23931},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement418,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement421,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 853, col: 5, offset: 27224},
																							run: (*parser).callonListContinuationElement428,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 860, col: 5, offset: 27381},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement432,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement437,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement441,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 845, col: 5, offset: 26987},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 845, col: 9, offset: 26991},
														expr: &choiceExpr{
															pos: position{line: 852, col: 5, offset: 27193},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 852, col: 5, offset: 27193},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 852, col: 5, offset: 27193},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 747, col: 5, offset: 23829},
																				run: (*parser).callonListContinuationElement453,
																				expr: &seqExpr{
																					pos: position{line: 747, col: 5, offset: 23829},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 747, col: 5, offset: 23829},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 747, col: 16, offset: 23840},
																								run: (*parser).callonListContinuationElement456,
																								expr: &seqExpr{
																									pos: position{line: 747, col: 16, offset: 23840},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 747, col: 16, offset: 23840},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 747, col: 23, offset: 23847},
																											expr: &litMatcher{
																												pos:        position{line: 747, col: 23, offset: 23847},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 749, col: 8, offset: 23931},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement462,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement465,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 853, col: 5, offset: 27224},
																			run: (*parser).callonListContinuationElement472,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 952, col: 5, offset: 29673},
										run: (*parser).callonListContinuationElement475,
										expr: &seqExpr{
											pos: position{line: 952, col: 5, offset: 29673},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 952, col: 5, offset: 29673},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 760, col: 26, offset: 24317},
														run: (*parser).callonListContinuationElement478,
														expr: &seqExpr{
															pos: position{line: 760, col: 26, offset: 24317},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 760, col: 26, offset: 24317},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 760, col: 32, offset: 24323},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 764, col: 13, offset: 24453},
																		run: (*parser).callonListContinuationElement482,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 764, col: 14, offset: 24454},
																			expr: &charClassMatcher{
																				pos:        position{line: 764, col: 14, offset: 24454},
																				val:        "[^\\r\\n` ]",
																				chars:      []rune{'\r', '\n', '`', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 760, col: 52, offset: 24343},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement486,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement489,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 953, col: 5, offset: 29719},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 966, col: 5, offset: 30192},
														expr: &actionExpr{
															pos: position{line: 966, col: 6, offset: 30193},
															run: (*parser).callonListContinuationElement498,
															expr: &seqExpr{
																pos: position{line: 966, col: 6, offset: 30193},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 966, col: 6, offset: 30193},
																		expr: &seqExpr{
																			pos: position{line: 963, col: 34, offset: 30140},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 963, col: 34, offset: 30140},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 963, col: 40, offset: 30146},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonListContinuationElement504,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonListContinuationElement507,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 967, col: 5, offset: 30228},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement515,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement520,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement524,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 954, col: 5, offset: 29758},
													expr: &seqExpr{
														pos: position{line: 963, col: 34, offset: 30140},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 963, col: 34, offset: 30140},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 963, col: 40, offset: 30146},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonListContinuationElement535,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonListContinuationElement538,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 868, col: 5, offset: 27534},
										run: (*parser).callonListContinuationElement545,
										expr: &seqExpr{
											pos: position{line: 868, col: 5, offset: 27534},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 868, col: 5, offset: 27534},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 754, col: 5, offset: 24076},
														run: (*parser).callonListContinuationElement548,
														expr: &seqExpr{
															pos: position{line: 754, col: 5, offset: 24076},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 754, col: 5, offset: 24076},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 754, col: 16, offset: 24087},
																		run: (*parser).callonListContinuationElement551,
																		expr: &seqExpr{
																			pos: position{line: 754, col: 16, offset: 24087},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 754, col: 16, offset: 24087},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 754, col: 22, offset: 24093},
																					expr: &litMatcher{
																						pos:        position{line: 754, col: 22, offset: 24093},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 756, col: 8, offset: 24177},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement557,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement560,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 869, col: 5, offset: 27572},
													run: (*parser).callonListContinuationElement567,
												},
												&labeledExpr{
													pos:   position{line: 872, col: 5, offset: 27664},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 887, col: 5, offset: 28054},
														expr: &actionExpr{
															pos: position{line: 887, col: 6, offset: 28055},
															run: (*parser).callonListContinuationElement570,
															expr: &seqExpr{
																pos: position{line: 887, col: 6, offset: 28055},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 887, col: 6, offset: 28055},
																		expr: &choiceExpr{
																			pos: position{line: 880, col: 5, offset: 27898},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 880, col: 5, offset: 27898},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 880, col: 5, offset: 27898},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 754, col: 5, offset: 24076},
																								run: (*parser).callonListContinuationElement576,
																								expr: &seqExpr{
																									pos: position{line: 754, col: 5, offset: 24076},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 754, col: 5, offset: 24076},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 754, col: 16, offset: 24087},
																												run: (*parser).callonListContinuationElement579,
																												expr: &seqExpr{
																													pos: position{line: 754, col: 16, offset: 24087},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 754, col: 16, offset: 24087},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 754, col: 22, offset: 24093},
																															expr: &litMatcher{
																																pos:        position{line: 754, col: 22, offset: 24093},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 756, col: 8, offset: 24177},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement585,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement588,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 881, col: 5, offset: 27928},
																							run: (*parser).callonListContinuationElement595,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 888, col: 5, offset: 28084},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement599,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement604,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement608,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 873, col: 5, offset: 27697},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 873, col: 9, offset: 27701},
														expr: &choiceExpr{
															pos: position{line: 880, col: 5, offset: 27898},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 880, col: 5, offset: 27898},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 880, col: 5, offset: 27898},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 754, col: 5, offset: 24076},
																				run: (*parser).callonListContinuationElement620,
																				expr: &seqExpr{
																					pos: position{line: 754, col: 5, offset: 24076},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 754, col: 5, offset: 24076},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 754, col: 16, offset: 24087},
																								run: (*parser).callonListContinuationElement623,
																								expr: &seqExpr{
																									pos: position{line: 754, col: 16, offset: 24087},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 754, col: 16, offset: 24087},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 754, col: 22, offset: 24093},
																											expr: &litMatcher{
																												pos:        position{line: 754, col: 22, offset: 24093},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 756, col: 8, offset: 24177},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement629,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement632,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 881, col: 5, offset: 27928},
																			run: (*parser).callonListContinuationElement639,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 896, col: 5, offset: 28239},
										run: (*parser).callonListContinuationElement642,
										expr: &seqExpr{
											pos: position{line: 896, col: 5, offset: 28239},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 896, col: 5, offset: 28239},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 769, col: 5, offset: 24613},
														run: (*parser).callonListContinuationElement645,
														expr: &seqExpr{
															pos: position{line: 769, col: 5, offset: 24613},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 769, col: 5, offset: 24613},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 769, col: 16, offset: 24624},
																		run: (*parser).callonListContinuationElement648,
																		expr: &seqExpr{
																			pos: position{line: 769, col: 16, offset: 24624},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 769, col: 16, offset: 24624},
																					val:        "----",
																					ignoreCase: false,
																					want:       "\"----\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 769, col: 23, offset: 24631},
																					expr: &litMatcher{
																						pos:        position{line: 769, col: 23, offset: 24631},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 771, col: 8, offset: 24715},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement654,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement657,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 897, col: 5, offset: 28278},
													run: (*parser).callonListContinuationElement664,
												},
												&labeledExpr{
													pos:   position{line: 900, col: 5, offset: 28370},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 915, col: 5, offset: 28768},
														expr: &actionExpr{
															pos: position{line: 915, col: 6, offset: 28769},
															run: (*parser).callonListContinuationElement667,
															expr: &seqExpr{
																pos: position{line: 915, col: 6, offset: 28769},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 915, col: 6, offset: 28769},
																		expr: &choiceExpr{
																			pos: position{line: 908, col: 5, offset: 28610},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 908, col: 5, offset: 28610},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 908, col: 5, offset: 28610},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 769, col: 5, offset: 24613},
																								run: (*parser).callonListContinuationElement673,
																								expr: &seqExpr{
																									pos: position{line: 769, col: 5, offset: 24613},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 769, col: 5, offset: 24613},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 769, col: 16, offset: 24624},
																												run: (*parser).callonListContinuationElement676,
																												expr: &seqExpr{
																													pos: position{line: 769, col: 16, offset: 24624},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 769, col: 16, offset: 24624},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 769, col: 23, offset: 24631},
																															expr: &litMatcher{
																																pos:        position{line: 769, col: 23, offset: 24631},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 771, col: 8, offset: 24715},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement682,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement685,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 909, col: 5, offset: 28641},
																							run: (*parser).callonListContinuationElement692,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 916, col: 5, offset: 28799},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement696,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement701,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement705,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 901, col: 5, offset: 28404},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 901, col: 9, offset: 28408},
														expr: &choiceExpr{
															pos: position{line: 908, col: 5, offset: 28610},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 908, col: 5, offset: 28610},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 908, col: 5, offset: 28610},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 769, col: 5, offset: 24613},
																				run: (*parser).callonListContinuationElement717,
																				expr: &seqExpr{
																					pos: position{line: 769, col: 5, offset: 24613},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 769, col: 5, offset: 24613},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 769, col: 16, offset: 24624},
																								run: (*parser).callonListContinuationElement720,
																								expr: &seqExpr{
																									pos: position{line: 769, col: 16, offset: 24624},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 769, col: 16, offset: 24624},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 769, col: 23, offset: 24631},
																											expr: &litMatcher{
																												pos:        position{line: 769, col: 23, offset: 24631},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 771, col: 8, offset: 24715},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement726,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement729,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 909, col: 5, offset: 28641},
																			run: (*parser).callonListContinuationElement736,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 924, col: 5, offset: 28954},
										run: (*parser).callonListContinuationElement739,
										expr: &seqExpr{
											pos: position{line: 924, col: 5, offset: 28954},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 924, col: 5, offset: 28954},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 783, col: 5, offset: 25089},
														run: (*parser).callonListContinuationElement742,
														expr: &seqExpr{
															pos: position{line: 783, col: 5, offset: 25089},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 783, col: 5, offset: 25089},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 783, col: 16, offset: 25100},
																		run: (*parser).callonListContinuationElement745,
																		expr: &seqExpr{
																			pos: position{line: 783, col: 16, offset: 25100},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 783, col: 16, offset: 25100},
																					val:        "....",
																					ignoreCase: false,
																					want:       "\"....\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 783, col: 23, offset: 25107},
																					expr: &litMatcher{
																						pos:        position{line: 783, col: 23, offset: 25107},
																						val:        ".",
																						ignoreCase: false,
																						want:       "\".\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 785, col: 8, offset: 25191},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement751,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement754,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 925, col: 5, offset: 28993},
													run: (*parser).callonListContinuationElement761,
												},
												&labeledExpr{
													pos:   position{line: 928, col: 5, offset: 29085},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 943, col: 5, offset: 29483},
														expr: &actionExpr{
															pos: position{line: 943, col: 6, offset: 29484},
															run: (*parser).callonListContinuationElement764,
															expr: &seqExpr{
																pos: position{line: 943, col: 6, offset: 29484},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 943, col: 6, offset: 29484},
																		expr: &choiceExpr{
																			pos: position{line: 936, col: 5, offset: 29325},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 936, col: 5, offset: 29325},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 936, col: 5, offset: 29325},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 783, col: 5, offset: 25089},
																								run: (*parser).callonListContinuationElement770,
																								expr: &seqExpr{
																									pos: position{line: 783, col: 5, offset: 25089},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 783, col: 5, offset: 25089},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 783, col: 16, offset: 25100},
																												run: (*parser).callonListContinuationElement773,
																												expr: &seqExpr{
																													pos: position{line: 783, col: 16, offset: 25100},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 783, col: 16, offset: 25100},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 783, col: 23, offset: 25107},
																															expr: &litMatcher{
																																pos:        position{line: 783, col: 23, offset: 25107},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 785, col: 8, offset: 25191},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement779,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement782,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 937, col: 5, offset: 29356},
																							run: (*parser).callonListContinuationElement789,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 944, col: 5, offset: 29514},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement793,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement798,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement802,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 929, col: 5, offset: 29119},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 929, col: 9, offset: 29123},
														expr: &choiceExpr{
															pos: position{line: 936, col: 5, offset: 29325},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 936, col: 5, offset: 29325},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 936, col: 5, offset: 29325},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 783, col: 5, offset: 25089},
																				run: (*parser).callonListContinuationElement814,
																				expr: &seqExpr{
																					pos: position{line: 783, col: 5, offset: 25089},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 783, col: 5, offset: 25089},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 783, col: 16, offset: 25100},
																								run: (*parser).callonListContinuationElement817,
																								expr: &seqExpr{
																									pos: position{line: 783, col: 16, offset: 25100},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 783, col: 16, offset: 25100},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 783, col: 23, offset: 25107},
																											expr: &litMatcher{
																												pos:        position{line: 783, col: 23, offset: 25107},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 785, col: 8, offset: 25191},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement823,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement826,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 937, col: 5, offset: 29356},
																			run: (*parser).callonListContinuationElement833,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 975, col: 5, offset: 30397},
										run: (*parser).callonListContinuationElement836,
										expr: &seqExpr{
											pos: position{line: 975, col: 5, offset: 30397},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 975, col: 5, offset: 30397},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 982, col: 5, offset: 30656},
														run: (*parser).callonListContinuationElement839,
														expr: &seqExpr{
															pos: position{line: 982, col: 5, offset: 30656},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 982, col: 5, offset: 30656},
																	expr: &actionExpr{
																		pos: position{line: 677, col: 14, offset: 21486},
																		run: (*parser).callonListContinuationElement842,
																		expr: &seqExpr{
																			pos: position{line: 677, col: 14, offset: 21486},
																			exprs: []interface{}{
																				&andExpr{
																					pos: position{line: 2919, col: 11, offset: 91874},
																					expr: &anyMatcher{
																						line: 2919, col: 13, offset: 91876,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 677, col: 21, offset: 21493},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonListContinuationElement847,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonListContinuationElement850,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 983, col: 5, offset: 30671},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 984, col: 5, offset: 30681},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2852, col: 14, offset: 90052},
																		run: (*parser).callonListContinuationElement859,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2852, col: 14, offset: 90052},
																			expr: &charClassMatcher{
																				pos:        position{line: 2852, col: 14, offset: 90052},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement863,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 976, col: 5, offset: 30434},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 976, col: 16, offset: 30445},
														expr: &choiceExpr{
															pos: position{line: 976, col: 17, offset: 30446},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 982, col: 5, offset: 30656},
																	run: (*parser).callonListContinuationElement873,
																	expr: &seqExpr{
																		pos: position{line: 982, col: 5, offset: 30656},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 982, col: 5, offset: 30656},
																				expr: &actionExpr{
																					pos: position{line: 677, col: 14, offset: 21486},
																					run: (*parser).callonListContinuationElement876,
																					expr: &seqExpr{
																						pos: position{line: 677, col: 14, offset: 21486},
																						exprs: []interface{}{
																							&andExpr{
																								pos: position{line: 2919, col: 11, offset: 91874},
																								expr: &anyMatcher{
																									line: 2919, col: 13, offset: 91876,
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 677, col: 21, offset: 21493},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonListContinuationElement881,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonListContinuationElement884,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 983, col: 5, offset: 30671},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 984, col: 5, offset: 30681},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2852, col: 14, offset: 90052},
																					run: (*parser).callonListContinuationElement893,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2852, col: 14, offset: 90052},
																						expr: &charClassMatcher{
																							pos:        position{line: 2852, col: 14, offset: 90052},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonListContinuationElement897,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1785, col: 5, offset: 57639},
																	run: (*parser).callonListContinuationElement904,
																	expr: &seqExpr{
																		pos: position{line: 1785, col: 5, offset: 57639},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1785, col: 5, offset: 57639},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2852, col: 14, offset: 90052},
																					run: (*parser).callonListContinuationElement907,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2852, col: 14, offset: 90052},
																						expr: &charClassMatcher{
																							pos:        position{line: 2852, col: 14, offset: 90052},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1786, col: 5, offset: 57663},
																				run: (*parser).callonListContinuationElement910,
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonListContinuationElement912,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 997, col: 5, offset: 30946},
										run: (*parser).callonListContinuationElement919,
										expr: &seqExpr{
											pos: position{line: 997, col: 5, offset: 30946},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 997, col: 5, offset: 30946},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 776, col: 5, offset: 24858},
														run: (*parser).callonListContinuationElement922,
														expr: &seqExpr{
															pos: position{line: 776, col: 5, offset: 24858},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 776, col: 5, offset: 24858},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 776, col: 16, offset: 24869},
																		run: (*parser).callonListContinuationElement925,
																		expr: &litMatcher{
																			pos:        position{line: 776, col: 16, offset: 24869},
																			val:        "--",
																			ignoreCase: false,
																			want:       "\"--\"",
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 778, col: 8, offset: 24946},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement928,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement931,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 998, col: 5, offset: 30982},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1008, col: 5, offset: 31250},
														expr: &actionExpr{
															pos: position{line: 1008, col: 6, offset: 31251},
															run: (*parser).callonListContinuationElement940,
															expr: &seqExpr{
																pos: position{line: 1008, col: 6, offset: 31251},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1008, col: 6, offset: 31251},
																		expr: &choiceExpr{
																			pos: position{line: 1005, col: 26, offset: 31199},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 776, col: 5, offset: 24858},
																					run: (*parser).callonListContinuationElement944,
																					expr: &seqExpr{
																						pos: position{line: 776, col: 5, offset: 24858},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 776, col: 5, offset: 24858},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 776, col: 16, offset: 24869},
																									run: (*parser).callonListContinuationElement947,
																									expr: &litMatcher{
																										pos:        position{line: 776, col: 16, offset: 24869},
																										val:        "--",
																										ignoreCase: false,
																										want:       "\"--\"",
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 778, col: 8, offset: 24946},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 10, offset: 91540},
																									run: (*parser).callonListContinuationElement950,
																									expr: &charClassMatcher{
																										pos:        position{line: 2902, col: 10, offset: 91540},
																										val:        "[\\t ]",
																										chars:      []rune{'\t', ' '},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 2924, col: 8, offset: 91938},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonListContinuationElement953,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1009, col: 5, offset: 31278},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement963,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement968,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement972,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 999, col: 5, offset: 31013},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 999, col: 9, offset: 31017},
														expr: &choiceExpr{
															pos: position{line: 1005, col: 26, offset: 31199},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 776, col: 5, offset: 24858},
																	run: (*parser).callonListContinuationElement982,
																	expr: &seqExpr{
																		pos: position{line: 776, col: 5, offset: 24858},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 776, col: 5, offset: 24858},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 776, col: 16, offset: 24869},
																					run: (*parser).callonListContinuationElement985,
																					expr: &litMatcher{
																						pos:        position{line: 776, col: 16, offset: 24869},
																						val:        "--",
																						ignoreCase: false,
																						want:       "\"--\"",
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 778, col: 8, offset: 24946},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonListContinuationElement988,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonListContinuationElement991,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1017, col: 5, offset: 31441},
										run: (*parser).callonListContinuationElement1000,
										expr: &seqExpr{
											pos: position{line: 1017, col: 5, offset: 31441},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1017, col: 5, offset: 31441},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 790, col: 5, offset: 25341},
														run: (*parser).callonListContinuationElement1003,
														expr: &seqExpr{
															pos: position{line: 790, col: 5, offset: 25341},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 790, col: 5, offset: 25341},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 790, col: 16, offset: 25352},
																		run: (*parser).callonListContinuationElement1006,
																		expr: &seqExpr{
																			pos: position{line: 790, col: 16, offset: 25352},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 790, col: 16, offset: 25352},
																					val:        "++++",
																					ignoreCase: false,
																					want:       "\"++++\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 790, col: 23, offset: 25359},
																					expr: &litMatcher{
																						pos:        position{line: 790, col: 23, offset: 25359},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 792, col: 8, offset: 25443},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement1012,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement1015,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1018, col: 5, offset: 31484},
													run: (*parser).callonListContinuationElement1022,
												},
												&labeledExpr{
													pos:   position{line: 1021, col: 5, offset: 31576},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1036, col: 5, offset: 32006},
														expr: &actionExpr{
															pos: position{line: 1036, col: 6, offset: 32007},
															run: (*parser).callonListContinuationElement1025,
															expr: &seqExpr{
																pos: position{line: 1036, col: 6, offset: 32007},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1036, col: 6, offset: 32007},
																		expr: &choiceExpr{
																			pos: position{line: 1029, col: 5, offset: 31840},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1029, col: 5, offset: 31840},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1029, col: 5, offset: 31840},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 790, col: 5, offset: 25341},
																								run: (*parser).callonListContinuationElement1031,
																								expr: &seqExpr{
																									pos: position{line: 790, col: 5, offset: 25341},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 790, col: 5, offset: 25341},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 790, col: 16, offset: 25352},
																												run: (*parser).callonListContinuationElement1034,
																												expr: &seqExpr{
																													pos: position{line: 790, col: 16, offset: 25352},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 790, col: 16, offset: 25352},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 790, col: 23, offset: 25359},
																															expr: &litMatcher{
																																pos:        position{line: 790, col: 23, offset: 25359},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 792, col: 8, offset: 25443},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1040,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1043,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1030, col: 5, offset: 31875},
																							run: (*parser).callonListContinuationElement1050,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1037, col: 5, offset: 32041},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement1054,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement1059,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement1063,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1022, col: 5, offset: 31614},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1022, col: 9, offset: 31618},
														expr: &choiceExpr{
															pos: position{line: 1029, col: 5, offset: 31840},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1029, col: 5, offset: 31840},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1029, col: 5, offset: 31840},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 790, col: 5, offset: 25341},
																				run: (*parser).callonListContinuationElement1075,
																				expr: &seqExpr{
																					pos: position{line: 790, col: 5, offset: 25341},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 790, col: 5, offset: 25341},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 790, col: 16, offset: 25352},
																								run: (*parser).callonListContinuationElement1078,
																								expr: &seqExpr{
																									pos: position{line: 790, col: 16, offset: 25352},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 790, col: 16, offset: 25352},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 790, col: 23, offset: 25359},
																											expr: &litMatcher{
																												pos:        position{line: 790, col: 23, offset: 25359},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 792, col: 8, offset: 25443},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement1084,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement1087,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1030, col: 5, offset: 31875},
																			run: (*parser).callonListContinuationElement1094,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1045, col: 5, offset: 32192},
										run: (*parser).callonListContinuationElement1097,
										expr: &seqExpr{
											pos: position{line: 1045, col: 5, offset: 32192},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1045, col: 5, offset: 32192},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 797, col: 5, offset: 25591},
														run: (*parser).callonListContinuationElement1100,
														expr: &seqExpr{
															pos: position{line: 797, col: 5, offset: 25591},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 797, col: 5, offset: 25591},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 797, col: 16, offset: 25602},
																		run: (*parser).callonListContinuationElement1103,
																		expr: &seqExpr{
																			pos: position{line: 797, col: 16, offset: 25602},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 797, col: 16, offset: 25602},
																					val:        "____",
																					ignoreCase: false,
																					want:       "\"____\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 797, col: 23, offset: 25609},
																					expr: &litMatcher{
																						pos:        position{line: 797, col: 23, offset: 25609},
																						val:        "_",
																						ignoreCase: false,
																						want:       "\"_\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 799, col: 8, offset: 25693},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement1109,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement1112,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1046, col: 5, offset: 32229},
													run: (*parser).callonListContinuationElement1119,
												},
												&labeledExpr{
													pos:   position{line: 1049, col: 5, offset: 32321},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1064, col: 4, offset: 32702},
														expr: &actionExpr{
															pos: position{line: 1064, col: 5, offset: 32703},
															run: (*parser).callonListContinuationElement1122,
															expr: &seqExpr{
																pos: position{line: 1064, col: 5, offset: 32703},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1064, col: 5, offset: 32703},
																		expr: &choiceExpr{
																			pos: position{line: 1057, col: 5, offset: 32549},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1057, col: 5, offset: 32549},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1057, col: 5, offset: 32549},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 797, col: 5, offset: 25591},
																								run: (*parser).callonListContinuationElement1128,
																								expr: &seqExpr{
																									pos: position{line: 797, col: 5, offset: 25591},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 797, col: 5, offset: 25591},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 797, col: 16, offset: 25602},
																												run: (*parser).callonListContinuationElement1131,
																												expr: &seqExpr{
																													pos: position{line: 797, col: 16, offset: 25602},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 797, col: 16, offset: 25602},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 797, col: 23, offset: 25609},
																															expr: &litMatcher{
																																pos:        position{line: 797, col: 23, offset: 25609},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 799, col: 8, offset: 25693},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1137,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1140,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1058, col: 5, offset: 32578},
																							run: (*parser).callonListContinuationElement1147,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1065, col: 5, offset: 32731},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement1151,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement1156,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement1160,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1050, col: 5, offset: 32353},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1050, col: 9, offset: 32357},
														expr: &choiceExpr{
															pos: position{line: 1057, col: 5, offset: 32549},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1057, col: 5, offset: 32549},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1057, col: 5, offset: 32549},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 797, col: 5, offset: 25591},
																				run: (*parser).callonListContinuationElement1172,
																				expr: &seqExpr{
																					pos: position{line: 797, col: 5, offset: 25591},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 797, col: 5, offset: 25591},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 797, col: 16, offset: 25602},
																								run: (*parser).callonListContinuationElement1175,
																								expr: &seqExpr{
																									pos: position{line: 797, col: 16, offset: 25602},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 797, col: 16, offset: 25602},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 797, col: 23, offset: 25609},
																											expr: &litMatcher{
																												pos:        position{line: 797, col: 23, offset: 25609},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 799, col: 8, offset: 25693},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement1181,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement1184,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1058, col: 5, offset: 32578},
																			run: (*parser).callonListContinuationElement1191,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1073, col: 5, offset: 32886},
										run: (*parser).callonListContinuationElement1194,
										expr: &seqExpr{
											pos: position{line: 1073, col: 5, offset: 32886},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1073, col: 5, offset: 32886},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 804, col: 5, offset: 25837},
														run: (*parser).callonListContinuationElement1197,
														expr: &seqExpr{
															pos: position{line: 804, col: 5, offset: 25837},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 804, col: 5, offset: 25837},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 804, col: 16, offset: 25848},
																		run: (*parser).callonListContinuationElement1200,
																		expr: &seqExpr{
																			pos: position{line: 804, col: 16, offset: 25848},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 804, col: 16, offset: 25848},
																					val:        "****",
																					ignoreCase: false,
																					want:       "\"****\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 804, col: 23, offset: 25855},
																					expr: &litMatcher{
																						pos:        position{line: 804, col: 23, offset: 25855},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 806, col: 8, offset: 25939},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement1206,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement1209,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1074, col: 5, offset: 32925},
													run: (*parser).callonListContinuationElement1216,
												},
												&labeledExpr{
													pos:   position{line: 1077, col: 5, offset: 33017},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1092, col: 4, offset: 33414},
														expr: &actionExpr{
															pos: position{line: 1092, col: 5, offset: 33415},
															run: (*parser).callonListContinuationElement1219,
															expr: &seqExpr{
																pos: position{line: 1092, col: 5, offset: 33415},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1092, col: 5, offset: 33415},
																		expr: &choiceExpr{
																			pos: position{line: 1085, col: 5, offset: 33257},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1085, col: 5, offset: 33257},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1085, col: 5, offset: 33257},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 804, col: 5, offset: 25837},
																								run: (*parser).callonListContinuationElement1225,
																								expr: &seqExpr{
																									pos: position{line: 804, col: 5, offset: 25837},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 804, col: 5, offset: 25837},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 804, col: 16, offset: 25848},
																												run: (*parser).callonListContinuationElement1228,
																												expr: &seqExpr{
																													pos: position{line: 804, col: 16, offset: 25848},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 804, col: 16, offset: 25848},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 804, col: 23, offset: 25855},
																															expr: &litMatcher{
																																pos:        position{line: 804, col: 23, offset: 25855},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 806, col: 8, offset: 25939},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1234,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1237,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1086, col: 5, offset: 33288},
																							run: (*parser).callonListContinuationElement1244,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1093, col: 5, offset: 33445},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 811, col: 5, offset: 26085},
																			run: (*parser).callonListContinuationElement1248,
																			expr: &seqExpr{
																				pos: position{line: 811, col: 5, offset: 26085},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 2919, col: 11, offset: 91874},
																						expr: &anyMatcher{
																							line: 2919, col: 13, offset: 91876,
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 812, col: 5, offset: 26160},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 2848, col: 13, offset: 89985},
																							run: (*parser).callonListContinuationElement1253,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 2848, col: 13, offset: 89985},
																								expr: &charClassMatcher{
																									pos:        position{line: 2848, col: 13, offset: 89985},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonListContinuationElement1257,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1078, col: 5, offset: 33051},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1078, col: 9, offset: 33055},
														expr: &choiceExpr{
															pos: position{line: 1085, col: 5, offset: 33257},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1085, col: 5, offset: 33257},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1085, col: 5, offset: 33257},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 804, col: 5, offset: 25837},
																				run: (*parser).callonListContinuationElement1269,
																				expr: &seqExpr{
																					pos: position{line: 804, col: 5, offset: 25837},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 804, col: 5, offset: 25837},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 804, col: 16, offset: 25848},
																								run: (*parser).callonListContinuationElement1272,
																								expr: &seqExpr{
																									pos: position{line: 804, col: 16, offset: 25848},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 804, col: 16, offset: 25848},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 804, col: 23, offset: 25855},
																											expr: &litMatcher{
																												pos:        position{line: 804, col: 23, offset: 25855},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 806, col: 8, offset: 25939},
																							expr: &actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonListContinuationElement1278,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 2924, col: 8, offset: 91938},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2911, col: 12, offset: 91711},
																									run: (*parser).callonListContinuationElement1281,
																									expr: &choiceExpr{
																										pos: position{line: 2911, col: 13, offset: 91712},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2911, col: 13, offset: 91712},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 20, offset: 91719},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 2911, col: 29, offset: 91728},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2921, col: 8, offset: 91888},
																									expr: &anyMatcher{
																										line: 2921, col: 9, offset: 91889,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1086, col: 5, offset: 33288},
																			run: (*parser).callonListContinuationElement1288,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2701, col: 18, offset: 85868},
										run: (*parser).callonListContinuationElement1291,
										expr: &seqExpr{
											pos: position{line: 2701, col: 18, offset: 85868},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2702, col: 9, offset: 85878},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2702, col: 9, offset: 85878},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 11, offset: 85914},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 19, offset: 85922},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 29, offset: 85932},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 37, offset: 85940},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 47, offset: 85950},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2703, col: 55, offset: 85958},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2704, col: 11, offset: 86016},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonListContinuationElement1302,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement1305,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement1313,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 11, offset: 49993},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2592, col: 5, offset: 82805},
										run: (*parser).callonListContinuationElement1321,
										expr: &seqExpr{
											pos: position{line: 2592, col: 5, offset: 82805},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2598, col: 19, offset: 82962},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2598, col: 26, offset: 82969},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonListContinuationElement1325,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement1328,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2593, col: 5, offset: 82829},
													label: "lines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2593, col: 11, offset: 82835},
														expr: &choiceExpr{
															pos: position{line: 2593, col: 12, offset: 82836},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 677, col: 14, offset: 21486},
																	run: (*parser).callonListContinuationElement1338,
																	expr: &seqExpr{
																		pos: position{line: 677, col: 14, offset: 21486},
																		exprs: []interface{}{
																			&andExpr{
																				pos: position{line: 2919, col: 11, offset: 91874},
																				expr: &anyMatcher{
																					line: 2919, col: 13, offset: 91876,
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 677, col: 21, offset: 21493},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonListContinuationElement1343,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2924, col: 8, offset: 91938},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2911, col: 12, offset: 91711},
																						run: (*parser).callonListContinuationElement1346,
																						expr: &choiceExpr{
																							pos: position{line: 2911, col: 13, offset: 91712},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2911, col: 13, offset: 91712},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 20, offset: 91719},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 2911, col: 29, offset: 91728},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2605, col: 5, offset: 83081},
																	run: (*parser).callonListContinuationElement1353,
																	expr: &seqExpr{
																		pos: position{line: 2605, col: 5, offset: 83081},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2605, col: 5, offset: 83081},
																				expr: &choiceExpr{
																					pos: position{line: 2602, col: 22, offset: 83042},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2598, col: 19, offset: 82962},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2598, col: 19, offset: 82962},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2598, col: 26, offset: 82969},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonListContinuationElement1360,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonListContinuationElement1363,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2606, col: 5, offset: 83104},
																				label: "content",
																				expr: &choiceExpr{
																					pos: position{line: 2607, col: 9, offset: 83122},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2607, col: 10, offset: 83123},
																							run: (*parser).callonListContinuationElement1374,
																							expr: &labeledExpr{
																								pos:   position{line: 2607, col: 10, offset: 83123},
																								label: "cells",
																								expr: &choiceExpr{
																									pos: position{line: 2607, col: 17, offset: 83130},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2615, col: 21, offset: 83326},
																											run: (*parser).callonListContinuationElement1377,
																											expr: &seqExpr{
																												pos: position{line: 2615, col: 21, offset: 83326},
																												exprs: []interface{}{
																													&labeledExpr{
																														pos:   position{line: 2615, col: 21, offset: 83326},
																														label: "cells",
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2615, col: 27, offset: 83332},
																															expr: &actionExpr{
																																pos: position{line: 2620, col: 5, offset: 83407},
																																run: (*parser).callonListContinuationElement1381,
																																expr: &seqExpr{
																																	pos: position{line: 2620, col: 5, offset: 83407},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2620, col: 5, offset: 83407},
																																			val:        "|",
																																			ignoreCase: false,
																																			want:       "\"|\"",
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2620, col: 9, offset: 83411},
																																			expr: &actionExpr{
																																				pos: position{line: 2902, col: 10, offset: 91540},
																																				run: (*parser).callonListContinuationElement1385,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2902, col: 10, offset: 91540},
																																					val:        "[\\t ]",
																																					chars:      []rune{'\t', ' '},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 2620, col: 16, offset: 83418},
																																			label: "content",
																																			expr: &actionExpr{
																																				pos: position{line: 2626, col: 5, offset: 83617},
																																				run: (*parser).callonListContinuationElement1388,
																																				expr: &labeledExpr{
																																					pos:   position{line: 2626, col: 5, offset: 83617},
																																					label: "content",
																																					expr: &actionExpr{
																																						pos: position{line: 2626, col: 14, offset: 83626},
																																						run: (*parser).callonListContinuationElement1390,
																																						expr: &zeroOrMoreExpr{
																																							pos: position{line: 2626, col: 14, offset: 83626},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2626, col: 14, offset: 83626},
																																								val:        "[^|\\r\\n]",
																																								chars:      []rune{'|', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 2924, col: 8, offset: 91938},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 2911, col: 12, offset: 91711},
																																run: (*parser).callonListContinuationElement1394,
																																expr: &choiceExpr{
																																	pos: position{line: 2911, col: 13, offset: 91712},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 13, offset: 91712},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 20, offset: 91719},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 2911, col: 29, offset: 91728},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 2921, col: 8, offset: 91888},
																																expr: &anyMatcher{
																																	line: 2921, col: 9, offset: 91889,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 2632, col: 24, offset: 83762},
																											run: (*parser).callonListContinuationElement1401,
																											expr: &labeledExpr{
																												pos:   position{line: 2632, col: 24, offset: 83762},
																												label: "cells",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2632, col: 30, offset: 83768},
																													expr: &actionExpr{
																														pos: position{line: 2637, col: 5, offset: 83844},
																														run: (*parser).callonListContinuationElement1404,
																														expr: &seqExpr{
																															pos: position{line: 2637, col: 5, offset: 83844},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 2637, col: 5, offset: 83844},
																																	expr: &choiceExpr{
																																		pos: position{line: 2602, col: 22, offset: 83042},
																																		alternatives: []interface{}{
																																			&seqExpr{
																																				pos: position{line: 2598, col: 19, offset: 82962},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 2598, col: 19, offset: 82962},
																																						val:        "|===",
																																						ignoreCase: false,
																																						want:       "\"|===\"",
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 2598, col: 26, offset: 82969},
																																						expr: &actionExpr{
																																							pos: position{line: 2902, col: 10, offset: 91540},
																																							run: (*parser).callonListContinuationElement1411,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 2902, col: 10, offset: 91540},
																																								val:        "[\\t ]",
																																								chars:      []rune{'\t', ' '},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																					&choiceExpr{
																																						pos: position{line: 2924, col: 8, offset: 91938},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 2911, col: 12, offset: 91711},
																																								run: (*parser).callonListContinuationElement1414,
																																								expr: &choiceExpr{
																																									pos: position{line: 2911, col: 13, offset: 91712},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 13, offset: 91712},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 20, offset: 91719},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 2911, col: 29, offset: 91728},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 2921, col: 8, offset: 91888},
																																								expr: &anyMatcher{
																																									line: 2921, col: 9, offset: 91889,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 2921, col: 8, offset: 91888},
																																				expr: &anyMatcher{
																																					line: 2921, col: 9, offset: 91889,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 2638, col: 5, offset: 83867},
																																	expr: &actionExpr{
																																		pos: position{line: 677, col: 14, offset: 21486},
																																		run: (*parser).callonListContinuationElement1424,
																																		expr: &seqExpr{
																																			pos: position{line: 677, col: 14, offset: 21486},
																																			exprs: []interface{}{
																																				&andExpr{
																																					pos: position{line: 2919, col: 11, offset: 91874},
																																					expr: &anyMatcher{
																																						line: 2919, col: 13, offset: 91876,
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 677, col: 21, offset: 21493},
																																					expr: &actionExpr{
																																						pos: position{line: 2902, col: 10, offset: 91540},
																																						run: (*parser).callonListContinuationElement1429,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 2902, col: 10, offset: 91540},
																																							val:        "[\\t ]",
																																							chars:      []rune{'\t', ' '},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&choiceExpr{
																																					pos: position{line: 2924, col: 8, offset: 91938},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 2911, col: 12, offset: 91711},
																																							run: (*parser).callonListContinuationElement1432,
																																							expr: &choiceExpr{
																																								pos: position{line: 2911, col: 13, offset: 91712},
																																								alternatives: []interface{}{
																																									&litMatcher{
																																										pos:        position{line: 2911, col: 13, offset: 91712},
																																										val:        "\n",
																																										ignoreCase: false,
																																										want:       "\"\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2911, col: 20, offset: 91719},
																																										val:        "\r\n",
																																										ignoreCase: false,
																																										want:       "\"\\r\\n\"",
																																									},
																																									&litMatcher{
																																										pos:        position{line: 2911, col: 29, offset: 91728},
																																										val:        "\r",
																																										ignoreCase: false,
																																										want:       "\"\\r\"",
																																									},
																																								},
																																							},
																																						},
																																						&notExpr{
																																							pos: position{line: 2921, col: 8, offset: 91888},
																																							expr: &anyMatcher{
																																								line: 2921, col: 9, offset: 91889,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 2639, col: 5, offset: 83882},
																																	label: "format",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 2639, col: 12, offset: 83889},
																																		expr: &actionExpr{
																																			pos: position{line: 2656, col: 20, offset: 84353},
																																			run: (*parser).callonListContinuationElement1441,
																																			expr: &zeroOrMoreExpr{
																																				pos: position{line: 2656, col: 20, offset: 84353},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 2656, col: 20, offset: 84353},
																																					val:        "[^ |\\r\\n]",
																																					chars:      []rune{' ', '|', '\r', '\n'},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 2639, col: 31, offset: 83908},
																																	val:        "|",
																																	ignoreCase: false,
																																	want:       "\"|\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 2639, col: 35, offset: 83912},
																																	expr: &actionExpr{
																																		pos: position{line: 2902, col: 10, offset: 91540},
																																		run: (*parser).callonListContinuationElement1446,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 10, offset: 91540},
																																			val:        "[\\t ]",
																																			chars:      []rune{'\t', ' '},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&zeroOrOneExpr{
																																	pos: position{line: 2639, col: 42, offset: 83919},
																																	expr: &actionExpr{
																																		pos: position{line: 2911, col: 12, offset: 91711},
																																		run: (*parser).callonListContinuationElement1449,
																																		expr: &choiceExpr{
																																			pos: position{line: 2911, col: 13, offset: 91712},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 13, offset: 91712},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 20, offset: 91719},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 2911, col: 29, offset: 91728},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 2639, col: 51, offset: 83928},
																																	label: "content",
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 2645, col: 5, offset: 84087},
																																		expr: &actionExpr{
																																			pos: position{line: 2646, col: 9, offset: 84097},
																																			run: (*parser).callonListContinuationElement1456,
																																			expr: &seqExpr{
																																				pos: position{line: 2646, col: 9, offset: 84097},
																																				exprs: []interface{}{
																																					&notExpr{
																																						pos: position{line: 2646, col: 9, offset: 84097},
																																						expr: &choiceExpr{
																																							pos: position{line: 2602, col: 22, offset: 83042},
																																							alternatives: []interface{}{
																																								&seqExpr{
																																									pos: position{line: 2598, col: 19, offset: 82962},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 2598, col: 19, offset: 82962},
																																											val:        "|===",
																																											ignoreCase: false,
																																											want:       "\"|===\"",
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 2598, col: 26, offset: 82969},
																																											expr: &actionExpr{
																																												pos: position{line: 2902, col: 10, offset: 91540},
																																												run: (*parser).callonListContinuationElement1463,
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2902, col: 10, offset: 91540},
																																													val:        "[\\t ]",
																																													chars:      []rune{'\t', ' '},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																											},
																																										},
																																										&choiceExpr{
																																											pos: position{line: 2924, col: 8, offset: 91938},
																																											alternatives: []interface{}{
																																												&actionExpr{
																																													pos: position{line: 2911, col: 12, offset: 91711},
																																													run: (*parser).callonListContinuationElement1466,
																																													expr: &choiceExpr{
																																														pos: position{line: 2911, col: 13, offset: 91712},
																																														alternatives: []interface{}{
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 13, offset: 91712},
																																																val:        "\n",
																																																ignoreCase: false,
																																																want:       "\"\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 20, offset: 91719},
																																																val:        "\r\n",
																																																ignoreCase: false,
																																																want:       "\"\\r\\n\"",
																																															},
																																															&litMatcher{
																																																pos:        position{line: 2911, col: 29, offset: 91728},
																																																val:        "\r",
																																																ignoreCase: false,
																																																want:       "\"\\r\"",
																																															},
																																														},
																																													},
																																												},
																																												&notExpr{
																																													pos: position{line: 2921, col: 8, offset: 91888},
																																													expr: &anyMatcher{
																																														line: 2921, col: 9, offset: 91889,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2921, col: 8, offset: 91888},
																																									expr: &anyMatcher{
																																										line: 2921, col: 9, offset: 91889,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2647, col: 9, offset: 84124},
																																						expr: &actionExpr{
																																							pos: position{line: 677, col: 14, offset: 21486},
																																							run: (*parser).callonListContinuationElement1476,
																																							expr: &seqExpr{
																																								pos: position{line: 677, col: 14, offset: 21486},
																																								exprs: []interface{}{
																																									&andExpr{
																																										pos: position{line: 2919, col: 11, offset: 91874},
																																										expr: &anyMatcher{
																																											line: 2919, col: 13, offset: 91876,
																																										},
																																									},
																																									&zeroOrMoreExpr{
																																										pos: position{line: 677, col: 21, offset: 21493},
																																										expr: &actionExpr{
																																											pos: position{line: 2902, col: 10, offset: 91540},
																																											run: (*parser).callonListContinuationElement1481,
																																											expr: &charClassMatcher{
																																												pos:        position{line: 2902, col: 10, offset: 91540},
																																												val:        "[\\t ]",
																																												chars:      []rune{'\t', ' '},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																									&choiceExpr{
																																										pos: position{line: 2924, col: 8, offset: 91938},
																																										alternatives: []interface{}{
																																											&actionExpr{
																																												pos: position{line: 2911, col: 12, offset: 91711},
																																												run: (*parser).callonListContinuationElement1484,
																																												expr: &choiceExpr{
																																													pos: position{line: 2911, col: 13, offset: 91712},
																																													alternatives: []interface{}{
																																														&litMatcher{
																																															pos:        position{line: 2911, col: 13, offset: 91712},
																																															val:        "\n",
																																															ignoreCase: false,
																																															want:       "\"\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2911, col: 20, offset: 91719},
																																															val:        "\r\n",
																																															ignoreCase: false,
																																															want:       "\"\\r\\n\"",
																																														},
																																														&litMatcher{
																																															pos:        position{line: 2911, col: 29, offset: 91728},
																																															val:        "\r",
																																															ignoreCase: false,
																																															want:       "\"\\r\"",
																																														},
																																													},
																																												},
																																											},
																																											&notExpr{
																																												pos: position{line: 2921, col: 8, offset: 91888},
																																												expr: &anyMatcher{
																																													line: 2921, col: 9, offset: 91889,
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 2648, col: 9, offset: 84143},
																																						expr: &seqExpr{
																																							pos: position{line: 2648, col: 11, offset: 84145},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 2648, col: 11, offset: 84145},
																																									label: "format",
																																									expr: &zeroOrOneExpr{
																																										pos: position{line: 2648, col: 18, offset: 84152},
																																										expr: &actionExpr{
																																											pos: position{line: 2656, col: 20, offset: 84353},
																																											run: (*parser).callonListContinuationElement1495,
																																											expr: &zeroOrMoreExpr{
																																												pos: position{line: 2656, col: 20, offset: 84353},
																																												expr: &charClassMatcher{
																																													pos:        position{line: 2656, col: 20, offset: 84353},
																																													val:        "[^ |\\r\\n]",
																																													chars:      []rune{' ', '|', '\r', '\n'},
																																													ignoreCase: false,
																																													inverted:   true,
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 2648, col: 37, offset: 84171},
																																									val:        "|",
																																									ignoreCase: false,
																																									want:       "\"|\"",
																																								},
																																							},
																																						},
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 2649, col: 9, offset: 84184},
																																						label: "content",
																																						expr: &actionExpr{
																																							pos: position{line: 2649, col: 18, offset: 84193},
																																							run: (*parser).callonListContinuationElement1500,
																																							expr: &zeroOrMoreExpr{
																																								pos: position{line: 2649, col: 18, offset: 84193},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 2649, col: 18, offset: 84193},
																																									val:        "[^|\\r\\n]",
																																									chars:      []rune{'|', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																					&zeroOrOneExpr{
																																						pos: position{line: 2651, col: 12, offset: 84255},
																																						expr: &choiceExpr{
																																							pos: position{line: 2924, col: 8, offset: 91938},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 2911, col: 12, offset: 91711},
																																									run: (*parser).callonListContinuationElement1505,
																																									expr: &choiceExpr{
																																										pos: position{line: 2911, col: 13, offset: 91712},
																																										alternatives: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 13, offset: 91712},
																																												val:        "\n",
																																												ignoreCase: false,
																																												want:       "\"\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 20, offset: 91719},
																																												val:        "\r\n",
																																												ignoreCase: false,
																																												want:       "\"\\r\\n\"",
																																											},
																																											&litMatcher{
																																												pos:        position{line: 2911, col: 29, offset: 91728},
																																												val:        "\r",
																																												ignoreCase: false,
																																												want:       "\"\\r\"",
																																											},
																																										},
																																									},
																																								},
																																								&notExpr{
																																									pos: position{line: 2921, col: 8, offset: 91888},
																																									expr: &anyMatcher{
																																										line: 2921, col: 9, offset: 91889,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 677, col: 14, offset: 21486},
																							run: (*parser).callonListContinuationElement1512,
																							expr: &seqExpr{
																								pos: position{line: 677, col: 14, offset: 21486},
																								exprs: []interface{}{
																									&andExpr{
																										pos: position{line: 2919, col: 11, offset: 91874},
																										expr: &anyMatcher{
																											line: 2919, col: 13, offset: 91876,
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 677, col: 21, offset: 21493},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 10, offset: 91540},
																											run: (*parser).callonListContinuationElement1517,
																											expr: &charClassMatcher{
																												pos:        position{line: 2902, col: 10, offset: 91540},
																												val:        "[\\t ]",
																												chars:      []rune{'\t', ' '},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 2924, col: 8, offset: 91938},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2911, col: 12, offset: 91711},
																												run: (*parser).callonListContinuationElement1520,
																												expr: &choiceExpr{
																													pos: position{line: 2911, col: 13, offset: 91712},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2911, col: 13, offset: 91712},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 20, offset: 91719},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 2911, col: 29, offset: 91728},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 2921, col: 8, offset: 91888},
																												expr: &anyMatcher{
																													line: 2921, col: 9, offset: 91889,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2602, col: 22, offset: 83042},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2598, col: 19, offset: 82962},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2598, col: 19, offset: 82962},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2598, col: 26, offset: 82969},
																	expr: &actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonListContinuationElement1531,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement1534,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2466, col: 22, offset: 79269},
										run: (*parser).callonListContinuationElement1543,
										expr: &seqExpr{
											pos: position{line: 2466, col: 22, offset: 79269},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2471, col: 31, offset: 79490},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2471, col: 36, offset: 79495},
													expr: &litMatcher{
														pos:        position{line: 2471, col: 37, offset: 79496},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2466, col: 49, offset: 79296},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2848, col: 13, offset: 89985},
														run: (*parser).callonListContinuationElement1549,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2848, col: 13, offset: 89985},
															expr: &charClassMatcher{
																pos:        position{line: 2848, col: 13, offset: 89985},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2924, col: 8, offset: 91938},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonListContinuationElement1553,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 2921, col: 8, offset: 91888},
															expr: &anyMatcher{
																line: 2921, col: 9, offset: 91889,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1562, col: 5, offset: 50423},
										run: (*parser).callonListContinuationElement1560,
										expr: &seqExpr{
											pos: position{line: 1562, col: 5, offset: 50423},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1562, col: 5, offset: 50423},
													label: "style",
													expr: &zeroOrOneExpr{
														pos: position{line: 1562, col: 11, offset: 50429},
														expr: &actionExpr{
															pos: position{line: 1726, col: 5, offset: 55741},
															run: (*parser).callonListContinuationElement1564,
															expr: &seqExpr{
																pos: position{line: 1726, col: 5, offset: 55741},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1726, col: 5, offset: 55741},
																		run: (*parser).callonListContinuationElement1566,
																	},
																	&labeledExpr{
																		pos:   position{line: 1729, col: 5, offset: 55804},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1729, col: 12, offset: 55811},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1729, col: 12, offset: 55811},
																					run: (*parser).callonListContinuationElement1569,
																					expr: &litMatcher{
																						pos:        position{line: 1729, col: 12, offset: 55811},
																						val:        "TIP: ",
																						ignoreCase: false,
																						want:       "\"TIP: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1731, col: 13, offset: 55867},
																					run: (*parser).callonListContinuationElement1571,
																					expr: &litMatcher{
																						pos:        position{line: 1731, col: 13, offset: 55867},
																						val:        "NOTE: ",
																						ignoreCase: false,
																						want:       "\"NOTE: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1733, col: 13, offset: 55925},
																					run: (*parser).callonListContinuationElement1573,
																					expr: &litMatcher{
																						pos:        position{line: 1733, col: 13, offset: 55925},
																						val:        "IMPORTANT: ",
																						ignoreCase: false,
																						want:       "\"IMPORTANT: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1735, col: 13, offset: 55993},
																					run: (*parser).callonListContinuationElement1575,
																					expr: &litMatcher{
																						pos:        position{line: 1735, col: 13, offset: 55993},
																						val:        "WARNING: ",
																						ignoreCase: false,
																						want:       "\"WARNING: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1737, col: 13, offset: 56057},
																					run: (*parser).callonListContinuationElement1577,
																					expr: &litMatcher{
																						pos:        position{line: 1737, col: 13, offset: 56057},
																						val:        "CAUTION: ",
																						ignoreCase: false,
																						want:       "\"CAUTION: \"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1739, col: 13, offset: 56121},
																					run: (*parser).callonListContinuationElement1579,
																					expr: &andExpr{
																						pos: position{line: 1739, col: 13, offset: 56121},
																						expr: &actionExpr{
																							pos: position{line: 2906, col: 11, offset: 91601},
																							run: (*parser).callonListContinuationElement1581,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2906, col: 11, offset: 91601},
																								expr: &charClassMatcher{
																									pos:        position{line: 2906, col: 11, offset: 91601},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1563, col: 5, offset: 50452},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1506, col: 5, offset: 48802},
														run: (*parser).callonListContinuationElement1585,
														expr: &seqExpr{
															pos: position{line: 1506, col: 5, offset: 48802},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1506, col: 5, offset: 48802},
																	expr: &actionExpr{
																		pos: position{line: 677, col: 14, offset: 21486},
																		run: (*parser).callonListContinuationElement1588,
																		expr: &seqExpr{
																			pos: position{line: 677, col: 14, offset: 21486},
																			exprs: []interface{}{
																				&andExpr{
																					pos: position{line: 2919, col: 11, offset: 91874},
																					expr: &anyMatcher{
																						line: 2919, col: 13, offset: 91876,
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 677, col: 21, offset: 21493},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonListContinuationElement1593,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2924, col: 8, offset: 91938},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonListContinuationElement1596,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1507, col: 5, offset: 48817},
																	expr: &seqExpr{
																		pos: position{line: 1537, col: 27, offset: 49643},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1537, col: 27, offset: 49643},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1537, col: 31, offset: 49647},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonListContinuationElement1607,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonListContinuationElement1609,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1508, col: 5, offset: 48845},
																	expr: &actionExpr{
																		pos: position{line: 1578, col: 5, offset: 50862},
																		run: (*parser).callonListContinuationElement1615,
																		expr: &seqExpr{
																			pos: position{line: 1578, col: 5, offset: 50862},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1578, col: 5, offset: 50862},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonListContinuationElement1618,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1578, col: 12, offset: 50869},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1580, col: 9, offset: 50932},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1580, col: 9, offset: 50932},
																								run: (*parser).callonListContinuationElement1622,
																								expr: &seqExpr{
																									pos: position{line: 1580, col: 9, offset: 50932},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1580, col: 9, offset: 50932},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1580, col: 16, offset: 50939},
																												run: (*parser).callonListContinuationElement1625,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1580, col: 16, offset: 50939},
																													expr: &litMatcher{
																														pos:        position{line: 1580, col: 17, offset: 50940},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1584, col: 9, offset: 51040},
																											run: (*parser).callonListContinuationElement1628,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1603, col: 11, offset: 51757},
																								run: (*parser).callonListContinuationElement1629,
																								expr: &seqExpr{
																									pos: position{line: 1603, col: 11, offset: 51757},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1603, col: 11, offset: 51757},
																											expr: &charClassMatcher{
																												pos:        position{line: 1603, col: 12, offset: 51758},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1603, col: 20, offset: 51766},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1605, col: 13, offset: 51883},
																								run: (*parser).callonListContinuationElement1634,
																								expr: &seqExpr{
																									pos: position{line: 1605, col: 13, offset: 51883},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1605, col: 14, offset: 51884},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1605, col: 21, offset: 51891},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1607, col: 13, offset: 52011},
																								run: (*parser).callonListContinuationElement1638,
																								expr: &seqExpr{
																									pos: position{line: 1607, col: 13, offset: 52011},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1607, col: 14, offset: 52012},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1607, col: 21, offset: 52019},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1609, col: 13, offset: 52139},
																								run: (*parser).callonListContinuationElement1642,
																								expr: &seqExpr{
																									pos: position{line: 1609, col: 13, offset: 52139},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1609, col: 13, offset: 52139},
																											expr: &charClassMatcher{
																												pos:        position{line: 1609, col: 14, offset: 52140},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1609, col: 26, offset: 52152},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1611, col: 13, offset: 52272},
																								run: (*parser).callonListContinuationElement1647,
																								expr: &seqExpr{
																									pos: position{line: 1611, col: 13, offset: 52272},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1611, col: 13, offset: 52272},
																											expr: &charClassMatcher{
																												pos:        position{line: 1611, col: 14, offset: 52273},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1611, col: 26, offset: 52285},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2906, col: 11, offset: 91601},
																					run: (*parser).callonListContinuationElement1652,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2906, col: 11, offset: 91601},
																						expr: &charClassMatcher{
																							pos:        position{line: 2906, col: 11, offset: 91601},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1509, col: 5, offset: 48875},
																	expr: &actionExpr{
																		pos: position{line: 1628, col: 5, offset: 52824},
																		run: (*parser).callonListContinuationElement1656,
																		expr: &seqExpr{
																			pos: position{line: 1628, col: 5, offset: 52824},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1628, col: 5, offset: 52824},
																					expr: &actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonListContinuationElement1659,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1629, col: 5, offset: 52836},
																					label: "style",
																					expr: &actionExpr{
																						pos: position{line: 1630, col: 9, offset: 52852},
																						run: (*parser).callonListContinuationElement1662,
																						expr: &choiceExpr{
																							pos: position{line: 1630, col: 10, offset: 52853},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1630, col: 11, offset: 52854},
																									val:        "-",
																									ignoreCase: false,
																									want:       "\"-\"",
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1630, col: 18, offset: 52861},
																									expr: &litMatcher{
																										pos:        position{line: 1630, col: 19, offset: 52862},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1633, col: 7, offset: 52952},
																					run: (*parser).callonListContinuationElement1667,
																				},
																				&actionExpr{
																					pos: position{line: 2906, col: 11, offset: 91601},
																					run: (*parser).callonListContinuationElement1668,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2906, col: 11, offset: 91601},
																						expr: &charClassMatcher{
																							pos:        position{line: 2906, col: 11, offset: 91601},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1510, col: 5, offset: 48907},
																	expr: &actionExpr{
																		pos: position{line: 1717, col: 5, offset: 55356},
																		run: (*parser).callonListContinuationElement1672,
																		expr: &seqExpr{
																			pos: position{line: 1717, col: 5, offset: 55356},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1717, col: 5, offset: 55356},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1717, col: 9, offset: 55360},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1717, col: 14, offset: 55365},
																						run: (*parser).callonListContinuationElement1676,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1717, col: 14, offset: 55365},
																							expr: &charClassMatcher{
																								pos:        position{line: 1717, col: 14, offset: 55365},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1717, col: 62, offset: 55413},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 2906, col: 11, offset: 91601},
																					run: (*parser).callonListContinuationElement1680,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2906, col: 11, offset: 91601},
																						expr: &charClassMatcher{
																							pos:        position{line: 2906, col: 11, offset: 91601},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1511, col: 5, offset: 48937},
																	expr: &seqExpr{
																		pos: position{line: 1511, col: 7, offset: 48939},
																		exprs: []interface{}{
																			&actionExpr{
																				pos: position{line: 1663, col: 5, offset: 53843},
																				run: (*parser).callonListContinuationElement1685,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1663, col: 5, offset: 53843},
																					expr: &seqExpr{
																						pos: position{line: 1663, col: 6, offset: 53844},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1663, col: 6, offset: 53844},
																								expr: &actionExpr{
																									pos: position{line: 1668, col: 5, offset: 53994},
																									run: (*parser).callonListContinuationElement1689,
																									expr: &seqExpr{
																										pos: position{line: 1668, col: 5, offset: 53994},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1668, col: 5, offset: 53994},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1668, col: 16, offset: 54005},
																													run: (*parser).callonListContinuationElement1692,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1668, col: 16, offset: 54005},
																														expr: &litMatcher{
																															pos:        position{line: 1668, col: 17, offset: 54006},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1671, col: 5, offset: 54063},
																												run: (*parser).callonListContinuationElement1695,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1663, col: 35, offset: 53873},
																								expr: &choiceExpr{
																									pos: position{line: 2924, col: 8, offset: 91938},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 2911, col: 12, offset: 91711},
																											run: (*parser).callonListContinuationElement1698,
																											expr: &choiceExpr{
																												pos: position{line: 2911, col: 13, offset: 91712},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2911, col: 13, offset: 91712},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 20, offset: 91719},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 2911, col: 29, offset: 91728},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 2921, col: 8, offset: 91888},
																											expr: &anyMatcher{
																												line: 2921, col: 9, offset: 91889,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1663, col: 40, offset: 53878,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1668, col: 5, offset: 53994},
																				run: (*parser).callonListContinuationElement1706,
																				expr: &seqExpr{
																					pos: position{line: 1668, col: 5, offset: 53994},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1668, col: 5, offset: 53994},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1668, col: 16, offset: 54005},
																								run: (*parser).callonListContinuationElement1709,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1668, col: 16, offset: 54005},
																									expr: &litMatcher{
																										pos:        position{line: 1668, col: 17, offset: 54006},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1671, col: 5, offset: 54063},
																							run: (*parser).callonListContinuationElement1712,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1512, col: 5, offset: 48995},
																	expr: &actionExpr{
																		pos: position{line: 724, col: 5, offset: 23039},
																		run: (*parser).callonListContinuationElement1714,
																		expr: &seqExpr{
																			pos: position{line: 724, col: 5, offset: 23039},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 724, col: 5, offset: 23039},
																					expr: &charClassMatcher{
																						pos:        position{line: 2746, col: 13, offset: 87373},
																						val:        "[\\pL\\pN]",
																						classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 725, col: 5, offset: 23069},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 726, col: 9, offset: 23089},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 740, col: 5, offset: 23581},
																								run: (*parser).callonListContinuationElement1720,
																								expr: &seqExpr{
																									pos: position{line: 740, col: 5, offset: 23581},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 740, col: 5, offset: 23581},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 740, col: 16, offset: 23592},
																												run: (*parser).callonListContinuationElement1723,
																												expr: &seqExpr{
																													pos: position{line: 740, col: 16, offset: 23592},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 740, col: 16, offset: 23592},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 740, col: 23, offset: 23599},
																															expr: &litMatcher{
																																pos:        position{line: 740, col: 23, offset: 23599},
																																val:        "/",
																																ignoreCase: false,
																																want:       "\"/\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 742, col: 8, offset: 23683},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1729,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1732,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 747, col: 5, offset: 23829},
																								run: (*parser).callonListContinuationElement1739,
																								expr: &seqExpr{
																									pos: position{line: 747, col: 5, offset: 23829},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 747, col: 5, offset: 23829},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 747, col: 16, offset: 23840},
																												run: (*parser).callonListContinuationElement1742,
																												expr: &seqExpr{
																													pos: position{line: 747, col: 16, offset: 23840},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 747, col: 16, offset: 23840},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 747, col: 23, offset: 23847},
																															expr: &litMatcher{
																																pos:        position{line: 747, col: 23, offset: 23847},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 749, col: 8, offset: 23931},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1748,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1751,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 760, col: 26, offset: 24317},
																								run: (*parser).callonListContinuationElement1758,
																								expr: &seqExpr{
																									pos: position{line: 760, col: 26, offset: 24317},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 760, col: 26, offset: 24317},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 760, col: 32, offset: 24323},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 764, col: 13, offset: 24453},
																												run: (*parser).callonListContinuationElement1762,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 764, col: 14, offset: 24454},
																													expr: &charClassMatcher{
																														pos:        position{line: 764, col: 14, offset: 24454},
																														val:        "[^\\r\\n` ]",
																														chars:      []rune{'\r', '\n', '`', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 760, col: 52, offset: 24343},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1766,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1769,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 754, col: 5, offset: 24076},
																								run: (*parser).callonListContinuationElement1776,
																								expr: &seqExpr{
																									pos: position{line: 754, col: 5, offset: 24076},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 754, col: 5, offset: 24076},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 754, col: 16, offset: 24087},
																												run: (*parser).callonListContinuationElement1779,
																												expr: &seqExpr{
																													pos: position{line: 754, col: 16, offset: 24087},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 754, col: 16, offset: 24087},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 754, col: 22, offset: 24093},
																															expr: &litMatcher{
																																pos:        position{line: 754, col: 22, offset: 24093},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 756, col: 8, offset: 24177},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1785,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1788,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 769, col: 5, offset: 24613},
																								run: (*parser).callonListContinuationElement1795,
																								expr: &seqExpr{
																									pos: position{line: 769, col: 5, offset: 24613},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 769, col: 5, offset: 24613},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 769, col: 16, offset: 24624},
																												run: (*parser).callonListContinuationElement1798,
																												expr: &seqExpr{
																													pos: position{line: 769, col: 16, offset: 24624},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 769, col: 16, offset: 24624},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 769, col: 23, offset: 24631},
																															expr: &litMatcher{
																																pos:        position{line: 769, col: 23, offset: 24631},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 771, col: 8, offset: 24715},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1804,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1807,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 783, col: 5, offset: 25089},
																								run: (*parser).callonListContinuationElement1814,
																								expr: &seqExpr{
																									pos: position{line: 783, col: 5, offset: 25089},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 783, col: 5, offset: 25089},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 783, col: 16, offset: 25100},
																												run: (*parser).callonListContinuationElement1817,
																												expr: &seqExpr{
																													pos: position{line: 783, col: 16, offset: 25100},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 783, col: 16, offset: 25100},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 783, col: 23, offset: 25107},
																															expr: &litMatcher{
																																pos:        position{line: 783, col: 23, offset: 25107},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 785, col: 8, offset: 25191},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1823,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1826,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 790, col: 5, offset: 25341},
																								run: (*parser).callonListContinuationElement1833,
																								expr: &seqExpr{
																									pos: position{line: 790, col: 5, offset: 25341},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 790, col: 5, offset: 25341},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 790, col: 16, offset: 25352},
																												run: (*parser).callonListContinuationElement1836,
																												expr: &seqExpr{
																													pos: position{line: 790, col: 16, offset: 25352},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 790, col: 16, offset: 25352},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 790, col: 23, offset: 25359},
																															expr: &litMatcher{
																																pos:        position{line: 790, col: 23, offset: 25359},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 792, col: 8, offset: 25443},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1842,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1845,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 797, col: 5, offset: 25591},
																								run: (*parser).callonListContinuationElement1852,
																								expr: &seqExpr{
																									pos: position{line: 797, col: 5, offset: 25591},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 797, col: 5, offset: 25591},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 797, col: 16, offset: 25602},
																												run: (*parser).callonListContinuationElement1855,
																												expr: &seqExpr{
																													pos: position{line: 797, col: 16, offset: 25602},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 797, col: 16, offset: 25602},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 797, col: 23, offset: 25609},
																															expr: &litMatcher{
																																pos:        position{line: 797, col: 23, offset: 25609},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 799, col: 8, offset: 25693},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1861,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1864,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 804, col: 5, offset: 25837},
																								run: (*parser).callonListContinuationElement1871,
																								expr: &seqExpr{
																									pos: position{line: 804, col: 5, offset: 25837},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 804, col: 5, offset: 25837},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 804, col: 16, offset: 25848},
																												run: (*parser).callonListContinuationElement1874,
																												expr: &seqExpr{
																													pos: position{line: 804, col: 16, offset: 25848},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 804, col: 16, offset: 25848},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 804, col: 23, offset: 25855},
																															expr: &litMatcher{
																																pos:        position{line: 804, col: 23, offset: 25855},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 806, col: 8, offset: 25939},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 10, offset: 91540},
																												run: (*parser).callonListContinuationElement1880,
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 10, offset: 91540},
																													val:        "[\\t ]",
																													chars:      []rune{'\t', ' '},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 2924, col: 8, offset: 91938},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonListContinuationElement1883,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1513, col: 5, offset: 49015},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 2852, col: 14, offset: 90052},
																		run: (*parser).callonListContinuationElement1891,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2852, col: 14, offset: 90052},
																			expr: &charClassMatcher{
																				pos:        position{line: 2852, col: 14, offset: 90052},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonListContinuationElement1895,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1701, col: 1, offset: 54855},
			expr: &actionExpr{
				pos: position{line: 1703, col: 5, offset: 54933},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1703, col: 5, offset: 54933},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1703, col: 5, offset: 54933},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1706, col: 5, offset: 54995},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1706, col: 9, offset: 54999},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1706, col: 14, offset: 55004},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1706, col: 14, offset: 55004},
									expr: &charClassMatcher{
										pos:        position{line: 1706, col: 14, offset: 55004},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1706, col: 62, offset: 55052},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1706, col: 66, offset: 55056},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1706, col: 73, offset: 55063},
							expr: &choiceExpr{
								pos: position{line: 1706, col: 75, offset: 55065},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2911, col: 12, offset: 91711},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 2911, col: 13, offset: 91712},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2911, col: 13, offset: 91712},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 20, offset: 91719},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 29, offset: 91728},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2921, col: 8, offset: 91888},
										expr: &anyMatcher{
											line: 2921, col: 9, offset: 91889,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1706, col: 81, offset: 55071},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1745, col: 1, offset: 56244},
			expr: &actionExpr{
				pos: position{line: 1747, col: 5, offset: 56318},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1747, col: 5, offset: 56318},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1747, col: 5, offset: 56318},
							expr: &seqExpr{
								pos: position{line: 1747, col: 7, offset: 56320},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 2746, col: 13, offset: 87373},
										val:        "[\\pL\\pN]",
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
									&notExpr{
										pos: position{line: 1747, col: 16, offset: 56329},
										expr: &seqExpr{
											pos: position{line: 1747, col: 18, offset: 56331},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 1747, col: 19, offset: 56332},
													val:        "[.)]",
													chars:      []rune{'.', ')'},
													ignoreCase: false,
													inverted:   false,
												},
												&actionExpr{
													pos: position{line: 2906, col: 11, offset: 91601},
													run: (*parser).callonShortcutParagraph9,
													expr: &oneOrMoreExpr{
														pos: position{line: 2906, col: 11, offset: 91601},
														expr: &charClassMatcher{
															pos:        position{line: 2906, col: 11, offset: 91601},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1748, col: 5, offset: 56472},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1748, col: 11, offset: 56478},
								expr: &actionExpr{
									pos: position{line: 1726, col: 5, offset: 55741},
									run: (*parser).callonShortcutParagraph14,
									expr: &seqExpr{
										pos: position{line: 1726, col: 5, offset: 55741},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1726, col: 5, offset: 55741},
												run: (*parser).callonShortcutParagraph16,
											},
											&labeledExpr{
												pos:   position{line: 1729, col: 5, offset: 55804},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1729, col: 12, offset: 55811},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1729, col: 12, offset: 55811},
															run: (*parser).callonShortcutParagraph19,
															expr: &litMatcher{
																pos:        position{line: 1729, col: 12, offset: 55811},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1731, col: 13, offset: 55867},
															run: (*parser).callonShortcutParagraph21,
															expr: &litMatcher{
																pos:        position{line: 1731, col: 13, offset: 55867},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1733, col: 13, offset: 55925},
															run: (*parser).callonShortcutParagraph23,
															expr: &litMatcher{
																pos:        position{line: 1733, col: 13, offset: 55925},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1735, col: 13, offset: 55993},
															run: (*parser).callonShortcutParagraph25,
															expr: &litMatcher{
																pos:        position{line: 1735, col: 13, offset: 55993},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1737, col: 13, offset: 56057},
															run: (*parser).callonShortcutParagraph27,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 13, offset: 56057},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56121},
															run: (*parser).callonShortcutParagraph29,
															expr: &andExpr{
																pos: position{line: 1739, col: 13, offset: 56121},
																expr: &actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonShortcutParagraph31,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1749, col: 5, offset: 56500},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1785, col: 5, offset: 57639},
								run: (*parser).callonShortcutParagraph35,
								expr: &seqExpr{
									pos: position{line: 1785, col: 5, offset: 57639},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1785, col: 5, offset: 57639},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2852, col: 14, offset: 90052},
												run: (*parser).callonShortcutParagraph38,
												expr: &oneOrMoreExpr{
													pos: position{line: 2852, col: 14, offset: 90052},
													expr: &charClassMatcher{
														pos:        position{line: 2852, col: 14, offset: 90052},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1786, col: 5, offset: 57663},
											run: (*parser).callonShortcutParagraph41,
										},
										&choiceExpr{
											pos: position{line: 2924, col: 8, offset: 91938},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2911, col: 12, offset: 91711},
													run: (*parser).callonShortcutParagraph43,
													expr: &choiceExpr{
														pos: position{line: 2911, col: 13, offset: 91712},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2911, col: 13, offset: 91712},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2911, col: 20, offset: 91719},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2911, col: 29, offset: 91728},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1750, col: 5, offset: 56534},
							run: (*parser).callonShortcutParagraph50,
						},
						&labeledExpr{
							pos:   position{line: 1757, col: 5, offset: 56896},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1757, col: 16, offset: 56907},
								expr: &actionExpr{
									pos: position{line: 1758, col: 9, offset: 56917},
									run: (*parser).callonShortcutParagraph53,
									expr: &seqExpr{
										pos: position{line: 1758, col: 9, offset: 56917},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 2919, col: 11, offset: 91874},
												expr: &anyMatcher{
													line: 2919, col: 13, offset: 91876,
												},
											},
											&notExpr{
												pos: position{line: 1759, col: 9, offset: 56933},
												expr: &actionExpr{
													pos: position{line: 677, col: 14, offset: 21486},
													run: (*parser).callonShortcutParagraph58,
													expr: &seqExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 2919, col: 11, offset: 91874},
																expr: &anyMatcher{
																	line: 2919, col: 13, offset: 91876,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 677, col: 21, offset: 21493},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonShortcutParagraph63,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonShortcutParagraph66,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1760, col: 9, offset: 56952},
												expr: &ruleRefExpr{
													pos:  position{line: 1760, col: 10, offset: 56953},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1761, col: 9, offset: 56977},
												expr: &actionExpr{
													pos: position{line: 724, col: 5, offset: 23039},
													run: (*parser).callonShortcutParagraph76,
													expr: &seqExpr{
														pos: position{line: 724, col: 5, offset: 23039},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 724, col: 5, offset: 23039},
																expr: &charClassMatcher{
																	pos:        position{line: 2746, col: 13, offset: 87373},
																	val:        "[\\pL\\pN]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&labeledExpr{
																pos:   position{line: 725, col: 5, offset: 23069},
																label: "delimiter",
																expr: &choiceExpr{
																	pos: position{line: 726, col: 9, offset: 23089},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 740, col: 5, offset: 23581},
																			run: (*parser).callonShortcutParagraph82,
																			expr: &seqExpr{
																				pos: position{line: 740, col: 5, offset: 23581},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 740, col: 5, offset: 23581},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 740, col: 16, offset: 23592},
																							run: (*parser).callonShortcutParagraph85,
																							expr: &seqExpr{
																								pos: position{line: 740, col: 16, offset: 23592},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 740, col: 16, offset: 23592},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 740, col: 23, offset: 23599},
																										expr: &litMatcher{
																											pos:        position{line: 740, col: 23, offset: 23599},
																											val:        "/",
																											ignoreCase: false,
																											want:       "\"/\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 742, col: 8, offset: 23683},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph91,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph94,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 747, col: 5, offset: 23829},
																			run: (*parser).callonShortcutParagraph101,
																			expr: &seqExpr{
																				pos: position{line: 747, col: 5, offset: 23829},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 747, col: 5, offset: 23829},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 747, col: 16, offset: 23840},
																							run: (*parser).callonShortcutParagraph104,
																							expr: &seqExpr{
																								pos: position{line: 747, col: 16, offset: 23840},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 747, col: 16, offset: 23840},
																										val:        "====",
																										ignoreCase: false,
																										want:       "\"====\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 747, col: 23, offset: 23847},
																										expr: &litMatcher{
																											pos:        position{line: 747, col: 23, offset: 23847},
																											val:        "=",
																											ignoreCase: false,
																											want:       "\"=\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 749, col: 8, offset: 23931},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph110,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph113,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 760, col: 26, offset: 24317},
																			run: (*parser).callonShortcutParagraph120,
																			expr: &seqExpr{
																				pos: position{line: 760, col: 26, offset: 24317},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 760, col: 26, offset: 24317},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 760, col: 32, offset: 24323},
																						label: "language",
																						expr: &actionExpr{
																							pos: position{line: 764, col: 13, offset: 24453},
																							run: (*parser).callonShortcutParagraph124,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 764, col: 14, offset: 24454},
																								expr: &charClassMatcher{
																									pos:        position{line: 764, col: 14, offset: 24454},
																									val:        "[^\\r\\n` ]",
																									chars:      []rune{'\r', '\n', '`', ' '},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 760, col: 52, offset: 24343},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph128,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph131,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 754, col: 5, offset: 24076},
																			run: (*parser).callonShortcutParagraph138,
																			expr: &seqExpr{
																				pos: position{line: 754, col: 5, offset: 24076},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 754, col: 5, offset: 24076},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 754, col: 16, offset: 24087},
																							run: (*parser).callonShortcutParagraph141,
																							expr: &seqExpr{
																								pos: position{line: 754, col: 16, offset: 24087},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 754, col: 16, offset: 24087},
																										val:        "```",
																										ignoreCase: false,
																										want:       "\"```\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 754, col: 22, offset: 24093},
																										expr: &litMatcher{
																											pos:        position{line: 754, col: 22, offset: 24093},
																											val:        "`",
																											ignoreCase: false,
																											want:       "\"`\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 756, col: 8, offset: 24177},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph147,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph150,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 769, col: 5, offset: 24613},
																			run: (*parser).callonShortcutParagraph157,
																			expr: &seqExpr{
																				pos: position{line: 769, col: 5, offset: 24613},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 769, col: 5, offset: 24613},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 769, col: 16, offset: 24624},
																							run: (*parser).callonShortcutParagraph160,
																							expr: &seqExpr{
																								pos: position{line: 769, col: 16, offset: 24624},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 769, col: 16, offset: 24624},
																										val:        "----",
																										ignoreCase: false,
																										want:       "\"----\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 769, col: 23, offset: 24631},
																										expr: &litMatcher{
																											pos:        position{line: 769, col: 23, offset: 24631},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 771, col: 8, offset: 24715},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph166,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph169,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 783, col: 5, offset: 25089},
																			run: (*parser).callonShortcutParagraph176,
																			expr: &seqExpr{
																				pos: position{line: 783, col: 5, offset: 25089},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 783, col: 5, offset: 25089},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 783, col: 16, offset: 25100},
																							run: (*parser).callonShortcutParagraph179,
																							expr: &seqExpr{
																								pos: position{line: 783, col: 16, offset: 25100},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 783, col: 16, offset: 25100},
																										val:        "....",
																										ignoreCase: false,
																										want:       "\"....\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 783, col: 23, offset: 25107},
																										expr: &litMatcher{
																											pos:        position{line: 783, col: 23, offset: 25107},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 785, col: 8, offset: 25191},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph185,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph188,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 790, col: 5, offset: 25341},
																			run: (*parser).callonShortcutParagraph195,
																			expr: &seqExpr{
																				pos: position{line: 790, col: 5, offset: 25341},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 790, col: 5, offset: 25341},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 790, col: 16, offset: 25352},
																							run: (*parser).callonShortcutParagraph198,
																							expr: &seqExpr{
																								pos: position{line: 790, col: 16, offset: 25352},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 790, col: 16, offset: 25352},
																										val:        "++++",
																										ignoreCase: false,
																										want:       "\"++++\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 790, col: 23, offset: 25359},
																										expr: &litMatcher{
																											pos:        position{line: 790, col: 23, offset: 25359},
																											val:        "+",
																											ignoreCase: false,
																											want:       "\"+\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 792, col: 8, offset: 25443},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph204,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph207,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 797, col: 5, offset: 25591},
																			run: (*parser).callonShortcutParagraph214,
																			expr: &seqExpr{
																				pos: position{line: 797, col: 5, offset: 25591},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 797, col: 5, offset: 25591},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 797, col: 16, offset: 25602},
																							run: (*parser).callonShortcutParagraph217,
																							expr: &seqExpr{
																								pos: position{line: 797, col: 16, offset: 25602},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 797, col: 16, offset: 25602},
																										val:        "____",
																										ignoreCase: false,
																										want:       "\"____\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 797, col: 23, offset: 25609},
																										expr: &litMatcher{
																											pos:        position{line: 797, col: 23, offset: 25609},
																											val:        "_",
																											ignoreCase: false,
																											want:       "\"_\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 799, col: 8, offset: 25693},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph223,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph226,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 804, col: 5, offset: 25837},
																			run: (*parser).callonShortcutParagraph233,
																			expr: &seqExpr{
																				pos: position{line: 804, col: 5, offset: 25837},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 804, col: 5, offset: 25837},
																						label: "delimiter",
																						expr: &actionExpr{
																							pos: position{line: 804, col: 16, offset: 25848},
																							run: (*parser).callonShortcutParagraph236,
																							expr: &seqExpr{
																								pos: position{line: 804, col: 16, offset: 25848},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 804, col: 16, offset: 25848},
																										val:        "****",
																										ignoreCase: false,
																										want:       "\"****\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 804, col: 23, offset: 25855},
																										expr: &litMatcher{
																											pos:        position{line: 804, col: 23, offset: 25855},
																											val:        "*",
																											ignoreCase: false,
																											want:       "\"*\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 806, col: 8, offset: 25939},
																						expr: &actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonShortcutParagraph242,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 2924, col: 8, offset: 91938},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonShortcutParagraph245,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1762, col: 9, offset: 57001},
												expr: &seqExpr{
													pos: position{line: 1537, col: 27, offset: 49643},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1537, col: 27, offset: 49643},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1537, col: 31, offset: 49647},
															expr: &actionExpr{
																pos: position{line: 2902, col: 10, offset: 91540},
																run: (*parser).callonShortcutParagraph256,
																expr: &charClassMatcher{
																	pos:        position{line: 2902, col: 10, offset: 91540},
																	val:        "[\\t ]",
																	chars:      []rune{'\t', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonShortcutParagraph258,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1763, col: 9, offset: 57033},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1763, col: 15, offset: 57039},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2466, col: 22, offset: 79269},
															run: (*parser).callonShortcutParagraph265,
															expr: &seqExpr{
																pos: position{line: 2466, col: 22, offset: 79269},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2471, col: 31, offset: 79490},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2471, col: 36, offset: 79495},
																		expr: &litMatcher{
																			pos:        position{line: 2471, col: 37, offset: 79496},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2466, col: 49, offset: 79296},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 13, offset: 89985},
																			run: (*parser).callonShortcutParagraph271,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2848, col: 13, offset: 89985},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 13, offset: 89985},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonShortcutParagraph275,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1785, col: 5, offset: 57639},
															run: (*parser).callonShortcutParagraph282,
															expr: &seqExpr{
																pos: position{line: 1785, col: 5, offset: 57639},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1785, col: 5, offset: 57639},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2852, col: 14, offset: 90052},
																			run: (*parser).callonShortcutParagraph285,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2852, col: 14, offset: 90052},
																				expr: &charClassMatcher{
																					pos:        position{line: 2852, col: 14, offset: 90052},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1786, col: 5, offset: 57663},
																		run: (*parser).callonShortcutParagraph288,
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonShortcutParagraph290,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1770, col: 1, offset: 57243},
			expr: &actionExpr{
				pos: position{line: 1771, col: 5, offset: 57261},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 5, offset: 57261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1771, col: 5, offset: 57261},
							label: "style",
							expr: &zeroOrOneExpr{
								pos: position{line: 1771, col: 11, offset: 57267},
								expr: &actionExpr{
									pos: position{line: 1726, col: 5, offset: 55741},
									run: (*parser).callonParagraph5,
									expr: &seqExpr{
										pos: position{line: 1726, col: 5, offset: 55741},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 1726, col: 5, offset: 55741},
												run: (*parser).callonParagraph7,
											},
											&labeledExpr{
												pos:   position{line: 1729, col: 5, offset: 55804},
												label: "style",
												expr: &choiceExpr{
													pos: position{line: 1729, col: 12, offset: 55811},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1729, col: 12, offset: 55811},
															run: (*parser).callonParagraph10,
															expr: &litMatcher{
																pos:        position{line: 1729, col: 12, offset: 55811},
																val:        "TIP: ",
																ignoreCase: false,
																want:       "\"TIP: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1731, col: 13, offset: 55867},
															run: (*parser).callonParagraph12,
															expr: &litMatcher{
																pos:        position{line: 1731, col: 13, offset: 55867},
																val:        "NOTE: ",
																ignoreCase: false,
																want:       "\"NOTE: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1733, col: 13, offset: 55925},
															run: (*parser).callonParagraph14,
															expr: &litMatcher{
																pos:        position{line: 1733, col: 13, offset: 55925},
																val:        "IMPORTANT: ",
																ignoreCase: false,
																want:       "\"IMPORTANT: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1735, col: 13, offset: 55993},
															run: (*parser).callonParagraph16,
															expr: &litMatcher{
																pos:        position{line: 1735, col: 13, offset: 55993},
																val:        "WARNING: ",
																ignoreCase: false,
																want:       "\"WARNING: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1737, col: 13, offset: 56057},
															run: (*parser).callonParagraph18,
															expr: &litMatcher{
																pos:        position{line: 1737, col: 13, offset: 56057},
																val:        "CAUTION: ",
																ignoreCase: false,
																want:       "\"CAUTION: \"",
															},
														},
														&actionExpr{
															pos: position{line: 1739, col: 13, offset: 56121},
															run: (*parser).callonParagraph20,
															expr: &andExpr{
																pos: position{line: 1739, col: 13, offset: 56121},
																expr: &actionExpr{
																	pos: position{line: 2906, col: 11, offset: 91601},
																	run: (*parser).callonParagraph22,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2906, col: 11, offset: 91601},
																		expr: &charClassMatcher{
																			pos:        position{line: 2906, col: 11, offset: 91601},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1772, col: 5, offset: 57290},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1785, col: 5, offset: 57639},
								run: (*parser).callonParagraph26,
								expr: &seqExpr{
									pos: position{line: 1785, col: 5, offset: 57639},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1785, col: 5, offset: 57639},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 2852, col: 14, offset: 90052},
												run: (*parser).callonParagraph29,
												expr: &oneOrMoreExpr{
													pos: position{line: 2852, col: 14, offset: 90052},
													expr: &charClassMatcher{
														pos:        position{line: 2852, col: 14, offset: 90052},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1786, col: 5, offset: 57663},
											run: (*parser).callonParagraph32,
										},
										&choiceExpr{
											pos: position{line: 2924, col: 8, offset: 91938},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2911, col: 12, offset: 91711},
													run: (*parser).callonParagraph34,
													expr: &choiceExpr{
														pos: position{line: 2911, col: 13, offset: 91712},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2911, col: 13, offset: 91712},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2911, col: 20, offset: 91719},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 2911, col: 29, offset: 91728},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 2921, col: 8, offset: 91888},
													expr: &anyMatcher{
														line: 2921, col: 9, offset: 91889,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1773, col: 5, offset: 57324},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1773, col: 16, offset: 57335},
								expr: &actionExpr{
									pos: position{line: 1774, col: 9, offset: 57345},
									run: (*parser).callonParagraph43,
									expr: &seqExpr{
										pos: position{line: 1774, col: 9, offset: 57345},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 2919, col: 11, offset: 91874},
												expr: &anyMatcher{
													line: 2919, col: 13, offset: 91876,
												},
											},
											&notExpr{
												pos: position{line: 1775, col: 9, offset: 57360},
												expr: &actionExpr{
													pos: position{line: 677, col: 14, offset: 21486},
													run: (*parser).callonParagraph48,
													expr: &seqExpr{
														pos: position{line: 677, col: 14, offset: 21486},
														exprs: []interface{}{
															&andExpr{
																pos: position{line: 2919, col: 11, offset: 91874},
																expr: &anyMatcher{
																	line: 2919, col: 13, offset: 91876,
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 677, col: 21, offset: 21493},
																expr: &actionExpr{
																	pos: position{line: 2902, col: 10, offset: 91540},
																	run: (*parser).callonParagraph53,
																	expr: &charClassMatcher{
																		pos:        position{line: 2902, col: 10, offset: 91540},
																		val:        "[\\t ]",
																		chars:      []rune{'\t', ' '},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 2924, col: 8, offset: 91938},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonParagraph56,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1776, col: 9, offset: 57379},
												expr: &ruleRefExpr{
													pos:  position{line: 1776, col: 10, offset: 57380},
													name: "BlockAttributes",
												},
											},
											&labeledExpr{
												pos:   position{line: 1777, col: 9, offset: 57404},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1777, col: 15, offset: 57410},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2466, col: 22, offset: 79269},
															run: (*parser).callonParagraph67,
															expr: &seqExpr{
																pos: position{line: 2466, col: 22, offset: 79269},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2471, col: 31, offset: 79490},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2471, col: 36, offset: 79495},
																		expr: &litMatcher{
																			pos:        position{line: 2471, col: 37, offset: 79496},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2466, col: 49, offset: 79296},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2848, col: 13, offset: 89985},
																			run: (*parser).callonParagraph73,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2848, col: 13, offset: 89985},
																				expr: &charClassMatcher{
																					pos:        position{line: 2848, col: 13, offset: 89985},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonParagraph77,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1785, col: 5, offset: 57639},
															run: (*parser).callonParagraph84,
															expr: &seqExpr{
																pos: position{line: 1785, col: 5, offset: 57639},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1785, col: 5, offset: 57639},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2852, col: 14, offset: 90052},
																			run: (*parser).callonParagraph87,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2852, col: 14, offset: 90052},
																				expr: &charClassMatcher{
																					pos:        position{line: 2852, col: 14, offset: 90052},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1786, col: 5, offset: 57663},
																		run: (*parser).callonParagraph90,
																	},
																	&choiceExpr{
																		pos: position{line: 2924, col: 8, offset: 91938},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonParagraph92,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1796, col: 1, offset: 58149},
			expr: &choiceExpr{
				pos: position{line: 1796, col: 15, offset: 58163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1796, col: 15, offset: 58163},
						name: "EscapedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 35, offset: 58183},
						name: "UnescapedQuotedText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1798, col: 1, offset: 58204},
			expr: &actionExpr{
				pos: position{line: 1799, col: 5, offset: 58229},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1799, col: 5, offset: 58229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1799, col: 5, offset: 58229},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1799, col: 16, offset: 58240},
								expr: &actionExpr{
									pos: position{line: 1799, col: 17, offset: 58241},
									run: (*parser).callonEscapedQuotedText5,
									expr: &ruleRefExpr{
										pos:  position{line: 1799, col: 17, offset: 58241},
										name: "LongHandAttributes",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1802, col: 5, offset: 58309},
							expr: &litMatcher{
								pos:        position{line: 1802, col: 7, offset: 58311},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1803, col: 5, offset: 58320},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1804, col: 9, offset: 58338},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1804, col: 9, offset: 58338},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1805, col: 11, offset: 58365},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1806, col: 11, offset: 58393},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1807, col: 11, offset: 58424},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1808, col: 11, offset: 58452},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1809, col: 11, offset: 58483},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnescapedQuotedText",
			pos:  position{line: 1814, col: 1, offset: 58603},
			expr: &actionExpr{
				pos: position{line: 1815, col: 5, offset: 58645},
				run: (*parser).callonUnescapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 5, offset: 58645},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1815, col: 5, offset: 58645},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1815, col: 16, offset: 58656},
								expr: &ruleRefExpr{
									pos:  position{line: 1815, col: 17, offset: 58657},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1816, col: 5, offset: 58682},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1816, col: 14, offset: 58691},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1816, col: 14, offset: 58691},
										name: "SingleQuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1816, col: 33, offset: 58710},
										name: "DoubleQuotedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedText",
			pos:  position{line: 1824, col: 1, offset: 58941},
			expr: &choiceExpr{
				pos: position{line: 1825, col: 5, offset: 58966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1825, col: 5, offset: 58966},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 7, offset: 58993},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1827, col: 7, offset: 59021},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 7, offset: 59053},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1829, col: 7, offset: 59081},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 7, offset: 59102},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "DoubleQuotedText",
			pos:  position{line: 1832, col: 1, offset: 59120},
			expr: &choiceExpr{
				pos: position{line: 1833, col: 5, offset: 59145},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1833, col: 5, offset: 59145},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 7, offset: 59171},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 7, offset: 59199},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 7, offset: 59230},
						name: "DoubleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "QuotedTextElement",
			pos:  position{line: 1850, col: 1, offset: 59584},
			expr: &choiceExpr{
				pos: position{line: 1851, col: 5, offset: 59610},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2755, col: 5, offset: 87520},
						run: (*parser).callonQuotedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2755, col: 5, offset: 87520},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2755, col: 5, offset: 87520},
									expr: &charClassMatcher{
										pos:        position{line: 2755, col: 5, offset: 87520},
										val:        "[\\pL\\pN]",
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&choiceExpr{
									pos: position{line: 2771, col: 9, offset: 87859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonQuotedTextElement7,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 8, offset: 88554},
											run: (*parser).callonQuotedTextElement9,
											expr: &seqExpr{
												pos: position{line: 2801, col: 9, offset: 88555},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2801, col: 9, offset: 88555},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&andExpr{
														pos: position{line: 2801, col: 13, offset: 88559},
														expr: &notExpr{
															pos: position{line: 2801, col: 15, offset: 88561},
															expr: &litMatcher{
																pos:        position{line: 2801, col: 16, offset: 88562},
																val:        "..",
																ignoreCase: false,
																want:       "\"..\"",
															},
														},
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 2773, col: 11, offset: 87889},
											run: (*parser).callonQuotedTextElement15,
										},
										&andExpr{
											pos: position{line: 2776, col: 11, offset: 87967},
											expr: &seqExpr{
												pos: position{line: 2777, col: 13, offset: 87982},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 2777, col: 13, offset: 87982},
														expr: &seqExpr{
															pos: position{line: 2777, col: 15, offset: 87984},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2777, col: 15, offset: 87984},
																	val:        ":",
																	ignoreCase: false,
																	want:       "\":\"",
																},
																&notExpr{
																	pos: position{line: 2777, col: 19, offset: 87988},
																	expr: &choiceExpr{
																		pos: position{line: 2777, col: 21, offset: 87990},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonQuotedTextElement23,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonQuotedTextElement25,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 2921, col: 8, offset: 91888},
																				expr: &anyMatcher{
																					line: 2921, col: 9, offset: 91889,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2778, col: 13, offset: 88016},
														expr: &litMatcher{
															pos:        position{line: 2778, col: 14, offset: 88017},
															val:        "@",
															ignoreCase: false,
															want:       "\"@\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2906, col: 11, offset: 91601},
						run: (*parser).callonQuotedTextElement34,
						expr: &oneOrMoreExpr{
							pos: position{line: 2906, col: 11, offset: 91601},
							expr: &charClassMatcher{
								pos:        position{line: 2906, col: 11, offset: 91601},
								val:        "[\\t ]",
								chars:      []rune{'\t', ' '},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&actionExpr{
						pos: position{line: 2801, col: 8, offset: 88554},
						run: (*parser).callonQuotedTextElement37,
						expr: &seqExpr{
							pos: position{line: 2801, col: 9, offset: 88555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2801, col: 9, offset: 88555},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&andExpr{
									pos: position{line: 2801, col: 13, offset: 88559},
									expr: &notExpr{
										pos: position{line: 2801, col: 15, offset: 88561},
										expr: &litMatcher{
											pos:        position{line: 2801, col: 16, offset: 88562},
											val:        "..",
											ignoreCase: false,
											want:       "\"..\"",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 7, offset: 59683},
						name: "Replacement",
					},
					&actionExpr{
						pos: position{line: 2807, col: 5, offset: 88736},
						run: (*parser).callonQuotedTextElement44,
						expr: &choiceExpr{
							pos: position{line: 2808, col: 9, offset: 88746},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2808, col: 10, offset: 88747},
									val:        "[,;?)!/=-]",
									chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
									ignoreCase: false,
									inverted:   false,
								},
								&seqExpr{
									pos: position{line: 2809, col: 12, offset: 88822},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2809, col: 12, offset: 88822},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&andExpr{
											pos: position{line: 2809, col: 16, offset: 88826},
											expr: &choiceExpr{
												pos: position{line: 2809, col: 18, offset: 88828},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonQuotedTextElement51,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&actionExpr{
														pos: position{line: 2911, col: 12, offset: 91711},
														run: (*parser).callonQuotedTextElement53,
														expr: &choiceExpr{
															pos: position{line: 2911, col: 13, offset: 91712},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2911, col: 13, offset: 91712},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 20, offset: 91719},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 29, offset: 91728},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2921, col: 8, offset: 91888},
														expr: &anyMatcher{
															line: 2921, col: 9, offset: 91889,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 2811, col: 13, offset: 88897},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2811, col: 13, offset: 88897},
											run: (*parser).callonQuotedTextElement61,
										},
										&charClassMatcher{
											pos:        position{line: 2814, col: 14, offset: 89033},
											val:        "[\"\\()]",
											chars:      []rune{'"', '\'', '(', ')'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 2817, col: 13, offset: 89090},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2817, col: 13, offset: 89090},
											run: (*parser).callonQuotedTextElement64,
										},
										&charClassMatcher{
											pos:        position{line: 2820, col: 14, offset: 89179},
											val:        "[:@]",
											chars:      []rune{':', '@'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 2823, col: 13, offset: 89224},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2823, col: 13, offset: 89224},
											run: (*parser).callonQuotedTextElement67,
										},
										&charClassMatcher{
											pos:        position{line: 2826, col: 14, offset: 89313},
											val:        "[*_`#]",
											chars:      []rune{'*', '_', '`', '#'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&seqExpr{
									pos: position{line: 2829, col: 13, offset: 89370},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 2829, col: 13, offset: 89370},
											run: (*parser).callonQuotedTextElement70,
										},
										&charClassMatcher{
											pos:        position{line: 2832, col: 14, offset: 89526},
											val:        "[[]]",
											chars:      []rune{'[', ']'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2484, col: 5, offset: 79986},
						run: (*parser).callonQuotedTextElement72,
						expr: &seqExpr{
							pos: position{line: 2484, col: 5, offset: 79986},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2484, col: 5, offset: 79986},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2484, col: 10, offset: 79991},
									expr: &charClassMatcher{
										pos:        position{line: 2484, col: 11, offset: 79992},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2490, col: 5, offset: 80184},
						run: (*parser).callonQuotedTextElement77,
						expr: &seqExpr{
							pos: position{line: 2490, col: 5, offset: 80184},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2490, col: 5, offset: 80184},
									run: (*parser).callonQuotedTextElement79,
								},
								&andCodeExpr{
									pos: position{line: 2493, col: 5, offset: 80250},
									run: (*parser).callonQuotedTextElement80,
								},
								&litMatcher{
									pos:        position{line: 2497, col: 5, offset: 80375},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2497, col: 9, offset: 80379},
									expr: &charClassMatcher{
										pos:        position{line: 2497, col: 10, offset: 80380},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 20111},
						run: (*parser).callonQuotedTextElement84,
						expr: &seqExpr{
							pos: position{line: 636, col: 5, offset: 20111},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 636, col: 5, offset: 20111},
									run: (*parser).callonQuotedTextElement86,
								},
								&labeledExpr{
									pos:   position{line: 639, col: 5, offset: 20178},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 639, col: 14, offset: 20187},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 645, col: 5, offset: 20316},
												run: (*parser).callonQuotedTextElement89,
												expr: &seqExpr{
													pos: position{line: 645, col: 5, offset: 20316},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 645, col: 5, offset: 20316},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 645, col: 13, offset: 20324},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																run: (*parser).callonQuotedTextElement93,
																expr: &seqExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 318, col: 18, offset: 9737},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 318, col: 28, offset: 9747},
																			expr: &charClassMatcher{
																				pos:        position{line: 318, col: 29, offset: 9748},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 645, col: 32, offset: 20343},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 652, col: 5, offset: 20584},
												run: (*parser).callonQuotedTextElement99,
												expr: &seqExpr{
													pos: position{line: 652, col: 5, offset: 20584},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 652, col: 5, offset: 20584},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 652, col: 9, offset: 20588},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																run: (*parser).callonQuotedTextElement103,
																expr: &seqExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 318, col: 18, offset: 9737},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 318, col: 28, offset: 9747},
																			expr: &charClassMatcher{
																				pos:        position{line: 318, col: 29, offset: 9748},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 652, col: 28, offset: 20607},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 658, col: 25, offset: 20788},
												run: (*parser).callonQuotedTextElement109,
												expr: &seqExpr{
													pos: position{line: 658, col: 25, offset: 20788},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 658, col: 25, offset: 20788},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 658, col: 37, offset: 20800},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																run: (*parser).callonQuotedTextElement113,
																expr: &seqExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 318, col: 18, offset: 9737},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 318, col: 28, offset: 9747},
																			expr: &charClassMatcher{
																				pos:        position{line: 318, col: 29, offset: 9748},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 658, col: 56, offset: 20819},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 658, col: 62, offset: 20825},
																expr: &actionExpr{
																	pos: position{line: 666, col: 17, offset: 21120},
																	run: (*parser).callonQuotedTextElement120,
																	expr: &seqExpr{
																		pos: position{line: 666, col: 17, offset: 21120},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 666, col: 17, offset: 21120},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 666, col: 21, offset: 21124},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 666, col: 28, offset: 21131},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 666, col: 28, offset: 21131},
																							run: (*parser).callonQuotedTextElement125,
																							expr: &charClassMatcher{
																								pos:        position{line: 666, col: 28, offset: 21131},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 668, col: 9, offset: 21185},
																							run: (*parser).callonQuotedTextElement127,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 668, col: 9, offset: 21185},
																								expr: &charClassMatcher{
																									pos:        position{line: 668, col: 9, offset: 21185},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 658, col: 78, offset: 20841},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 662, col: 25, offset: 20959},
												run: (*parser).callonQuotedTextElement131,
												expr: &seqExpr{
													pos: position{line: 662, col: 25, offset: 20959},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 662, col: 25, offset: 20959},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 662, col: 38, offset: 20972},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 318, col: 18, offset: 9737},
																run: (*parser).callonQuotedTextElement135,
																expr: &seqExpr{
																	pos: position{line: 318, col: 18, offset: 9737},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 318, col: 18, offset: 9737},
																			val:        "[_\\pL\\pN]",
																			chars:      []rune{'_'},
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 318, col: 28, offset: 9747},
																			expr: &charClassMatcher{
																				pos:        position{line: 318, col: 29, offset: 9748},
																				val:        "[-\\pL\\pN]",
																				chars:      []rune{'-'},
																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 662, col: 57, offset: 20991},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 662, col: 63, offset: 20997},
																expr: &actionExpr{
																	pos: position{line: 666, col: 17, offset: 21120},
																	run: (*parser).callonQuotedTextElement142,
																	expr: &seqExpr{
																		pos: position{line: 666, col: 17, offset: 21120},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 666, col: 17, offset: 21120},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 666, col: 21, offset: 21124},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 666, col: 28, offset: 21131},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 666, col: 28, offset: 21131},
																							run: (*parser).callonQuotedTextElement147,
																							expr: &charClassMatcher{
																								pos:        position{line: 666, col: 28, offset: 21131},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 668, col: 9, offset: 21185},
																							run: (*parser).callonQuotedTextElement149,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 668, col: 9, offset: 21185},
																								expr: &charClassMatcher{
																									pos:        position{line: 668, col: 9, offset: 21185},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 662, col: 79, offset: 21013},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2915, col: 18, offset: 91811},
						run: (*parser).callonQuotedTextElement153,
						expr: &seqExpr{
							pos: position{line: 2915, col: 18, offset: 91811},
							exprs: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonQuotedTextElement155,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2915, col: 26, offset: 91819},
									expr: &actionExpr{
										pos: position{line: 2911, col: 12, offset: 91711},
										run: (*parser).callonQuotedTextElement161,
										expr: &choiceExpr{
											pos: position{line: 2911, col: 13, offset: 91712},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2911, col: 13, offset: 91712},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 20, offset: 91719},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 29, offset: 91728},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1859, col: 7, offset: 59850},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 7, offset: 59897},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2453, col: 5, offset: 78820},
						run: (*parser).callonQuotedTextElement168,
						expr: &seqExpr{
							pos: position{line: 2453, col: 5, offset: 78820},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2453, col: 5, offset: 78820},
									run: (*parser).callonQuotedTextElement170,
								},
								&labeledExpr{
									pos:   position{line: 2456, col: 5, offset: 78891},
									label: "element",
									expr: &actionExpr{
										pos: position{line: 2457, col: 9, offset: 78909},
										run: (*parser).callonQuotedTextElement172,
										expr: &charClassMatcher{
											pos:        position{line: 2457, col: 10, offset: 78910},
											val:        "[<>&]",
											chars:      []rune{'<', '>', '&'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 23, offset: 36969},
						run: (*parser).callonQuotedTextElement174,
						expr: &seqExpr{
							pos: position{line: 1198, col: 23, offset: 36969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1196, col: 32, offset: 36937},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 51, offset: 36997},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1198, col: 56, offset: 37002},
										run: (*parser).callonQuotedTextElement178,
										expr: &oneOrMoreExpr{
											pos: position{line: 1198, col: 56, offset: 37002},
											expr: &charClassMatcher{
												pos:        position{line: 1198, col: 56, offset: 37002},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 32, offset: 36937},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2841, col: 12, offset: 89767},
						run: (*parser).callonQuotedTextElement182,
						expr: &charClassMatcher{
							pos:        position{line: 2841, col: 12, offset: 89767},
							val:        "[^\\r\\n]",
							chars:      []rune{'\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1878, col: 1, offset: 60367},
			expr: &actionExpr{
				pos: position{line: 1879, col: 5, offset: 60395},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 5, offset: 60395},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1874, col: 38, offset: 60320},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1880, col: 5, offset: 60434},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1880, col: 15, offset: 60444},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1876, col: 36, offset: 60361},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1885, col: 1, offset: 60604},
			expr: &oneOrMoreExpr{
				pos: position{line: 1885, col: 32, offset: 60635},
				expr: &ruleRefExpr{
					pos:  position{line: 1885, col: 32, offset: 60635},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1887, col: 1, offset: 60666},
			expr: &actionExpr{
				pos: position{line: 1888, col: 5, offset: 60701},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 5, offset: 60701},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 1889, col: 5, offset: 60712},
							expr: &litMatcher{
								pos:        position{line: 1876, col: 36, offset: 60361},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1890, col: 5, offset: 60749},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1890, col: 14, offset: 60758},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1915, col: 1, offset: 61438},
			expr: &actionExpr{
				pos: position{line: 1916, col: 5, offset: 61466},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1916, col: 5, offset: 61466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1899, col: 5, offset: 60992},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&andCodeExpr{
							pos: position{line: 1900, col: 5, offset: 61001},
							run: (*parser).callonSingleQuoteBoldText4,
						},
						&andExpr{
							pos: position{line: 1904, col: 5, offset: 61119},
							expr: &notExpr{
								pos: position{line: 1904, col: 7, offset: 61121},
								expr: &litMatcher{
									pos:        position{line: 1904, col: 8, offset: 61122},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1917, col: 5, offset: 61504},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1917, col: 15, offset: 61514},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1907, col: 5, offset: 61242},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&notExpr{
							pos: position{line: 1908, col: 5, offset: 61251},
							expr: &litMatcher{
								pos:        position{line: 1908, col: 6, offset: 61252},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 1909, col: 5, offset: 61315},
							run: (*parser).callonSingleQuoteBoldText13,
						},
						&andExpr{
							pos: position{line: 1913, col: 5, offset: 61424},
							expr: &notExpr{
								pos: position{line: 1913, col: 7, offset: 61426},
								expr: &charClassMatcher{
									pos:        position{line: 2746, col: 13, offset: 87373},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1922, col: 1, offset: 61674},
			expr: &actionExpr{
				pos: position{line: 1923, col: 5, offset: 61711},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1923, col: 5, offset: 61711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1923, col: 5, offset: 61711},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonSingleQuoteBoldTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1924, col: 5, offset: 61750},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1924, col: 14, offset: 61759},
								expr: &ruleRefExpr{
									pos:  position{line: 1924, col: 15, offset: 61760},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1925, col: 5, offset: 61794},
							run: (*parser).callonSingleQuoteBoldTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1931, col: 1, offset: 61935},
			expr: &actionExpr{
				pos: position{line: 1932, col: 5, offset: 61970},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 5, offset: 61970},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 1933, col: 5, offset: 61998},
							expr: &seqExpr{
								pos: position{line: 1907, col: 5, offset: 61242},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1907, col: 5, offset: 61242},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
									&notExpr{
										pos: position{line: 1908, col: 5, offset: 61251},
										expr: &litMatcher{
											pos:        position{line: 1908, col: 6, offset: 61252},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 1909, col: 5, offset: 61315},
										run: (*parser).callonSingleQuoteBoldTextElement10,
									},
									&andExpr{
										pos: position{line: 1913, col: 5, offset: 61424},
										expr: &notExpr{
											pos: position{line: 1913, col: 7, offset: 61426},
											expr: &charClassMatcher{
												pos:        position{line: 2746, col: 13, offset: 87373},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1934, col: 5, offset: 62035},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1934, col: 14, offset: 62044},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1939, col: 1, offset: 62132},
			expr: &choiceExpr{
				pos: position{line: 1941, col: 5, offset: 62193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1941, col: 5, offset: 62193},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1941, col: 5, offset: 62193},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1941, col: 5, offset: 62193},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 59530},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 59530},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 59530},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 59535},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 59535},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1941, col: 40, offset: 62228},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1941, col: 45, offset: 62233},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1941, col: 55, offset: 62243},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1941, col: 84, offset: 62272},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1945, col: 7, offset: 62436},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1945, col: 7, offset: 62436},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1945, col: 7, offset: 62436},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1945, col: 42, offset: 62471},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1945, col: 47, offset: 62476},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1945, col: 57, offset: 62486},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1945, col: 86, offset: 62515},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1950, col: 7, offset: 62717},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1950, col: 7, offset: 62717},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1950, col: 7, offset: 62717},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1950, col: 42, offset: 62752},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1950, col: 46, offset: 62756},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1950, col: 56, offset: 62766},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1950, col: 85, offset: 62795},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1967, col: 1, offset: 63275},
			expr: &actionExpr{
				pos: position{line: 1968, col: 5, offset: 63305},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1968, col: 5, offset: 63305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1963, col: 40, offset: 63226},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 5, offset: 63346},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 15, offset: 63356},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1965, col: 38, offset: 63269},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1974, col: 1, offset: 63521},
			expr: &oneOrMoreExpr{
				pos: position{line: 1974, col: 34, offset: 63554},
				expr: &ruleRefExpr{
					pos:  position{line: 1974, col: 34, offset: 63554},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1976, col: 1, offset: 63586},
			expr: &actionExpr{
				pos: position{line: 1977, col: 5, offset: 63623},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1977, col: 5, offset: 63623},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 1978, col: 5, offset: 63634},
							expr: &litMatcher{
								pos:        position{line: 1965, col: 38, offset: 63269},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1979, col: 5, offset: 63673},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1979, col: 14, offset: 63682},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 2005, col: 1, offset: 64366},
			expr: &actionExpr{
				pos: position{line: 2006, col: 5, offset: 64396},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2006, col: 5, offset: 64396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1988, col: 5, offset: 63924},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&andCodeExpr{
							pos: position{line: 1989, col: 5, offset: 63933},
							run: (*parser).callonSingleQuoteItalicText4,
						},
						&andExpr{
							pos: position{line: 1993, col: 5, offset: 64053},
							expr: &notExpr{
								pos: position{line: 1993, col: 7, offset: 64055},
								expr: &litMatcher{
									pos:        position{line: 1993, col: 8, offset: 64056},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2007, col: 5, offset: 64436},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2007, col: 15, offset: 64446},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1997, col: 5, offset: 64166},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&notExpr{
							pos: position{line: 1998, col: 5, offset: 64175},
							expr: &litMatcher{
								pos:        position{line: 1998, col: 6, offset: 64176},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 1999, col: 5, offset: 64241},
							run: (*parser).callonSingleQuoteItalicText13,
						},
						&andExpr{
							pos: position{line: 2003, col: 5, offset: 64352},
							expr: &notExpr{
								pos: position{line: 2003, col: 7, offset: 64354},
								expr: &charClassMatcher{
									pos:        position{line: 2746, col: 13, offset: 87373},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 2012, col: 1, offset: 64613},
			expr: &actionExpr{
				pos: position{line: 2013, col: 5, offset: 64651},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 5, offset: 64651},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2013, col: 5, offset: 64651},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonSingleQuoteItalicTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2014, col: 5, offset: 64690},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2014, col: 14, offset: 64699},
								expr: &ruleRefExpr{
									pos:  position{line: 2014, col: 15, offset: 64700},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2015, col: 5, offset: 64735},
							run: (*parser).callonSingleQuoteItalicTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2021, col: 1, offset: 64876},
			expr: &actionExpr{
				pos: position{line: 2022, col: 5, offset: 64913},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2022, col: 5, offset: 64913},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 2023, col: 5, offset: 64924},
							expr: &seqExpr{
								pos: position{line: 1997, col: 5, offset: 64166},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1997, col: 5, offset: 64166},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
									&notExpr{
										pos: position{line: 1998, col: 5, offset: 64175},
										expr: &litMatcher{
											pos:        position{line: 1998, col: 6, offset: 64176},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 1999, col: 5, offset: 64241},
										run: (*parser).callonSingleQuoteItalicTextElement10,
									},
									&andExpr{
										pos: position{line: 2003, col: 5, offset: 64352},
										expr: &notExpr{
											pos: position{line: 2003, col: 7, offset: 64354},
											expr: &charClassMatcher{
												pos:        position{line: 2746, col: 13, offset: 87373},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2024, col: 5, offset: 64963},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2024, col: 14, offset: 64972},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2029, col: 1, offset: 65060},
			expr: &choiceExpr{
				pos: position{line: 2031, col: 5, offset: 65125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2031, col: 5, offset: 65125},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2031, col: 5, offset: 65125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2031, col: 5, offset: 65125},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 59530},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 59530},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 59530},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 59535},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 59535},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2031, col: 40, offset: 65160},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2031, col: 45, offset: 65165},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2031, col: 55, offset: 65175},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2031, col: 86, offset: 65206},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2035, col: 7, offset: 65371},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2035, col: 7, offset: 65371},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2035, col: 7, offset: 65371},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2035, col: 42, offset: 65406},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2035, col: 47, offset: 65411},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2035, col: 57, offset: 65421},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2035, col: 88, offset: 65452},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2040, col: 7, offset: 65693},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2040, col: 7, offset: 65693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2040, col: 7, offset: 65693},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2040, col: 42, offset: 65728},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2040, col: 46, offset: 65732},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2040, col: 56, offset: 65742},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2040, col: 87, offset: 65773},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2057, col: 1, offset: 66337},
			expr: &actionExpr{
				pos: position{line: 2058, col: 5, offset: 66370},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2058, col: 5, offset: 66370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2053, col: 43, offset: 66285},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2059, col: 5, offset: 66414},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2059, col: 15, offset: 66424},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2055, col: 41, offset: 66331},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2064, col: 1, offset: 66599},
			expr: &oneOrMoreExpr{
				pos: position{line: 2064, col: 37, offset: 66635},
				expr: &ruleRefExpr{
					pos:  position{line: 2064, col: 37, offset: 66635},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2066, col: 1, offset: 66702},
			expr: &actionExpr{
				pos: position{line: 2067, col: 5, offset: 66742},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2067, col: 5, offset: 66742},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 2068, col: 5, offset: 66753},
							expr: &litMatcher{
								pos:        position{line: 2055, col: 41, offset: 66331},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2069, col: 5, offset: 66795},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2069, col: 14, offset: 66804},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextEndDelimiter",
			pos:  position{line: 2087, col: 1, offset: 67346},
			expr: &seqExpr{
				pos: position{line: 2088, col: 5, offset: 67391},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 2088, col: 5, offset: 67391},
						expr: &ruleRefExpr{
							pos:  position{line: 2088, col: 6, offset: 67392},
							name: "QuotationMark",
						},
					},
					&litMatcher{
						pos:        position{line: 2089, col: 5, offset: 67411},
						val:        "`",
						ignoreCase: false,
						want:       "\"`\"",
					},
					&andCodeExpr{
						pos: position{line: 2090, col: 5, offset: 67419},
						run: (*parser).callonSingleQuoteMonospaceTextEndDelimiter5,
					},
					&andExpr{
						pos: position{line: 2094, col: 5, offset: 67533},
						expr: &notExpr{
							pos: position{line: 2094, col: 7, offset: 67535},
							expr: &charClassMatcher{
								pos:        position{line: 2746, col: 13, offset: 87373},
								val:        "[\\pL\\pN]",
								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2097, col: 1, offset: 67552},
			expr: &actionExpr{
				pos: position{line: 2098, col: 5, offset: 67585},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2098, col: 5, offset: 67585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2080, col: 5, offset: 67148},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&andCodeExpr{
							pos: position{line: 2081, col: 5, offset: 67157},
							run: (*parser).callonSingleQuoteMonospaceText4,
						},
						&andExpr{
							pos: position{line: 2085, col: 5, offset: 67280},
							expr: &notExpr{
								pos: position{line: 2085, col: 7, offset: 67282},
								expr: &litMatcher{
									pos:        position{line: 2085, col: 8, offset: 67283},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2099, col: 5, offset: 67629},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2099, col: 15, offset: 67639},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2100, col: 5, offset: 67678},
							name: "SingleQuoteMonospaceTextEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2104, col: 1, offset: 67815},
			expr: &actionExpr{
				pos: position{line: 2105, col: 5, offset: 67856},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2105, col: 5, offset: 67856},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2105, col: 5, offset: 67856},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonSingleQuoteMonospaceTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2106, col: 5, offset: 67895},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2106, col: 14, offset: 67904},
								expr: &ruleRefExpr{
									pos:  position{line: 2106, col: 15, offset: 67905},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2107, col: 5, offset: 67943},
							run: (*parser).callonSingleQuoteMonospaceTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2113, col: 1, offset: 68084},
			expr: &actionExpr{
				pos: position{line: 2114, col: 5, offset: 68124},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2114, col: 5, offset: 68124},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 2115, col: 5, offset: 68135},
							expr: &ruleRefExpr{
								pos:  position{line: 2115, col: 6, offset: 68136},
								name: "SingleQuoteMonospaceTextEndDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2116, col: 5, offset: 68177},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2116, col: 14, offset: 68186},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2121, col: 1, offset: 68274},
			expr: &choiceExpr{
				pos: position{line: 2123, col: 5, offset: 68345},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2123, col: 5, offset: 68345},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2123, col: 5, offset: 68345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2123, col: 5, offset: 68345},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 59530},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 59530},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 59530},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 59535},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 59535},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2123, col: 40, offset: 68380},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2123, col: 45, offset: 68385},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2123, col: 55, offset: 68395},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2123, col: 89, offset: 68429},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2127, col: 7, offset: 68598},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2127, col: 7, offset: 68598},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2127, col: 7, offset: 68598},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2127, col: 42, offset: 68633},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2127, col: 47, offset: 68638},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2127, col: 57, offset: 68648},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2127, col: 91, offset: 68682},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2132, col: 7, offset: 68888},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2132, col: 7, offset: 68888},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2132, col: 7, offset: 68888},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2132, col: 42, offset: 68923},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2132, col: 46, offset: 68927},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2132, col: 56, offset: 68937},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2132, col: 90, offset: 68971},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2149, col: 1, offset: 69456},
			expr: &actionExpr{
				pos: position{line: 2150, col: 5, offset: 69486},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2150, col: 5, offset: 69486},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2145, col: 40, offset: 69407},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2151, col: 5, offset: 69527},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2151, col: 15, offset: 69537},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2147, col: 38, offset: 69450},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2156, col: 1, offset: 69703},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2156, col: 34, offset: 69736},
				expr: &ruleRefExpr{
					pos:  position{line: 2156, col: 34, offset: 69736},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2158, col: 1, offset: 69767},
			expr: &actionExpr{
				pos: position{line: 2159, col: 5, offset: 69836},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2159, col: 5, offset: 69836},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 2160, col: 5, offset: 69847},
							expr: &litMatcher{
								pos:        position{line: 2147, col: 38, offset: 69450},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2161, col: 5, offset: 69886},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2161, col: 14, offset: 69895},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2186, col: 1, offset: 70577},
			expr: &actionExpr{
				pos: position{line: 2187, col: 5, offset: 70607},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2187, col: 5, offset: 70607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2170, col: 5, offset: 70143},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&andCodeExpr{
							pos: position{line: 2171, col: 5, offset: 70152},
							run: (*parser).callonSingleQuoteMarkedText4,
						},
						&andExpr{
							pos: position{line: 2175, col: 5, offset: 70272},
							expr: &notExpr{
								pos: position{line: 2175, col: 7, offset: 70274},
								expr: &litMatcher{
									pos:        position{line: 2175, col: 8, offset: 70275},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2188, col: 5, offset: 70647},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2188, col: 15, offset: 70657},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2178, col: 5, offset: 70380},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&notExpr{
							pos: position{line: 2179, col: 5, offset: 70388},
							expr: &litMatcher{
								pos:        position{line: 2179, col: 6, offset: 70389},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
						},
						&andCodeExpr{
							pos: position{line: 2180, col: 5, offset: 70452},
							run: (*parser).callonSingleQuoteMarkedText13,
						},
						&andExpr{
							pos: position{line: 2184, col: 5, offset: 70563},
							expr: &notExpr{
								pos: position{line: 2184, col: 7, offset: 70565},
								expr: &charClassMatcher{
									pos:        position{line: 2746, col: 13, offset: 87373},
									val:        "[\\pL\\pN]",
									classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2193, col: 1, offset: 70824},
			expr: &actionExpr{
				pos: position{line: 2194, col: 5, offset: 70862},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2194, col: 5, offset: 70862},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2194, col: 5, offset: 70862},
							expr: &actionExpr{
								pos: position{line: 2902, col: 10, offset: 91540},
								run: (*parser).callonSingleQuoteMarkedTextElements4,
								expr: &charClassMatcher{
									pos:        position{line: 2902, col: 10, offset: 91540},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2195, col: 5, offset: 70901},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2195, col: 14, offset: 70910},
								expr: &ruleRefExpr{
									pos:  position{line: 2195, col: 15, offset: 70911},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2196, col: 5, offset: 70947},
							run: (*parser).callonSingleQuoteMarkedTextElements9,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2202, col: 1, offset: 71088},
			expr: &actionExpr{
				pos: position{line: 2203, col: 5, offset: 71125},
				run: (*parser).callonSingleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2203, col: 5, offset: 71125},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&notExpr{
							pos: position{line: 2204, col: 5, offset: 71136},
							expr: &seqExpr{
								pos: position{line: 2178, col: 5, offset: 70380},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2178, col: 5, offset: 70380},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
									&notExpr{
										pos: position{line: 2179, col: 5, offset: 70388},
										expr: &litMatcher{
											pos:        position{line: 2179, col: 6, offset: 70389},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 2180, col: 5, offset: 70452},
										run: (*parser).callonSingleQuoteMarkedTextElement10,
									},
									&andExpr{
										pos: position{line: 2184, col: 5, offset: 70563},
										expr: &notExpr{
											pos: position{line: 2184, col: 7, offset: 70565},
											expr: &charClassMatcher{
												pos:        position{line: 2746, col: 13, offset: 87373},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2205, col: 5, offset: 71175},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2205, col: 14, offset: 71184},
								name: "QuotedTextElement",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2210, col: 1, offset: 71272},
			expr: &choiceExpr{
				pos: position{line: 2212, col: 5, offset: 71336},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2212, col: 5, offset: 71336},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2212, col: 5, offset: 71336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2212, col: 5, offset: 71336},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 59530},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 59530},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 59530},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 59535},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 59535},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2212, col: 40, offset: 71371},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2212, col: 45, offset: 71376},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2212, col: 55, offset: 71386},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2212, col: 86, offset: 71417},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2216, col: 7, offset: 71582},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2216, col: 7, offset: 71582},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2216, col: 7, offset: 71582},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2216, col: 42, offset: 71617},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2216, col: 47, offset: 71622},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2216, col: 57, offset: 71632},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2216, col: 88, offset: 71663},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2221, col: 7, offset: 71866},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2221, col: 7, offset: 71866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2221, col: 7, offset: 71866},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 59457},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 59457},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 59457},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2221, col: 42, offset: 71901},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2221, col: 46, offset: 71905},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2221, col: 56, offset: 71915},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2221, col: 87, offset: 71946},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2228, col: 1, offset: 72213},
			expr: &actionExpr{
				pos: position{line: 2229, col: 5, offset: 72235},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2229, col: 5, offset: 72235},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2235, col: 27, offset: 72450},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2230, col: 5, offset: 72262},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2230, col: 14, offset: 72271},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2235, col: 27, offset: 72450},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2237, col: 1, offset: 72455},
			expr: &choiceExpr{
				pos: position{line: 2237, col: 25, offset: 72479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2237, col: 25, offset: 72479},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2239, col: 21, offset: 72531},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2239, col: 21, offset: 72531},
							expr: &charClassMatcher{
								pos:        position{line: 2239, col: 21, offset: 72531},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2243, col: 1, offset: 72616},
			expr: &actionExpr{
				pos: position{line: 2245, col: 5, offset: 72683},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2245, col: 5, offset: 72683},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2245, col: 5, offset: 72683},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1842, col: 25, offset: 59457},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1842, col: 25, offset: 59457},
									expr: &litMatcher{
										pos:        position{line: 1842, col: 25, offset: 59457},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2235, col: 27, offset: 72450},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2247, col: 5, offset: 72751},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2247, col: 14, offset: 72760},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2235, col: 27, offset: 72450},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2255, col: 1, offset: 73023},
			expr: &actionExpr{
				pos: position{line: 2256, col: 5, offset: 73047},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2256, col: 5, offset: 73047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2262, col: 29, offset: 73274},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2257, col: 5, offset: 73077},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2257, col: 14, offset: 73086},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2262, col: 29, offset: 73274},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2264, col: 1, offset: 73279},
			expr: &choiceExpr{
				pos: position{line: 2264, col: 27, offset: 73305},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2264, col: 27, offset: 73305},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2266, col: 23, offset: 73361},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2266, col: 23, offset: 73361},
							expr: &charClassMatcher{
								pos:        position{line: 2266, col: 23, offset: 73361},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2270, col: 1, offset: 73446},
			expr: &actionExpr{
				pos: position{line: 2272, col: 5, offset: 73518},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2272, col: 5, offset: 73518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2272, col: 5, offset: 73518},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1842, col: 25, offset: 59457},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1842, col: 25, offset: 59457},
									expr: &litMatcher{
										pos:        position{line: 1842, col: 25, offset: 59457},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2262, col: 29, offset: 73274},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2274, col: 5, offset: 73588},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2274, col: 14, offset: 73597},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2262, col: 29, offset: 73274},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 2283, col: 1, offset: 74066},
			expr: &actionExpr{
				pos: position{line: 2284, col: 5, offset: 74082},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 2284, col: 5, offset: 74082},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2284, col: 5, offset: 74082},
							run: (*parser).callonSection3,
						},
						&labeledExpr{
							pos:   position{line: 2287, col: 5, offset: 74145},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 2287, col: 12, offset: 74152},
								run: (*parser).callonSection5,
								expr: &oneOrMoreExpr{
									pos: position{line: 2287, col: 12, offset: 74152},
									expr: &litMatcher{
										pos:        position{line: 2287, col: 13, offset: 74153},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2291, col: 5, offset: 74261},
							run: (*parser).callonSection8,
						},
						&actionExpr{
							pos: position{line: 2906, col: 11, offset: 91601},
							run: (*parser).callonSection9,
							expr: &oneOrMoreExpr{
								pos: position{line: 2906, col: 11, offset: 91601},
								expr: &charClassMatcher{
									pos:        position{line: 2906, col: 11, offset: 91601},
									val:        "[\\t ]",
									chars:      []rune{'\t', ' '},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2295, col: 12, offset: 74420},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 2295, col: 19, offset: 74427},
								name: "SectionTitle",
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonSection15,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitle",
			pos:  position{line: 2299, col: 1, offset: 74523},
			expr: &actionExpr{
				pos: position{line: 2300, col: 5, offset: 74544},
				run: (*parser).callonSectionTitle1,
				expr: &seqExpr{
					pos: position{line: 2300, col: 5, offset: 74544},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 2300, col: 5, offset: 74544},
							run: (*parser).callonSectionTitle3,
						},
						&labeledExpr{
							pos:   position{line: 2305, col: 5, offset: 74659},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2305, col: 14, offset: 74668},
								expr: &ruleRefExpr{
									pos:  position{line: 2305, col: 15, offset: 74669},
									name: "SectionTitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SectionTitleElement",
			pos:  position{line: 2309, col: 1, offset: 74750},
			expr: &actionExpr{
				pos: position{line: 2310, col: 5, offset: 74777},
				run: (*parser).callonSectionTitleElement1,
				expr: &seqExpr{
					pos: position{line: 2310, col: 5, offset: 74777},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2310, col: 5, offset: 74777},
							expr: &choiceExpr{
								pos: position{line: 2924, col: 8, offset: 91938},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2911, col: 12, offset: 91711},
										run: (*parser).callonSectionTitleElement5,
										expr: &choiceExpr{
											pos: position{line: 2911, col: 13, offset: 91712},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 2911, col: 13, offset: 91712},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 20, offset: 91719},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 2911, col: 29, offset: 91728},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 2921, col: 8, offset: 91888},
										expr: &anyMatcher{
											line: 2921, col: 9, offset: 91889,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2311, col: 5, offset: 74786},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2312, col: 9, offset: 74804},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2755, col: 5, offset: 87520},
										run: (*parser).callonSectionTitleElement14,
										expr: &seqExpr{
											pos: position{line: 2755, col: 5, offset: 87520},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2755, col: 5, offset: 87520},
													expr: &charClassMatcher{
														pos:        position{line: 2755, col: 5, offset: 87520},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2771, col: 9, offset: 87859},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonSectionTitleElement19,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 8, offset: 88554},
															run: (*parser).callonSectionTitleElement21,
															expr: &seqExpr{
																pos: position{line: 2801, col: 9, offset: 88555},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2801, col: 9, offset: 88555},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&andExpr{
																		pos: position{line: 2801, col: 13, offset: 88559},
																		expr: &notExpr{
																			pos: position{line: 2801, col: 15, offset: 88561},
																			expr: &litMatcher{
																				pos:        position{line: 2801, col: 16, offset: 88562},
																				val:        "..",
																				ignoreCase: false,
																				want:       "\"..\"",
																			},
																		},
																	},
																},
															},
														},
														&andCodeExpr{
															pos: position{line: 2773, col: 11, offset: 87889},
															run: (*parser).callonSectionTitleElement27,
														},
														&andExpr{
															pos: position{line: 2776, col: 11, offset: 87967},
															expr: &seqExpr{
																pos: position{line: 2777, col: 13, offset: 87982},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2777, col: 13, offset: 87982},
																		expr: &seqExpr{
																			pos: position{line: 2777, col: 15, offset: 87984},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2777, col: 15, offset: 87984},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																				&notExpr{
																					pos: position{line: 2777, col: 19, offset: 87988},
																					expr: &choiceExpr{
																						pos: position{line: 2777, col: 21, offset: 87990},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonSectionTitleElement35,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonSectionTitleElement37,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2778, col: 13, offset: 88016},
																		expr: &litMatcher{
																			pos:        position{line: 2778, col: 14, offset: 88017},
																			val:        "@",
																			ignoreCase: false,
																			want:       "\"@\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2335, col: 5, offset: 75537},
										run: (*parser).callonSectionTitleElement46,
										expr: &seqExpr{
											pos: position{line: 2335, col: 5, offset: 75537},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2335, col: 5, offset: 75537},
													run: (*parser).callonSectionTitleElement48,
												},
												&labeledExpr{
													pos:   position{line: 2338, col: 5, offset: 75592},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 404, col: 5, offset: 12338},
														run: (*parser).callonSectionTitleElement50,
														expr: &seqExpr{
															pos: position{line: 404, col: 5, offset: 12338},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 404, col: 5, offset: 12338},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 405, col: 5, offset: 12348},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 406, col: 9, offset: 12361},
																		run: (*parser).callonSectionTitleElement54,
																		expr: &labeledExpr{
																			pos:   position{line: 406, col: 9, offset: 12361},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 406, col: 18, offset: 12370},
																				expr: &choiceExpr{
																					pos: position{line: 407, col: 13, offset: 12384},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 407, col: 14, offset: 12385},
																							run: (*parser).callonSectionTitleElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 407, col: 14, offset: 12385},
																								expr: &charClassMatcher{
																									pos:        position{line: 407, col: 14, offset: 12385},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1198, col: 23, offset: 36969},
																							run: (*parser).callonSectionTitleElement61,
																							expr: &seqExpr{
																								pos: position{line: 1198, col: 23, offset: 36969},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1196, col: 32, offset: 36937},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1198, col: 51, offset: 36997},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1198, col: 56, offset: 37002},
																											run: (*parser).callonSectionTitleElement65,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1198, col: 56, offset: 37002},
																												expr: &charClassMatcher{
																													pos:        position{line: 1198, col: 56, offset: 37002},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1196, col: 32, offset: 36937},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 636, col: 5, offset: 20111},
																							run: (*parser).callonSectionTitleElement69,
																							expr: &seqExpr{
																								pos: position{line: 636, col: 5, offset: 20111},
																								exprs: []interface{}{
																									&andCodeExpr{
																										pos: position{line: 636, col: 5, offset: 20111},
																										run: (*parser).callonSectionTitleElement71,
																									},
																									&labeledExpr{
																										pos:   position{line: 639, col: 5, offset: 20178},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 639, col: 14, offset: 20187},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 645, col: 5, offset: 20316},
																													run: (*parser).callonSectionTitleElement74,
																													expr: &seqExpr{
																														pos: position{line: 645, col: 5, offset: 20316},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 645, col: 5, offset: 20316},
																																val:        "\\{",
																																ignoreCase: false,
																																want:       "\"\\\\{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 645, col: 13, offset: 20324},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	run: (*parser).callonSectionTitleElement78,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9737},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9747},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9748},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 645, col: 32, offset: 20343},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 652, col: 5, offset: 20584},
																													run: (*parser).callonSectionTitleElement84,
																													expr: &seqExpr{
																														pos: position{line: 652, col: 5, offset: 20584},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 652, col: 5, offset: 20584},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 652, col: 9, offset: 20588},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	run: (*parser).callonSectionTitleElement88,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9737},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9747},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9748},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 652, col: 28, offset: 20607},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 658, col: 25, offset: 20788},
																													run: (*parser).callonSectionTitleElement94,
																													expr: &seqExpr{
																														pos: position{line: 658, col: 25, offset: 20788},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 658, col: 25, offset: 20788},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 658, col: 37, offset: 20800},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	run: (*parser).callonSectionTitleElement98,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9737},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9747},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9748},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 658, col: 56, offset: 20819},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 658, col: 62, offset: 20825},
																																	expr: &actionExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		run: (*parser).callonSectionTitleElement105,
																																		expr: &seqExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 666, col: 17, offset: 21120},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 666, col: 21, offset: 21124},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 666, col: 28, offset: 21131},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 666, col: 28, offset: 21131},
																																								run: (*parser).callonSectionTitleElement110,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 666, col: 28, offset: 21131},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								run: (*parser).callonSectionTitleElement112,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 668, col: 9, offset: 21185},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 658, col: 78, offset: 20841},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 662, col: 25, offset: 20959},
																													run: (*parser).callonSectionTitleElement116,
																													expr: &seqExpr{
																														pos: position{line: 662, col: 25, offset: 20959},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 662, col: 25, offset: 20959},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 662, col: 38, offset: 20972},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 318, col: 18, offset: 9737},
																																	run: (*parser).callonSectionTitleElement120,
																																	expr: &seqExpr{
																																		pos: position{line: 318, col: 18, offset: 9737},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 318, col: 18, offset: 9737},
																																				val:        "[_\\pL\\pN]",
																																				chars:      []rune{'_'},
																																				classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 318, col: 28, offset: 9747},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 318, col: 29, offset: 9748},
																																					val:        "[-\\pL\\pN]",
																																					chars:      []rune{'-'},
																																					classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 662, col: 57, offset: 20991},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 662, col: 63, offset: 20997},
																																	expr: &actionExpr{
																																		pos: position{line: 666, col: 17, offset: 21120},
																																		run: (*parser).callonSectionTitleElement127,
																																		expr: &seqExpr{
																																			pos: position{line: 666, col: 17, offset: 21120},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 666, col: 17, offset: 21120},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 666, col: 21, offset: 21124},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 666, col: 28, offset: 21131},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 666, col: 28, offset: 21131},
																																								run: (*parser).callonSectionTitleElement132,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 666, col: 28, offset: 21131},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 668, col: 9, offset: 21185},
																																								run: (*parser).callonSectionTitleElement134,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 668, col: 9, offset: 21185},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 668, col: 9, offset: 21185},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 662, col: 79, offset: 21013},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 412, col: 16, offset: 12618},
																							run: (*parser).callonSectionTitleElement138,
																							expr: &litMatcher{
																								pos:        position{line: 412, col: 16, offset: 12618},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 418, col: 5, offset: 12804},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2338, col: 26, offset: 75613},
													expr: &actionExpr{
														pos: position{line: 2902, col: 10, offset: 91540},
														run: (*parser).callonSectionTitleElement142,
														expr: &charClassMatcher{
															pos:        position{line: 2902, col: 10, offset: 91540},
															val:        "[\\t ]",
															chars:      []rune{'\t', ' '},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2338, col: 33, offset: 75620},
													expr: &choiceExpr{
														pos: position{line: 2924, col: 8, offset: 91938},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2911, col: 12, offset: 91711},
																run: (*parser).callonSectionTitleElement146,
																expr: &choiceExpr{
																	pos: position{line: 2911, col: 13, offset: 91712},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2911, col: 13, offset: 91712},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 20, offset: 91719},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 2911, col: 29, offset: 91728},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 2921, col: 8, offset: 91888},
																expr: &anyMatcher{
																	line: 2921, col: 9, offset: 91889,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2902, col: 10, offset: 91540},
										run: (*parser).callonSectionTitleElement153,
										expr: &charClassMatcher{
											pos:        position{line: 2902, col: 10, offset: 91540},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 8, offset: 88554},
										run: (*parser).callonSectionTitleElement155,
										expr: &seqExpr{
											pos: position{line: 2801, col: 9, offset: 88555},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2801, col: 9, offset: 88555},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&andExpr{
													pos: position{line: 2801, col: 13, offset: 88559},
													expr: &notExpr{
														pos: position{line: 2801, col: 15, offset: 88561},
														expr: &litMatcher{
															pos:        position{line: 2801, col: 16, offset: 88562},
															val:        "..",
															ignoreCase: false,
															want:       "\"..\"",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2484, col: 5, offset: 79986},
										run: (*parser).callonSectionTitleElement161,
										expr: &seqExpr{
											pos: position{line: 2484, col: 5, offset: 79986},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2484, col: 5, offset: 79986},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2484, col: 10, offset: 79991},
													expr: &charClassMatcher{
														pos:        position{line: 2484, col: 11, offset: 79992},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2490, col: 5, offset: 80184},
										run: (*parser).callonSectionTitleElement166,
										expr: &seqExpr{
											pos: position{line: 2490, col: 5, offset: 80184},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2490, col: 5, offset: 80184},
													run: (*parser).callonSectionTitleElement168,
												},
												&andCodeExpr{
													pos: position{line: 2493, col: 5, offset: 80250},
													run: (*parser).callonSectionTitleElement169,
												},
												&litMatcher{
													pos:        position{line: 2497, col: 5, offset: 80375},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2497, col: 9, offset: 80379},
													expr: &charClassMatcher{
														pos:        position{line: 2497, col: 10, offset: 80380},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2317, col: 11, offset: 74913},
										name: "Replacement",
									},
									&actionExpr{
										pos: position{line: 2807, col: 5, offset: 88736},
										run: (*parser).callonSectionTitleElement174,
										expr: &choiceExpr{
											pos: position{line: 2808, col: 9, offset: 88746},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2808, col: 10, offset: 88747},
													val:        "[,;?)!/=-]",
													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2809, col: 12, offset: 88822},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2809, col: 12, offset: 88822},
															val:        ":",
															ignoreCase: false,
															want:       "\":\"",
														},
														&andExpr{
															pos: position{line: 2809, col: 16, offset: 88826},
															expr: &choiceExpr{
																pos: position{line: 2809, col: 18, offset: 88828},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonSectionTitleElement181,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonSectionTitleElement183,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2811, col: 13, offset: 88897},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2811, col: 13, offset: 88897},
															run: (*parser).callonSectionTitleElement191,
														},
														&charClassMatcher{
															pos:        position{line: 2814, col: 14, offset: 89033},
															val:        "[\"\\()]",
															chars:      []rune{'"', '\'', '(', ')'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89090},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89090},
															run: (*parser).callonSectionTitleElement194,
														},
														&charClassMatcher{
															pos:        position{line: 2820, col: 14, offset: 89179},
															val:        "[:@]",
															chars:      []rune{':', '@'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89224},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89224},
															run: (*parser).callonSectionTitleElement197,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89313},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2829, col: 13, offset: 89370},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2829, col: 13, offset: 89370},
															run: (*parser).callonSectionTitleElement200,
														},
														&charClassMatcher{
															pos:        position{line: 2832, col: 14, offset: 89526},
															val:        "[[]]",
															chars:      []rune{'[', ']'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2319, col: 11, offset: 74986},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2320, col: 11, offset: 75002},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2321, col: 11, offset: 75030},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2453, col: 5, offset: 78820},
										run: (*parser).callonSectionTitleElement205,
										expr: &seqExpr{
											pos: position{line: 2453, col: 5, offset: 78820},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2453, col: 5, offset: 78820},
													run: (*parser).callonSectionTitleElement207,
												},
												&labeledExpr{
													pos:   position{line: 2456, col: 5, offset: 78891},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2457, col: 9, offset: 78909},
														run: (*parser).callonSectionTitleElement209,
														expr: &charClassMatcher{
															pos:        position{line: 2457, col: 10, offset: 78910},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2323, col: 11, offset: 75115},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 636, col: 5, offset: 20111},
										run: (*parser).callonSectionTitleElement212,
										expr: &seqExpr{
											pos: position{line: 636, col: 5, offset: 20111},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 636, col: 5, offset: 20111},
													run: (*parser).callonSectionTitleElement214,
												},
												&labeledExpr{
													pos:   position{line: 639, col: 5, offset: 20178},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 639, col: 14, offset: 20187},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 645, col: 5, offset: 20316},
																run: (*parser).callonSectionTitleElement217,
																expr: &seqExpr{
																	pos: position{line: 645, col: 5, offset: 20316},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 645, col: 5, offset: 20316},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 645, col: 13, offset: 20324},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonSectionTitleElement221,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 645, col: 32, offset: 20343},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 652, col: 5, offset: 20584},
																run: (*parser).callonSectionTitleElement227,
																expr: &seqExpr{
																	pos: position{line: 652, col: 5, offset: 20584},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 652, col: 5, offset: 20584},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 652, col: 9, offset: 20588},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonSectionTitleElement231,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 652, col: 28, offset: 20607},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 658, col: 25, offset: 20788},
																run: (*parser).callonSectionTitleElement237,
																expr: &seqExpr{
																	pos: position{line: 658, col: 25, offset: 20788},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 658, col: 25, offset: 20788},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 37, offset: 20800},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonSectionTitleElement241,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 658, col: 56, offset: 20819},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 658, col: 62, offset: 20825},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonSectionTitleElement248,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonSectionTitleElement253,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonSectionTitleElement255,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 658, col: 78, offset: 20841},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 662, col: 25, offset: 20959},
																run: (*parser).callonSectionTitleElement259,
																expr: &seqExpr{
																	pos: position{line: 662, col: 25, offset: 20959},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 662, col: 25, offset: 20959},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 38, offset: 20972},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 318, col: 18, offset: 9737},
																				run: (*parser).callonSectionTitleElement263,
																				expr: &seqExpr{
																					pos: position{line: 318, col: 18, offset: 9737},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 318, col: 18, offset: 9737},
																							val:        "[_\\pL\\pN]",
																							chars:      []rune{'_'},
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 318, col: 28, offset: 9747},
																							expr: &charClassMatcher{
																								pos:        position{line: 318, col: 29, offset: 9748},
																								val:        "[-\\pL\\pN]",
																								chars:      []rune{'-'},
																								classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 662, col: 57, offset: 20991},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 662, col: 63, offset: 20997},
																				expr: &actionExpr{
																					pos: position{line: 666, col: 17, offset: 21120},
																					run: (*parser).callonSectionTitleElement270,
																					expr: &seqExpr{
																						pos: position{line: 666, col: 17, offset: 21120},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 666, col: 17, offset: 21120},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 666, col: 21, offset: 21124},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 666, col: 28, offset: 21131},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 666, col: 28, offset: 21131},
																											run: (*parser).callonSectionTitleElement275,
																											expr: &charClassMatcher{
																												pos:        position{line: 666, col: 28, offset: 21131},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 668, col: 9, offset: 21185},
																											run: (*parser).callonSectionTitleElement277,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 668, col: 9, offset: 21185},
																												expr: &charClassMatcher{
																													pos:        position{line: 668, col: 9, offset: 21185},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 662, col: 79, offset: 21013},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1198, col: 23, offset: 36969},
										run: (*parser).callonSectionTitleElement281,
										expr: &seqExpr{
											pos: position{line: 1198, col: 23, offset: 36969},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1196, col: 32, offset: 36937},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1198, col: 51, offset: 36997},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1198, col: 56, offset: 37002},
														run: (*parser).callonSectionTitleElement285,
														expr: &oneOrMoreExpr{
															pos: position{line: 1198, col: 56, offset: 37002},
															expr: &charClassMatcher{
																pos:        position{line: 1198, col: 56, offset: 37002},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1196, col: 32, offset: 36937},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1253, col: 5, offset: 38724},
										run: (*parser).callonSectionTitleElement289,
										expr: &seqExpr{
											pos: position{line: 1253, col: 5, offset: 38724},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1253, col: 5, offset: 38724},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1253, col: 14, offset: 38733},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2887, col: 7, offset: 91192},
														run: (*parser).callonSectionTitleElement293,
														expr: &oneOrMoreExpr{
															pos: position{line: 2887, col: 7, offset: 91192},
															expr: &charClassMatcher{
																pos:        position{line: 2887, col: 7, offset: 91192},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1253, col: 22, offset: 38741},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1258, col: 5, offset: 38860},
										run: (*parser).callonSectionTitleElement297,
										expr: &seqExpr{
											pos: position{line: 1258, col: 5, offset: 38860},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1258, col: 5, offset: 38860},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1258, col: 10, offset: 38865},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2887, col: 7, offset: 91192},
														run: (*parser).callonSectionTitleElement301,
														expr: &oneOrMoreExpr{
															pos: position{line: 2887, col: 7, offset: 91192},
															expr: &charClassMatcher{
																pos:        position{line: 2887, col: 7, offset: 91192},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1258, col: 18, offset: 38873},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2327, col: 11, offset: 75338},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 2841, col: 12, offset: 89767},
										run: (*parser).callonSectionTitleElement306,
										expr: &charClassMatcher{
											pos:        position{line: 2841, col: 12, offset: 89767},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalGroup",
			pos:  position{line: 2348, col: 1, offset: 75882},
			expr: &actionExpr{
				pos: position{line: 2349, col: 5, offset: 75969},
				run: (*parser).callonNormalGroup1,
				expr: &seqExpr{
					pos: position{line: 2349, col: 5, offset: 75969},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2349, col: 5, offset: 75969},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2349, col: 14, offset: 75978},
								expr: &actionExpr{
									pos: position{line: 2351, col: 9, offset: 76004},
									run: (*parser).callonNormalGroup5,
									expr: &seqExpr{
										pos: position{line: 2351, col: 9, offset: 76004},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 2919, col: 11, offset: 91874},
												expr: &anyMatcher{
													line: 2919, col: 13, offset: 91876,
												},
											},
											&labeledExpr{
												pos:   position{line: 2352, col: 9, offset: 76019},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2353, col: 13, offset: 76041},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2755, col: 5, offset: 87520},
															run: (*parser).callonNormalGroup11,
															expr: &seqExpr{
																pos: position{line: 2755, col: 5, offset: 87520},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 2755, col: 5, offset: 87520},
																		expr: &charClassMatcher{
																			pos:        position{line: 2755, col: 5, offset: 87520},
																			val:        "[\\pL\\pN]",
																			classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 2771, col: 9, offset: 87859},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonNormalGroup16,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2801, col: 8, offset: 88554},
																				run: (*parser).callonNormalGroup18,
																				expr: &seqExpr{
																					pos: position{line: 2801, col: 9, offset: 88555},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2801, col: 9, offset: 88555},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																						&andExpr{
																							pos: position{line: 2801, col: 13, offset: 88559},
																							expr: &notExpr{
																								pos: position{line: 2801, col: 15, offset: 88561},
																								expr: &litMatcher{
																									pos:        position{line: 2801, col: 16, offset: 88562},
																									val:        "..",
																									ignoreCase: false,
																									want:       "\"..\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 2773, col: 11, offset: 87889},
																				run: (*parser).callonNormalGroup24,
																			},
																			&andExpr{
																				pos: position{line: 2776, col: 11, offset: 87967},
																				expr: &seqExpr{
																					pos: position{line: 2777, col: 13, offset: 87982},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 2777, col: 13, offset: 87982},
																							expr: &seqExpr{
																								pos: position{line: 2777, col: 15, offset: 87984},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2777, col: 15, offset: 87984},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&notExpr{
																										pos: position{line: 2777, col: 19, offset: 87988},
																										expr: &choiceExpr{
																											pos: position{line: 2777, col: 21, offset: 87990},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 2902, col: 10, offset: 91540},
																													run: (*parser).callonNormalGroup32,
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 10, offset: 91540},
																														val:        "[\\t ]",
																														chars:      []rune{'\t', ' '},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 2911, col: 12, offset: 91711},
																													run: (*parser).callonNormalGroup34,
																													expr: &choiceExpr{
																														pos: position{line: 2911, col: 13, offset: 91712},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 2911, col: 13, offset: 91712},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 20, offset: 91719},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 2911, col: 29, offset: 91728},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2921, col: 8, offset: 91888},
																													expr: &anyMatcher{
																														line: 2921, col: 9, offset: 91889,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2778, col: 13, offset: 88016},
																							expr: &litMatcher{
																								pos:        position{line: 2778, col: 14, offset: 88017},
																								val:        "@",
																								ignoreCase: false,
																								want:       "\"@\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2354, col: 15, offset: 76066},
															name: "Replacement",
														},
														&actionExpr{
															pos: position{line: 2807, col: 5, offset: 88736},
															run: (*parser).callonNormalGroup44,
															expr: &choiceExpr{
																pos: position{line: 2808, col: 9, offset: 88746},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2808, col: 10, offset: 88747},
																		val:        "[,;?)!/=-]",
																		chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&seqExpr{
																		pos: position{line: 2809, col: 12, offset: 88822},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2809, col: 12, offset: 88822},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&andExpr{
																				pos: position{line: 2809, col: 16, offset: 88826},
																				expr: &choiceExpr{
																					pos: position{line: 2809, col: 18, offset: 88828},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonNormalGroup51,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonNormalGroup53,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 2921, col: 8, offset: 91888},
																							expr: &anyMatcher{
																								line: 2921, col: 9, offset: 91889,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2811, col: 13, offset: 88897},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 2811, col: 13, offset: 88897},
																				run: (*parser).callonNormalGroup61,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2814, col: 14, offset: 89033},
																				val:        "[\"\\()]",
																				chars:      []rune{'"', '\'', '(', ')'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2817, col: 13, offset: 89090},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 2817, col: 13, offset: 89090},
																				run: (*parser).callonNormalGroup64,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2820, col: 14, offset: 89179},
																				val:        "[:@]",
																				chars:      []rune{':', '@'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2823, col: 13, offset: 89224},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 2823, col: 13, offset: 89224},
																				run: (*parser).callonNormalGroup67,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2826, col: 14, offset: 89313},
																				val:        "[*_`#]",
																				chars:      []rune{'*', '_', '`', '#'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&seqExpr{
																		pos: position{line: 2829, col: 13, offset: 89370},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 2829, col: 13, offset: 89370},
																				run: (*parser).callonNormalGroup70,
																			},
																			&charClassMatcher{
																				pos:        position{line: 2832, col: 14, offset: 89526},
																				val:        "[[]]",
																				chars:      []rune{'[', ']'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonNormalGroup72,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 8, offset: 88554},
															run: (*parser).callonNormalGroup74,
															expr: &seqExpr{
																pos: position{line: 2801, col: 9, offset: 88555},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2801, col: 9, offset: 88555},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&andExpr{
																		pos: position{line: 2801, col: 13, offset: 88559},
																		expr: &notExpr{
																			pos: position{line: 2801, col: 15, offset: 88561},
																			expr: &litMatcher{
																				pos:        position{line: 2801, col: 16, offset: 88562},
																				val:        "..",
																				ignoreCase: false,
																				want:       "\"..\"",
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2911, col: 12, offset: 91711},
															run: (*parser).callonNormalGroup80,
															expr: &choiceExpr{
																pos: position{line: 2911, col: 13, offset: 91712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2911, col: 13, offset: 91712},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 20, offset: 91719},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 2911, col: 29, offset: 91728},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 636, col: 5, offset: 20111},
															run: (*parser).callonNormalGroup85,
															expr: &seqExpr{
																pos: position{line: 636, col: 5, offset: 20111},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 636, col: 5, offset: 20111},
																		run: (*parser).callonNormalGroup87,
																	},
																	&labeledExpr{
																		pos:   position{line: 639, col: 5, offset: 20178},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 639, col: 14, offset: 20187},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 645, col: 5, offset: 20316},
																					run: (*parser).callonNormalGroup90,
																					expr: &seqExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 645, col: 5, offset: 20316},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 645, col: 13, offset: 20324},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									run: (*parser).callonNormalGroup94,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9737},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9747},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9748},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 645, col: 32, offset: 20343},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 652, col: 5, offset: 20584},
																					run: (*parser).callonNormalGroup100,
																					expr: &seqExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 652, col: 5, offset: 20584},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 652, col: 9, offset: 20588},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									run: (*parser).callonNormalGroup104,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9737},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9747},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9748},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 652, col: 28, offset: 20607},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 658, col: 25, offset: 20788},
																					run: (*parser).callonNormalGroup110,
																					expr: &seqExpr{
																						pos: position{line: 658, col: 25, offset: 20788},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 658, col: 25, offset: 20788},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 658, col: 37, offset: 20800},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									run: (*parser).callonNormalGroup114,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9737},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9747},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9748},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 658, col: 56, offset: 20819},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 658, col: 62, offset: 20825},
																									expr: &actionExpr{
																										pos: position{line: 666, col: 17, offset: 21120},
																										run: (*parser).callonNormalGroup121,
																										expr: &seqExpr{
																											pos: position{line: 666, col: 17, offset: 21120},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 666, col: 17, offset: 21120},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 21, offset: 21124},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 666, col: 28, offset: 21131},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 666, col: 28, offset: 21131},
																																run: (*parser).callonNormalGroup126,
																																expr: &charClassMatcher{
																																	pos:        position{line: 666, col: 28, offset: 21131},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 668, col: 9, offset: 21185},
																																run: (*parser).callonNormalGroup128,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 668, col: 9, offset: 21185},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 668, col: 9, offset: 21185},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 658, col: 78, offset: 20841},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 662, col: 25, offset: 20959},
																					run: (*parser).callonNormalGroup132,
																					expr: &seqExpr{
																						pos: position{line: 662, col: 25, offset: 20959},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 662, col: 25, offset: 20959},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 662, col: 38, offset: 20972},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 318, col: 18, offset: 9737},
																									run: (*parser).callonNormalGroup136,
																									expr: &seqExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 318, col: 18, offset: 9737},
																												val:        "[_\\pL\\pN]",
																												chars:      []rune{'_'},
																												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 318, col: 28, offset: 9747},
																												expr: &charClassMatcher{
																													pos:        position{line: 318, col: 29, offset: 9748},
																													val:        "[-\\pL\\pN]",
																													chars:      []rune{'-'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 662, col: 57, offset: 20991},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 662, col: 63, offset: 20997},
																									expr: &actionExpr{
																										pos: position{line: 666, col: 17, offset: 21120},
																										run: (*parser).callonNormalGroup143,
																										expr: &seqExpr{
																											pos: position{line: 666, col: 17, offset: 21120},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 666, col: 17, offset: 21120},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 666, col: 21, offset: 21124},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 666, col: 28, offset: 21131},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 666, col: 28, offset: 21131},
																																run: (*parser).callonNormalGroup148,
																																expr: &charClassMatcher{
																																	pos:        position{line: 666, col: 28, offset: 21131},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 668, col: 9, offset: 21185},
																																run: (*parser).callonNormalGroup150,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 668, col: 9, offset: 21185},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 668, col: 9, offset: 21185},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 662, col: 79, offset: 21013},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2484, col: 5, offset: 79986},
															run: (*parser).callonNormalGroup154,
															expr: &seqExpr{
																pos: position{line: 2484, col: 5, offset: 79986},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2484, col: 5, offset: 79986},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&andExpr{
																		pos: position{line: 2484, col: 10, offset: 79991},
																		expr: &charClassMatcher{
																			pos:        position{line: 2484, col: 11, offset: 79992},
																			val:        "[\\pL]",
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2490, col: 5, offset: 80184},
															run: (*parser).callonNormalGroup159,
															expr: &seqExpr{
																pos: position{line: 2490, col: 5, offset: 80184},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2490, col: 5, offset: 80184},
																		run: (*parser).callonNormalGroup161,
																	},
																	&andCodeExpr{
																		pos: position{line: 2493, col: 5, offset: 80250},
																		run: (*parser).callonNormalGroup162,
																	},
																	&litMatcher{
																		pos:        position{line: 2497, col: 5, offset: 80375},
																		val:        "'",
																		ignoreCase: false,
																		want:       "\"'\"",
																	},
																	&andExpr{
																		pos: position{line: 2497, col: 9, offset: 80379},
																		expr: &charClassMatcher{
																			pos:        position{line: 2497, col: 10, offset: 80380},
																			val:        "[\\pL]",
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2361, col: 15, offset: 76271},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 2362, col: 15, offset: 76291},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2363, col: 15, offset: 76380},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2453, col: 5, offset: 78820},
															run: (*parser).callonNormalGroup169,
															expr: &seqExpr{
																pos: position{line: 2453, col: 5, offset: 78820},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2453, col: 5, offset: 78820},
																		run: (*parser).callonNormalGroup171,
																	},
																	&labeledExpr{
																		pos:   position{line: 2456, col: 5, offset: 78891},
																		label: "element",
																		expr: &actionExpr{
																			pos: position{line: 2457, col: 9, offset: 78909},
																			run: (*parser).callonNormalGroup173,
																			expr: &charClassMatcher{
																				pos:        position{line: 2457, col: 10, offset: 78910},
																				val:        "[<>&]",
																				chars:      []rune{'<', '>', '&'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1206, col: 5, offset: 37415},
															run: (*parser).callonNormalGroup175,
															expr: &seqExpr{
																pos: position{line: 1206, col: 5, offset: 37415},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1206, col: 5, offset: 37415},
																		run: (*parser).callonNormalGroup177,
																	},
																	&litMatcher{
																		pos:        position{line: 1209, col: 5, offset: 37486},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 1210, col: 5, offset: 37494},
																		run: (*parser).callonNormalGroup179,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1214, col: 5, offset: 37581},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonNormalGroup181,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1214, col: 12, offset: 37588},
																		expr: &choiceExpr{
																			pos: position{line: 2924, col: 8, offset: 91938},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonNormalGroup185,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 2921, col: 8, offset: 91888},
																					expr: &anyMatcher{
																						line: 2921, col: 9, offset: 91889,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2366, col: 15, offset: 76562},
															name: "InlinePassthrough",
														},
														&actionExpr{
															pos: position{line: 1198, col: 23, offset: 36969},
															run: (*parser).callonNormalGroup193,
															expr: &seqExpr{
																pos: position{line: 1198, col: 23, offset: 36969},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1198, col: 51, offset: 36997},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1198, col: 56, offset: 37002},
																			run: (*parser).callonNormalGroup197,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1198, col: 56, offset: 37002},
																				expr: &charClassMatcher{
																					pos:        position{line: 1198, col: 56, offset: 37002},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1196, col: 32, offset: 36937},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2841, col: 12, offset: 89767},
															run: (*parser).callonNormalGroup201,
															expr: &charClassMatcher{
																pos:        position{line: 2841, col: 12, offset: 89767},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValue",
			pos:  position{line: 2377, col: 1, offset: 77000},
			expr: &actionExpr{
				pos: position{line: 2378, col: 5, offset: 77033},
				run: (*parser).callonAttributeStructuredValue1,
				expr: &seqExpr{
					pos: position{line: 2378, col: 5, offset: 77033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2378, col: 5, offset: 77033},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2378, col: 14, offset: 77042},
								expr: &ruleRefExpr{
									pos:  position{line: 2378, col: 15, offset: 77043},
									name: "AttributeStructuredValueElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeStructuredValueElement",
			pos:  position{line: 2382, col: 1, offset: 77140},
			expr: &actionExpr{
				pos: position{line: 2383, col: 5, offset: 77180},
				run: (*parser).callonAttributeStructuredValueElement1,
				expr: &seqExpr{
					pos: position{line: 2383, col: 5, offset: 77180},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 2919, col: 11, offset: 91874},
							expr: &anyMatcher{
								line: 2919, col: 13, offset: 91876,
							},
						},
						&labeledExpr{
							pos:   position{line: 2384, col: 5, offset: 77191},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2385, col: 9, offset: 77209},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2755, col: 5, offset: 87520},
										run: (*parser).callonAttributeStructuredValueElement7,
										expr: &seqExpr{
											pos: position{line: 2755, col: 5, offset: 87520},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2755, col: 5, offset: 87520},
													expr: &charClassMatcher{
														pos:        position{line: 2755, col: 5, offset: 87520},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&choiceExpr{
													pos: position{line: 2771, col: 9, offset: 87859},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2902, col: 10, offset: 91540},
															run: (*parser).callonAttributeStructuredValueElement12,
															expr: &charClassMatcher{
																pos:        position{line: 2902, col: 10, offset: 91540},
																val:        "[\\t ]",
																chars:      []rune{'\t', ' '},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 8, offset: 88554},
															run: (*parser).callonAttributeStructuredValueElement14,
															expr: &seqExpr{
																pos: position{line: 2801, col: 9, offset: 88555},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2801, col: 9, offset: 88555},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																	&andExpr{
																		pos: position{line: 2801, col: 13, offset: 88559},
																		expr: &notExpr{
																			pos: position{line: 2801, col: 15, offset: 88561},
																			expr: &litMatcher{
																				pos:        position{line: 2801, col: 16, offset: 88562},
																				val:        "..",
																				ignoreCase: false,
																				want:       "\"..\"",
																			},
																		},
																	},
																},
															},
														},
														&andCodeExpr{
															pos: position{line: 2773, col: 11, offset: 87889},
															run: (*parser).callonAttributeStructuredValueElement20,
														},
														&andExpr{
															pos: position{line: 2776, col: 11, offset: 87967},
															expr: &seqExpr{
																pos: position{line: 2777, col: 13, offset: 87982},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 2777, col: 13, offset: 87982},
																		expr: &seqExpr{
																			pos: position{line: 2777, col: 15, offset: 87984},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2777, col: 15, offset: 87984},
																					val:        ":",
																					ignoreCase: false,
																					want:       "\":\"",
																				},
																				&notExpr{
																					pos: position{line: 2777, col: 19, offset: 87988},
																					expr: &choiceExpr{
																						pos: position{line: 2777, col: 21, offset: 87990},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 2902, col: 10, offset: 91540},
																								run: (*parser).callonAttributeStructuredValueElement28,
																								expr: &charClassMatcher{
																									pos:        position{line: 2902, col: 10, offset: 91540},
																									val:        "[\\t ]",
																									chars:      []rune{'\t', ' '},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2911, col: 12, offset: 91711},
																								run: (*parser).callonAttributeStructuredValueElement30,
																								expr: &choiceExpr{
																									pos: position{line: 2911, col: 13, offset: 91712},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2911, col: 13, offset: 91712},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 20, offset: 91719},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 2911, col: 29, offset: 91728},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 2921, col: 8, offset: 91888},
																								expr: &anyMatcher{
																									line: 2921, col: 9, offset: 91889,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2778, col: 13, offset: 88016},
																		expr: &litMatcher{
																			pos:        position{line: 2778, col: 14, offset: 88017},
																			val:        "@",
																			ignoreCase: false,
																			want:       "\"@\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2902, col: 10, offset: 91540},
										run: (*parser).callonAttributeStructuredValueElement39,
										expr: &charClassMatcher{
											pos:        position{line: 2902, col: 10, offset: 91540},
											val:        "[\\t ]",
											chars:      []rune{'\t', ' '},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 8, offset: 88554},
										run: (*parser).callonAttributeStructuredValueElement41,
										expr: &seqExpr{
											pos: position{line: 2801, col: 9, offset: 88555},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2801, col: 9, offset: 88555},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
												&andExpr{
													pos: position{line: 2801, col: 13, offset: 88559},
													expr: &notExpr{
														pos: position{line: 2801, col: 15, offset: 88561},
														expr: &litMatcher{
															pos:        position{line: 2801, col: 16, offset: 88562},
															val:        "..",
															ignoreCase: false,
															want:       "\"..\"",
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2388, col: 11, offset: 77261},
										name: "Replacement",
									},
									&actionExpr{
										pos: position{line: 2807, col: 5, offset: 88736},
										run: (*parser).callonAttributeStructuredValueElement48,
										expr: &choiceExpr{
											pos: position{line: 2808, col: 9, offset: 88746},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2808, col: 10, offset: 88747},
													val:        "[,;?)!/=-]",
													chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
													ignoreCase: false,
													inverted:   false,
												},
												&seqExpr{
													pos: position{line: 2809, col: 12, offset: 88822},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2809, col: 12, offset: 88822},
															val:        ":",
															ignoreCase: false,
															want:       "\":\"",
														},
														&andExpr{
															pos: position{line: 2809, col: 16, offset: 88826},
															expr: &choiceExpr{
																pos: position{line: 2809, col: 18, offset: 88828},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonAttributeStructuredValueElement55,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2911, col: 12, offset: 91711},
																		run: (*parser).callonAttributeStructuredValueElement57,
																		expr: &choiceExpr{
																			pos: position{line: 2911, col: 13, offset: 91712},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2911, col: 13, offset: 91712},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 20, offset: 91719},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 2911, col: 29, offset: 91728},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 2921, col: 8, offset: 91888},
																		expr: &anyMatcher{
																			line: 2921, col: 9, offset: 91889,
																		},
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 2811, col: 13, offset: 88897},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2811, col: 13, offset: 88897},
															run: (*parser).callonAttributeStructuredValueElement65,
														},
														&charClassMatcher{
															pos:        position{line: 2814, col: 14, offset: 89033},
															val:        "[\"\\()]",
															chars:      []rune{'"', '\'', '(', ')'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2817, col: 13, offset: 89090},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2817, col: 13, offset: 89090},
															run: (*parser).callonAttributeStructuredValueElement68,
														},
														&charClassMatcher{
															pos:        position{line: 2820, col: 14, offset: 89179},
															val:        "[:@]",
															chars:      []rune{':', '@'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2823, col: 13, offset: 89224},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2823, col: 13, offset: 89224},
															run: (*parser).callonAttributeStructuredValueElement71,
														},
														&charClassMatcher{
															pos:        position{line: 2826, col: 14, offset: 89313},
															val:        "[*_`#]",
															chars:      []rune{'*', '_', '`', '#'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&seqExpr{
													pos: position{line: 2829, col: 13, offset: 89370},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2829, col: 13, offset: 89370},
															run: (*parser).callonAttributeStructuredValueElement74,
														},
														&charClassMatcher{
															pos:        position{line: 2832, col: 14, offset: 89526},
															val:        "[[]]",
															chars:      []rune{'[', ']'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2390, col: 11, offset: 77334},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2391, col: 11, offset: 77350},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2453, col: 5, offset: 78820},
										run: (*parser).callonAttributeStructuredValueElement78,
										expr: &seqExpr{
											pos: position{line: 2453, col: 5, offset: 78820},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2453, col: 5, offset: 78820},
													run: (*parser).callonAttributeStructuredValueElement80,
												},
												&labeledExpr{
													pos:   position{line: 2456, col: 5, offset: 78891},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 2457, col: 9, offset: 78909},
														run: (*parser).callonAttributeStructuredValueElement82,
														expr: &charClassMatcher{
															pos:        position{line: 2457, col: 10, offset: 78910},
															val:        "[<>&]",
															chars:      []rune{'<', '>', '&'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1198, col: 23, offset: 36969},
										run: (*parser).callonAttributeStructuredValueElement84,
										expr: &seqExpr{
											pos: position{line: 1198, col: 23, offset: 36969},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1196, col: 32, offset: 36937},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1198, col: 51, offset: 36997},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1198, col: 56, offset: 37002},
														run: (*parser).callonAttributeStructuredValueElement88,
														expr: &oneOrMoreExpr{
															pos: position{line: 1198, col: 56, offset: 37002},
															expr: &charClassMatcher{
																pos:        position{line: 1198, col: 56, offset: 37002},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1196, col: 32, offset: 36937},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2841, col: 12, offset: 89767},
										run: (*parser).callonAttributeStructuredValueElement92,
										expr: &charClassMatcher{
											pos:        position{line: 2841, col: 12, offset: 89767},
											val:        "[^\\r\\n]",
											chars:      []rune{'\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2401, col: 1, offset: 77602},
			expr: &actionExpr{
				pos: position{line: 2403, col: 5, offset: 77684},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2403, col: 5, offset: 77684},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2403, col: 5, offset: 77684},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2406, col: 5, offset: 77744},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2407, col: 9, offset: 77762},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2407, col: 9, offset: 77762},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2408, col: 11, offset: 77783},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2409, col: 11, offset: 77806},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2410, col: 11, offset: 77822},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2411, col: 11, offset: 77851},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2412, col: 11, offset: 77877},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2413, col: 11, offset: 77903},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1253, col: 5, offset: 38724},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1253, col: 5, offset: 38724},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1253, col: 5, offset: 38724},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1253, col: 14, offset: 38733},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2887, col: 7, offset: 91192},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 2887, col: 7, offset: 91192},
															expr: &charClassMatcher{
																pos:        position{line: 2887, col: 7, offset: 91192},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1253, col: 22, offset: 38741},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1258, col: 5, offset: 38860},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1258, col: 5, offset: 38860},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1258, col: 5, offset: 38860},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1258, col: 10, offset: 38865},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 2887, col: 7, offset: 91192},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 2887, col: 7, offset: 91192},
															expr: &charClassMatcher{
																pos:        position{line: 2887, col: 7, offset: 91192},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1258, col: 18, offset: 38873},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1297, col: 23, offset: 40350},
										run: (*parser).callonInlineMacro29,
										expr: &seqExpr{
											pos: position{line: 1297, col: 23, offset: 40350},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1297, col: 23, offset: 40350},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1297, col: 29, offset: 40356},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1304, col: 30, offset: 40687},
														run: (*parser).callonInlineMacro33,
														expr: &oneOrMoreExpr{
															pos: position{line: 1304, col: 30, offset: 40687},
															expr: &choiceExpr{
																pos: position{line: 1304, col: 31, offset: 40688},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2746, col: 13, offset: 87373},
																		val:        "[\\pL\\pN]",
																		classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 2902, col: 10, offset: 91540},
																		run: (*parser).callonInlineMacro37,
																		expr: &charClassMatcher{
																			pos:        position{line: 2902, col: 10, offset: 91540},
																			val:        "[\\t ]",
																			chars:      []rune{'\t', ' '},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1298, col: 5, offset: 40395},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1298, col: 11, offset: 40401},
														expr: &actionExpr{
															pos: position{line: 1298, col: 12, offset: 40402},
															run: (*parser).callonInlineMacro41,
															expr: &seqExpr{
																pos: position{line: 1298, col: 12, offset: 40402},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1298, col: 12, offset: 40402},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonInlineMacro44,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1298, col: 19, offset: 40409},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1298, col: 23, offset: 40413},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonInlineMacro48,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1298, col: 30, offset: 40420},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1304, col: 30, offset: 40687},
																			run: (*parser).callonInlineMacro51,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1304, col: 30, offset: 40687},
																				expr: &choiceExpr{
																					pos: position{line: 1304, col: 31, offset: 40688},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2746, col: 13, offset: 87373},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonInlineMacro55,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1299, col: 5, offset: 40487},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1299, col: 11, offset: 40493},
														expr: &actionExpr{
															pos: position{line: 1299, col: 12, offset: 40494},
															run: (*parser).callonInlineMacro59,
															expr: &seqExpr{
																pos: position{line: 1299, col: 12, offset: 40494},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1299, col: 12, offset: 40494},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonInlineMacro62,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1299, col: 19, offset: 40501},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1299, col: 23, offset: 40505},
																		expr: &actionExpr{
																			pos: position{line: 2902, col: 10, offset: 91540},
																			run: (*parser).callonInlineMacro66,
																			expr: &charClassMatcher{
																				pos:        position{line: 2902, col: 10, offset: 91540},
																				val:        "[\\t ]",
																				chars:      []rune{'\t', ' '},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1299, col: 30, offset: 40512},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1304, col: 30, offset: 40687},
																			run: (*parser).callonInlineMacro69,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1304, col: 30, offset: 40687},
																				expr: &choiceExpr{
																					pos: position{line: 1304, col: 31, offset: 40688},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2746, col: 13, offset: 87373},
																							val:        "[\\pL\\pN]",
																							classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 2902, col: 10, offset: 91540},
																							run: (*parser).callonInlineMacro73,
																							expr: &charClassMatcher{
																								pos:        position{line: 2902, col: 10, offset: 91540},
																								val:        "[\\t ]",
																								chars:      []rune{'\t', ' '},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1300, col: 5, offset: 40579},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2416, col: 11, offset: 77982},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2417, col: 11, offset: 78002},
										name: "InlineButton",
									},
									&ruleRefExpr{
										pos:  position{line: 2418, col: 11, offset: 78025},
										name: "InlineMenu",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2422, col: 1, offset: 78082},
			expr: &actionExpr{
				pos: position{line: 2424, col: 5, offset: 78170},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2424, col: 5, offset: 78170},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2424, col: 5, offset: 78170},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2427, col: 5, offset: 78242},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2428, col: 9, offset: 78260},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1380, col: 26, offset: 43971},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1380, col: 26, offset: 43971},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1378, col: 32, offset: 43939},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1380, col: 54, offset: 43999},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1384, col: 33, offset: 44212},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1384, col: 34, offset: 44213},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1384, col: 34, offset: 44213},
																	expr: &seqExpr{
																		pos: position{line: 1384, col: 35, offset: 44214},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1384, col: 35, offset: 44214},
																				expr: &litMatcher{
																					pos:        position{line: 1378, col: 32, offset: 43939},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1384, col: 64, offset: 44243,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1386, col: 11, offset: 44416},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1386, col: 11, offset: 44416},
																	expr: &seqExpr{
																		pos: position{line: 1386, col: 12, offset: 44417},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1386, col: 12, offset: 44417},
																				expr: &actionExpr{
																					pos: position{line: 2902, col: 10, offset: 91540},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 2902, col: 10, offset: 91540},
																						val:        "[\\t ]",
																						chars:      []rune{'\t', ' '},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1386, col: 19, offset: 44424},
																				expr: &actionExpr{
																					pos: position{line: 2911, col: 12, offset: 91711},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 2911, col: 13, offset: 91712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2911, col: 13, offset: 91712},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 20, offset: 91719},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 2911, col: 29, offset: 91728},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1386, col: 28, offset: 44433},
																				expr: &litMatcher{
																					pos:        position{line: 1378, col: 32, offset: 43939},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1386, col: 57, offset: 44462,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1378, col: 32, offset: 43939},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1380, col: 121, offset: 44066},
													expr: &charClassMatcher{
														pos:        position{line: 2746, col: 13, offset: 87373},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1368, col: 26, offset: 43254},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1368, col: 26, offset: 43254},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1366, col: 32, offset: 43224},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1368, col: 54, offset: 43282},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1372, col: 33, offset: 43495},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1372, col: 34, offset: 43496},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1372, col: 34, offset: 43496},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1372, col: 35, offset: 43497},
																			expr: &litMatcher{
																				pos:        position{line: 1366, col: 32, offset: 43224},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1372, col: 64, offset: 43526},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1372, col: 71, offset: 43533},
																			expr: &actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1372, col: 80, offset: 43542,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1372, col: 83, offset: 43545},
																			expr: &seqExpr{
																				pos: position{line: 1372, col: 84, offset: 43546},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1372, col: 84, offset: 43546},
																						expr: &seqExpr{
																							pos: position{line: 1372, col: 86, offset: 43548},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 2906, col: 11, offset: 91601},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2906, col: 11, offset: 91601},
																										expr: &charClassMatcher{
																											pos:        position{line: 2906, col: 11, offset: 91601},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1366, col: 32, offset: 43224},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1372, col: 122, offset: 43584},
																						expr: &litMatcher{
																							pos:        position{line: 1366, col: 32, offset: 43224},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1372, col: 151, offset: 43613},
																						expr: &actionExpr{
																							pos: position{line: 2911, col: 12, offset: 91711},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 2911, col: 13, offset: 91712},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2911, col: 13, offset: 91712},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 20, offset: 91719},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 2911, col: 29, offset: 91728},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1372, col: 160, offset: 43622,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1374, col: 11, offset: 43772},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1374, col: 12, offset: 43773},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1374, col: 12, offset: 43773},
																			expr: &actionExpr{
																				pos: position{line: 2902, col: 10, offset: 91540},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 2902, col: 10, offset: 91540},
																					val:        "[\\t ]",
																					chars:      []rune{'\t', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1374, col: 19, offset: 43780},
																			expr: &actionExpr{
																				pos: position{line: 2911, col: 12, offset: 91711},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 2911, col: 13, offset: 91712},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2911, col: 13, offset: 91712},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 20, offset: 91719},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 2911, col: 29, offset: 91728},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1374, col: 28, offset: 43789},
																			expr: &litMatcher{
																				pos:        position{line: 1366, col: 32, offset: 43224},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1374, col: 57, offset: 43818,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1366, col: 32, offset: 43224},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1368, col: 121, offset: 43349},
													expr: &charClassMatcher{
														pos:        position{line: 2746, col: 13, offset: 87373},
														val:        "[\\pL\\pN]",
														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2428, col: 57, offset: 78308},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2433, col: 1, offset: 78368},
			expr: &seqExpr{
				pos: position{line: 2435, col: 5, offset: 78444},
				exprs: []interface{}{
					&andCodeExpr{
						pos: position{line: 2435, col: 5, offset: 78444},
						run: (*parser).callonQuote2,
					},
					&ruleRefExpr{
						pos:  position{line: 2438, col: 5, offset: 78504},
						name: "QuotedText",
					},
				},
			},
		},
		{
			name: "Replacement",
			pos:  position{line: 2440, col: 1, offset: 78517},
			expr: &actionExpr{
				pos: position{line: 2442, col: 5, offset: 78599},
				run: (*parser).callonReplacement1,
				expr: &seqExpr{
					pos: position{line: 2442, col: 5, offset: 78599},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2442, col: 5, offset: 78599},
							run: (*parser).callonReplacement3,
						},
						&labeledExpr{
							pos:   position{line: 2445, col: 5, offset: 78665},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2446, col: 9, offset: 78683},
								name: "Symbol",
							},
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2501, col: 1, offset: 80432},
			expr: &choiceExpr{
				pos: position{line: 2503, col: 5, offset: 80462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2503, col: 5, offset: 80462},
						run: (*parser).callonSymbol2,
						expr: &seqExpr{
							pos: position{line: 2503, col: 5, offset: 80462},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2503, col: 5, offset: 80462},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2503, col: 10, offset: 80467},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2503, col: 10, offset: 80467},
											name: "QuotationMark",
										},
										&actionExpr{
											pos: position{line: 2532, col: 14, offset: 81571},
											run: (*parser).callonSymbol7,
											expr: &litMatcher{
												pos:        position{line: 2532, col: 14, offset: 81571},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2536, col: 14, offset: 81637},
											run: (*parser).callonSymbol9,
											expr: &litMatcher{
												pos:        position{line: 2536, col: 14, offset: 81637},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2540, col: 15, offset: 81706},
											run: (*parser).callonSymbol11,
											expr: &litMatcher{
												pos:        position{line: 2540, col: 15, offset: 81706},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2544, col: 13, offset: 81771},
											run: (*parser).callonSymbol13,
											expr: &litMatcher{
												pos:        position{line: 2544, col: 13, offset: 81771},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
										&actionExpr{
											pos: position{line: 2572, col: 21, offset: 82341},
											run: (*parser).callonSymbol15,
											expr: &litMatcher{
												pos:        position{line: 2572, col: 21, offset: 82341},
												val:        "->",
												ignoreCase: false,
												want:       "\"->\"",
											},
										},
										&actionExpr{
											pos: position{line: 2551, col: 5, offset: 81927},
											run: (*parser).callonSymbol17,
											expr: &seqExpr{
												pos: position{line: 2551, col: 5, offset: 81927},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2551, col: 5, offset: 81927},
														val:        "--",
														ignoreCase: false,
														want:       "\"--\"",
													},
													&andCodeExpr{
														pos: position{line: 2552, col: 5, offset: 81937},
														run: (*parser).callonSymbol20,
													},
													&choiceExpr{
														pos: position{line: 2556, col: 6, offset: 82024},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2902, col: 10, offset: 91540},
																run: (*parser).callonSymbol22,
																expr: &charClassMatcher{
																	pos:        position{line: 2902, col: 10, offset: 91540},
																	val:        "[\\t ]",
																	chars:      []rune{'\t', ' '},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&andExpr{
																pos: position{line: 2556, col: 14, offset: 82032},
																expr: &choiceExpr{
																	pos: position{line: 2924, col: 8, offset: 91938},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 2911, col: 12, offset: 91711},
																			run: (*parser).callonSymbol26,
																			expr: &choiceExpr{
																				pos: position{line: 2911, col: 13, offset: 91712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 2911, col: 13, offset: 91712},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 20, offset: 91719},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 2911, col: 29, offset: 91728},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 2921, col: 8, offset: 91888},
																			expr: &anyMatcher{
																				line: 2921, col: 9, offset: 91889,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2561, col: 5, offset: 82152},
											run: (*parser).callonSymbol33,
											expr: &seqExpr{
												pos: position{line: 2561, col: 5, offset: 82152},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2561, col: 5, offset: 82152},
														val:        "--",
														ignoreCase: false,
														want:       "\"--\"",
													},
													&andCodeExpr{
														pos: position{line: 2562, col: 5, offset: 82162},
														run: (*parser).callonSymbol36,
													},
													&andExpr{
														pos: position{line: 2566, col: 5, offset: 82251},
														expr: &choiceExpr{
															pos: position{line: 2566, col: 7, offset: 82253},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 2746, col: 13, offset: 87373},
																	val:        "[\\pL\\pN]",
																	classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&actionExpr{
																	pos: position{line: 2911, col: 12, offset: 91711},
																	run: (*parser).callonSymbol40,
																	expr: &choiceExpr{
																		pos: position{line: 2911, col: 13, offset: 91712},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2911, col: 13, offset: 91712},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2911, col: 20, offset: 91719},
																				val:        "\r\n",
																				ignoreCase: false,
																				want:       "\"\\r\\n\"",
																			},
																			&litMatcher{
																				pos:        position{line: 2911, col: 29, offset: 91728},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 2921, col: 8, offset: 91888},
																	expr: &anyMatcher{
																		line: 2921, col: 9, offset: 91889,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2576, col: 20, offset: 82411},
											run: (*parser).callonSymbol47,
											expr: &litMatcher{
												pos:        position{line: 2576, col: 20, offset: 82411},
												val:        "<-",
												ignoreCase: false,
												want:       "\"<-\"",
											},
										},
										&actionExpr{
											pos: position{line: 2580, col: 21, offset: 82482},
											run: (*parser).callonSymbol49,
											expr: &litMatcher{
												pos:        position{line: 2580, col: 21, offset: 82482},
												val:        "=>",
												ignoreCase: false,
												want:       "\"=>\"",
											},
										},
										&actionExpr{
											pos: position{line: 2584, col: 20, offset: 82552},
											run: (*parser).callonSymbol51,
											expr: &litMatcher{
												pos:        position{line: 2584, col: 20, offset: 82552},
												val:        "<=",
												ignoreCase: false,
												want:       "\"<=\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2507, col: 7, offset: 80722},
						name: "QuotationMark",
					},
					&actionExpr{
						pos: position{line: 2532, col: 14, offset: 81571},
						run: (*parser).callonSymbol54,
						expr: &litMatcher{
							pos:        position{line: 2532, col: 14, offset: 81571},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2536, col: 14, offset: 81637},
						run: (*parser).callonSymbol56,
						expr: &litMatcher{
							pos:        position{line: 2536, col: 14, offset: 81637},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2540, col: 15, offset: 81706},
						run: (*parser).callonSymbol58,
						expr: &litMatcher{
							pos:        position{line: 2540, col: 15, offset: 81706},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2544, col: 13, offset: 81771},
						run: (*parser).callonSymbol60,
						expr: &litMatcher{
							pos:        position{line: 2544, col: 13, offset: 81771},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2551, col: 5, offset: 81927},
						run: (*parser).callonSymbol62,
						expr: &seqExpr{
							pos: position{line: 2551, col: 5, offset: 81927},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2551, col: 5, offset: 81927},
									val:        "--",
									ignoreCase: false,
									want:       "\"--\"",
								},
								&andCodeExpr{
									pos: position{line: 2552, col: 5, offset: 81937},
									run: (*parser).callonSymbol65,
								},
								&choiceExpr{
									pos: position{line: 2556, col: 6, offset: 82024},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2902, col: 10, offset: 91540},
											run: (*parser).callonSymbol67,
											expr: &charClassMatcher{
												pos:        position{line: 2902, col: 10, offset: 91540},
												val:        "[\\t ]",
												chars:      []rune{'\t', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&andExpr{
											pos: position{line: 2556, col: 14, offset: 82032},
											expr: &choiceExpr{
												pos: position{line: 2924, col: 8, offset: 91938},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 2911, col: 12, offset: 91711},
														run: (*parser).callonSymbol71,
														expr: &choiceExpr{
															pos: position{line: 2911, col: 13, offset: 91712},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 2911, col: 13, offset: 91712},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 20, offset: 91719},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 2911, col: 29, offset: 91728},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 2921, col: 8, offset: 91888},
														expr: &anyMatcher{
															line: 2921, col: 9, offset: 91889,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2561, col: 5, offset: 82152},
						run: (*parser).callonSymbol78,
						expr: &seqExpr{
							pos: position{line: 2561, col: 5, offset: 82152},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2561, col: 5, offset: 82152},
									val:        "--",
									ignoreCase: false,
									want:       "\"--\"",
								},
								&andCodeExpr{
									pos: position{line: 2562, col: 5, offset: 82162},
									run: (*parser).callonSymbol81,
								},
								&andExpr{
									pos: position{line: 2566, col: 5, offset: 82251},
									expr: &choiceExpr{
										pos: position{line: 2566, col: 7, offset: 82253},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2746, col: 13, offset: 87373},
												val:        "[\\pL\\pN]",
												classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
												ignoreCase: false,
												inverted:   false,
											},
											&actionExpr{
												pos: position{line: 2911, col: 12, offset: 91711},
												run: (*parser).callonSymbol85,
												expr: &choiceExpr{
													pos: position{line: 2911, col: 13, offset: 91712},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2911, col: 13, offset: 91712},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 20, offset: 91719},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 2911, col: 29, offset: 91728},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2921, col: 8, offset: 91888},
												expr: &anyMatcher{
													line: 2921, col: 9, offset: 91889,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2572, col: 21, offset: 82341},
						run: (*parser).callonSymbol92,
						expr: &litMatcher{
							pos:        position{line: 2572, col: 21, offset: 82341},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
					},
					&actionExpr{
						pos: position{line: 2576, col: 20, offset: 82411},
						run: (*parser).callonSymbol94,
						expr: &litMatcher{
							pos:        position{line: 2576, col: 20, offset: 82411},
							val:        "<-",
							ignoreCase: false,
							want:       "\"<-\"",
						},
					},
					&actionExpr{
						pos: position{line: 2580, col: 21, offset: 82482},
						run: (*parser).callonSymbol96,
						expr: &litMatcher{
							pos:        position{line: 2580, col: 21, offset: 82482},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
					},
					&actionExpr{
						pos: position{line: 2584, col: 20, offset: 82552},
						run: (*parser).callonSymbol98,
						expr: &litMatcher{
							pos:        position{line: 2584, col: 20, offset: 82552},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
				},
			},
		},
		{
			name: "QuotationMark",
			pos:  position{line: 2518, col: 1, offset: 80912},
			expr: &choiceExpr{
				pos: position{line: 2519, col: 5, offset: 80934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2519, col: 5, offset: 80934},
						run: (*parser).callonQuotationMark2,
						expr: &seqExpr{
							pos: position{line: 2519, col: 5, offset: 80934},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2519, col: 5, offset: 80934},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&notExpr{
									pos: position{line: 2519, col: 11, offset: 80940},
									expr: &seqExpr{
										pos: position{line: 2080, col: 5, offset: 67148},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2080, col: 5, offset: 67148},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&andCodeExpr{
												pos: position{line: 2081, col: 5, offset: 67157},
												run: (*parser).callonQuotationMark8,
											},
											&andExpr{
												pos: position{line: 2085, col: 5, offset: 67280},
												expr: &notExpr{
													pos: position{line: 2085, col: 7, offset: 67282},
													expr: &litMatcher{
														pos:        position{line: 2085, col: 8, offset: 67283},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2522, col: 7, offset: 81093},
						run: (*parser).callonQuotationMark12,
						expr: &seqExpr{
							pos: position{line: 2522, col: 7, offset: 81093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2522, col: 7, offset: 81093},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&notExpr{
									pos: position{line: 2522, col: 13, offset: 81099},
									expr: &ruleRefExpr{
										pos:  position{line: 2522, col: 14, offset: 81100},
										name: "SingleQuoteMonospaceTextEndDelimiter",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2525, col: 7, offset: 81250},
						run: (*parser).callonQuotationMark17,
						expr: &seqExpr{
							pos: position{line: 2525, col: 7, offset: 81250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2525, col: 7, offset: 81250},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&notExpr{
									pos: position{line: 2525, col: 12, offset: 81255},
									expr: &seqExpr{
										pos: position{line: 2080, col: 5, offset: 67148},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 2080, col: 5, offset: 67148},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&andCodeExpr{
												pos: position{line: 2081, col: 5, offset: 67157},
												run: (*parser).callonQuotationMark23,
											},
											&andExpr{
												pos: position{line: 2085, col: 5, offset: 67280},
												expr: &notExpr{
													pos: position{line: 2085, col: 7, offset: 67282},
													expr: &litMatcher{
														pos:        position{line: 2085, col: 8, offset: 67283},
														val:        "`",
														ignoreCase: false,
														want:       "\"`\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2528, col: 7, offset: 81408},
						run: (*parser).callonQuotationMark27,
						expr: &seqExpr{
							pos: position{line: 2528, col: 7, offset: 81408},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2528, col: 7, offset: 81408},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&notExpr{
									pos: position{line: 2528, col: 12, offset: 81413},
									expr: &ruleRefExpr{
										pos:  position{line: 2528, col: 13, offset: 81414},
										name: "SingleQuoteMonospaceTextEndDelimiter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2661, col: 1, offset: 84453},
			expr: &actionExpr{
				pos: position{line: 2661, col: 26, offset: 84478},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2661, col: 26, offset: 84478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2661, col: 26, offset: 84478},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2661, col: 31, offset: 84483},
								expr: &actionExpr{
									pos: position{line: 2666, col: 5, offset: 84546},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2666, col: 5, offset: 84546},
										exprs: []interface{}{
											&andExpr{
												pos: position{line: 2919, col: 11, offset: 91874},
												expr: &anyMatcher{
													line: 2919, col: 13, offset: 91876,
												},
											},
											&labeledExpr{
												pos:   position{line: 2669, col: 5, offset: 84672},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2669, col: 16, offset: 84683},
													expr: &actionExpr{
														pos: position{line: 2669, col: 17, offset: 84684},
														run: (*parser).callonTableColumnsAttribute11,
														expr: &seqExpr{
															pos: position{line: 2669, col: 17, offset: 84684},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2669, col: 17, offset: 84684},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 2894, col: 12, offset: 91367},
																		run: (*parser).callonTableColumnsAttribute14,
																		expr: &seqExpr{
																			pos: position{line: 2894, col: 13, offset: 91368},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 2894, col: 13, offset: 91368},
																					expr: &litMatcher{
																						pos:        position{line: 2894, col: 13, offset: 91368},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 2894, col: 18, offset: 91373},
																					expr: &charClassMatcher{
																						pos:        position{line: 2894, col: 18, offset: 91373},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2669, col: 27, offset: 84694},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2670, col: 5, offset: 84722},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2670, col: 12, offset: 84729},
													expr: &choiceExpr{
														pos: position{line: 2671, col: 9, offset: 84739},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2671, col: 9, offset: 84739},
																run: (*parser).callonTableColumnsAttribute24,
																expr: &litMatcher{
																	pos:        position{line: 2671, col: 9, offset: 84739},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2672, col: 11, offset: 84786},
																run: (*parser).callonTableColumnsAttribute26,
																expr: &litMatcher{
																	pos:        position{line: 2672, col: 11, offset: 84786},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2673, col: 11, offset: 84834},
																run: (*parser).callonTableColumnsAttribute28,
																expr: &litMatcher{
																	pos:        position{line: 2673, col: 11, offset: 84834},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2675, col: 5, offset: 84884},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2675, col: 12, offset: 84891},
													expr: &choiceExpr{
														pos: position{line: 2676, col: 9, offset: 84901},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2676, col: 9, offset: 84901},
																run: (*parser).callonTableColumnsAttribute33,
																expr: &litMatcher{
																	pos:        position{line: 2676, col: 9, offset: 84901},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2677, col: 11, offset: 84948},
																run: (*parser).callonTableColumnsAttribute35,
																expr: &litMatcher{
																	pos:        position{line: 2677, col: 11, offset: 84948},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2678, col: 11, offset: 84998},
																run: (*parser).callonTableColumnsAttribute37,
																expr: &litMatcher{
																	pos:        position{line: 2678, col: 11, offset: 84998},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2680, col: 5, offset: 85049},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2680, col: 12, offset: 85056},
													expr: &choiceExpr{
														pos: position{line: 2680, col: 13, offset: 85057},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2894, col: 12, offset: 91367},
																run: (*parser).callonTableColumnsAttribute42,
																expr: &seqExpr{
																	pos: position{line: 2894, col: 13, offset: 91368},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 2894, col: 13, offset: 91368},
																			expr: &litMatcher{
																				pos:        position{line: 2894, col: 13, offset: 91368},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2894, col: 18, offset: 91373},
																			expr: &charClassMatcher{
																				pos:        position{line: 2894, col: 18, offset: 91373},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2680, col: 24, offset: 85068},
																run: (*parser).callonTableColumnsAttribute48,
																expr: &litMatcher{
																	pos:        position{line: 2680, col: 24, offset: 85068},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2681, col: 5, offset: 85110},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2681, col: 11, offset: 85116},
													expr: &actionExpr{
														pos: position{line: 2681, col: 12, offset: 85117},
														run: (*parser).callonTableColumnsAttribute52,
														expr: &charClassMatcher{
															pos:        position{line: 2681, col: 12, offset: 85117},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2683, col: 5, offset: 85247},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2683, col: 11, offset: 85253},
													expr: &litMatcher{
														pos:        position{line: 2683, col: 12, offset: 85254},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2684, col: 5, offset: 85264},
												run: (*parser).callonTableColumnsAttribute57,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 2921, col: 8, offset: 91888},
							expr: &anyMatcher{
								line: 2921, col: 9, offset: 91889,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2711, col: 1, offset: 86273},
			expr: &actionExpr{
				pos: position{line: 2712, col: 5, offset: 86296},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2712, col: 5, offset: 86296},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2712, col: 5, offset: 86296},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2735, col: 18, offset: 87037},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2735, col: 19, offset: 87038},
									expr: &charClassMatcher{
										pos:        position{line: 2735, col: 19, offset: 87038},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2713, col: 5, offset: 86322},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2717, col: 5, offset: 86450},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2718, col: 5, offset: 86460},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2739, col: 19, offset: 87113},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2739, col: 19, offset: 87113},
									expr: &charClassMatcher{
										pos:        position{line: 2739, col: 19, offset: 87113},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2719, col: 5, offset: 86488},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2719, col: 17, offset: 86500},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 2924, col: 8, offset: 91938},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2911, col: 12, offset: 91711},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 2911, col: 13, offset: 91712},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 2911, col: 13, offset: 91712},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 20, offset: 91719},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 2911, col: 29, offset: 91728},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 2921, col: 8, offset: 91888},
									expr: &anyMatcher{
										line: 2921, col: 9, offset: 91889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2723, col: 1, offset: 86648},
			expr: &actionExpr{
				pos: position{line: 2724, col: 5, offset: 86672},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2724, col: 5, offset: 86672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2724, col: 5, offset: 86672},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2735, col: 18, offset: 87037},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2735, col: 19, offset: 87038},
									expr: &charClassMatcher{
										pos:        position{line: 2735, col: 19, offset: 87038},
										val:        "[_-\\pL\\pN]",
										chars:      []rune{'_', '-'},
										classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2725, col: 5, offset: 86698},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2729, col: 5, offset: 86826},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2730, col: 5, offset: 86835},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2739, col: 19, offset: 87113},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2739, col: 19, offset: 87113},
									expr: &charClassMatcher{
										pos:        position{line: 2739, col: 19, offset: 87113},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2731, col: 5, offset: 86863},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2731, col: 17, offset: 86875},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2856, col: 1, offset: 90106},
			expr: &actionExpr{
				pos: position{line: 2856, col: 17, offset: 90122},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2856, col: 17, offset: 90122},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2856, col: 22, offset: 90127},
						expr: &choiceExpr{
							pos: position{line: 2856, col: 23, offset: 90128},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2873, col: 5, offset: 90621},
									run: (*parser).callonFileLocation5,
									expr: &seqExpr{
										pos: position{line: 2873, col: 5, offset: 90621},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2873, col: 5, offset: 90621},
												expr: &litMatcher{
													pos:        position{line: 2873, col: 6, offset: 90622},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 2874, col: 5, offset: 90646},
												label: "elements",
												expr: &oneOrMoreExpr{
													pos: position{line: 2874, col: 14, offset: 90655},
													expr: &choiceExpr{
														pos: position{line: 2875, col: 9, offset: 90665},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2875, col: 9, offset: 90665},
																run: (*parser).callonFileLocation12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2875, col: 9, offset: 90665},
																	expr: &charClassMatcher{
																		pos:        position{line: 2875, col: 10, offset: 90666},
																		val:        "[^\\r\\n[]�{,;?!>. ]",
																		chars:      []rune{'\r', '\n', '[', ']', '�', '{', ',', ';', '?', '!', '>', '.', ' '},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&seqExpr{
																pos: position{line: 2878, col: 11, offset: 90917},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2801, col: 8, offset: 88554},
																		run: (*parser).callonFileLocation16,
																		expr: &seqExpr{
																			pos: position{line: 2801, col: 9, offset: 88555},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2801, col: 9, offset: 88555},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																				&andExpr{
																					pos: position{line: 2801, col: 13, offset: 88559},
																					expr: &notExpr{
																						pos: position{line: 2801, col: 15, offset: 88561},
																						expr: &litMatcher{
																							pos:        position{line: 2801, col: 16, offset: 88562},
																							val:        "..",
																							ignoreCase: false,
																							want:       "\"..\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 2878, col: 15, offset: 90921},
																		expr: &notExpr{
																			pos: position{line: 2878, col: 17, offset: 90923},
																			expr: &choiceExpr{
																				pos: position{line: 2878, col: 19, offset: 90925},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonFileLocation27,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&seqExpr{
																pos: position{line: 2879, col: 11, offset: 90949},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 2807, col: 5, offset: 88736},
																		run: (*parser).callonFileLocation30,
																		expr: &choiceExpr{
																			pos: position{line: 2808, col: 9, offset: 88746},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 2808, col: 10, offset: 88747},
																					val:        "[,;?)!/=-]",
																					chars:      []rune{',', ';', '?', ')', '!', '/', '=', '-'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&seqExpr{
																					pos: position{line: 2809, col: 12, offset: 88822},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2809, col: 12, offset: 88822},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&andExpr{
																							pos: position{line: 2809, col: 16, offset: 88826},
																							expr: &choiceExpr{
																								pos: position{line: 2809, col: 18, offset: 88828},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2902, col: 10, offset: 91540},
																										run: (*parser).callonFileLocation37,
																										expr: &charClassMatcher{
																											pos:        position{line: 2902, col: 10, offset: 91540},
																											val:        "[\\t ]",
																											chars:      []rune{'\t', ' '},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2911, col: 12, offset: 91711},
																										run: (*parser).callonFileLocation39,
																										expr: &choiceExpr{
																											pos: position{line: 2911, col: 13, offset: 91712},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 2911, col: 13, offset: 91712},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 20, offset: 91719},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 2911, col: 29, offset: 91728},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2921, col: 8, offset: 91888},
																										expr: &anyMatcher{
																											line: 2921, col: 9, offset: 91889,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2811, col: 13, offset: 88897},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2811, col: 13, offset: 88897},
																							run: (*parser).callonFileLocation47,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2814, col: 14, offset: 89033},
																							val:        "[\"\\()]",
																							chars:      []rune{'"', '\'', '(', ')'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2817, col: 13, offset: 89090},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2817, col: 13, offset: 89090},
																							run: (*parser).callonFileLocation50,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2820, col: 14, offset: 89179},
																							val:        "[:@]",
																							chars:      []rune{':', '@'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2823, col: 13, offset: 89224},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2823, col: 13, offset: 89224},
																							run: (*parser).callonFileLocation53,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2826, col: 14, offset: 89313},
																							val:        "[*_`#]",
																							chars:      []rune{'*', '_', '`', '#'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&seqExpr{
																					pos: position{line: 2829, col: 13, offset: 89370},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2829, col: 13, offset: 89370},
																							run: (*parser).callonFileLocation56,
																						},
																						&charClassMatcher{
																							pos:        position{line: 2832, col: 14, offset: 89526},
																							val:        "[[]]",
																							chars:      []rune{'[', ']'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 2879, col: 23, offset: 90961},
																		expr: &notExpr{
																			pos: position{line: 2879, col: 25, offset: 90963},
																			expr: &choiceExpr{
																				pos: position{line: 2879, col: 27, offset: 90965},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 2921, col: 8, offset: 91888},
																						expr: &anyMatcher{
																							line: 2921, col: 9, offset: 91889,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2902, col: 10, offset: 91540},
																						run: (*parser).callonFileLocation63,
																						expr: &charClassMatcher{
																							pos:        position{line: 2902, col: 10, offset: 91540},
																							val:        "[\\t ]",
																							chars:      []rune{'\t', ' '},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 636, col: 5, offset: 20111},
																run: (*parser).callonFileLocation65,
																expr: &seqExpr{
																	pos: position{line: 636, col: 5, offset: 20111},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 636, col: 5, offset: 20111},
																			run: (*parser).callonFileLocation67,
																		},
																		&labeledExpr{
																			pos:   position{line: 639, col: 5, offset: 20178},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 639, col: 14, offset: 20187},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 645, col: 5, offset: 20316},
																						run: (*parser).callonFileLocation70,
																						expr: &seqExpr{
																							pos: position{line: 645, col: 5, offset: 20316},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 645, col: 5, offset: 20316},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 645, col: 13, offset: 20324},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonFileLocation74,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 645, col: 32, offset: 20343},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 652, col: 5, offset: 20584},
																						run: (*parser).callonFileLocation80,
																						expr: &seqExpr{
																							pos: position{line: 652, col: 5, offset: 20584},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 652, col: 5, offset: 20584},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 652, col: 9, offset: 20588},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonFileLocation84,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 652, col: 28, offset: 20607},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 658, col: 25, offset: 20788},
																						run: (*parser).callonFileLocation90,
																						expr: &seqExpr{
																							pos: position{line: 658, col: 25, offset: 20788},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 658, col: 25, offset: 20788},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 658, col: 37, offset: 20800},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonFileLocation94,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 658, col: 56, offset: 20819},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 658, col: 62, offset: 20825},
																										expr: &actionExpr{
																											pos: position{line: 666, col: 17, offset: 21120},
																											run: (*parser).callonFileLocation101,
																											expr: &seqExpr{
																												pos: position{line: 666, col: 17, offset: 21120},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 666, col: 17, offset: 21120},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 666, col: 21, offset: 21124},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 666, col: 28, offset: 21131},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 666, col: 28, offset: 21131},
																																	run: (*parser).callonFileLocation106,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 666, col: 28, offset: 21131},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 668, col: 9, offset: 21185},
																																	run: (*parser).callonFileLocation108,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 668, col: 9, offset: 21185},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 668, col: 9, offset: 21185},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 658, col: 78, offset: 20841},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 662, col: 25, offset: 20959},
																						run: (*parser).callonFileLocation112,
																						expr: &seqExpr{
																							pos: position{line: 662, col: 25, offset: 20959},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 662, col: 25, offset: 20959},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 662, col: 38, offset: 20972},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 318, col: 18, offset: 9737},
																										run: (*parser).callonFileLocation116,
																										expr: &seqExpr{
																											pos: position{line: 318, col: 18, offset: 9737},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 318, col: 18, offset: 9737},
																													val:        "[_\\pL\\pN]",
																													chars:      []rune{'_'},
																													classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 318, col: 28, offset: 9747},
																													expr: &charClassMatcher{
																														pos:        position{line: 318, col: 29, offset: 9748},
																														val:        "[-\\pL\\pN]",
																														chars:      []rune{'-'},
																														classes:    []*unicode.RangeTable{rangeTable("L"), rangeTable("N")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 662, col: 57, offset: 20991},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 662, col: 63, offset: 20997},
																										expr: &actionExpr{
																											pos: position{line: 666, col: 17, offset: 21120},
																											run: (*parser).callonFileLocation123,
																											expr: &seqExpr{
																												pos: position{line: 666, col: 17, offset: 21120},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 666, col: 17, offset: 21120},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 666, col: 21, offset: 21124},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 666, col: 28, offset: 21131},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 666, col: 28, offset: 21131},
																																	run: (*parser).callonFileLocation128,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 666, col: 28, offset: 21131},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 668, col: 9, offset: 21185},
																																	run: (*parser).callonFileLocation130,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 668, col: 9, offset: 21185},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 668, col: 9, offset: 21185},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 662, col: 79, offset: 21013},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2881, col: 11, offset: 91036},
																run: (*parser).callonFileLocation134,
																expr: &litMatcher{
																	pos:        position{line: 2881, col: 11, offset: 91036},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1198, col: 23, offset: 36969},
									run: (*parser).callonFileLocation136,
									expr: &seqExpr{
										pos: position{line: 1198, col: 23, offset: 36969},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1196, col: 32, offset: 36937},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1198, col: 51, offset: 36997},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1198, col: 56, offset: 37002},
													run: (*parser).callonFileLocation140,
													expr: &oneOrMoreExpr{
														pos: position{line: 1198, col: 56, offset: 37002},
														expr: &charClassMatcher{
															pos:        position{line: 1198, col: 56, offset: 37002},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1196, col: 32, offset: 36937},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr interface{}) (interface{}, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr interface{}) (interface{}, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine101()
}

func (c *current) onDocumentRawLine97(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine97(stack["name"])
}

func (c *current) onDocumentRawLine111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111()
}

func (c *current) onDocumentRawLine107(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["name"])
}

func (c *current) onDocumentRawLine92(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine127()
}

func (c *current) onDocumentRawLine123(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine123(stack["name"])
}

func (c *current) onDocumentRawLine137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine137()
}

func (c *current) onDocumentRawLine133(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine133(stack["name"])
}

func (c *current) onDocumentRawLine118(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine118(stack["s"])
}

func (c *current) onDocumentRawLine151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine151()
}

func (c *current) onDocumentRawLine147(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine147(stack["name"])
}

func (c *current) onDocumentRawLine161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine157(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157(stack["name"])
}

func (c *current) onDocumentRawLine144(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine144(stack["s"])
}

func (c *current) onDocumentRawLine171() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine167(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167(stack["w"])
}

func (c *current) onDocumentRawLine179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine179()
}

func (c *current) onDocumentRawLine175(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine175(stack["w"])
}

func (c *current) onDocumentRawLine183() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine183()
}

func (c *current) onDocumentRawLine190() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine190()
}

func (c *current) onDocumentRawLine194() (interface{}, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine194()
}

func (c *current) onDocumentRawLine196() (interface{}, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine196()
}

func (c *current) onDocumentRawLine198() (interface{}, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine198()
}

func (c *current) onDocumentRawLine200() (interface{}, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine200()
}

func (c *current) onDocumentRawLine202() (interface{}, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine202()
}

func (c *current) onDocumentRawLine204() (interface{}, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine204()
}

func (c *current) onDocumentRawLine207() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine207()
}

func (c *current) onDocumentRawLine220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220()
}

func (c *current) onDocumentRawLine216(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine216(stack["name"])
}

func (c *current) onDocumentRawLine230() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine230()
}

func (c *current) onDocumentRawLine226(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine226(stack["name"])
}

func (c *current) onDocumentRawLine211(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine211(stack["s"])
}

func (c *current) onDocumentRawLine246() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine246()
}

func (c *current) onDocumentRawLine242(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine242(stack["name"])
}

func (c *current) onDocumentRawLine256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine256()
}

func (c *current) onDocumentRawLine252(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine252(stack["name"])
}

func (c *current) onDocumentRawLine237(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine237(stack["s"])
}

func (c *current) onDocumentRawLine270() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine270()
}

func (c *current) onDocumentRawLine266(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine266(stack["name"])
}

func (c *current) onDocumentRawLine280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine280()
}

func (c *current) onDocumentRawLine276(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine276(stack["name"])
}

func (c *current) onDocumentRawLine263(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine263(stack["s"])
}

func (c *current) onDocumentRawLine290() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine290()
}

func (c *current) onDocumentRawLine286(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine286(stack["w"])
}

func (c *current) onDocumentRawLine298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine298()
}

func (c *current) onDocumentRawLine294(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine294(stack["w"])
}

func (c *current) onDocumentRawLine302() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302()
}

func (c *current) onDocumentRawLine310() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine87(left, operand, right interface{}) (interface{}, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine319() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine319()
}

func (c *current) onDocumentRawLine325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine325()
}

func (c *current) onDocumentRawLine330() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine330()
}

func (c *current) onDocumentRawLine314(name, attr interface{}) (interface{}, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine314(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine343() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine343()
}

func (c *current) onDocumentRawLine349() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine349()
}

func (c *current) onDocumentRawLine352() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine352()
}

func (c *current) onDocumentRawLine340(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine340(stack["delimiter"])
}

func (c *current) onDocumentRawLine362() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine362()
}

func (c *current) onDocumentRawLine368() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine368()
}

func (c *current) onDocumentRawLine371() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine371()
}

func (c *current) onDocumentRawLine359(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine359(stack["delimiter"])
}

func (c *current) onDocumentRawLine382() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine382()
}

func (c *current) onDocumentRawLine386() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine386()
}

func (c *current) onDocumentRawLine389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine389()
}

func (c *current) onDocumentRawLine378(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine378(stack["language"])
}

func (c *current) onDocumentRawLine399() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine399()
}

func (c *current) onDocumentRawLine405() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine405()
}

func (c *current) onDocumentRawLine408() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine408()
}

func (c *current) onDocumentRawLine396(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine396(stack["delimiter"])
}

func (c *current) onDocumentRawLine418() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine418()
}

func (c *current) onDocumentRawLine424() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine424()
}

func (c *current) onDocumentRawLine427() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine427()
}

func (c *current) onDocumentRawLine415(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine415(stack["delimiter"])
}

func (c *current) onDocumentRawLine437() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine437()
}

func (c *current) onDocumentRawLine443() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine443()
}

func (c *current) onDocumentRawLine446() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine446()
}

func (c *current) onDocumentRawLine434(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine434(stack["delimiter"])
}

func (c *current) onDocumentRawLine456() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine456()
}

func (c *current) onDocumentRawLine462() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine462()
}

func (c *current) onDocumentRawLine465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine465()
}

func (c *current) onDocumentRawLine453(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine453(stack["delimiter"])
}

func (c *current) onDocumentRawLine475() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine475()
}

func (c *current) onDocumentRawLine481() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine481()
}

func (c *current) onDocumentRawLine484() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine484()
}

func (c *current) onDocumentRawLine472(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine472(stack["delimiter"])
}

func (c *current) onDocumentRawLine494() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine494()
}

func (c *current) onDocumentRawLine500() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine500()
}

func (c *current) onDocumentRawLine503() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine503()
}

func (c *current) onDocumentRawLine491(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine491(stack["delimiter"])
}

func (c *current) onDocumentRawLine334(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334(stack["delimiter"])
}

func (c *current) onDocumentRawLine512() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine512() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine512()
}

func (c *current) onDocumentRawLine513() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine513() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine513()
}

func (c *current) onDocumentRawLine515() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine515()
}

func (c *current) onDocumentRawLine518(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine518() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine518(stack["level"])
}

func (c *current) onDocumentRawLine519(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine519(stack["level"])
}

func (c *current) onDocumentRawLine522(level interface{}) (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine522(stack["level"])
}

func (c *current) onDocumentRawLine510(level interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine510(stack["level"])
}

func (c *current) onDocumentRawLine1(element interface{}) (interface{}, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion19() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion23() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonFileInclusion23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion34() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion34()
}

func (c *current) onFileInclusion44() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion44()
}

func (c *current) onFileInclusion46() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion46()
}

func (c *current) onFileInclusion54() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonFileInclusion54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion54()
}

func (c *current) onFileInclusion57() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonFileInclusion57() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion57()
}

func (c *current) onFileInclusion60() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonFileInclusion60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion60()
}

func (c *current) onFileInclusion63() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonFileInclusion63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion63()
}

func (c *current) onFileInclusion37() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37()
}

func (c *current) onFileInclusion70() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70()
}

func (c *current) onFileInclusion74() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonFileInclusion74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion74()
}

func (c *current) onFileInclusion81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81()
}

func (c *current) onFileInclusion77(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77(stack["name"])
}

func (c *current) onFileInclusion91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91()
}

func (c *current) onFileInclusion87(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion87(stack["name"])
}

func (c *current) onFileInclusion101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101()
}

func (c *current) onFileInclusion113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion113()
}

func (c *current) onFileInclusion115() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion115()
}

func (c *current) onFileInclusion108(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108(stack["start"])
}

func (c *current) onFileInclusion97(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion97(stack["name"], stack["start"])
}

func (c *current) onFileInclusion123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion123()
}

func (c *current) onFileInclusion135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion135()
}

func (c *current) onFileInclusion137() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137()
}

func (c *current) onFileInclusion130(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion130(stack["start"])
}

func (c *current) onFileInclusion119(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion119(stack["name"], stack["start"])
}

func (c *current) onFileInclusion72(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion72(stack["element"])
}

func (c *current) onFileInclusion141() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion141()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion147() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion147()
}

func (c *current) onFileInclusion143(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion143(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion154() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileInclusion154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion154()
}

func (c *current) onFileInclusion157() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion157()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment8(attributes interface{}) error {
	if attributes, ok := attributes.(types.Attributes); ok {
		c.storeBlockAttributes(attributes)
	}
	return nil

}

func (p *parser) callonDocumentFragment8() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment8(stack["attributes"])
}

func (c *current) onDocumentFragment20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment20()
}

func (c *current) onDocumentFragment27() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment27()
}

func (c *current) onDocumentFragment30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment30()
}

func (c *current) onDocumentFragment16(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment16(stack["name"])
}

func (c *current) onDocumentFragment41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment41()
}

func (c *current) onDocumentFragment48() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment48()
}

func (c *current) onDocumentFragment51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment51()
}

func (c *current) onDocumentFragment37(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment37(stack["name"])
}

func (c *current) onDocumentFragment63() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment63()
}

func (c *current) onDocumentFragment66() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment66()
}

func (c *current) onDocumentFragment58() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment58()
}

func (c *current) onDocumentFragment80() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment80()
}

func (c *current) onDocumentFragment86() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment86()
}

func (c *current) onDocumentFragment89() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment89()
}

func (c *current) onDocumentFragment77(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77(stack["delimiter"])
}

func (c *current) onDocumentFragment105() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment105()
}

func (c *current) onDocumentFragment111() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment111()
}

func (c *current) onDocumentFragment114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment114()
}

func (c *current) onDocumentFragment102(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment102(stack["delimiter"])
}

func (c *current) onDocumentFragment129() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment129()
}

func (c *current) onDocumentFragment133() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment133()
}

func (c *current) onDocumentFragment124(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment124(stack["content"])
}

func (c *current) onDocumentFragment98(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment98(stack["line"])
}

func (c *current) onDocumentFragment145() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment145()
}

func (c *current) onDocumentFragment151() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment151()
}

func (c *current) onDocumentFragment154() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment154()
}

func (c *current) onDocumentFragment142(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment142(stack["delimiter"])
}

func (c *current) onDocumentFragment75(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment169() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169()
}

func (c *current) onDocumentFragment175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment175()
}

func (c *current) onDocumentFragment178() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment166(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment166(stack["delimiter"])
}

func (c *current) onDocumentFragment185(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment185() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment185(stack["start"])
}

func (c *current) onDocumentFragment197() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment197()
}

func (c *current) onDocumentFragment203() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment203()
}

func (c *current) onDocumentFragment206() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment206()
}

func (c *current) onDocumentFragment194(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment194(stack["delimiter"])
}

func (c *current) onDocumentFragment213(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment213() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment213(stack["end"])
}

func (c *current) onDocumentFragment222() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment222()
}

func (c *current) onDocumentFragment226() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment226()
}

func (c *current) onDocumentFragment217(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment217(stack["content"])
}

func (c *current) onDocumentFragment188(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment188(stack["line"])
}

func (c *current) onDocumentFragment241() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment241()
}

func (c *current) onDocumentFragment247() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment247()
}

func (c *current) onDocumentFragment250() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment250()
}

func (c *current) onDocumentFragment238(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment238(stack["delimiter"])
}

func (c *current) onDocumentFragment257(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment257() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment257(stack["end"])
}

func (c *current) onDocumentFragment163(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment163(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment267() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment267()
}

func (c *current) onDocumentFragment271() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment271()
}

func (c *current) onDocumentFragment274() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment274()
}

func (c *current) onDocumentFragment263(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment263(stack["language"])
}

func (c *current) onDocumentFragment289() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment289()
}

func (c *current) onDocumentFragment292() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment292()
}

func (c *current) onDocumentFragment305() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment305()
}

func (c *current) onDocumentFragment309() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment309()
}

func (c *current) onDocumentFragment300(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment300(stack["content"])
}

func (c *current) onDocumentFragment283(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment283(stack["line"])
}

func (c *current) onDocumentFragment320() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment320()
}

func (c *current) onDocumentFragment323() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment323()
}

func (c *current) onDocumentFragment260(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment260(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment336() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment336()
}

func (c *current) onDocumentFragment342() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment342()
}

func (c *current) onDocumentFragment345() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment345()
}

func (c *current) onDocumentFragment333(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment333(stack["delimiter"])
}

func (c *current) onDocumentFragment352(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment352() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment352(stack["start"])
}

func (c *current) onDocumentFragment364() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment364()
}

func (c *current) onDocumentFragment370() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment370()
}

func (c *current) onDocumentFragment373() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment373()
}

func (c *current) onDocumentFragment361(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment361(stack["delimiter"])
}

func (c *current) onDocumentFragment380(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment380() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment380(stack["end"])
}

func (c *current) onDocumentFragment389() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment389()
}

func (c *current) onDocumentFragment393() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment393()
}

func (c *current) onDocumentFragment384(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment384(stack["content"])
}

func (c *current) onDocumentFragment355(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment355(stack["line"])
}

func (c *current) onDocumentFragment408() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment408()
}

func (c *current) onDocumentFragment414() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment414()
}

func (c *current) onDocumentFragment417() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment417()
}

func (c *current) onDocumentFragment405(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment405(stack["delimiter"])
}

func (c *current) onDocumentFragment424(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment424() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment424(stack["end"])
}

func (c *current) onDocumentFragment330(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment330(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment433() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment433()
}

func (c *current) onDocumentFragment439() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment439()
}

func (c *current) onDocumentFragment442() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment442()
}

func (c *current) onDocumentFragment430(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment430(stack["delimiter"])
}

func (c *current) onDocumentFragment449(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment449() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment449(stack["start"])
}

func (c *current) onDocumentFragment461() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment461()
}

func (c *current) onDocumentFragment467() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment467()
}

func (c *current) onDocumentFragment470() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment470()
}

func (c *current) onDocumentFragment458(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment458(stack["delimiter"])
}

func (c *current) onDocumentFragment477(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment477() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment477(stack["end"])
}

func (c *current) onDocumentFragment486() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment486()
}

func (c *current) onDocumentFragment490() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment490()
}

func (c *current) onDocumentFragment481(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment481(stack["content"])
}

func (c *current) onDocumentFragment452(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment452() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment452(stack["line"])
}

func (c *current) onDocumentFragment505() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment505()
}

func (c *current) onDocumentFragment511() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment511()
}

func (c *current) onDocumentFragment514() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment514()
}

func (c *current) onDocumentFragment502(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment502(stack["delimiter"])
}

func (c *current) onDocumentFragment521(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment521() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment521(stack["end"])
}

func (c *current) onDocumentFragment427(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment427(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment530() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment530()
}

func (c *current) onDocumentFragment536() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment536()
}

func (c *current) onDocumentFragment539() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment539()
}

func (c *current) onDocumentFragment527(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment527(stack["delimiter"])
}

func (c *current) onDocumentFragment546(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment546() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment546(stack["start"])
}

func (c *current) onDocumentFragment558() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment558()
}

func (c *current) onDocumentFragment564() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment564()
}

func (c *current) onDocumentFragment567() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment567()
}

func (c *current) onDocumentFragment555(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment555(stack["delimiter"])
}

func (c *current) onDocumentFragment574(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment574(stack["end"])
}

func (c *current) onDocumentFragment583() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment583()
}

func (c *current) onDocumentFragment587() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment587()
}

func (c *current) onDocumentFragment578(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment578(stack["content"])
}

func (c *current) onDocumentFragment549(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment549(stack["line"])
}

func (c *current) onDocumentFragment602() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment602() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment602()
}

func (c *current) onDocumentFragment608() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment608()
}

func (c *current) onDocumentFragment611() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment611()
}

func (c *current) onDocumentFragment599(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment599(stack["delimiter"])
}

func (c *current) onDocumentFragment618(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment618() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment618(stack["end"])
}

func (c *current) onDocumentFragment524(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment524(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment632() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment632()
}

func (c *current) onDocumentFragment635() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment635()
}

func (c *current) onDocumentFragment627() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment627()
}

func (c *current) onDocumentFragment644() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment644()
}

func (c *current) onDocumentFragment648() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment648()
}

func (c *current) onDocumentFragment624(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment624() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment624(stack["content"])
}

func (c *current) onDocumentFragment666() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment666()
}

func (c *current) onDocumentFragment669() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment669()
}

func (c *current) onDocumentFragment661() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment661()
}

func (c *current) onDocumentFragment678() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment678()
}

func (c *current) onDocumentFragment682() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment682()
}

func (c *current) onDocumentFragment658(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment658(stack["content"])
}

func (c *current) onDocumentFragment692() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment692()
}

func (c *current) onDocumentFragment695(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonDocumentFragment695() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment695(stack["content"])
}

func (c *current) onDocumentFragment697() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment697()
}

func (c *current) onDocumentFragment689(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment689(stack["content"])
}

func (c *current) onDocumentFragment621(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment621(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment710() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment710()
}

func (c *current) onDocumentFragment713() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment713()
}

func (c *current) onDocumentFragment716() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment716() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment716()
}

func (c *current) onDocumentFragment707(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment707(stack["delimiter"])
}

func (c *current) onDocumentFragment732() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment732()
}

func (c *current) onDocumentFragment735() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735()
}

func (c *current) onDocumentFragment738() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment738()
}

func (c *current) onDocumentFragment729(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment729(stack["delimiter"])
}

func (c *current) onDocumentFragment753() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment753()
}

func (c *current) onDocumentFragment757() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment757() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment757()
}

func (c *current) onDocumentFragment748(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment748(stack["content"])
}

func (c *current) onDocumentFragment725(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment725(stack["line"])
}

func (c *current) onDocumentFragment770() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment770()
}

func (c *current) onDocumentFragment773() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment773()
}

func (c *current) onDocumentFragment776() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment776()
}

func (c *current) onDocumentFragment767(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment767() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment767(stack["delimiter"])
}

func (c *current) onDocumentFragment704(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonDocumentFragment704() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment704(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment791() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment791()
}

func (c *current) onDocumentFragment797() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment797()
}

func (c *current) onDocumentFragment800() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment800() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment800()
}

func (c *current) onDocumentFragment788(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment788() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment788(stack["delimiter"])
}

func (c *current) onDocumentFragment807(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment807() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment807(stack["start"])
}

func (c *current) onDocumentFragment819() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment819()
}

func (c *current) onDocumentFragment825() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment825()
}

func (c *current) onDocumentFragment828() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment828()
}

func (c *current) onDocumentFragment816(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment816(stack["delimiter"])
}

func (c *current) onDocumentFragment835(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment835() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment835(stack["end"])
}

func (c *current) onDocumentFragment844() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment844()
}

func (c *current) onDocumentFragment848() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment848()
}

func (c *current) onDocumentFragment839(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839(stack["content"])
}

func (c *current) onDocumentFragment810(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment810() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment810(stack["line"])
}

func (c *current) onDocumentFragment863() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment863() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment863()
}

func (c *current) onDocumentFragment869() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment869() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment869()
}

func (c *current) onDocumentFragment872() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment872()
}

func (c *current) onDocumentFragment860(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment860(stack["delimiter"])
}

func (c *current) onDocumentFragment879(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment879() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment879(stack["end"])
}

func (c *current) onDocumentFragment785(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment785(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment888() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment888()
}

func (c *current) onDocumentFragment894() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment894()
}

func (c *current) onDocumentFragment897() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment897()
}

func (c *current) onDocumentFragment885(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment885() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment885(stack["delimiter"])
}

func (c *current) onDocumentFragment904(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment904() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment904(stack["start"])
}

func (c *current) onDocumentFragment916() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment916()
}

func (c *current) onDocumentFragment922() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment922()
}

func (c *current) onDocumentFragment925() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment925()
}

func (c *current) onDocumentFragment913(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment913() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment913(stack["delimiter"])
}

func (c *current) onDocumentFragment932(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment932() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment932(stack["end"])
}

func (c *current) onDocumentFragment941() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment941() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment941()
}

func (c *current) onDocumentFragment945() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment945()
}

func (c *current) onDocumentFragment936(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment936() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment936(stack["content"])
}

func (c *current) onDocumentFragment907(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment907() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment907(stack["line"])
}

func (c *current) onDocumentFragment960() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment960()
}

func (c *current) onDocumentFragment966() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment966()
}

func (c *current) onDocumentFragment969() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment969() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment969()
}

func (c *current) onDocumentFragment957(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment957() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment957(stack["delimiter"])
}

func (c *current) onDocumentFragment976(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment976() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment976(stack["end"])
}

func (c *current) onDocumentFragment882(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment882() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment882(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment985() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment985()
}

func (c *current) onDocumentFragment991() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment991()
}

func (c *current) onDocumentFragment994() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment994() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment994()
}

func (c *current) onDocumentFragment982(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment982(stack["delimiter"])
}

func (c *current) onDocumentFragment1001(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1001() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1001(stack["start"])
}

func (c *current) onDocumentFragment1013() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1013()
}

func (c *current) onDocumentFragment1019() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1019() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1019()
}

func (c *current) onDocumentFragment1022() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1022() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1022()
}

func (c *current) onDocumentFragment1010(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1010() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1010(stack["delimiter"])
}

func (c *current) onDocumentFragment1029(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1029() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1029(stack["end"])
}

func (c *current) onDocumentFragment1038() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1038()
}

func (c *current) onDocumentFragment1042() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1042() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1042()
}

func (c *current) onDocumentFragment1033(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1033() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1033(stack["content"])
}

func (c *current) onDocumentFragment1004(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1004(stack["line"])
}

func (c *current) onDocumentFragment1057() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1057()
}

func (c *current) onDocumentFragment1063() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1054(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1054(stack["delimiter"])
}

func (c *current) onDocumentFragment1073(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1073() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1073(stack["end"])
}

func (c *current) onDocumentFragment979(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment979(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment1087() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087()
}

func (c *current) onDocumentFragment1090() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1090()
}

func (c *current) onDocumentFragment1098() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1098() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1098()
}

func (c *current) onDocumentFragment1076() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1076()
}

func (c *current) onDocumentFragment1110() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1110()
}

func (c *current) onDocumentFragment1113() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1113()
}

func (c *current) onDocumentFragment1128() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1128()
}

func (c *current) onDocumentFragment1131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1131()
}

func (c *current) onDocumentFragment1123() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1123()
}

func (c *current) onDocumentFragment1145() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1148()
}

func (c *current) onDocumentFragment1170() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1170()
}

func (c *current) onDocumentFragment1175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1175()
}

func (c *current) onDocumentFragment1173(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1173(stack["content"])
}

func (c *current) onDocumentFragment1166(content interface{}) (interface{}, error) {
	return types.NewInlineTableCell(content.(types.RawLine))

}

func (p *parser) callonDocumentFragment1166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1166(stack["content"])
}

func (c *current) onDocumentFragment1179() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1179()
}

func (c *current) onDocumentFragment1162(cells interface{}) (interface{}, error) {

	return cells, nil
}

func (p *parser) callonDocumentFragment1162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1162(stack["cells"])
}

func (c *current) onDocumentFragment1196() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1196()
}

func (c *current) onDocumentFragment1199() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1199()
}

func (c *current) onDocumentFragment1214() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1214()
}

func (c *current) onDocumentFragment1217() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1217()
}

func (c *current) onDocumentFragment1209() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1209()
}

func (c *current) onDocumentFragment1226() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1226()
}

func (c *current) onDocumentFragment1231() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1231()
}

func (c *current) onDocumentFragment1234() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1234()
}

func (c *current) onDocumentFragment1248() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1248()
}

func (c *current) onDocumentFragment1251() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1251()
}

func (c *current) onDocumentFragment1266() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1266()
}

func (c *current) onDocumentFragment1269() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1269()
}

func (c *current) onDocumentFragment1261() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1261()
}

func (c *current) onDocumentFragment1280() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1280()
}

func (c *current) onDocumentFragment1285() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1285()
}

func (c *current) onDocumentFragment1290() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1290()
}

func (c *current) onDocumentFragment1241(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1241(stack["content"])
}

func (c *current) onDocumentFragment1189(format, content interface{}) (interface{}, error) {
	return types.NewMultilineTableCell(content.([]interface{}), format)

}

func (p *parser) callonDocumentFragment1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1189(stack["format"], stack["content"])
}

func (c *current) onDocumentFragment1186(cells interface{}) (interface{}, error) {
	return cells, nil
}

func (p *parser) callonDocumentFragment1186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1186(stack["cells"])
}

func (c *current) onDocumentFragment1159(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1159(stack["cells"])
}

func (c *current) onDocumentFragment1302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1302()
}

func (c *current) onDocumentFragment1305() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1305()
}

func (c *current) onDocumentFragment1297() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1297()
}

func (c *current) onDocumentFragment1138(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDocumentFragment1138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1138(stack["content"])
}

func (c *current) onDocumentFragment1316() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1316()
}

func (c *current) onDocumentFragment1319() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1319()
}

func (c *current) onDocumentFragment1106(lines interface{}) (interface{}, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonDocumentFragment1106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1106(stack["lines"])
}

func (c *current) onDocumentFragment1334() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1334()
}

func (c *current) onDocumentFragment1338() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1338()
}

func (c *current) onDocumentFragment1328(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentFragment1328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1328(stack["content"])
}

func (c *current) onDocumentFragment1347() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1347() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1347()
}

func (c *current) onDocumentFragment1353() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1353()
}

func (c *current) onDocumentFragment1356() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1356()
}

func (c *current) onDocumentFragment1373() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1373()
}

func (c *current) onDocumentFragment1376() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1376()
}

func (c *current) onDocumentFragment1365() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1365()
}

func (c *current) onDocumentFragment1386() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1386()
}

func (c *current) onDocumentFragment1389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1389()
}

func (c *current) onDocumentFragment1349(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1349(stack["content"])
}

func (c *current) onDocumentFragment1345(frontmatter interface{}) (interface{}, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1345(stack["frontmatter"])
}

func (c *current) onDocumentFragment1397(attributes, element interface{}) (bool, error) {
	// there must be at least `attributes` or `element`
	return attributes != nil || element != nil, nil

}

func (p *parser) callonDocumentFragment1397() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1397(stack["attributes"], stack["element"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.disableFrontMatterRule()           // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule(element) // not allowed anymore, based on element that was found

	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements3() error {
	c.globalStore[withinDelimitedBlockKey] = true
	return nil

}

func (p *parser) callonDelimitedBlockElements3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements3()
}

func (c *current) onDelimitedBlockElements11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements11()
}

func (c *current) onDelimitedBlockElements7(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements7(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value, string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue10()
}

func (c *current) onAttributeDeclarationValue16() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue16()
}

func (c *current) onAttributeDeclarationValue7(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements interface{}) (interface{}, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		elements = append(elements.([]interface{}), otherElements...)
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onAttributeDeclarationValueElements1(elements interface{}) (interface{}, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValueElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElements1(stack["elements"])
}

func (c *current) onAttributeDeclarationValueElement8() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement8()
}

func (c *current) onAttributeDeclarationValueElement11() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValueElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement11()
}

func (c *current) onAttributeDeclarationValueElement21() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement21()
}

func (c *current) onAttributeDeclarationValueElement26() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonAttributeDeclarationValueElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement26()
}

func (c *current) onAttributeDeclarationValueElement28() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement28()
}

func (c *current) onAttributeDeclarationValueElement24(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement24(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement30() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement30()
}

func (c *current) onAttributeDeclarationValueElement34() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonAttributeDeclarationValueElement34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement34()
}

func (c *current) onAttributeDeclarationValueElement41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement41()
}

func (c *current) onAttributeDeclarationValueElement37(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValueElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement37(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement51()
}

func (c *current) onAttributeDeclarationValueElement47(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement47(stack["name"])
}

func (c *current) onAttributeDeclarationValueElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement61()
}

func (c *current) onAttributeDeclarationValueElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement73()
}

func (c *current) onAttributeDeclarationValueElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement75()
}

func (c *current) onAttributeDeclarationValueElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement68(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement57(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement83()
}

func (c *current) onAttributeDeclarationValueElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValueElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement95()
}

func (c *current) onAttributeDeclarationValueElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValueElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement97()
}

func (c *current) onAttributeDeclarationValueElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValueElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement90(stack["start"])
}

func (c *current) onAttributeDeclarationValueElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValueElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement79(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValueElement32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement32(stack["element"])
}

func (c *current) onAttributeDeclarationValueElement1(element interface{}) (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("new AttributeDeclarationValueElement: %s", spew.Sdump(element))
	}
	return element, nil

}

func (p *parser) callonAttributeDeclarationValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValueElement1(stack["element"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes32(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"])
}

func (c *current) onBlockAttributes46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes46()
}

func (c *current) onBlockAttributes42(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes42(stack["name"])
}

func (c *current) onBlockAttributes56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes56()
}

func (c *current) onBlockAttributes68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes68()
}

func (c *current) onBlockAttributes70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes63(stack["start"])
}

func (c *current) onBlockAttributes52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes52(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes78()
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes92() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes92()
}

func (c *current) onBlockAttributes85(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes85(stack["start"])
}

func (c *current) onBlockAttributes74(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes74(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes100() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103()
}

func (c *current) onBlockAttributes116() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes116()
}

func (c *current) onBlockAttributes119() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes119()
}

func (c *current) onBlockAttributes111() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes111()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes142() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes142()
}

func (c *current) onBlockAttributes144() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes144()
}

func (c *current) onBlockAttributes150() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonBlockAttributes150() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes150()
}

func (c *current) onBlockAttributes158() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes158()
}

func (c *current) onBlockAttributes160() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes160()
}

func (c *current) onBlockAttributes137() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes137()
}

func (c *current) onBlockAttributes169() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes169()
}

func (c *current) onBlockAttributes178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes178()
}

func (c *current) onBlockAttributes180() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes180()
}

func (c *current) onBlockAttributes188() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonBlockAttributes188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes188()
}

func (c *current) onBlockAttributes191() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonBlockAttributes191() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes191()
}

func (c *current) onBlockAttributes194() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonBlockAttributes194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes194()
}

func (c *current) onBlockAttributes197() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonBlockAttributes197() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes197()
}

func (c *current) onBlockAttributes171() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes171()
}

func (c *current) onBlockAttributes203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes203()
}

func (c *current) onBlockAttributes199(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes199(stack["name"])
}

func (c *current) onBlockAttributes213() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes213()
}

func (c *current) onBlockAttributes209(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes209(stack["name"])
}

func (c *current) onBlockAttributes219() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes219()
}

func (c *current) onBlockAttributes129(elements interface{}) (interface{}, error) {
	return types.NewTitleAttribute(types.Reduce(elements, strings.TrimSpace))

}

func (p *parser) callonBlockAttributes129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes129(stack["elements"])
}

func (c *current) onBlockAttributes222() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes222()
}

func (c *current) onBlockAttributes225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes225()
}

func (c *current) onBlockAttributes238() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes238()
}

func (c *current) onBlockAttributes241() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes241()
}

func (c *current) onBlockAttributes233() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes233()
}

func (c *current) onBlockAttributes126(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes126(stack["title"])
}

func (c *current) onBlockAttributes253() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes253()
}

func (c *current) onBlockAttributes256() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes256()
}

func (c *current) onBlockAttributes269() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes269()
}

func (c *current) onBlockAttributes272() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes272()
}

func (c *current) onBlockAttributes264() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes264()
}

func (c *current) onBlockAttributes248(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes248(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes23() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes23()
}

func (c *current) onFirstPositionalAttributes25(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes25(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue10() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue10()
}

func (c *current) onShortHandAttributeValue15() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonShortHandAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue22()
}

func (c *current) onShortHandAttributeValue18(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonShortHandAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue18(stack["name"])
}

func (c *current) onShortHandAttributeValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue32()
}

func (c *current) onShortHandAttributeValue28(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonShortHandAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue28(stack["name"])
}

func (c *current) onShortHandAttributeValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue42()
}

func (c *current) onShortHandAttributeValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue54()
}

func (c *current) onShortHandAttributeValue56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue56()
}

func (c *current) onShortHandAttributeValue49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue49(stack["start"])
}

func (c *current) onShortHandAttributeValue38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonShortHandAttributeValue38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue64()
}

func (c *current) onShortHandAttributeValue76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue76()
}

func (c *current) onShortHandAttributeValue78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue78()
}

func (c *current) onShortHandAttributeValue71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue71(stack["start"])
}

func (c *current) onShortHandAttributeValue60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonShortHandAttributeValue60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue60(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue13(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonShortHandAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue13(stack["element"])
}

func (c *current) onShortHandAttributeValue82() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue82()
}

func (c *current) onShortHandAttributeValue88() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue88()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute13() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute13()
}

func (c *current) onNamedAttribute21() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNamedAttribute21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute21()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue12() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue12()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent8() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent8()
}

func (c *current) onSingleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonSingleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent13()
}

func (c *current) onSingleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent20()
}

func (c *current) onSingleQuotedAttributeValueContent16(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent16(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent30()
}

func (c *current) onSingleQuotedAttributeValueContent26(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent26(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent40()
}

func (c *current) onSingleQuotedAttributeValueContent52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent52()
}

func (c *current) onSingleQuotedAttributeValueContent54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent54()
}

func (c *current) onSingleQuotedAttributeValueContent47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent47(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent36(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent62()
}

func (c *current) onSingleQuotedAttributeValueContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent74()
}

func (c *current) onSingleQuotedAttributeValueContent76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent76()
}

func (c *current) onSingleQuotedAttributeValueContent69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent69(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent58(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onSingleQuotedAttributeValueContent80() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeValueContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent80()
}

func (c *current) onSingleQuotedAttributeValueContent84() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeValueContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent84()
}

func (c *current) onSingleQuotedAttributeValueContent86() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent86()
}

func (c *current) onSingleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent8() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent8()
}

func (c *current) onDoubleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonDoubleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent13()
}

func (c *current) onDoubleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent20()
}

func (c *current) onDoubleQuotedAttributeValueContent16(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent16(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent30()
}

func (c *current) onDoubleQuotedAttributeValueContent26(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent26(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent40()
}

func (c *current) onDoubleQuotedAttributeValueContent52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent52()
}

func (c *current) onDoubleQuotedAttributeValueContent54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent54()
}

func (c *current) onDoubleQuotedAttributeValueContent47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent47(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent62()
}

func (c *current) onDoubleQuotedAttributeValueContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent74()
}

func (c *current) onDoubleQuotedAttributeValueContent76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent76()
}

func (c *current) onDoubleQuotedAttributeValueContent69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent69(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValueContent80() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeValueContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent80()
}

func (c *current) onDoubleQuotedAttributeValueContent85() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeValueContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent85()
}

func (c *current) onDoubleQuotedAttributeValueContent87() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent87()
}

func (c *current) onDoubleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue15() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15()
}

func (c *current) onUnquotedAttributeValue22() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue22()
}

func (c *current) onUnquotedAttributeValue18(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonUnquotedAttributeValue18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue18(stack["name"])
}

func (c *current) onUnquotedAttributeValue32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue32()
}

func (c *current) onUnquotedAttributeValue28(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28(stack["name"])
}

func (c *current) onUnquotedAttributeValue42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue42()
}

func (c *current) onUnquotedAttributeValue54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue54()
}

func (c *current) onUnquotedAttributeValue56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue56()
}

func (c *current) onUnquotedAttributeValue49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue49(stack["start"])
}

func (c *current) onUnquotedAttributeValue38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue38(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue64()
}

func (c *current) onUnquotedAttributeValue76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue76()
}

func (c *current) onUnquotedAttributeValue78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue78()
}

func (c *current) onUnquotedAttributeValue71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue71(stack["start"])
}

func (c *current) onUnquotedAttributeValue60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue60(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue13(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13(stack["element"])
}

func (c *current) onUnquotedAttributeValue83() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue83()
}

func (c *current) onUnquotedAttributeValue85() (interface{}, error) {
	// not within brackets and stop on space and quotation marks (`"')
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue85()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference35()
}

func (c *current) onCrossReference31(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31(stack["name"])
}

func (c *current) onCrossReference41() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference41()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference48() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48()
}

func (c *current) onCrossReference44(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44(stack["id"])
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference20() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference20()
}

func (c *current) onExternalCrossReference31() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference31()
}

func (c *current) onExternalCrossReference41() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference41()
}

func (c *current) onExternalCrossReference43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference43()
}

func (c *current) onExternalCrossReference51() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonExternalCrossReference51() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference51()
}

func (c *current) onExternalCrossReference54() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonExternalCrossReference54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference54()
}

func (c *current) onExternalCrossReference57() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonExternalCrossReference57() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference57()
}

func (c *current) onExternalCrossReference60() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonExternalCrossReference60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference60()
}

func (c *current) onExternalCrossReference34() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference34()
}

func (c *current) onExternalCrossReference67() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference67()
}

func (c *current) onExternalCrossReference71() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonExternalCrossReference71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference71()
}

func (c *current) onExternalCrossReference78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78()
}

func (c *current) onExternalCrossReference74(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74(stack["name"])
}

func (c *current) onExternalCrossReference88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference88()
}

func (c *current) onExternalCrossReference84(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference84(stack["name"])
}

func (c *current) onExternalCrossReference98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98()
}

func (c *current) onExternalCrossReference110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference110()
}

func (c *current) onExternalCrossReference112() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference112()
}

func (c *current) onExternalCrossReference105(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference105(stack["start"])
}

func (c *current) onExternalCrossReference94(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference94(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference120()
}

func (c *current) onExternalCrossReference132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference132()
}

func (c *current) onExternalCrossReference134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference134()
}

func (c *current) onExternalCrossReference127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference127(stack["start"])
}

func (c *current) onExternalCrossReference116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference116(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference69(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference69(stack["element"])
}

func (c *current) onExternalCrossReference138() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference138()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference144() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference144()
}

func (c *current) onExternalCrossReference140(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference140(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader12() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader12()
}

func (c *current) onDocumentHeader16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader16()
}

func (c *current) onDocumentHeader6(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader6(stack["content"])
}

func (c *current) onDocumentHeader28() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader28()
}

func (c *current) onDocumentHeader34() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader34()
}

func (c *current) onDocumentHeader37() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader37()
}

func (c *current) onDocumentHeader25(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader25(stack["delimiter"])
}

func (c *current) onDocumentHeader53() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader53()
}

func (c *current) onDocumentHeader59() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader59()
}

func (c *current) onDocumentHeader62() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader62()
}

func (c *current) onDocumentHeader50(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader50(stack["delimiter"])
}

func (c *current) onDocumentHeader77() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader77()
}

func (c *current) onDocumentHeader81() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader81()
}

func (c *current) onDocumentHeader72(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader72(stack["content"])
}

func (c *current) onDocumentHeader46(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader46(stack["line"])
}

func (c *current) onDocumentHeader93() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader93()
}

func (c *current) onDocumentHeader99() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader99()
}

func (c *current) onDocumentHeader102() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader102()
}

func (c *current) onDocumentHeader90(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader90(stack["delimiter"])
}

func (c *current) onDocumentHeader23(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader23(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader121() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader121()
}

func (c *current) onDocumentHeader125() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader125()
}

func (c *current) onDocumentHeader115(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader115(stack["content"])
}

func (c *current) onDocumentHeader137() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader137()
}

func (c *current) onDocumentHeader143() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader143()
}

func (c *current) onDocumentHeader146() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader146()
}

func (c *current) onDocumentHeader134(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader134(stack["delimiter"])
}

func (c *current) onDocumentHeader162() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader162()
}

func (c *current) onDocumentHeader168() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader168()
}

func (c *current) onDocumentHeader171() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader171()
}

func (c *current) onDocumentHeader159(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader159(stack["delimiter"])
}

func (c *current) onDocumentHeader186() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader186()
}

func (c *current) onDocumentHeader190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader190()
}

func (c *current) onDocumentHeader181(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader181(stack["content"])
}

func (c *current) onDocumentHeader155(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader155(stack["line"])
}

func (c *current) onDocumentHeader202() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader202()
}

func (c *current) onDocumentHeader208() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader208()
}

func (c *current) onDocumentHeader211() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader211()
}

func (c *current) onDocumentHeader199(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader199(stack["delimiter"])
}

func (c *current) onDocumentHeader132(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader132(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader230() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader230()
}

func (c *current) onDocumentHeader241() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader241()
}

func (c *current) onDocumentHeader245() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader245()
}

func (c *current) onDocumentHeader249() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader249()
}

func (c *current) onDocumentHeader253() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader253()
}

func (c *current) onDocumentHeader257() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader257()
}

func (c *current) onDocumentHeader261() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader261()
}

func (c *current) onDocumentHeader238(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader238(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader271()
}

func (c *current) onDocumentHeader265(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader265(stack["email"])
}

func (c *current) onDocumentHeader276() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader276()
}

func (c *current) onDocumentHeader281() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader281()
}

func (c *current) onDocumentHeader283(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader283() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader283(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader234(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader234(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader285() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader285()
}

func (c *current) onDocumentHeader227(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader227(stack["authors"])
}

func (c *current) onDocumentHeader300() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader300()
}

func (c *current) onDocumentHeader304() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader304()
}

func (c *current) onDocumentHeader294(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader294(stack["content"])
}

func (c *current) onDocumentHeader316() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader316()
}

func (c *current) onDocumentHeader322() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader322()
}

func (c *current) onDocumentHeader325() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader325()
}

func (c *current) onDocumentHeader313(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader313(stack["delimiter"])
}

func (c *current) onDocumentHeader341() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader341()
}

func (c *current) onDocumentHeader347() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader347()
}

func (c *current) onDocumentHeader350() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader350()
}

func (c *current) onDocumentHeader338(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader338(stack["delimiter"])
}

func (c *current) onDocumentHeader365() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader365()
}

func (c *current) onDocumentHeader369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader369()
}

func (c *current) onDocumentHeader360(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader360(stack["content"])
}

func (c *current) onDocumentHeader334(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader334(stack["line"])
}

func (c *current) onDocumentHeader381() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader381()
}

func (c *current) onDocumentHeader387() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader387()
}

func (c *current) onDocumentHeader390() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader390()
}

func (c *current) onDocumentHeader378(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader378(stack["delimiter"])
}

func (c *current) onDocumentHeader311(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader311(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader404() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader404()
}

func (c *current) onDocumentHeader414() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader414()
}

func (c *current) onDocumentHeader428() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader428()
}

func (c *current) onDocumentHeader420() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader420()
}

func (c *current) onDocumentHeader436() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader436()
}

func (c *current) onDocumentHeader443() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader443()
}

func (c *current) onDocumentHeader410(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader410(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader449() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader449()
}

func (c *current) onDocumentHeader456() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader456()
}

func (c *current) onDocumentHeader446(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader446(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader460() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader460()
}

func (c *current) onDocumentHeader401(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader401(stack["revision"])
}

func (c *current) onDocumentHeader222(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentAuthorsAndRevision(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader222(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader475() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader475()
}

func (c *current) onDocumentHeader482() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader482()
}

func (c *current) onDocumentHeader485() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader485()
}

func (c *current) onDocumentHeader471(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader471(stack["name"])
}

func (c *current) onDocumentHeader496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader496()
}

func (c *current) onDocumentHeader503() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader503()
}

func (c *current) onDocumentHeader506() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader506()
}

func (c *current) onDocumentHeader492(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeader492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader492(stack["name"])
}

func (c *current) onDocumentHeader519() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader519()
}

func (c *current) onDocumentHeader523() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader523() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader523()
}

func (c *current) onDocumentHeader513(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonDocumentHeader513() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader513(stack["content"])
}

func (c *current) onDocumentHeader535() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader535()
}

func (c *current) onDocumentHeader541() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader541()
}

func (c *current) onDocumentHeader544() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader544()
}

func (c *current) onDocumentHeader532(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader532(stack["delimiter"])
}

func (c *current) onDocumentHeader560() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader560()
}

func (c *current) onDocumentHeader566() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader566()
}

func (c *current) onDocumentHeader569() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader569()
}

func (c *current) onDocumentHeader557(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader557(stack["delimiter"])
}

func (c *current) onDocumentHeader584() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader584()
}

func (c *current) onDocumentHeader588() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader588()
}

func (c *current) onDocumentHeader579(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader579(stack["content"])
}

func (c *current) onDocumentHeader553(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader553(stack["line"])
}

func (c *current) onDocumentHeader600() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader600()
}

func (c *current) onDocumentHeader606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentHeader606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader606()
}

func (c *current) onDocumentHeader609() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader609()
}

func (c *current) onDocumentHeader597(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader597(stack["delimiter"])
}

func (c *current) onDocumentHeader530(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader530(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader1(title, authorsAndRevision, extraElements interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authorsAndRevision, extraElements.([]interface{}))

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["authorsAndRevision"], stack["extraElements"])
}

func (c *current) onDocumentTitle4() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentTitle4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle4()
}

func (c *current) onDocumentTitle10() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentTitle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle10()
}

func (c *current) onDocumentTitle1(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentTitle1(stack["title"])
}

func (c *current) onDocumentAuthorFullName4() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName4()
}

func (c *current) onDocumentAuthorFullName8() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName8()
}

func (c *current) onDocumentAuthorFullName12() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName12()
}

func (c *current) onDocumentAuthorFullName16() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName16()
}

func (c *current) onDocumentAuthorFullName20() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName20()
}

func (c *current) onDocumentAuthorFullName24() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentAuthorFullName24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName24()
}

func (c *current) onDocumentAuthorFullName1(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentAuthorFullName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorFullName1(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onInlineButton3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineButton3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton3()
}

func (c *current) onInlineButton1(attributes interface{}) (interface{}, error) {
	return types.NewInlineButton(attributes.(types.Attributes))

}

func (p *parser) callonInlineButton1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton1(stack["attributes"])
}

func (c *current) onInlineMenu3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineMenu3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu3()
}

func (c *current) onInlineMenu6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMenu6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu6()
}

func (c *current) onInlineMenu1(id, attributes interface{}) (interface{}, error) {
	return types.NewInlineMenu(id.(string), attributes.(types.Attributes))

}

func (p *parser) callonInlineMenu1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu1(stack["id"], stack["attributes"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent10() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonIndexTermContent10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent10()
}

func (c *current) onIndexTermContent12() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent12()
}

func (c *current) onIndexTermContent18() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonIndexTermContent18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent18()
}

func (c *current) onIndexTermContent26() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonIndexTermContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent26()
}

func (c *current) onIndexTermContent28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent28()
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent38() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonIndexTermContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent38()
}

func (c *current) onIndexTermContent42() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonIndexTermContent42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent42()
}

func (c *current) onIndexTermContent44() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent44()
}

func (c *current) onIndexTermContent40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent40(stack["element"])
}

func (c *current) onIndexTermContent50() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent50()
}

func (c *current) onIndexTermContent46(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent46(stack["ref"])
}

func (c *current) onIndexTermContent54() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent54()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock9()
}

func (c *current) onImageBlock26() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock26()
}

func (c *current) onImageBlock30() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonImageBlock30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock30()
}

func (c *current) onImageBlock41() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock41()
}

func (c *current) onImageBlock51() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock51()
}

func (c *current) onImageBlock53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock53()
}

func (c *current) onImageBlock61() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonImageBlock61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock61()
}

func (c *current) onImageBlock64() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonImageBlock64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock64()
}

func (c *current) onImageBlock67() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonImageBlock67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock67()
}

func (c *current) onImageBlock70() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonImageBlock70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock70()
}

func (c *current) onImageBlock44() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonImageBlock44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock44()
}

func (c *current) onImageBlock77() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock77()
}

func (c *current) onImageBlock81() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonImageBlock81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock81()
}

func (c *current) onImageBlock88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock88()
}

func (c *current) onImageBlock84(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock84(stack["name"])
}

func (c *current) onImageBlock98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock98()
}

func (c *current) onImageBlock94(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonImageBlock94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock94(stack["name"])
}

func (c *current) onImageBlock108() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock108()
}

func (c *current) onImageBlock120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock120()
}

func (c *current) onImageBlock122() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock115(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock115(stack["start"])
}

func (c *current) onImageBlock104(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock104(stack["name"], stack["start"])
}

func (c *current) onImageBlock130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock130()
}

func (c *current) onImageBlock142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock142()
}

func (c *current) onImageBlock144() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock144()
}

func (c *current) onImageBlock137(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock137(stack["start"])
}

func (c *current) onImageBlock126(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock126(stack["name"], stack["start"])
}

func (c *current) onImageBlock79(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock79(stack["element"])
}

func (c *current) onImageBlock148() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock148()
}

func (c *current) onImageBlock19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock19(stack["elements"])
}

func (c *current) onImageBlock154() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock154()
}

func (c *current) onImageBlock150(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock150(stack["ref"])
}

func (c *current) onImageBlock5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock161() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonImageBlock161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock161()
}

func (c *current) onImageBlock164() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock164()
}

func (c *current) onImageBlock1(path, attributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage11()
}

func (c *current) onInlineImage28() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage28()
}

func (c *current) onInlineImage32() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonInlineImage32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage32()
}

func (c *current) onInlineImage43() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineImage43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage43()
}

func (c *current) onInlineImage53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineImage53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage53()
}

func (c *current) onInlineImage55() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineImage55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage55()
}

func (c *current) onInlineImage63() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonInlineImage63() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage63()
}

func (c *current) onInlineImage66() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonInlineImage66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage66()
}

func (c *current) onInlineImage69() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonInlineImage69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage69()
}

func (c *current) onInlineImage72() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonInlineImage72() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage72()
}

func (c *current) onInlineImage46() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonInlineImage46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage46()
}

func (c *current) onInlineImage79() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineImage79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage79()
}

func (c *current) onInlineImage83() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonInlineImage83() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage83()
}

func (c *current) onInlineImage90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage90()
}

func (c *current) onInlineImage86(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage86(stack["name"])
}

func (c *current) onInlineImage100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage100()
}

func (c *current) onInlineImage96(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonInlineImage96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage96(stack["name"])
}

func (c *current) onInlineImage110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage110()
}

func (c *current) onInlineImage122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage122()
}

func (c *current) onInlineImage124() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage124()
}

func (c *current) onInlineImage117(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage117(stack["start"])
}

func (c *current) onInlineImage106(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage106(stack["name"], stack["start"])
}

func (c *current) onInlineImage132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage132()
}

func (c *current) onInlineImage144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage144()
}

func (c *current) onInlineImage146() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage146()
}

func (c *current) onInlineImage139(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage139(stack["start"])
}

func (c *current) onInlineImage128(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage128(stack["name"], stack["start"])
}

func (c *current) onInlineImage81(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage81(stack["element"])
}

func (c *current) onInlineImage150() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage150()
}

func (c *current) onInlineImage21(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage21(stack["elements"])
}

func (c *current) onInlineImage156() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage156()
}

func (c *current) onInlineImage152(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage152(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote6() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote6()
}

func (c *current) onInlineFootnote1(ref, elements interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref, elements.([]interface{}))

}

func (p *parser) callonInlineFootnote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote1(stack["ref"], stack["elements"])
}

func (c *current) onFootnoteElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElements1(stack["elements"])
}

func (c *current) onFootnoteElement12() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFootnoteElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement12()
}

func (c *current) onFootnoteElement14() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement14()
}

func (c *current) onFootnoteElement20() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonFootnoteElement20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement20()
}

func (c *current) onFootnoteElement28() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFootnoteElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement28()
}

func (c *current) onFootnoteElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement30()
}

func (c *current) onFootnoteElement7() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFootnoteElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement7()
}

func (c *current) onFootnoteElement39() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement39()
}

func (c *current) onFootnoteElement42() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement42()
}

func (c *current) onFootnoteElement48() (interface{}, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonFootnoteElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement48()
}

func (c *current) onFootnoteElement55() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonFootnoteElement55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement55()
}

func (c *current) onFootnoteElement56() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonFootnoteElement56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement56()
}

func (c *current) onFootnoteElement53() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonFootnoteElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement53()
}

func (c *current) onFootnoteElement70() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFootnoteElement70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement70()
}

func (c *current) onFootnoteElement72() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement72()
}

func (c *current) onFootnoteElement80() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonFootnoteElement80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement80()
}

func (c *current) onFootnoteElement83() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonFootnoteElement83() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement83()
}

func (c *current) onFootnoteElement86() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonFootnoteElement86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement86()
}

func (c *current) onFootnoteElement89() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonFootnoteElement89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement89()
}

func (c *current) onFootnoteElement63() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement63()
}

func (c *current) onFootnoteElement93() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonFootnoteElement93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement93()
}

func (c *current) onFootnoteElement95() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonFootnoteElement95() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement95()
}

func (c *current) onFootnoteElement97() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFootnoteElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement97()
}

func (c *current) onFootnoteElement101() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement101()
}

func (c *current) onFootnoteElement91() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonFootnoteElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement91()
}

func (c *current) onFootnoteElement110() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonFootnoteElement110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement110()
}

func (c *current) onFootnoteElement117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement117()
}

func (c *current) onFootnoteElement113(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFootnoteElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement113(stack["name"])
}

func (c *current) onFootnoteElement127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement127()
}

func (c *current) onFootnoteElement123(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFootnoteElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement123(stack["name"])
}

func (c *current) onFootnoteElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement137()
}

func (c *current) onFootnoteElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement149()
}

func (c *current) onFootnoteElement151() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFootnoteElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement151()
}

func (c *current) onFootnoteElement144(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFootnoteElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement144(stack["start"])
}

func (c *current) onFootnoteElement133(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFootnoteElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement133(stack["name"], stack["start"])
}

func (c *current) onFootnoteElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement159()
}

func (c *current) onFootnoteElement171() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement171()
}

func (c *current) onFootnoteElement173() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFootnoteElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement173()
}

func (c *current) onFootnoteElement166(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFootnoteElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement166(stack["start"])
}

func (c *current) onFootnoteElement155(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFootnoteElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement155(stack["name"], stack["start"])
}

func (c *current) onFootnoteElement108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement108(stack["element"])
}

func (c *current) onFootnoteElement179() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonFootnoteElement179() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement179()
}

func (c *current) onFootnoteElement181() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFootnoteElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement181()
}

func (c *current) onFootnoteElement177(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement177(stack["element"])
}

func (c *current) onFootnoteElement183() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement183()
}

func (c *current) onFootnoteElement188() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonFootnoteElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement188()
}

func (c *current) onFootnoteElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonFootnoteElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement1(stack["element"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink11()
}

func (c *current) onLink27() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink27()
}

func (c *current) onLink31() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink31()
}

func (c *current) onLink42() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLink42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink42()
}

func (c *current) onLink52() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink52()
}

func (c *current) onLink54() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink54()
}

func (c *current) onLink62() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonLink62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink62()
}

func (c *current) onLink65() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonLink65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink65()
}

func (c *current) onLink68() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonLink68() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink68()
}

func (c *current) onLink71() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonLink71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink71()
}

func (c *current) onLink45() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink45()
}

func (c *current) onLink78() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink78()
}

func (c *current) onLink82() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonLink82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink82()
}

func (c *current) onLink89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink89()
}

func (c *current) onLink85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink85(stack["name"])
}

func (c *current) onLink99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink99()
}

func (c *current) onLink95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink95(stack["name"])
}

func (c *current) onLink109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink109()
}

func (c *current) onLink121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink121()
}

func (c *current) onLink123() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink123()
}

func (c *current) onLink116(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink116(stack["start"])
}

func (c *current) onLink105(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink105(stack["name"], stack["start"])
}

func (c *current) onLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink131()
}

func (c *current) onLink143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink143()
}

func (c *current) onLink145() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink145()
}

func (c *current) onLink138(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink138(stack["start"])
}

func (c *current) onLink127(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink127(stack["name"], stack["start"])
}

func (c *current) onLink80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink80(stack["element"])
}

func (c *current) onLink149() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink149()
}

func (c *current) onLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink20(stack["elements"])
}

func (c *current) onLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink2(url interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"])
}

func (c *current) onLink160() (interface{}, error) {
	// `'
	return string(c.text), nil

}

func (p *parser) callonLink160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink160()
}

func (c *current) onLink163(local interface{}) (bool, error) {
	// must not start or end with `.` nor contain `..`
	return !strings.HasPrefix(local.(string), ".") &&
		!strings.HasSuffix(local.(string), ".") &&
		!strings.Contains(local.(string), ".."), nil

}

func (p *parser) callonLink163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink163(stack["local"])
}

func (c *current) onLink157(local interface{}) (interface{}, error) {
	return local, nil

}

func (p *parser) callonLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink157(stack["local"])
}

func (c *current) onLink169() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink169()
}

func (c *current) onLink178(domain interface{}) (bool, error) {
	// must not end with `-`
	return !strings.HasSuffix(domain.(string), "-"), nil

}

func (p *parser) callonLink178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink178(stack["domain"])
}

func (c *current) onLink166(domain interface{}) (interface{}, error) {
	return domain, nil

}

func (p *parser) callonLink166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink166(stack["domain"])
}

func (c *current) onLink154(local, domain interface{}) (interface{}, error) {
	return types.NewEmailAddressLink(local.(string) + "@" + domain.(string))
}

func (p *parser) callonLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink154(stack["local"], stack["domain"])
}

func (c *current) onRelativeLink10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink10()
}

func (c *current) onRelativeLink27() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink27()
}

func (c *current) onRelativeLink31() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonRelativeLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink31()
}

func (c *current) onRelativeLink42() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink42()
}

func (c *current) onRelativeLink52() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink52()
}

func (c *current) onRelativeLink54() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonRelativeLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink54()
}

func (c *current) onRelativeLink62() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonRelativeLink62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink62()
}

func (c *current) onRelativeLink65() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonRelativeLink65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink65()
}

func (c *current) onRelativeLink68() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonRelativeLink68() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink68()
}

func (c *current) onRelativeLink71() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonRelativeLink71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink71()
}

func (c *current) onRelativeLink45() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonRelativeLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink45()
}

func (c *current) onRelativeLink78() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink78()
}

func (c *current) onRelativeLink82() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonRelativeLink82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink82()
}

func (c *current) onRelativeLink89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink89()
}

func (c *current) onRelativeLink85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink85(stack["name"])
}

func (c *current) onRelativeLink99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink99()
}

func (c *current) onRelativeLink95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink95(stack["name"])
}

func (c *current) onRelativeLink109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink109()
}

func (c *current) onRelativeLink121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink121()
}

func (c *current) onRelativeLink123() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink123()
}

func (c *current) onRelativeLink116(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink116(stack["start"])
}

func (c *current) onRelativeLink105(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink105(stack["name"], stack["start"])
}

func (c *current) onRelativeLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink131()
}

func (c *current) onRelativeLink143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink143()
}

func (c *current) onRelativeLink145() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink145()
}

func (c *current) onRelativeLink138(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink138(stack["start"])
}

func (c *current) onRelativeLink127(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink127(stack["name"], stack["start"])
}

func (c *current) onRelativeLink80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink80(stack["element"])
}

func (c *current) onRelativeLink149() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink149()
}

func (c *current) onRelativeLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink20(stack["elements"])
}

func (c *current) onRelativeLink155() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink155()
}

func (c *current) onRelativeLink151(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink151(stack["ref"])
}

func (c *current) onRelativeLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink6(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink2(stack["url"], stack["attributes"])
}

func (c *current) onRelativeLink169() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink169()
}

func (c *current) onRelativeLink186() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink186()
}

func (c *current) onRelativeLink190() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonRelativeLink190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink190()
}

func (c *current) onRelativeLink201() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink201()
}

func (c *current) onRelativeLink211() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink211()
}

func (c *current) onRelativeLink213() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonRelativeLink213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink213()
}

func (c *current) onRelativeLink221() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonRelativeLink221() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink221()
}

func (c *current) onRelativeLink224() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonRelativeLink224() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink224()
}

func (c *current) onRelativeLink227() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonRelativeLink227() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink227()
}

func (c *current) onRelativeLink230() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonRelativeLink230() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink230()
}

func (c *current) onRelativeLink204() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonRelativeLink204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink204()
}

func (c *current) onRelativeLink237() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRelativeLink237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink237()
}

func (c *current) onRelativeLink241() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonRelativeLink241() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink241()
}

func (c *current) onRelativeLink248() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink248()
}

func (c *current) onRelativeLink244(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink244(stack["name"])
}

func (c *current) onRelativeLink258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink258()
}

func (c *current) onRelativeLink254(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink254(stack["name"])
}

func (c *current) onRelativeLink268() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink268()
}

func (c *current) onRelativeLink280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink280()
}

func (c *current) onRelativeLink282() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink282()
}

func (c *current) onRelativeLink275(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink275(stack["start"])
}

func (c *current) onRelativeLink264(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink264(stack["name"], stack["start"])
}

func (c *current) onRelativeLink290() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink290()
}

func (c *current) onRelativeLink302() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink302()
}

func (c *current) onRelativeLink304() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink304()
}

func (c *current) onRelativeLink297(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink297(stack["start"])
}

func (c *current) onRelativeLink286(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink286(stack["name"], stack["start"])
}

func (c *current) onRelativeLink239(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink239(stack["element"])
}

func (c *current) onRelativeLink308() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink308()
}

func (c *current) onRelativeLink179(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink179(stack["elements"])
}

func (c *current) onRelativeLink314() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink314()
}

func (c *current) onRelativeLink310(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink310(stack["ref"])
}

func (c *current) onRelativeLink165(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink165(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink161(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink11()
}

func (c *current) onExternalLink27() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink27()
}

func (c *current) onExternalLink31() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonExternalLink31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink31()
}

func (c *current) onExternalLink42() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink42()
}

func (c *current) onExternalLink52() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink52()
}

func (c *current) onExternalLink54() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExternalLink54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink54()
}

func (c *current) onExternalLink62() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonExternalLink62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink62()
}

func (c *current) onExternalLink65() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonExternalLink65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink65()
}

func (c *current) onExternalLink68() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonExternalLink68() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink68()
}

func (c *current) onExternalLink71() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonExternalLink71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink71()
}

func (c *current) onExternalLink45() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonExternalLink45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink45()
}

func (c *current) onExternalLink78() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink78()
}

func (c *current) onExternalLink82() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonExternalLink82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82()
}

func (c *current) onExternalLink89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink89()
}

func (c *current) onExternalLink85(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink85(stack["name"])
}

func (c *current) onExternalLink99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink99()
}

func (c *current) onExternalLink95(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink95(stack["name"])
}

func (c *current) onExternalLink109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink109()
}

func (c *current) onExternalLink121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink121()
}

func (c *current) onExternalLink123() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink123()
}

func (c *current) onExternalLink116(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink116(stack["start"])
}

func (c *current) onExternalLink105(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink105(stack["name"], stack["start"])
}

func (c *current) onExternalLink131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink131()
}

func (c *current) onExternalLink143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink143()
}

func (c *current) onExternalLink145() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink145()
}

func (c *current) onExternalLink138(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink138(stack["start"])
}

func (c *current) onExternalLink127(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink127(stack["name"], stack["start"])
}

func (c *current) onExternalLink80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink80(stack["element"])
}

func (c *current) onExternalLink149() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink149()
}

func (c *current) onExternalLink20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink20(stack["elements"])
}

func (c *current) onExternalLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink6(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink162() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink162()
}

func (c *current) onExternalLink178() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink178()
}

func (c *current) onExternalLink182() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonExternalLink182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink182()
}

func (c *current) onExternalLink193() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink193()
}

func (c *current) onExternalLink203() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink203()
}

func (c *current) onExternalLink205() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExternalLink205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink205()
}

func (c *current) onExternalLink213() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonExternalLink213() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink213()
}

func (c *current) onExternalLink216() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonExternalLink216() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink216()
}

func (c *current) onExternalLink219() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonExternalLink219() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink219()
}

func (c *current) onExternalLink222() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonExternalLink222() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink222()
}

func (c *current) onExternalLink196() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonExternalLink196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink196()
}

func (c *current) onExternalLink229() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExternalLink229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink229()
}

func (c *current) onExternalLink233() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonExternalLink233() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink233()
}

func (c *current) onExternalLink240() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink240()
}

func (c *current) onExternalLink236(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink236(stack["name"])
}

func (c *current) onExternalLink250() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink250()
}

func (c *current) onExternalLink246(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonExternalLink246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink246(stack["name"])
}

func (c *current) onExternalLink260() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink260()
}

func (c *current) onExternalLink272() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink272()
}

func (c *current) onExternalLink274() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink274()
}

func (c *current) onExternalLink267(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink267(stack["start"])
}

func (c *current) onExternalLink256(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink256(stack["name"], stack["start"])
}

func (c *current) onExternalLink282() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink282()
}

func (c *current) onExternalLink294() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink294()
}

func (c *current) onExternalLink296() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink296()
}

func (c *current) onExternalLink289(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink289(stack["start"])
}

func (c *current) onExternalLink278(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink278(stack["name"], stack["start"])
}

func (c *current) onExternalLink231(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink231(stack["element"])
}

func (c *current) onExternalLink300() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink300()
}

func (c *current) onExternalLink171(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink171(stack["elements"])
}

func (c *current) onExternalLink157(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink157(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink154(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink154(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements53() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements53()
}

func (c *current) onListElements57() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements57()
}

func (c *current) onListElements49(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawLines"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements70() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements70()
}

func (c *current) onListElements73() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73()
}

func (c *current) onListElements78(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListElements78() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements78(stack["style"])
}

func (c *current) onListElements79(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["style"])
}

func (c *current) onListElements67(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListElements67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements67(stack["style"])
}

func (c *current) onListElements90() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements90()
}

func (c *current) onListElements92() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements92()
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96(stack["style"])
}

func (c *current) onListElements84(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements84(stack["style"])
}

func (c *current) onListElements104() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104()
}

func (c *current) onListElements108() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements108()
}

func (c *current) onListElements100(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["rawLines"])
}

func (c *current) onListElements64(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements64(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements122() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements122()
}

func (c *current) onListElements126(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements126(stack["ref"])
}

func (c *current) onListElements118(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"])
}

func (c *current) onListElements134() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements134()
}

func (c *current) onListElements138() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements138()
}

func (c *current) onListElements130(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListElements130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements130(stack["rawLines"])
}

func (c *current) onListElements115(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListElements115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements115(stack["ref"], stack["description"])
}

func (c *current) onListElements155() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements155()
}

func (c *current) onListElements158(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements158() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements158(stack["separator"])
}

func (c *current) onListElements152(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements152(stack["separator"])
}

func (c *current) onListElements161() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements161()
}

func (c *current) onListElements148() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements148()
}

func (c *current) onListElements173() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements173()
}

func (c *current) onListElements176(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements176() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements176(stack["separator"])
}

func (c *current) onListElements170(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements170(stack["separator"])
}

func (c *current) onListElements182() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements182()
}

func (c *current) onListElements185() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements185()
}

func (c *current) onListElements198() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements198()
}

func (c *current) onListElements201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements193() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements193()
}

func (c *current) onListElements179() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonListElements179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements179()
}

func (c *current) onListElements210() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements210()
}

func (c *current) onListElements214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements214()
}

func (c *current) onListElements218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements218()
}

func (c *current) onListElements208(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListElements208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements208(stack["content"])
}

func (c *current) onListElements145(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements145(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement15() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement15()
}

func (c *current) onExtraListElement18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement18()
}

func (c *current) onExtraListElement10() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement10()
}

func (c *current) onExtraListElement33() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement33()
}

func (c *current) onExtraListElement40() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement40()
}

func (c *current) onExtraListElement43(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement43() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement43(stack["depth"])
}

func (c *current) onExtraListElement37(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement37(stack["depth"])
}

func (c *current) onExtraListElement44() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44()
}

func (c *current) onExtraListElement49() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement49()
}

func (c *current) onExtraListElement53() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement53()
}

func (c *current) onExtraListElement57() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement57()
}

func (c *current) onExtraListElement62() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement62()
}

func (c *current) onExtraListElement67(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement67(stack["prefix"])
}

func (c *current) onExtraListElement30(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement30(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement71(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement71(stack["rawLines"])
}

func (c *current) onExtraListElement27(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement27(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement92() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92()
}

func (c *current) onExtraListElement95() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95()
}

func (c *current) onExtraListElement100(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement100(stack["style"])
}

func (c *current) onExtraListElement101(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement101(stack["style"])
}

func (c *current) onExtraListElement89(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement89(stack["style"])
}

func (c *current) onExtraListElement112() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement112()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement116() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement116()
}

func (c *current) onExtraListElement118(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118(stack["style"])
}

func (c *current) onExtraListElement106(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement106(stack["style"])
}

func (c *current) onExtraListElement126() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement126()
}

func (c *current) onExtraListElement130() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement130()
}

func (c *current) onExtraListElement122(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122(stack["rawLines"])
}

func (c *current) onExtraListElement86(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement144() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement144()
}

func (c *current) onExtraListElement148(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement148(stack["ref"])
}

func (c *current) onExtraListElement140(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement140(stack["ref"])
}

func (c *current) onExtraListElement156() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement156()
}

func (c *current) onExtraListElement160() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement160()
}

func (c *current) onExtraListElement152(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement152(stack["rawLines"])
}

func (c *current) onExtraListElement137(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement137(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement177() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement177()
}

func (c *current) onExtraListElement180(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement180() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["separator"])
}

func (c *current) onExtraListElement174(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement174(stack["separator"])
}

func (c *current) onExtraListElement183() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement170() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170()
}

func (c *current) onExtraListElement195() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195()
}

func (c *current) onExtraListElement198(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement198() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement198(stack["separator"])
}

func (c *current) onExtraListElement192(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement192(stack["separator"])
}

func (c *current) onExtraListElement204() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement204()
}

func (c *current) onExtraListElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207()
}

func (c *current) onExtraListElement220() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement220()
}

func (c *current) onExtraListElement223() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement223()
}

func (c *current) onExtraListElement215() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement215()
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement232() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement232()
}

func (c *current) onExtraListElement236() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement236()
}

func (c *current) onExtraListElement240() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement240()
}

func (c *current) onExtraListElement230(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement230(stack["content"])
}

func (c *current) onExtraListElement167(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement167(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement7(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonExtraListElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement7(stack["element"])
}

func (c *current) onExtraListElement260() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement260()
}

func (c *current) onExtraListElement267() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement267()
}

func (c *current) onExtraListElement270(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement270() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement270(stack["depth"])
}

func (c *current) onExtraListElement264(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264(stack["depth"])
}

func (c *current) onExtraListElement271() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement271()
}

func (c *current) onExtraListElement276() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement276()
}

func (c *current) onExtraListElement280() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement280()
}

func (c *current) onExtraListElement284() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement284()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement294(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement294(stack["prefix"])
}

func (c *current) onExtraListElement257(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement257(stack["prefix"])
}

func (c *current) onExtraListElement302() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement302()
}

func (c *current) onExtraListElement306() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306()
}

func (c *current) onExtraListElement298(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298(stack["rawLines"])
}

func (c *current) onExtraListElement254(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement254(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement319() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement319()
}

func (c *current) onExtraListElement322() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement322()
}

func (c *current) onExtraListElement327(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement327() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement327(stack["style"])
}

func (c *current) onExtraListElement328(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328(stack["style"])
}

func (c *current) onExtraListElement316(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement316(stack["style"])
}

func (c *current) onExtraListElement339() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement339()
}

func (c *current) onExtraListElement341() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341()
}

func (c *current) onExtraListElement343() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement343()
}

func (c *current) onExtraListElement345(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement345(stack["style"])
}

func (c *current) onExtraListElement333(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement333(stack["style"])
}

func (c *current) onExtraListElement353() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement353()
}

func (c *current) onExtraListElement357() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement357()
}

func (c *current) onExtraListElement349(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement349(stack["rawLines"])
}

func (c *current) onExtraListElement313(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement371() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371()
}

func (c *current) onExtraListElement375(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement375() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement375(stack["ref"])
}

func (c *current) onExtraListElement367(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement367(stack["ref"])
}

func (c *current) onExtraListElement383() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement387() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement387()
}

func (c *current) onExtraListElement379(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonExtraListElement379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement379(stack["rawLines"])
}

func (c *current) onExtraListElement364(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonExtraListElement364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement364(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement404() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404()
}

func (c *current) onExtraListElement407(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement407() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407(stack["separator"])
}

func (c *current) onExtraListElement401(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401(stack["separator"])
}

func (c *current) onExtraListElement410() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement410()
}

func (c *current) onExtraListElement397() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement397()
}

func (c *current) onExtraListElement422() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422()
}

func (c *current) onExtraListElement425(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement425() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["separator"])
}

func (c *current) onExtraListElement419(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419(stack["separator"])
}

func (c *current) onExtraListElement431() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement434() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement434()
}

func (c *current) onExtraListElement447() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement447()
}

func (c *current) onExtraListElement450() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement450()
}

func (c *current) onExtraListElement442() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement442()
}

func (c *current) onExtraListElement428() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement459() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement459()
}

func (c *current) onExtraListElement463() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement463()
}

func (c *current) onExtraListElement467() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement467()
}

func (c *current) onExtraListElement457(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonExtraListElement457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement457(stack["content"])
}

func (c *current) onExtraListElement394(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement247(attributes, element interface{}) (interface{}, error) {

	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement481() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement481()
}

func (c *current) onExtraListElement485() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement475(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonExtraListElement475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement475(stack["content"])
}

func (c *current) onExtraListElement500() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement500()
}

func (c *current) onExtraListElement503() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement503()
}

func (c *current) onExtraListElement495() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement495()
}

func (c *current) onExtraListElement514() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement514()
}

func (c *current) onExtraListElement516() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement516()
}

func (c *current) onExtraListElement525() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement525()
}

func (c *current) onExtraListElement532() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement532()
}

func (c *current) onExtraListElement535(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement535() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement535(stack["depth"])
}

func (c *current) onExtraListElement529(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement529() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement529(stack["depth"])
}

func (c *current) onExtraListElement536() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement536()
}

func (c *current) onExtraListElement541() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement541()
}

func (c *current) onExtraListElement545() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement545()
}

func (c *current) onExtraListElement549() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement549()
}

func (c *current) onExtraListElement554() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement554()
}

func (c *current) onExtraListElement559(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement559(stack["prefix"])
}

func (c *current) onExtraListElement522(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement522(stack["prefix"])
}

func (c *current) onExtraListElement566() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement566() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement566()
}

func (c *current) onExtraListElement569() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonExtraListElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement569()
}

func (c *current) onExtraListElement574(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonExtraListElement574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement574(stack["style"])
}

func (c *current) onExtraListElement575(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement575(stack["style"])
}

func (c *current) onExtraListElement563(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563(stack["style"])
}

func (c *current) onExtraListElement583() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement583()
}

func (c *current) onExtraListElement587(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement587() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement587(stack["ref"])
}

func (c *current) onExtraListElement579(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement579(stack["ref"])
}

func (c *current) onExtraListElement599() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement599()
}

func (c *current) onExtraListElement602(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement602() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement602(stack["separator"])
}

func (c *current) onExtraListElement596(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement596(stack["separator"])
}

func (c *current) onExtraListElement605() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement605()
}

func (c *current) onExtraListElement592() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592()
}

func (c *current) onExtraListElement616() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement616()
}

func (c *current) onExtraListElement619(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement619() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement619(stack["separator"])
}

func (c *current) onExtraListElement613(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement613() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement613(stack["separator"])
}

func (c *current) onExtraListElement630() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement630()
}

func (c *current) onExtraListElement636() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement636()
}

func (c *current) onExtraListElement639() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement639()
}

func (c *current) onExtraListElement627(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement627() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement627(stack["delimiter"])
}

func (c *current) onExtraListElement649() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement649()
}

func (c *current) onExtraListElement655() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement655()
}

func (c *current) onExtraListElement658() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement658()
}

func (c *current) onExtraListElement646(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement646(stack["delimiter"])
}

func (c *current) onExtraListElement669() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement669()
}

func (c *current) onExtraListElement673() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement673()
}

func (c *current) onExtraListElement676() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement676()
}

func (c *current) onExtraListElement665(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement665() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement665(stack["language"])
}

func (c *current) onExtraListElement686() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement686() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement686()
}

func (c *current) onExtraListElement692() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement692()
}

func (c *current) onExtraListElement695() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement683(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement683() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement683(stack["delimiter"])
}

func (c *current) onExtraListElement705() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement705()
}

func (c *current) onExtraListElement711() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement711()
}

func (c *current) onExtraListElement714() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement714()
}

func (c *current) onExtraListElement702(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement702(stack["delimiter"])
}

func (c *current) onExtraListElement724() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement724()
}

func (c *current) onExtraListElement730() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement730() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement730()
}

func (c *current) onExtraListElement733() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement733() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement733()
}

func (c *current) onExtraListElement721(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement721() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement721(stack["delimiter"])
}

func (c *current) onExtraListElement743() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement743()
}

func (c *current) onExtraListElement749() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement749() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement749()
}

func (c *current) onExtraListElement752() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement752()
}

func (c *current) onExtraListElement740(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740(stack["delimiter"])
}

func (c *current) onExtraListElement762() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement762()
}

func (c *current) onExtraListElement768() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement768()
}

func (c *current) onExtraListElement771() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement771()
}

func (c *current) onExtraListElement759(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement759(stack["delimiter"])
}

func (c *current) onExtraListElement781() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement781()
}

func (c *current) onExtraListElement787() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement787() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement787()
}

func (c *current) onExtraListElement790() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement790() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement790()
}

func (c *current) onExtraListElement778(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement778(stack["delimiter"])
}

func (c *current) onExtraListElement621(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement621(stack["delimiter"])
}

func (c *current) onExtraListElement798() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement798()
}

func (c *current) onExtraListElement802() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement802()
}

func (c *current) onExtraListElement492(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement492(stack["content"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListContinuation7() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation7()
}

func (c *current) onListContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation9()
}

func (c *current) onListContinuation16() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation16()
}

func (c *current) onListContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation18(stack["offset"])
}

func (c *current) onListContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListContinuationElement13() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement13()
}

func (c *current) onListContinuationElement20() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement20()
}

func (c *current) onListContinuationElement23(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement23(stack["depth"])
}

func (c *current) onListContinuationElement17(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement17(stack["depth"])
}

func (c *current) onListContinuationElement24() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement24()
}

func (c *current) onListContinuationElement29() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement29()
}

func (c *current) onListContinuationElement33() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement33()
}

func (c *current) onListContinuationElement37() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement37()
}

func (c *current) onListContinuationElement42() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement42()
}

func (c *current) onListContinuationElement47(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement47(stack["prefix"])
}

func (c *current) onListContinuationElement10(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement10(stack["prefix"])
}

func (c *current) onListContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement55()
}

func (c *current) onListContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement59()
}

func (c *current) onListContinuationElement51(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement51(stack["rawLines"])
}

func (c *current) onListContinuationElement7(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListContinuationElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement7(stack["prefix"], stack["content"])
}

func (c *current) onListContinuationElement72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement72()
}

func (c *current) onListContinuationElement75() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement75()
}

func (c *current) onListContinuationElement80(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement80(stack["style"])
}

func (c *current) onListContinuationElement81(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement81(stack["style"])
}

func (c *current) onListContinuationElement69(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement69(stack["style"])
}

func (c *current) onListContinuationElement92() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListContinuationElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement92()
}

func (c *current) onListContinuationElement94() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement94()
}

func (c *current) onListContinuationElement96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListContinuationElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement96()
}

func (c *current) onListContinuationElement98(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement98(stack["style"])
}

func (c *current) onListContinuationElement86(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement86(stack["style"])
}

func (c *current) onListContinuationElement106() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement106()
}

func (c *current) onListContinuationElement110() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement110()
}

func (c *current) onListContinuationElement102(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement102(stack["rawLines"])
}

func (c *current) onListContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListContinuationElement124() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement124()
}

func (c *current) onListContinuationElement128(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement128(stack["ref"])
}

func (c *current) onListContinuationElement120(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement120(stack["ref"])
}

func (c *current) onListContinuationElement136() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement136()
}

func (c *current) onListContinuationElement140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement140()
}

func (c *current) onListContinuationElement132(rawLines interface{}) (interface{}, error) {
	return types.NewParagraph(nil, rawLines.([]interface{})...)

}

func (p *parser) callonListContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement132(stack["rawLines"])
}

func (c *current) onListContinuationElement117(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(*types.Paragraph))

}

func (p *parser) callonListContinuationElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement117(stack["ref"], stack["description"])
}

func (c *current) onListContinuationElement157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement157()
}

func (c *current) onListContinuationElement160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement160(stack["separator"])
}

func (c *current) onListContinuationElement154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement154(stack["separator"])
}

func (c *current) onListContinuationElement163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement163()
}

func (c *current) onListContinuationElement150() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement150()
}

func (c *current) onListContinuationElement175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement175()
}

func (c *current) onListContinuationElement178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement178(stack["separator"])
}

func (c *current) onListContinuationElement172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement172(stack["separator"])
}

func (c *current) onListContinuationElement184() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement184()
}

func (c *current) onListContinuationElement187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement187()
}

func (c *current) onListContinuationElement200() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement200()
}

func (c *current) onListContinuationElement203() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement203()
}

func (c *current) onListContinuationElement195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement195()
}

func (c *current) onListContinuationElement181() (interface{}, error) {
	return nil, nil

}

func (p *parser) callonListContinuationElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement181()
}

func (c *current) onListContinuationElement212() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement212()
}

func (c *current) onListContinuationElement216() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListContinuationElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement216()
}

func (c *current) onListContinuationElement220() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement220()
}

func (c *current) onListContinuationElement210(content interface{}) (interface{}, error) {
	return types.NewParagraph(nil, content)

}

func (p *parser) callonListContinuationElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement210(stack["content"])
}

func (c *current) onListContinuationElement147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListContinuationElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListContinuationElement237() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement237()
}

func (c *current) onListContinuationElement240() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement240()
}

func (c *current) onListContinuationElement232() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement232()
}

func (c *current) onListContinuationElement252() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement252()
}

func (c *current) onListContinuationElement259() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement259()
}

func (c *current) onListContinuationElement262() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement262()
}

func (c *current) onListContinuationElement248(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement248(stack["name"])
}

func (c *current) onListContinuationElement273() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement273()
}

func (c *current) onListContinuationElement280() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement280()
}

func (c *current) onListContinuationElement283() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement283()
}

func (c *current) onListContinuationElement269(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListContinuationElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement269(stack["name"])
}

func (c *current) onListContinuationElement295() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement295()
}

func (c *current) onListContinuationElement301() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement301()
}

func (c *current) onListContinuationElement304() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement304()
}

func (c *current) onListContinuationElement292(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement292(stack["delimiter"])
}

func (c *current) onListContinuationElement320() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement320()
}

func (c *current) onListContinuationElement326() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement326()
}

func (c *current) onListContinuationElement329() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement329()
}

func (c *current) onListContinuationElement317(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement317(stack["delimiter"])
}

func (c *current) onListContinuationElement344() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement344()
}

func (c *current) onListContinuationElement348() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement348()
}

func (c *current) onListContinuationElement339(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement339(stack["content"])
}

func (c *current) onListContinuationElement313(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement313(stack["line"])
}

func (c *current) onListContinuationElement360() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement360()
}

func (c *current) onListContinuationElement366() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement366()
}

func (c *current) onListContinuationElement369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement369()
}

func (c *current) onListContinuationElement357(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement357(stack["delimiter"])
}

func (c *current) onListContinuationElement290(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListContinuationElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement290(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement384() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement384()
}

func (c *current) onListContinuationElement390() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement390()
}

func (c *current) onListContinuationElement393() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement393()
}

func (c *current) onListContinuationElement381(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement381(stack["delimiter"])
}

func (c *current) onListContinuationElement400(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement400() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement400(stack["start"])
}

func (c *current) onListContinuationElement412() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement412()
}

func (c *current) onListContinuationElement418() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement418()
}

func (c *current) onListContinuationElement421() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement421() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement421()
}

func (c *current) onListContinuationElement409(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement409(stack["delimiter"])
}

func (c *current) onListContinuationElement428(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement428() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement428(stack["end"])
}

func (c *current) onListContinuationElement437() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement437()
}

func (c *current) onListContinuationElement441() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement441()
}

func (c *current) onListContinuationElement432(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement432(stack["content"])
}

func (c *current) onListContinuationElement403(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement403() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement403(stack["line"])
}

func (c *current) onListContinuationElement456() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement456()
}

func (c *current) onListContinuationElement462() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement462()
}

func (c *current) onListContinuationElement465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement465()
}

func (c *current) onListContinuationElement453(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement453(stack["delimiter"])
}

func (c *current) onListContinuationElement472(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement472() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement472(stack["end"])
}

func (c *current) onListContinuationElement378(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListContinuationElement378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement378(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement482() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement482()
}

func (c *current) onListContinuationElement486() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement486()
}

func (c *current) onListContinuationElement489() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement489()
}

func (c *current) onListContinuationElement478(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement478(stack["language"])
}

func (c *current) onListContinuationElement504() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement504()
}

func (c *current) onListContinuationElement507() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement507()
}

func (c *current) onListContinuationElement520() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement520()
}

func (c *current) onListContinuationElement524() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement524()
}

func (c *current) onListContinuationElement515(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement515(stack["content"])
}

func (c *current) onListContinuationElement498(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement498(stack["line"])
}

func (c *current) onListContinuationElement535() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement535()
}

func (c *current) onListContinuationElement538() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement538()
}

func (c *current) onListContinuationElement475(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListContinuationElement475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement475(stack["delimiter"], stack["content"])
}

func (c *current) onListContinuationElement551() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement551()
}

func (c *current) onListContinuationElement557() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement557()
}

func (c *current) onListContinuationElement560() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement560()
}

func (c *current) onListContinuationElement548(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement548(stack["delimiter"])
}

func (c *current) onListContinuationElement567(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement567() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement567(stack["start"])
}

func (c *current) onListContinuationElement579() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement579()
}

func (c *current) onListContinuationElement585() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement585()
}

func (c *current) onListContinuationElement588() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement588()
}

func (c *current) onListContinuationElement576(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement576() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement576(stack["delimiter"])
}

func (c *current) onListContinuationElement595(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement595() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement595(stack["end"])
}

func (c *current) onListContinuationElement604() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement604()
}

func (c *current) onListContinuationElement608() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement608()
}

func (c *current) onListContinuationElement599(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement599(stack["content"])
}

func (c *current) onListContinuationElement570(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement570(stack["line"])
}

func (c *current) onListContinuationElement623() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement623()
}

func (c *current) onListContinuationElement629() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement629()
}

func (c *current) onListContinuationElement632() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement632()
}

func (c *current) onListContinuationElement620(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement620(stack["delimiter"])
}

func (c *current) onListContinuationElement639(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement639() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement639(stack["end"])
}

func (c *current) onListContinuationElement545(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListContinuationElement545() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement545(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement648() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement648()
}

func (c *current) onListContinuationElement654() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement654()
}

func (c *current) onListContinuationElement657() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement657()
}

func (c *current) onListContinuationElement645(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement645(stack["delimiter"])
}

func (c *current) onListContinuationElement664(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement664() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement664(stack["start"])
}

func (c *current) onListContinuationElement676() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement676()
}

func (c *current) onListContinuationElement682() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement682()
}

func (c *current) onListContinuationElement685() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement685()
}

func (c *current) onListContinuationElement673(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement673(stack["delimiter"])
}

func (c *current) onListContinuationElement692(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement692() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement692(stack["end"])
}

func (c *current) onListContinuationElement701() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement701()
}

func (c *current) onListContinuationElement705() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement705()
}

func (c *current) onListContinuationElement696(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement696(stack["content"])
}

func (c *current) onListContinuationElement667(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement667(stack["line"])
}

func (c *current) onListContinuationElement720() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement720()
}

func (c *current) onListContinuationElement726() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement726()
}

func (c *current) onListContinuationElement729() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement729()
}

func (c *current) onListContinuationElement717(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement717() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement717(stack["delimiter"])
}

func (c *current) onListContinuationElement736(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement736() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement736(stack["end"])
}

func (c *current) onListContinuationElement642(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListContinuationElement642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement642(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement745() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement745()
}

func (c *current) onListContinuationElement751() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement751()
}

func (c *current) onListContinuationElement754() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement754()
}

func (c *current) onListContinuationElement742(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement742(stack["delimiter"])
}

func (c *current) onListContinuationElement761(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement761() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement761(stack["start"])
}

func (c *current) onListContinuationElement773() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement773() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement773()
}

func (c *current) onListContinuationElement779() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement779()
}

func (c *current) onListContinuationElement782() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement782()
}

func (c *current) onListContinuationElement770(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement770(stack["delimiter"])
}

func (c *current) onListContinuationElement789(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement789() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement789(stack["end"])
}

func (c *current) onListContinuationElement798() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement798()
}

func (c *current) onListContinuationElement802() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement802()
}

func (c *current) onListContinuationElement793(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement793() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement793(stack["content"])
}

func (c *current) onListContinuationElement764(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement764(stack["line"])
}

func (c *current) onListContinuationElement817() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement817()
}

func (c *current) onListContinuationElement823() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement823()
}

func (c *current) onListContinuationElement826() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement826()
}

func (c *current) onListContinuationElement814(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement814() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement814(stack["delimiter"])
}

func (c *current) onListContinuationElement833(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement833() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement833(stack["end"])
}

func (c *current) onListContinuationElement739(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListContinuationElement739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement739(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement847() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement847() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement847()
}

func (c *current) onListContinuationElement850() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement850()
}

func (c *current) onListContinuationElement842() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement842() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement842()
}

func (c *current) onListContinuationElement859() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement859() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement859()
}

func (c *current) onListContinuationElement863() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement863() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement863()
}

func (c *current) onListContinuationElement839(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement839(stack["content"])
}

func (c *current) onListContinuationElement881() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement881() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement881()
}

func (c *current) onListContinuationElement884() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement884()
}

func (c *current) onListContinuationElement876() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement876()
}

func (c *current) onListContinuationElement893() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement893()
}

func (c *current) onListContinuationElement897() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement897()
}

func (c *current) onListContinuationElement873(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement873(stack["content"])
}

func (c *current) onListContinuationElement907() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement907() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement907()
}

func (c *current) onListContinuationElement910(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonListContinuationElement910() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement910(stack["content"])
}

func (c *current) onListContinuationElement912() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement912()
}

func (c *current) onListContinuationElement904(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement904(stack["content"])
}

func (c *current) onListContinuationElement836(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListContinuationElement836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement836(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListContinuationElement925() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement925()
}

func (c *current) onListContinuationElement928() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement928()
}

func (c *current) onListContinuationElement931() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement931() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement931()
}

func (c *current) onListContinuationElement922(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement922(stack["delimiter"])
}

func (c *current) onListContinuationElement947() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement947() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement947()
}

func (c *current) onListContinuationElement950() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement950() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement950()
}

func (c *current) onListContinuationElement953() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement953() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement953()
}

func (c *current) onListContinuationElement944(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement944() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement944(stack["delimiter"])
}

func (c *current) onListContinuationElement968() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement968()
}

func (c *current) onListContinuationElement972() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement972() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement972()
}

func (c *current) onListContinuationElement963(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement963() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement963(stack["content"])
}

func (c *current) onListContinuationElement940(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement940(stack["line"])
}

func (c *current) onListContinuationElement985() (interface{}, error) {
	// sequence of exactly "--"
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement985()
}

func (c *current) onListContinuationElement988() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement988() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement988()
}

func (c *current) onListContinuationElement991() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement991()
}

func (c *current) onListContinuationElement982(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Open, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement982(stack["delimiter"])
}

func (c *current) onListContinuationElement919(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Open, content.([]interface{}))

}

func (p *parser) callonListContinuationElement919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement919(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1006() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1006() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1006()
}

func (c *current) onListContinuationElement1012() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1012()
}

func (c *current) onListContinuationElement1015() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1015()
}

func (c *current) onListContinuationElement1003(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1003(stack["delimiter"])
}

func (c *current) onListContinuationElement1022(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1022() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1022(stack["start"])
}

func (c *current) onListContinuationElement1034() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1034() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1034()
}

func (c *current) onListContinuationElement1040() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1040()
}

func (c *current) onListContinuationElement1043() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1043()
}

func (c *current) onListContinuationElement1031(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1031() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1031(stack["delimiter"])
}

func (c *current) onListContinuationElement1050(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1050() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1050(stack["end"])
}

func (c *current) onListContinuationElement1059() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1059()
}

func (c *current) onListContinuationElement1063() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1063()
}

func (c *current) onListContinuationElement1054(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1054(stack["content"])
}

func (c *current) onListContinuationElement1025(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1025() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1025(stack["line"])
}

func (c *current) onListContinuationElement1078() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1078() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1078()
}

func (c *current) onListContinuationElement1084() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1084() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1084()
}

func (c *current) onListContinuationElement1087() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1087()
}

func (c *current) onListContinuationElement1075(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1075() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1075(stack["delimiter"])
}

func (c *current) onListContinuationElement1094(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1094() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1094(stack["end"])
}

func (c *current) onListContinuationElement1000(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1000() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1000(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1103() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1103()
}

func (c *current) onListContinuationElement1109() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1109()
}

func (c *current) onListContinuationElement1112() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1112()
}

func (c *current) onListContinuationElement1100(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1100(stack["delimiter"])
}

func (c *current) onListContinuationElement1119(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1119() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1119(stack["start"])
}

func (c *current) onListContinuationElement1131() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1131()
}

func (c *current) onListContinuationElement1137() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1137()
}

func (c *current) onListContinuationElement1140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1140()
}

func (c *current) onListContinuationElement1128(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1128(stack["delimiter"])
}

func (c *current) onListContinuationElement1147(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1147() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1147(stack["end"])
}

func (c *current) onListContinuationElement1156() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1156()
}

func (c *current) onListContinuationElement1160() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1160()
}

func (c *current) onListContinuationElement1151(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1151(stack["content"])
}

func (c *current) onListContinuationElement1122(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1122(stack["line"])
}

func (c *current) onListContinuationElement1175() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1175()
}

func (c *current) onListContinuationElement1181() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1181()
}

func (c *current) onListContinuationElement1184() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1184()
}

func (c *current) onListContinuationElement1172(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1172(stack["delimiter"])
}

func (c *current) onListContinuationElement1191(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1191() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1191(stack["end"])
}

func (c *current) onListContinuationElement1097(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1097() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1097(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1200() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1200()
}

func (c *current) onListContinuationElement1206() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1206()
}

func (c *current) onListContinuationElement1209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1209()
}

func (c *current) onListContinuationElement1197(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1197(stack["delimiter"])
}

func (c *current) onListContinuationElement1216(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1216() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1216(stack["start"])
}

func (c *current) onListContinuationElement1228() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1228()
}

func (c *current) onListContinuationElement1234() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1234()
}

func (c *current) onListContinuationElement1237() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1237()
}

func (c *current) onListContinuationElement1225(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1225(stack["delimiter"])
}

func (c *current) onListContinuationElement1244(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1244() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1244(stack["end"])
}

func (c *current) onListContinuationElement1253() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1253()
}

func (c *current) onListContinuationElement1257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1257()
}

func (c *current) onListContinuationElement1248(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1248(stack["content"])
}

func (c *current) onListContinuationElement1219(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListContinuationElement1219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1219(stack["line"])
}

func (c *current) onListContinuationElement1272() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1272()
}

func (c *current) onListContinuationElement1278() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1278()
}

func (c *current) onListContinuationElement1281() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1281()
}

func (c *current) onListContinuationElement1269(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1269(stack["delimiter"])
}

func (c *current) onListContinuationElement1288(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListContinuationElement1288() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1288(stack["end"])
}

func (c *current) onListContinuationElement1194(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListContinuationElement1194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1194(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListContinuationElement1302() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1302()
}

func (c *current) onListContinuationElement1305() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1305()
}

func (c *current) onListContinuationElement1313() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1313()
}

func (c *current) onListContinuationElement1291() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListContinuationElement1291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1291()
}

func (c *current) onListContinuationElement1325() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1325()
}

func (c *current) onListContinuationElement1328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1328()
}

func (c *current) onListContinuationElement1343() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1343()
}

func (c *current) onListContinuationElement1346() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1346()
}

func (c *current) onListContinuationElement1338() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1338()
}

func (c *current) onListContinuationElement1360() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1360()
}

func (c *current) onListContinuationElement1363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1363()
}

func (c *current) onListContinuationElement1385() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1385()
}

func (c *current) onListContinuationElement1390() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1390()
}

func (c *current) onListContinuationElement1388(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1388(stack["content"])
}

func (c *current) onListContinuationElement1381(content interface{}) (interface{}, error) {
	return types.NewInlineTableCell(content.(types.RawLine))

}

func (p *parser) callonListContinuationElement1381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1381(stack["content"])
}

func (c *current) onListContinuationElement1394() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1394()
}

func (c *current) onListContinuationElement1377(cells interface{}) (interface{}, error) {

	return cells, nil
}

func (p *parser) callonListContinuationElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1377(stack["cells"])
}

func (c *current) onListContinuationElement1411() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1411()
}

func (c *current) onListContinuationElement1414() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1414()
}

func (c *current) onListContinuationElement1429() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1429()
}

func (c *current) onListContinuationElement1432() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1432()
}

func (c *current) onListContinuationElement1424() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1424()
}

func (c *current) onListContinuationElement1441() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1441()
}

func (c *current) onListContinuationElement1446() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1446()
}

func (c *current) onListContinuationElement1449() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1449()
}

func (c *current) onListContinuationElement1463() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1463()
}

func (c *current) onListContinuationElement1466() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1466()
}

func (c *current) onListContinuationElement1481() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1481()
}

func (c *current) onListContinuationElement1484() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1484()
}

func (c *current) onListContinuationElement1476() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1476()
}

func (c *current) onListContinuationElement1495() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1495()
}

func (c *current) onListContinuationElement1500() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1500()
}

func (c *current) onListContinuationElement1505() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1505()
}

func (c *current) onListContinuationElement1456(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1456(stack["content"])
}

func (c *current) onListContinuationElement1404(format, content interface{}) (interface{}, error) {
	return types.NewMultilineTableCell(content.([]interface{}), format)

}

func (p *parser) callonListContinuationElement1404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1404(stack["format"], stack["content"])
}

func (c *current) onListContinuationElement1401(cells interface{}) (interface{}, error) {
	return cells, nil
}

func (p *parser) callonListContinuationElement1401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1401(stack["cells"])
}

func (c *current) onListContinuationElement1374(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListContinuationElement1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1374(stack["cells"])
}

func (c *current) onListContinuationElement1517() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1517()
}

func (c *current) onListContinuationElement1520() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1520()
}

func (c *current) onListContinuationElement1512() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1512()
}

func (c *current) onListContinuationElement1353(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonListContinuationElement1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1353(stack["content"])
}

func (c *current) onListContinuationElement1531() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1531()
}

func (c *current) onListContinuationElement1534() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1534()
}

func (c *current) onListContinuationElement1321(lines interface{}) (interface{}, error) {
	return types.NewTable(lines.([]interface{}))

}

func (p *parser) callonListContinuationElement1321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1321(stack["lines"])
}

func (c *current) onListContinuationElement1549() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1549()
}

func (c *current) onListContinuationElement1553() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1553()
}

func (c *current) onListContinuationElement1543(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonListContinuationElement1543() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1543(stack["content"])
}

func (c *current) onListContinuationElement1566() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonListContinuationElement1566() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1566()
}

func (c *current) onListContinuationElement1569() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonListContinuationElement1569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1569()
}

func (c *current) onListContinuationElement1571() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonListContinuationElement1571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1571()
}

func (c *current) onListContinuationElement1573() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonListContinuationElement1573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1573()
}

func (c *current) onListContinuationElement1575() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonListContinuationElement1575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1575()
}

func (c *current) onListContinuationElement1577() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonListContinuationElement1577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1577()
}

func (c *current) onListContinuationElement1581() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1581()
}

func (c *current) onListContinuationElement1579() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonListContinuationElement1579() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1579()
}

func (c *current) onListContinuationElement1564(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListContinuationElement1564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1564(stack["style"])
}

func (c *current) onListContinuationElement1593() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1593()
}

func (c *current) onListContinuationElement1596() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1596() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1596()
}

func (c *current) onListContinuationElement1588() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListContinuationElement1588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1588()
}

func (c *current) onListContinuationElement1607() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1607()
}

func (c *current) onListContinuationElement1609() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1609()
}

func (c *current) onListContinuationElement1618() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1618()
}

func (c *current) onListContinuationElement1625() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListContinuationElement1625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1625()
}

func (c *current) onListContinuationElement1628(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListContinuationElement1628() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1628(stack["depth"])
}

func (c *current) onListContinuationElement1622(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListContinuationElement1622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1622(stack["depth"])
}

func (c *current) onListContinuationElement1629() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListContinuationElement1629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1629()
}

func (c *current) onListContinuationElement1634() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListContinuationElement1634() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1634()
}

func (c *current) onListContinuationElement1638() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListContinuationElement1638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1638()
}

func (c *current) onListContinuationElement1642() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListContinuationElement1642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1642()
}

func (c *current) onListContinuationElement1647() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListContinuationElement1647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1647()
}

func (c *current) onListContinuationElement1652(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1652(stack["prefix"])
}

func (c *current) onListContinuationElement1615(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListContinuationElement1615() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1615(stack["prefix"])
}

func (c *current) onListContinuationElement1659() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1659()
}

func (c *current) onListContinuationElement1662() (interface{}, error) {
	// `-` or `*` to `*****`
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1662()
}

func (c *current) onListContinuationElement1667(style interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return len(style.(string)) <= 5, nil

}

func (p *parser) callonListContinuationElement1667() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1667(stack["style"])
}

func (c *current) onListContinuationElement1668(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1668(stack["style"])
}

func (c *current) onListContinuationElement1656(style interface{}) (interface{}, error) {
	return types.NewUnorderedListElementPrefix(style.(string))

}

func (p *parser) callonListContinuationElement1656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1656(stack["style"])
}

func (c *current) onListContinuationElement1676() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListContinuationElement1676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1676()
}

func (c *current) onListContinuationElement1680(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1680() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1680(stack["ref"])
}

func (c *current) onListContinuationElement1672(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListContinuationElement1672() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1672(stack["ref"])
}

func (c *current) onListContinuationElement1692() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1692()
}

func (c *current) onListContinuationElement1695(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1695() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1695(stack["separator"])
}

func (c *current) onListContinuationElement1689(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1689() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1689(stack["separator"])
}

func (c *current) onListContinuationElement1698() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1698()
}

func (c *current) onListContinuationElement1685() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListContinuationElement1685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1685()
}

func (c *current) onListContinuationElement1709() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1709()
}

func (c *current) onListContinuationElement1712(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListContinuationElement1712() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1712(stack["separator"])
}

func (c *current) onListContinuationElement1706(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListContinuationElement1706() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1706(stack["separator"])
}

func (c *current) onListContinuationElement1723() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1723()
}

func (c *current) onListContinuationElement1729() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1729()
}

func (c *current) onListContinuationElement1732() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1732()
}

func (c *current) onListContinuationElement1720(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1720(stack["delimiter"])
}

func (c *current) onListContinuationElement1742() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1742()
}

func (c *current) onListContinuationElement1748() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1748()
}

func (c *current) onListContinuationElement1751() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1751()
}

func (c *current) onListContinuationElement1739(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1739(stack["delimiter"])
}

func (c *current) onListContinuationElement1762() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1762()
}

func (c *current) onListContinuationElement1766() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1766()
}

func (c *current) onListContinuationElement1769() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1769()
}

func (c *current) onListContinuationElement1758(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListContinuationElement1758() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1758(stack["language"])
}

func (c *current) onListContinuationElement1779() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1779() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1779()
}

func (c *current) onListContinuationElement1785() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1785()
}

func (c *current) onListContinuationElement1788() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1788() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1788()
}

func (c *current) onListContinuationElement1776(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1776(stack["delimiter"])
}

func (c *current) onListContinuationElement1798() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1798()
}

func (c *current) onListContinuationElement1804() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1804() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1804()
}

func (c *current) onListContinuationElement1807() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1807()
}

func (c *current) onListContinuationElement1795(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1795(stack["delimiter"])
}

func (c *current) onListContinuationElement1817() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1817()
}

func (c *current) onListContinuationElement1823() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1823()
}

func (c *current) onListContinuationElement1826() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1826()
}

func (c *current) onListContinuationElement1814(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1814() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1814(stack["delimiter"])
}

func (c *current) onListContinuationElement1836() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1836()
}

func (c *current) onListContinuationElement1842() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1842() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1842()
}

func (c *current) onListContinuationElement1845() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1845() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1845()
}

func (c *current) onListContinuationElement1833(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1833(stack["delimiter"])
}

func (c *current) onListContinuationElement1855() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1855() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1855()
}

func (c *current) onListContinuationElement1861() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1861()
}

func (c *current) onListContinuationElement1864() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1864() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1864()
}

func (c *current) onListContinuationElement1852(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1852(stack["delimiter"])
}

func (c *current) onListContinuationElement1874() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1874() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1874()
}

func (c *current) onListContinuationElement1880() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1880() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1880()
}

func (c *current) onListContinuationElement1883() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1883() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1883()
}

func (c *current) onListContinuationElement1871(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListContinuationElement1871() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1871(stack["delimiter"])
}

func (c *current) onListContinuationElement1714(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListContinuationElement1714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1714(stack["delimiter"])
}

func (c *current) onListContinuationElement1891() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListContinuationElement1891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1891()
}

func (c *current) onListContinuationElement1895() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListContinuationElement1895() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1895()
}

func (c *current) onListContinuationElement1585(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListContinuationElement1585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1585(stack["content"])
}

func (c *current) onListContinuationElement1560(style, content interface{}) (interface{}, error) {
	return types.NewParagraph(style, content)

}

func (p *parser) callonListContinuationElement1560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1560(stack["style"], stack["content"])
}

func (c *current) onListContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonListContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts)

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph9() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph9()
}

func (c *current) onShortcutParagraph16() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonShortcutParagraph16() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph16()
}

func (c *current) onShortcutParagraph19() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonShortcutParagraph19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph19()
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph23() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonShortcutParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph23()
}

func (c *current) onShortcutParagraph25() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonShortcutParagraph25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph25()
}

func (c *current) onShortcutParagraph27() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonShortcutParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph27()
}

func (c *current) onShortcutParagraph31() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph31()
}

func (c *current) onShortcutParagraph29() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonShortcutParagraph29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph29()
}

func (c *current) onShortcutParagraph14(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["style"])
}

func (c *current) onShortcutParagraph38() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph38()
}

func (c *current) onShortcutParagraph41(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph41(stack["content"])
}

func (c *current) onShortcutParagraph43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph43()
}

func (c *current) onShortcutParagraph35(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph35(stack["content"])
}

func (c *current) onShortcutParagraph50(style, firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph50() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph50(stack["style"], stack["firstLine"])
}

func (c *current) onShortcutParagraph63() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph63()
}

func (c *current) onShortcutParagraph66() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66()
}

func (c *current) onShortcutParagraph58() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph58()
}

func (c *current) onShortcutParagraph85() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph85()
}

func (c *current) onShortcutParagraph91() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph94() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph94()
}

func (c *current) onShortcutParagraph82(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph82(stack["delimiter"])
}

func (c *current) onShortcutParagraph104() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph104()
}

func (c *current) onShortcutParagraph110() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph110()
}

func (c *current) onShortcutParagraph113() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph101(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["delimiter"])
}

func (c *current) onShortcutParagraph124() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph124()
}

func (c *current) onShortcutParagraph128() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph128()
}

func (c *current) onShortcutParagraph131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph120(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonShortcutParagraph120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph120(stack["language"])
}

func (c *current) onShortcutParagraph141() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph141()
}

func (c *current) onShortcutParagraph147() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph147()
}

func (c *current) onShortcutParagraph150() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph150()
}

func (c *current) onShortcutParagraph138(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["delimiter"])
}

func (c *current) onShortcutParagraph160() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph160()
}

func (c *current) onShortcutParagraph166() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph166()
}

func (c *current) onShortcutParagraph169() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph169()
}

func (c *current) onShortcutParagraph157(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph157(stack["delimiter"])
}

func (c *current) onShortcutParagraph179() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph179()
}

func (c *current) onShortcutParagraph185() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph185()
}

func (c *current) onShortcutParagraph188() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph188()
}

func (c *current) onShortcutParagraph176(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph176(stack["delimiter"])
}

func (c *current) onShortcutParagraph198() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph198()
}

func (c *current) onShortcutParagraph204() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph204()
}

func (c *current) onShortcutParagraph207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph207()
}

func (c *current) onShortcutParagraph195(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph195(stack["delimiter"])
}

func (c *current) onShortcutParagraph217() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph217()
}

func (c *current) onShortcutParagraph223() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph223()
}

func (c *current) onShortcutParagraph226() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph226()
}

func (c *current) onShortcutParagraph214(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph214(stack["delimiter"])
}

func (c *current) onShortcutParagraph236() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph236()
}

func (c *current) onShortcutParagraph242() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph242()
}

func (c *current) onShortcutParagraph245() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph245()
}

func (c *current) onShortcutParagraph233(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonShortcutParagraph233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph233(stack["delimiter"])
}

func (c *current) onShortcutParagraph76(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonShortcutParagraph76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76(stack["delimiter"])
}

func (c *current) onShortcutParagraph256() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph256()
}

func (c *current) onShortcutParagraph258() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph258()
}

func (c *current) onShortcutParagraph271() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph271()
}

func (c *current) onShortcutParagraph275() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph275()
}

func (c *current) onShortcutParagraph265(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonShortcutParagraph265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph265(stack["content"])
}

func (c *current) onShortcutParagraph285() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph285()
}

func (c *current) onShortcutParagraph288(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonShortcutParagraph288() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph288(stack["content"])
}

func (c *current) onShortcutParagraph290() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph290()
}

func (c *current) onShortcutParagraph282(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph282(stack["content"])
}

func (c *current) onShortcutParagraph53(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph53(stack["line"])
}

func (c *current) onShortcutParagraph1(style, firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (bool, error) {
	return !c.isWithinLiteralParagraph(), nil

}

func (p *parser) callonParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10()
}

func (c *current) onParagraph12() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph14() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph14()
}

func (c *current) onParagraph16() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonParagraph16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph16()
}

func (c *current) onParagraph18() (interface{}, error) {
	return types.Caution, nil

}

func (p *parser) callonParagraph18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18()
}

func (c *current) onParagraph22() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonParagraph22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph22()
}

func (c *current) onParagraph20() (interface{}, error) {
	// check
	return types.LiteralParagraph, nil

}

func (p *parser) callonParagraph20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph20()
}

func (c *current) onParagraph5(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph5(stack["style"])
}

func (c *current) onParagraph29() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph29()
}

func (c *current) onParagraph32(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph32() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph32(stack["content"])
}

func (c *current) onParagraph34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph34()
}

func (c *current) onParagraph26(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["content"])
}

func (c *current) onParagraph53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph53()
}

func (c *current) onParagraph56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph56()
}

func (c *current) onParagraph48() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph48()
}

func (c *current) onParagraph73() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph73()
}

func (c *current) onParagraph77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph77()
}

func (c *current) onParagraph67(content interface{}) (interface{}, error) {
	return types.NewSinglelineComment(content.(string))

}

func (p *parser) callonParagraph67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph67(stack["content"])
}

func (c *current) onParagraph87() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraph87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph87()
}

func (c *current) onParagraph90(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil // stop if blank line

}

func (p *parser) callonParagraph90() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph90(stack["content"])
}

func (c *current) onParagraph92() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph92()
}

func (c *current) onParagraph84(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph84(stack["content"])
}

func (c *current) onParagraph43(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph43(stack["line"])
}

func (c *current) onParagraph1(style, firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(style, append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["style"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onEscapedQuotedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedQuotedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText5()
}

func (c *current) onEscapedQuotedText1(attributes, element interface{}) (interface{}, error) {
	return append([]interface{}{attributes}, element.([]interface{})...), nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onUnescapedQuotedText1(attributes, element interface{}) (interface{}, error) {
	return element.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonUnescapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnescapedQuotedText1(stack["attributes"], stack["element"])
}

func (c *current) onQuotedTextElement7() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement7()
}

func (c *current) onQuotedTextElement9() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement9()
}

func (c *current) onQuotedTextElement15() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonQuotedTextElement15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement15()
}

func (c *current) onQuotedTextElement23() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement23()
}

func (c *current) onQuotedTextElement25() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement25()
}

func (c *current) onQuotedTextElement2() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement2()
}

func (c *current) onQuotedTextElement34() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement34()
}

func (c *current) onQuotedTextElement37() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement37()
}

func (c *current) onQuotedTextElement51() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement51()
}

func (c *current) onQuotedTextElement53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement53()
}

func (c *current) onQuotedTextElement61() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonQuotedTextElement61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement61()
}

func (c *current) onQuotedTextElement64() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonQuotedTextElement64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement64()
}

func (c *current) onQuotedTextElement67() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonQuotedTextElement67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement67()
}

func (c *current) onQuotedTextElement70() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonQuotedTextElement70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement70()
}

func (c *current) onQuotedTextElement44() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement44()
}

func (c *current) onQuotedTextElement72() (interface{}, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonQuotedTextElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement72()
}

func (c *current) onQuotedTextElement79() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonQuotedTextElement79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement79()
}

func (c *current) onQuotedTextElement80() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonQuotedTextElement80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement80()
}

func (c *current) onQuotedTextElement77() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonQuotedTextElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement77()
}

func (c *current) onQuotedTextElement86() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonQuotedTextElement86() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement86()
}

func (c *current) onQuotedTextElement93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement93()
}

func (c *current) onQuotedTextElement89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonQuotedTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement89(stack["name"])
}

func (c *current) onQuotedTextElement103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement103()
}

func (c *current) onQuotedTextElement99(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonQuotedTextElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement99(stack["name"])
}

func (c *current) onQuotedTextElement113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement113()
}

func (c *current) onQuotedTextElement125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement125()
}

func (c *current) onQuotedTextElement127() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonQuotedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement127()
}

func (c *current) onQuotedTextElement120(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonQuotedTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement120(stack["start"])
}

func (c *current) onQuotedTextElement109(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonQuotedTextElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement109(stack["name"], stack["start"])
}

func (c *current) onQuotedTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement135()
}

func (c *current) onQuotedTextElement147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement147()
}

func (c *current) onQuotedTextElement149() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonQuotedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement149()
}

func (c *current) onQuotedTextElement142(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonQuotedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement142(stack["start"])
}

func (c *current) onQuotedTextElement131(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonQuotedTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement131(stack["name"], stack["start"])
}

func (c *current) onQuotedTextElement84(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement84(stack["element"])
}

func (c *current) onQuotedTextElement155() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement155()
}

func (c *current) onQuotedTextElement161() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement161()
}

func (c *current) onQuotedTextElement153() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement153()
}

func (c *current) onQuotedTextElement170() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonQuotedTextElement170() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement170()
}

func (c *current) onQuotedTextElement172() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonQuotedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement172()
}

func (c *current) onQuotedTextElement168(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement168(stack["element"])
}

func (c *current) onQuotedTextElement178() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement178()
}

func (c *current) onQuotedTextElement174(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonQuotedTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement174(stack["ref"])
}

func (c *current) onQuotedTextElement182() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonQuotedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextElement182()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onSingleQuoteBoldText4() (bool, error) {
	log.Debug("SingleQuoteBoldTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteBoldText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText4()
}

func (c *current) onSingleQuoteBoldText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText13(stack["elements"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements4()
}

func (c *current) onSingleQuoteBoldTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement10() (bool, error) {
	log.Debug("SingleQuoteBoldTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteBoldTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement10()
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {

	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onSingleQuoteItalicText4() (bool, error) {
	log.Debug("SingleQuoteItalicTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteItalicText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText4()
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements4()
}

func (c *current) onSingleQuoteItalicTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement10() (bool, error) {
	log.Debug("SingleQuoteItalicTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteItalicTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement10()
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextEndDelimiter5() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMonospaceTextEndDelimiter5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextEndDelimiter5()
}

func (c *current) onSingleQuoteMonospaceText4() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMonospaceText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText4()
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements4()
}

func (c *current) onSingleQuoteMonospaceTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onSingleQuoteMarkedText4() (bool, error) {
	log.Debug("SingleQuoteMarkedTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonSingleQuoteMarkedText4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText4()
}

func (c *current) onSingleQuoteMarkedText13(elements interface{}) (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedText13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText13(stack["elements"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements4()
}

func (c *current) onSingleQuoteMarkedTextElements9(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements9() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements9(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement10() (bool, error) {
	log.Debug("SingleQuoteMarkedTextEndDelimiter")
	return !c.isPrecededBySpace(), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement10()
}

func (c *current) onSingleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSection3() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonSection3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection3()
}

func (c *current) onSection5() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection5()
}

func (c *current) onSection8(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection8(stack["level"])
}

func (c *current) onSection9(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection9(stack["level"])
}

func (c *current) onSection15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSection15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection15()
}

func (c *current) onSection1(level, title interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["level"], stack["title"])
}

func (c *current) onSectionTitle3() error {
	// enable substitutions
	c.withSubstitutions(headerSubstitutions())
	return nil

}

func (p *parser) callonSectionTitle3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle3()
}

func (c *current) onSectionTitle1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitle1(stack["elements"])
}

func (c *current) onSectionTitleElement5() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement5()
}

func (c *current) onSectionTitleElement19() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement19()
}

func (c *current) onSectionTitleElement21() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement21()
}

func (c *current) onSectionTitleElement27() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonSectionTitleElement27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement27()
}

func (c *current) onSectionTitleElement35() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement35()
}

func (c *current) onSectionTitleElement37() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement37()
}

func (c *current) onSectionTitleElement14() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement14()
}

func (c *current) onSectionTitleElement48() (bool, error) {
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSectionTitleElement48() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement48()
}

func (c *current) onSectionTitleElement58() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement58()
}

func (c *current) onSectionTitleElement65() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement65()
}

func (c *current) onSectionTitleElement61(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement61(stack["ref"])
}

func (c *current) onSectionTitleElement71() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonSectionTitleElement71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement71()
}

func (c *current) onSectionTitleElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement78()
}

func (c *current) onSectionTitleElement74(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement74(stack["name"])
}

func (c *current) onSectionTitleElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement88()
}

func (c *current) onSectionTitleElement84(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement84(stack["name"])
}

func (c *current) onSectionTitleElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement98()
}

func (c *current) onSectionTitleElement110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement110()
}

func (c *current) onSectionTitleElement112() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement112()
}

func (c *current) onSectionTitleElement105(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement105(stack["start"])
}

func (c *current) onSectionTitleElement94(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement94(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement120()
}

func (c *current) onSectionTitleElement132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement132()
}

func (c *current) onSectionTitleElement134() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement134()
}

func (c *current) onSectionTitleElement127(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement127(stack["start"])
}

func (c *current) onSectionTitleElement116(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement116(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement69(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement69(stack["element"])
}

func (c *current) onSectionTitleElement138() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSectionTitleElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement138()
}

func (c *current) onSectionTitleElement54(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonSectionTitleElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement54(stack["elements"])
}

func (c *current) onSectionTitleElement50(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonSectionTitleElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement50(stack["id"])
}

func (c *current) onSectionTitleElement142() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement142()
}

func (c *current) onSectionTitleElement146() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement146()
}

func (c *current) onSectionTitleElement46(id interface{}) (interface{}, error) {

	return id, nil

}

func (p *parser) callonSectionTitleElement46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement46(stack["id"])
}

func (c *current) onSectionTitleElement153() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement153()
}

func (c *current) onSectionTitleElement155() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement155()
}

func (c *current) onSectionTitleElement161() (interface{}, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSectionTitleElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement161()
}

func (c *current) onSectionTitleElement168() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonSectionTitleElement168() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement168()
}

func (c *current) onSectionTitleElement169() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSectionTitleElement169() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement169()
}

func (c *current) onSectionTitleElement166() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonSectionTitleElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement166()
}

func (c *current) onSectionTitleElement181() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement181()
}

func (c *current) onSectionTitleElement183() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement183()
}

func (c *current) onSectionTitleElement191() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonSectionTitleElement191() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement191()
}

func (c *current) onSectionTitleElement194() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonSectionTitleElement194() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement194()
}

func (c *current) onSectionTitleElement197() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonSectionTitleElement197() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement197()
}

func (c *current) onSectionTitleElement200() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonSectionTitleElement200() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement200()
}

func (c *current) onSectionTitleElement174() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement174()
}

func (c *current) onSectionTitleElement207() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonSectionTitleElement207() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement207()
}

func (c *current) onSectionTitleElement209() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSectionTitleElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement209()
}

func (c *current) onSectionTitleElement205(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement205(stack["element"])
}

func (c *current) onSectionTitleElement214() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonSectionTitleElement214() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement214()
}

func (c *current) onSectionTitleElement221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement221()
}

func (c *current) onSectionTitleElement217(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement217(stack["name"])
}

func (c *current) onSectionTitleElement231() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement231()
}

func (c *current) onSectionTitleElement227(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonSectionTitleElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement227(stack["name"])
}

func (c *current) onSectionTitleElement241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement241()
}

func (c *current) onSectionTitleElement253() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement253()
}

func (c *current) onSectionTitleElement255() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement255()
}

func (c *current) onSectionTitleElement248(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement248(stack["start"])
}

func (c *current) onSectionTitleElement237(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSectionTitleElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement237(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement263() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement263()
}

func (c *current) onSectionTitleElement275() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement275()
}

func (c *current) onSectionTitleElement277() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSectionTitleElement277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement277()
}

func (c *current) onSectionTitleElement270(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSectionTitleElement270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement270(stack["start"])
}

func (c *current) onSectionTitleElement259(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSectionTitleElement259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement259(stack["name"], stack["start"])
}

func (c *current) onSectionTitleElement212(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSectionTitleElement212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement212(stack["element"])
}

func (c *current) onSectionTitleElement285() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSectionTitleElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement285()
}

func (c *current) onSectionTitleElement281(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSectionTitleElement281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement281(stack["ref"])
}

func (c *current) onSectionTitleElement293() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement293()
}

func (c *current) onSectionTitleElement289(id interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSectionTitleElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement289(stack["id"])
}

func (c *current) onSectionTitleElement301() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement301()
}

func (c *current) onSectionTitleElement297(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonSectionTitleElement297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement297(stack["id"])
}

func (c *current) onSectionTitleElement306() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonSectionTitleElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement306()
}

func (c *current) onSectionTitleElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonSectionTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSectionTitleElement1(stack["element"])
}

func (c *current) onNormalGroup16() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup16()
}

func (c *current) onNormalGroup18() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonNormalGroup18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup18()
}

func (c *current) onNormalGroup24() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonNormalGroup24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup24()
}

func (c *current) onNormalGroup32() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup32()
}

func (c *current) onNormalGroup34() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup34()
}

func (c *current) onNormalGroup11() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNormalGroup11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup11()
}

func (c *current) onNormalGroup51() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup51()
}

func (c *current) onNormalGroup53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup53()
}

func (c *current) onNormalGroup61() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonNormalGroup61() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup61()
}

func (c *current) onNormalGroup64() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonNormalGroup64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup64()
}

func (c *current) onNormalGroup67() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonNormalGroup67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup67()
}

func (c *current) onNormalGroup70() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonNormalGroup70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup70()
}

func (c *current) onNormalGroup44() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonNormalGroup44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup44()
}

func (c *current) onNormalGroup72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup72()
}

func (c *current) onNormalGroup74() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonNormalGroup74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup74()
}

func (c *current) onNormalGroup80() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup80()
}

func (c *current) onNormalGroup87() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonNormalGroup87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup87()
}

func (c *current) onNormalGroup94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup94()
}

func (c *current) onNormalGroup90(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonNormalGroup90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup90(stack["name"])
}

func (c *current) onNormalGroup104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup104()
}

func (c *current) onNormalGroup100(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonNormalGroup100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup100(stack["name"])
}

func (c *current) onNormalGroup114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup114()
}

func (c *current) onNormalGroup126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup126()
}

func (c *current) onNormalGroup128() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup128()
}

func (c *current) onNormalGroup121(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroup121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup121(stack["start"])
}

func (c *current) onNormalGroup110(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonNormalGroup110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup110(stack["name"], stack["start"])
}

func (c *current) onNormalGroup136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup136()
}

func (c *current) onNormalGroup148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNormalGroup148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup148()
}

func (c *current) onNormalGroup150() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonNormalGroup150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup150()
}

func (c *current) onNormalGroup143(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonNormalGroup143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup143(stack["start"])
}

func (c *current) onNormalGroup132(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonNormalGroup132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup132(stack["name"], stack["start"])
}

func (c *current) onNormalGroup85(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroup85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup85(stack["element"])
}

func (c *current) onNormalGroup154() (interface{}, error) {
	//log.Debug("matched escaped apostrophe")
	return types.NewStringElement(`'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonNormalGroup154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup154()
}

func (c *current) onNormalGroup161() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonNormalGroup161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup161()
}

func (c *current) onNormalGroup162() (bool, error) {
	//log.Debugf("TypographicQuote at pos %s", c.pos.String())
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonNormalGroup162() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup162()
}

func (c *current) onNormalGroup159() (interface{}, error) {
	return types.NewSymbol("'")

}

func (p *parser) callonNormalGroup159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup159()
}

func (c *current) onNormalGroup171() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonNormalGroup171() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup171()
}

func (c *current) onNormalGroup173() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonNormalGroup173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup173()
}

func (c *current) onNormalGroup169(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalGroup169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup169(stack["element"])
}

func (c *current) onNormalGroup177() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements)

}

func (p *parser) callonNormalGroup177() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup177()
}

func (c *current) onNormalGroup179() (bool, error) {

	log.Debug("LineBreak")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonNormalGroup179() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup179()
}

func (c *current) onNormalGroup181() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonNormalGroup181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup181()
}

func (c *current) onNormalGroup185() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonNormalGroup185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup185()
}

func (c *current) onNormalGroup175() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonNormalGroup175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup175()
}

func (c *current) onNormalGroup197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNormalGroup197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup197()
}

func (c *current) onNormalGroup193(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonNormalGroup193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup193(stack["ref"])
}

func (c *current) onNormalGroup201() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonNormalGroup201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup201()
}

func (c *current) onNormalGroup5(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonNormalGroup5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup5(stack["element"])
}

func (c *current) onNormalGroup1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonNormalGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalGroup1(stack["elements"])
}

func (c *current) onAttributeStructuredValue1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonAttributeStructuredValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValue1(stack["elements"])
}

func (c *current) onAttributeStructuredValueElement12() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement12()
}

func (c *current) onAttributeStructuredValueElement14() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement14()
}

func (c *current) onAttributeStructuredValueElement20() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonAttributeStructuredValueElement20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement20()
}

func (c *current) onAttributeStructuredValueElement28() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement28()
}

func (c *current) onAttributeStructuredValueElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement30()
}

func (c *current) onAttributeStructuredValueElement7() (interface{}, error) {
	log.Debugf("new inlineword: '%v'", string(c.text))
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement7()
}

func (c *current) onAttributeStructuredValueElement39() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement39()
}

func (c *current) onAttributeStructuredValueElement41() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement41()
}

func (c *current) onAttributeStructuredValueElement55() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement55()
}

func (c *current) onAttributeStructuredValueElement57() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement57()
}

func (c *current) onAttributeStructuredValueElement65() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonAttributeStructuredValueElement65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement65()
}

func (c *current) onAttributeStructuredValueElement68() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonAttributeStructuredValueElement68() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement68()
}

func (c *current) onAttributeStructuredValueElement71() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonAttributeStructuredValueElement71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement71()
}

func (c *current) onAttributeStructuredValueElement74() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonAttributeStructuredValueElement74() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement74()
}

func (c *current) onAttributeStructuredValueElement48() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement48()
}

func (c *current) onAttributeStructuredValueElement80() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters)

}

func (p *parser) callonAttributeStructuredValueElement80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement80()
}

func (c *current) onAttributeStructuredValueElement82() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonAttributeStructuredValueElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement82()
}

func (c *current) onAttributeStructuredValueElement78(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement78(stack["element"])
}

func (c *current) onAttributeStructuredValueElement88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeStructuredValueElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement88()
}

func (c *current) onAttributeStructuredValueElement84(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonAttributeStructuredValueElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement84(stack["ref"])
}

func (c *current) onAttributeStructuredValueElement92() (interface{}, error) {

	if log.IsLevelEnabled(log.DebugLevel) {
		log.Debugf("matching anychar '%s' at position %v", string(c.text), c.pos.String())
	}
	return string(c.text), nil

}

func (p *parser) callonAttributeStructuredValueElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement92()
}

func (c *current) onAttributeStructuredValueElement1(element interface{}) (interface{}, error) {
	c.trackElement(element)
	return element, nil

}

func (p *parser) callonAttributeStructuredValueElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeStructuredValueElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros)

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro25() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro21(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonInlineMacro21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["id"])
}

func (c *current) onInlineMacro37() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro37()
}

func (c *current) onInlineMacro33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33()
}

func (c *current) onInlineMacro44() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro44()
}

func (c *current) onInlineMacro48() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro48()
}

func (c *current) onInlineMacro55() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro55()
}

func (c *current) onInlineMacro51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51()
}

func (c *current) onInlineMacro41(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro41(stack["content"])
}

func (c *current) onInlineMacro62() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro62()
}

func (c *current) onInlineMacro66() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro66()
}

func (c *current) onInlineMacro73() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlineMacro73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro73()
}

func (c *current) onInlineMacro69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro69()
}

func (c *current) onInlineMacro59(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro59(stack["content"])
}

func (c *current) onInlineMacro29(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs)

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote2() (bool, error) {
	return c.isSubstitutionEnabled(Quotes)

}

func (p *parser) callonQuote2() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote2()
}

func (c *current) onReplacement3() (bool, error) {
	return c.isSubstitutionEnabled(Replacements)

}

func (p *parser) callonReplacement3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement3()
}

func (c *current) onReplacement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonReplacement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplacement1(stack["element"])
}

func (c *current) onSymbol7() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSymbol7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol7()
}

func (c *current) onSymbol9() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSymbol9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol9()
}

func (c *current) onSymbol11() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSymbol11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol11()
}

func (c *current) onSymbol13() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSymbol13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol13()
}

func (c *current) onSymbol15() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSymbol15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol15()
}

func (c *current) onSymbol20() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSymbol20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol20()
}

func (c *current) onSymbol22() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSymbol22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol22()
}

func (c *current) onSymbol26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol26()
}

func (c *current) onSymbol17() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSymbol17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol17()
}

func (c *current) onSymbol36() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSymbol36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol36()
}

func (c *current) onSymbol40() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol40()
}

func (c *current) onSymbol33() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSymbol33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol33()
}

func (c *current) onSymbol47() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSymbol47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol47()
}

func (c *current) onSymbol49() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSymbol49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol49()
}

func (c *current) onSymbol51() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSymbol51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol51()
}

func (c *current) onSymbol2() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSymbol2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol2()
}

func (c *current) onSymbol54() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSymbol54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol54()
}

func (c *current) onSymbol56() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSymbol56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol56()
}

func (c *current) onSymbol58() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSymbol58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol58()
}

func (c *current) onSymbol60() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSymbol60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol60()
}

func (c *current) onSymbol65() (bool, error) {
	log.Debug("Mdash (a)")
	return c.isPrecededBySpace(), nil

}

func (p *parser) callonSymbol65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol65()
}

func (c *current) onSymbol67() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonSymbol67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol67()
}

func (c *current) onSymbol71() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol71()
}

func (c *current) onSymbol62() (interface{}, error) {
	return types.NewSymbol(" -- ")

}

func (p *parser) callonSymbol62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol62()
}

func (c *current) onSymbol81() (bool, error) {
	log.Debug("Mdash (b)")
	return c.isPrecededByAlphanum(), nil

}

func (p *parser) callonSymbol81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol81()
}

func (c *current) onSymbol85() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSymbol85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol85()
}

func (c *current) onSymbol78() (interface{}, error) {
	return types.NewSymbol("--")

}

func (p *parser) callonSymbol78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol78()
}

func (c *current) onSymbol92() (interface{}, error) {
	return types.NewSymbol("->")

}

func (p *parser) callonSymbol92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol92()
}

func (c *current) onSymbol94() (interface{}, error) {
	return types.NewSymbol("<-")

}

func (p *parser) callonSymbol94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol94()
}

func (c *current) onSymbol96() (interface{}, error) {
	return types.NewSymbol("=>")

}

func (p *parser) callonSymbol96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol96()
}

func (c *current) onSymbol98() (interface{}, error) {
	return types.NewSymbol("<=")

}

func (p *parser) callonSymbol98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol98()
}

func (c *current) onQuotationMark8() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonQuotationMark8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark8()
}

func (c *current) onQuotationMark2() (interface{}, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("`\"")

}

func (p *parser) callonQuotationMark2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark2()
}

func (c *current) onQuotationMark12() (interface{}, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("\"`")

}

func (p *parser) callonQuotationMark12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark12()
}

func (c *current) onQuotationMark23() (bool, error) {
	log.Debug("SingleQuoteMonospaceTextStartDelimiter")
	return c.isSingleQuotedTextAllowed(), nil

}

func (p *parser) callonQuotationMark23() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark23()
}

func (c *current) onQuotationMark17() (interface{}, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("`'")

}

func (p *parser) callonQuotationMark17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark17()
}

func (c *current) onQuotationMark27() (interface{}, error) {
	// do not conflict with quotation mark within monospace text
	return types.NewSymbol("'`")

}

func (p *parser) callonQuotationMark27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotationMark27()
}

func (c *current) onTableColumnsAttribute14() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute14()
}

func (c *current) onTableColumnsAttribute11(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute11(stack["n"])
}

func (c *current) onTableColumnsAttribute24() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute24()
}

func (c *current) onTableColumnsAttribute26() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute26()
}

func (c *current) onTableColumnsAttribute28() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute28()
}

func (c *current) onTableColumnsAttribute33() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute33()
}

func (c *current) onTableColumnsAttribute35() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute35()
}

func (c *current) onTableColumnsAttribute37() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute37()
}

func (c *current) onTableColumnsAttribute42() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute42()
}

func (c *current) onTableColumnsAttribute48() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute48()
}

func (c *current) onTableColumnsAttribute52() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute52()
}

func (c *current) onTableColumnsAttribute57(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute57() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute57(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation12() (interface{}, error) {
	// excluding EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation16() (interface{}, error) {
	// avoid conflict with ellipsis (`...`)
	log.Debugf("new dot at position '%v'", c.pos.String())
	return string(c.text), nil

}

func (p *parser) callonFileLocation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation16()
}

func (c *current) onFileLocation27() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileLocation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation27()
}

func (c *current) onFileLocation37() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileLocation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation37()
}

func (c *current) onFileLocation39() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileLocation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation39()
}

func (c *current) onFileLocation47() (bool, error) {

	return c.isSubstitutionDisabled(Replacements) // only if 'replacements' sub is disabled

}

func (p *parser) callonFileLocation47() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation47()
}

func (c *current) onFileLocation50() (bool, error) {

	return c.isSubstitutionDisabled(Macros)

}

func (p *parser) callonFileLocation50() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation50()
}

func (c *current) onFileLocation53() (bool, error) {

	return c.isSubstitutionDisabled(Quotes)

}

func (p *parser) callonFileLocation53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation53()
}

func (c *current) onFileLocation56() (bool, error) {

	return c.allSubstitutionsDisabled(Macros, Quotes) // all substitutions involving attributes must be disabled

}

func (p *parser) callonFileLocation56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation56()
}

func (c *current) onFileLocation30() (interface{}, error) {

	log.Debugf("new punctuation: '%v'", string(c.text))
	return string(c.text), nil

}

func (p *parser) callonFileLocation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation30()
}

func (c *current) onFileLocation63() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonFileLocation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation63()
}

func (c *current) onFileLocation67() (bool, error) {
	return c.isSubstitutionEnabled(AttributeRefs)

}

func (p *parser) callonFileLocation67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation67()
}

func (c *current) onFileLocation74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74()
}

func (c *current) onFileLocation70(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70(stack["name"])
}

func (c *current) onFileLocation84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation84()
}

func (c *current) onFileLocation80(name interface{}) (interface{}, error) {

	return types.NewAttributeReference(name.(string), string(c.text))

}

func (p *parser) callonFileLocation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation80(stack["name"])
}

func (c *current) onFileLocation94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94()
}

func (c *current) onFileLocation106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation106()
}

func (c *current) onFileLocation108() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation108()
}

func (c *current) onFileLocation101(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation101(stack["start"])
}

func (c *current) onFileLocation90(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation90(stack["name"], stack["start"])
}

func (c *current) onFileLocation116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation116()
}

func (c *current) onFileLocation128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation128()
}

func (c *current) onFileLocation130() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation130()
}

func (c *current) onFileLocation123(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation123(stack["start"])
}

func (c *current) onFileLocation112(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation112(stack["name"], stack["start"])
}

func (c *current) onFileLocation65(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation65(stack["element"])
}

func (c *current) onFileLocation134() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation134()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation140() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation140()
}

func (c *current) onFileLocation136(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation136(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
