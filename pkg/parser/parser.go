// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 93, col: 32, offset: 2658},
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 32, offset: 2658},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 36, offset: 2662},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2667},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2693},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2693},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2694},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2695},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2695},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2696},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2717,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2883},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2901},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2901},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2905},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2909},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2916},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2931},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2935},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2935},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2953},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2965},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2966},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2966},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2986},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3009},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3018},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3018},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3045},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3046},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3046},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3066},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3089},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3099},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3099},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3200},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3219},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3247},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3277},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3306},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3306},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3306},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3306},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3310},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3311},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3315},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3324},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3341},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3411},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3443},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3443},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3443},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3443},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3447},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3458},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3466},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3482},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3561},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3579},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3579},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3579},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3579},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3583},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3593},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3613},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3620},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3642},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3642},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3646},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3646},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3651},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3651},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3793},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3815},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3815},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3816},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3816},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3829},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3829},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3830},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3834},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3835},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3839},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3840},
											name: "Newline",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3848,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3912},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3912},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3916},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3923},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3923},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3924},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3924},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3937},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3937},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3938},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3942},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3943},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3948,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3989},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4150},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4170},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4170},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4170},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4170},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4174},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4175},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4179},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4198},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4199},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4199},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4199},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4210},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4234},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4234},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4239},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4247},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4248},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4271},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4271},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4276},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4286},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4287},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4404},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4404},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4404},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4413},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4435},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4435},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4440},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4450},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4451},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4690},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4716},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4716},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4716},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4721},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4728},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4729},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4729},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4741},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4751},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4751},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4752},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4756},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4757},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4761},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4762},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4767,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4809},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4809},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4809},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4809},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4815},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4822},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4823},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4823},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4835},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4845},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4845},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4846},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4850},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4851},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4855},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4856},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4861,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4866},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4866},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4870},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4871},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4911},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4935},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4935},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4936},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4936},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4948},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4958},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4958},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4959},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4963},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4964},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4969,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 5010},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5036},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5036},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5037},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5037},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5049},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5059},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5059},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5060},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5065,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5221},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5253},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5253},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5257},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5263},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5286},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5290},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5296},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5297},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5298},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5298},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5298},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5302},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5309},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 164, col: 138, offset: 5358},
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 138, offset: 5358},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 142, offset: 5362},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5610},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5635},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5635},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5636},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5636},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5644},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5652},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5660},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5665},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5666},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5666},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5674},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5682},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5690},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5758},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5758},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5759},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5759},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5760},
									name: "Newline",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5768,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5808},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5834},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5834},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5845},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5868},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 179, col: 65, offset: 5872},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 65, offset: 5872},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 69, offset: 5876},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5944},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5944},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5948},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5954},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5977},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 181, col: 43, offset: 5982},
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 43, offset: 5982},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 47, offset: 5986},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6053},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6086},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6086},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6090},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6096},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6119},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6307},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6328},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 192, col: 22, offset: 6328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 6328},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 192, col: 28, offset: 6334},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 29, offset: 6335},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 48, offset: 6354},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 48, offset: 6354},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6436},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6456},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6456},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6456},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6458},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6458},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6464},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6470},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6546},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6552},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6552},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6573},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6597},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6620},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6648},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6676},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6703},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6730},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6767},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6795},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6978},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 7001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 7001},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 7019},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7036},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7049},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7049},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7054},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7058},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7062},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 213, col: 32, offset: 7067},
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 32, offset: 7067},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 36, offset: 7071},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7124},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7124},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7129},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7133},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7137},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 215, col: 23, offset: 7142},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 23, offset: 7142},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 27, offset: 7146},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7198},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7217},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7217},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7222},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7226},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7230},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7235},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7235},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7509},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7525},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7525},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7529},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7536},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7536},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7536},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7546},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7547},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7547},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7559},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7569},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7569},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7570},
																	name: "Newline",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7578,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7619},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7771},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7786},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7786},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7791},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7797},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7797},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7797},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7807},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7808},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7808},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7820},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7830},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7830},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7831},
																	name: "Newline",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7839},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7840},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7844,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7885},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 235, col: 8, offset: 7889},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 8, offset: 7889},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 12, offset: 7893},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7949},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7969},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7969},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7981},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7981},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7985},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8117},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8146},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8146},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8150},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8153},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8169},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 57, offset: 8173},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 57, offset: 8173},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 61, offset: 8177},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8332},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8352},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8352},
							val:        "[source",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 250, col: 5, offset: 8367},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 14, offset: 8376},
								expr: &actionExpr{
									pos: position{line: 250, col: 15, offset: 8377},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 250, col: 15, offset: 8377},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 250, col: 15, offset: 8377},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 250, col: 19, offset: 8381},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 250, col: 24, offset: 8386},
													expr: &ruleRefExpr{
														pos:  position{line: 250, col: 25, offset: 8387},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8442},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 12, offset: 8449},
								expr: &actionExpr{
									pos: position{line: 251, col: 13, offset: 8450},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 251, col: 13, offset: 8450},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 251, col: 13, offset: 8450},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 251, col: 17, offset: 8454},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 251, col: 22, offset: 8459},
													expr: &ruleRefExpr{
														pos:  position{line: 251, col: 23, offset: 8460},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 252, col: 5, offset: 8507},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 9, offset: 8511},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 9, offset: 8511},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 13, offset: 8515},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 257, col: 1, offset: 8666},
			expr: &actionExpr{
				pos: position{line: 257, col: 19, offset: 8684},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 257, col: 19, offset: 8684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 19, offset: 8684},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 257, col: 23, offset: 8688},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 257, col: 34, offset: 8699},
								expr: &ruleRefExpr{
									pos:  position{line: 257, col: 35, offset: 8700},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 54, offset: 8719},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 58, offset: 8723},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 58, offset: 8723},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 62, offset: 8727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 261, col: 1, offset: 8799},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 8824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 8824},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 8824},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 5, offset: 8824},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 10, offset: 8829},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 262, col: 24, offset: 8843},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 262, col: 28, offset: 8847},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 262, col: 34, offset: 8853},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 35, offset: 8854},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 262, col: 52, offset: 8871},
									expr: &litMatcher{
										pos:        position{line: 262, col: 52, offset: 8871},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 262, col: 57, offset: 8876},
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 57, offset: 8876},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 9, offset: 8981},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 264, col: 9, offset: 8981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 264, col: 9, offset: 8981},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 14, offset: 8986},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 264, col: 28, offset: 9000},
									expr: &litMatcher{
										pos:        position{line: 264, col: 28, offset: 9000},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 264, col: 33, offset: 9005},
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 33, offset: 9005},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 268, col: 1, offset: 9098},
			expr: &actionExpr{
				pos: position{line: 268, col: 17, offset: 9114},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 268, col: 17, offset: 9114},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 268, col: 17, offset: 9114},
							expr: &litMatcher{
								pos:        position{line: 268, col: 18, offset: 9115},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 26, offset: 9123},
							expr: &litMatcher{
								pos:        position{line: 268, col: 27, offset: 9124},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 35, offset: 9132},
							expr: &litMatcher{
								pos:        position{line: 268, col: 36, offset: 9133},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 46, offset: 9143},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 47, offset: 9144},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 54, offset: 9151},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 268, col: 58, offset: 9155},
								expr: &choiceExpr{
									pos: position{line: 268, col: 59, offset: 9156},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 268, col: 59, offset: 9156},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 71, offset: 9168},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 92, offset: 9189},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 92, offset: 9189},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 272, col: 1, offset: 9229},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 9247},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 19, offset: 9247},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 272, col: 25, offset: 9253},
						expr: &choiceExpr{
							pos: position{line: 272, col: 26, offset: 9254},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 272, col: 26, offset: 9254},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 38, offset: 9266},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 47, offset: 9275},
									name: "OtherAttributeChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 276, col: 1, offset: 9333},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 9361},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 9361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 29, offset: 9361},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 276, col: 35, offset: 9367},
								expr: &choiceExpr{
									pos: position{line: 276, col: 36, offset: 9368},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 276, col: 36, offset: 9368},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 48, offset: 9380},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 57, offset: 9389},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 276, col: 78, offset: 9410},
							expr: &litMatcher{
								pos:        position{line: 276, col: 79, offset: 9411},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 280, col: 1, offset: 9577},
			expr: &seqExpr{
				pos: position{line: 280, col: 24, offset: 9600},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 280, col: 24, offset: 9600},
						expr: &ruleRefExpr{
							pos:  position{line: 280, col: 25, offset: 9601},
							name: "Newline",
						},
					},
					&notExpr{
						pos: position{line: 280, col: 33, offset: 9609},
						expr: &litMatcher{
							pos:        position{line: 280, col: 34, offset: 9610},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 38, offset: 9614},
						expr: &litMatcher{
							pos:        position{line: 280, col: 39, offset: 9615},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 43, offset: 9619},
						expr: &litMatcher{
							pos:        position{line: 280, col: 44, offset: 9620},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 280, col: 48, offset: 9624,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 282, col: 1, offset: 9628},
			expr: &actionExpr{
				pos: position{line: 282, col: 21, offset: 9648},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 282, col: 21, offset: 9648},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 21, offset: 9648},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 36, offset: 9663},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 36, offset: 9663},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 40, offset: 9667},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 286, col: 1, offset: 9740},
			expr: &actionExpr{
				pos: position{line: 286, col: 20, offset: 9759},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 286, col: 20, offset: 9759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 20, offset: 9759},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 29, offset: 9768},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 29, offset: 9768},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 33, offset: 9772},
							expr: &litMatcher{
								pos:        position{line: 286, col: 33, offset: 9772},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 38, offset: 9777},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 45, offset: 9784},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 46, offset: 9785},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 63, offset: 9802},
							expr: &litMatcher{
								pos:        position{line: 286, col: 63, offset: 9802},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 68, offset: 9807},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 74, offset: 9813},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 75, offset: 9814},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 92, offset: 9831},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 96, offset: 9835},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 96, offset: 9835},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 100, offset: 9839},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 290, col: 1, offset: 9908},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 9927},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 9927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 20, offset: 9927},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 29, offset: 9936},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 29, offset: 9936},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 33, offset: 9940},
							expr: &litMatcher{
								pos:        position{line: 290, col: 33, offset: 9940},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 38, offset: 9945},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 45, offset: 9952},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 46, offset: 9953},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 63, offset: 9970},
							expr: &litMatcher{
								pos:        position{line: 290, col: 63, offset: 9970},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 68, offset: 9975},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 74, offset: 9981},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 75, offset: 9982},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 92, offset: 9999},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 96, offset: 10003},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 96, offset: 10003},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 100, offset: 10007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 294, col: 1, offset: 10094},
			expr: &actionExpr{
				pos: position{line: 294, col: 19, offset: 10112},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 294, col: 19, offset: 10112},
					expr: &choiceExpr{
						pos: position{line: 294, col: 20, offset: 10113},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 294, col: 20, offset: 10113},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 294, col: 32, offset: 10125},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 294, col: 42, offset: 10135},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 294, col: 42, offset: 10135},
										expr: &litMatcher{
											pos:        position{line: 294, col: 43, offset: 10136},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 47, offset: 10140},
										expr: &litMatcher{
											pos:        position{line: 294, col: 48, offset: 10141},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 52, offset: 10145},
										expr: &ruleRefExpr{
											pos:  position{line: 294, col: 53, offset: 10146},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 294, col: 57, offset: 10150,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 298, col: 1, offset: 10191},
			expr: &actionExpr{
				pos: position{line: 298, col: 21, offset: 10211},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 298, col: 21, offset: 10211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 21, offset: 10211},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 298, col: 25, offset: 10215},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 298, col: 31, offset: 10221},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 32, offset: 10222},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 51, offset: 10241},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 305, col: 1, offset: 10415},
			expr: &actionExpr{
				pos: position{line: 305, col: 12, offset: 10426},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 305, col: 12, offset: 10426},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 12, offset: 10426},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 23, offset: 10437},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 24, offset: 10438},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 5, offset: 10462},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 306, col: 12, offset: 10469},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 306, col: 12, offset: 10469},
									expr: &litMatcher{
										pos:        position{line: 306, col: 13, offset: 10470},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 310, col: 5, offset: 10561},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 314, col: 5, offset: 10713},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 5, offset: 10713},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 9, offset: 10717},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 16, offset: 10724},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 31, offset: 10739},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 314, col: 35, offset: 10743},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 35, offset: 10743},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 53, offset: 10761},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 318, col: 1, offset: 10867},
			expr: &actionExpr{
				pos: position{line: 318, col: 18, offset: 10884},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 318, col: 18, offset: 10884},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 318, col: 27, offset: 10893},
						expr: &seqExpr{
							pos: position{line: 318, col: 28, offset: 10894},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 318, col: 28, offset: 10894},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 29, offset: 10895},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 318, col: 37, offset: 10903},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 38, offset: 10904},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 318, col: 54, offset: 10920},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 322, col: 1, offset: 11041},
			expr: &actionExpr{
				pos: position{line: 322, col: 17, offset: 11057},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 17, offset: 11057},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 322, col: 26, offset: 11066},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 322, col: 26, offset: 11066},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 11087},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 11105},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 11130},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11152},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11175},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11190},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 329, col: 11, offset: 11215},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 330, col: 11, offset: 11236},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 11, offset: 11276},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 11, offset: 11296},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 333, col: 11, offset: 11316},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 340, col: 1, offset: 11471},
			expr: &seqExpr{
				pos: position{line: 340, col: 31, offset: 11501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 340, col: 31, offset: 11501},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 41, offset: 11511},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 345, col: 1, offset: 11622},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11640},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 345, col: 19, offset: 11640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 19, offset: 11640},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 25, offset: 11646},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 40, offset: 11661},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 345, col: 45, offset: 11666},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 52, offset: 11673},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 68, offset: 11689},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 75, offset: 11696},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 349, col: 1, offset: 11837},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11856},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 20, offset: 11856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 26, offset: 11862},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 41, offset: 11877},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 45, offset: 11881},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 52, offset: 11888},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 68, offset: 11904},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 75, offset: 11911},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 353, col: 1, offset: 12053},
			expr: &actionExpr{
				pos: position{line: 353, col: 18, offset: 12070},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 353, col: 18, offset: 12070},
					expr: &choiceExpr{
						pos: position{line: 353, col: 19, offset: 12071},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 353, col: 19, offset: 12071},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 33, offset: 12085},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 39, offset: 12091},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 357, col: 1, offset: 12133},
			expr: &actionExpr{
				pos: position{line: 357, col: 19, offset: 12151},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 357, col: 19, offset: 12151},
					expr: &choiceExpr{
						pos: position{line: 357, col: 20, offset: 12152},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 357, col: 20, offset: 12152},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 357, col: 33, offset: 12165},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 357, col: 33, offset: 12165},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 34, offset: 12166},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 357, col: 37, offset: 12169},
										expr: &litMatcher{
											pos:        position{line: 357, col: 38, offset: 12170},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 42, offset: 12174},
										expr: &litMatcher{
											pos:        position{line: 357, col: 43, offset: 12175},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 47, offset: 12179},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 48, offset: 12180},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 357, col: 52, offset: 12184,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 361, col: 1, offset: 12225},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12248},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12248},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 28, offset: 12252},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 361, col: 34, offset: 12258},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 35, offset: 12259},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 54, offset: 12278},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 368, col: 1, offset: 12458},
			expr: &actionExpr{
				pos: position{line: 368, col: 18, offset: 12475},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 368, col: 18, offset: 12475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 18, offset: 12475},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 368, col: 24, offset: 12481},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 368, col: 24, offset: 12481},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 368, col: 24, offset: 12481},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 368, col: 36, offset: 12493},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 42, offset: 12499},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 368, col: 56, offset: 12513},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 74, offset: 12531},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 370, col: 8, offset: 12685},
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 8, offset: 12685},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 12, offset: 12689},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 374, col: 1, offset: 12741},
			expr: &actionExpr{
				pos: position{line: 374, col: 26, offset: 12766},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 26, offset: 12766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 26, offset: 12766},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 30, offset: 12770},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 374, col: 36, offset: 12776},
								expr: &choiceExpr{
									pos: position{line: 374, col: 37, offset: 12777},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 374, col: 37, offset: 12777},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 59, offset: 12799},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 80, offset: 12820},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 99, offset: 12839},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 378, col: 1, offset: 12909},
			expr: &actionExpr{
				pos: position{line: 378, col: 24, offset: 12932},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 378, col: 24, offset: 12932},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 24, offset: 12932},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 33, offset: 12941},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 40, offset: 12948},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 378, col: 66, offset: 12974},
							expr: &litMatcher{
								pos:        position{line: 378, col: 66, offset: 12974},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 382, col: 1, offset: 13033},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 13061},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 13061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 382, col: 29, offset: 13061},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 382, col: 36, offset: 13068},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 36, offset: 13068},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 11, offset: 13185},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 384, col: 11, offset: 13221},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 11, offset: 13247},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 386, col: 11, offset: 13279},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 11, offset: 13311},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 388, col: 11, offset: 13338},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 388, col: 31, offset: 13358},
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 13358},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 388, col: 36, offset: 13363},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 388, col: 36, offset: 13363},
									expr: &litMatcher{
										pos:        position{line: 388, col: 37, offset: 13364},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 388, col: 43, offset: 13370},
									expr: &litMatcher{
										pos:        position{line: 388, col: 44, offset: 13371},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 392, col: 1, offset: 13403},
			expr: &actionExpr{
				pos: position{line: 392, col: 23, offset: 13425},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 23, offset: 13425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 23, offset: 13425},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 30, offset: 13432},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 30, offset: 13432},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 47, offset: 13449},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13471},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13478},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13479},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13479},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13479},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13483},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13490},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13490},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13507},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 399, col: 1, offset: 13645},
			expr: &actionExpr{
				pos: position{line: 399, col: 29, offset: 13673},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 399, col: 29, offset: 13673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 29, offset: 13673},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 34, offset: 13678},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 399, col: 41, offset: 13685},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 399, col: 41, offset: 13685},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 58, offset: 13702},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 13724},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 12, offset: 13731},
								expr: &actionExpr{
									pos: position{line: 400, col: 13, offset: 13732},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 400, col: 13, offset: 13732},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 400, col: 13, offset: 13732},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 400, col: 17, offset: 13736},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 400, col: 24, offset: 13743},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 400, col: 24, offset: 13743},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 400, col: 41, offset: 13760},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 9, offset: 13813},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 406, col: 1, offset: 13903},
			expr: &actionExpr{
				pos: position{line: 406, col: 19, offset: 13921},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 406, col: 19, offset: 13921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 406, col: 19, offset: 13921},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 26, offset: 13928},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 34, offset: 13936},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 406, col: 39, offset: 13941},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 44, offset: 13946},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 410, col: 1, offset: 14034},
			expr: &actionExpr{
				pos: position{line: 410, col: 25, offset: 14058},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 410, col: 25, offset: 14058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 25, offset: 14058},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 30, offset: 14063},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 37, offset: 14070},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 45, offset: 14078},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 50, offset: 14083},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 55, offset: 14088},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 63, offset: 14096},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 414, col: 1, offset: 14181},
			expr: &actionExpr{
				pos: position{line: 414, col: 20, offset: 14200},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 20, offset: 14200},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 414, col: 32, offset: 14212},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 418, col: 1, offset: 14307},
			expr: &actionExpr{
				pos: position{line: 418, col: 26, offset: 14332},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 418, col: 26, offset: 14332},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 26, offset: 14332},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 418, col: 31, offset: 14337},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 43, offset: 14349},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 51, offset: 14357},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 422, col: 1, offset: 14449},
			expr: &actionExpr{
				pos: position{line: 422, col: 23, offset: 14471},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 422, col: 23, offset: 14471},
					expr: &seqExpr{
						pos: position{line: 422, col: 24, offset: 14472},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 422, col: 24, offset: 14472},
								expr: &litMatcher{
									pos:        position{line: 422, col: 25, offset: 14473},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 29, offset: 14477},
								expr: &litMatcher{
									pos:        position{line: 422, col: 30, offset: 14478},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 34, offset: 14482},
								expr: &ruleRefExpr{
									pos:  position{line: 422, col: 35, offset: 14483},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 422, col: 38, offset: 14486,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 426, col: 1, offset: 14526},
			expr: &actionExpr{
				pos: position{line: 426, col: 23, offset: 14548},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 426, col: 23, offset: 14548},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 426, col: 24, offset: 14549},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 24, offset: 14549},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 426, col: 34, offset: 14559},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 42, offset: 14567},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 48, offset: 14573},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 426, col: 73, offset: 14598},
							expr: &litMatcher{
								pos:        position{line: 426, col: 73, offset: 14598},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 430, col: 1, offset: 14747},
			expr: &actionExpr{
				pos: position{line: 430, col: 28, offset: 14774},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 430, col: 28, offset: 14774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 28, offset: 14774},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 35, offset: 14781},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 54, offset: 14800},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 54, offset: 14800},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 430, col: 59, offset: 14805},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 430, col: 59, offset: 14805},
									expr: &litMatcher{
										pos:        position{line: 430, col: 60, offset: 14806},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 430, col: 66, offset: 14812},
									expr: &litMatcher{
										pos:        position{line: 430, col: 67, offset: 14813},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 434, col: 1, offset: 14845},
			expr: &actionExpr{
				pos: position{line: 434, col: 22, offset: 14866},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 434, col: 22, offset: 14866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 22, offset: 14866},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 29, offset: 14873},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 5, offset: 14887},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 435, col: 12, offset: 14894},
								expr: &actionExpr{
									pos: position{line: 435, col: 13, offset: 14895},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 435, col: 13, offset: 14895},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 435, col: 13, offset: 14895},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 435, col: 17, offset: 14899},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 435, col: 24, offset: 14906},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 441, col: 1, offset: 15037},
			expr: &choiceExpr{
				pos: position{line: 441, col: 13, offset: 15049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 441, col: 13, offset: 15049},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 441, col: 13, offset: 15049},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 441, col: 18, offset: 15054},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 441, col: 18, offset: 15054},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 441, col: 30, offset: 15066},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 443, col: 5, offset: 15134},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 443, col: 5, offset: 15134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 443, col: 5, offset: 15134},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 443, col: 9, offset: 15138},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 443, col: 14, offset: 15143},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 443, col: 14, offset: 15143},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 443, col: 26, offset: 15155},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 447, col: 1, offset: 15223},
			expr: &actionExpr{
				pos: position{line: 447, col: 16, offset: 15238},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 447, col: 16, offset: 15238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 16, offset: 15238},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 447, col: 23, offset: 15245},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 447, col: 23, offset: 15245},
									expr: &litMatcher{
										pos:        position{line: 447, col: 24, offset: 15246},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 450, col: 5, offset: 15300},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 460, col: 1, offset: 15594},
			expr: &actionExpr{
				pos: position{line: 460, col: 21, offset: 15614},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 460, col: 21, offset: 15614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 21, offset: 15614},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 460, col: 29, offset: 15622},
								expr: &choiceExpr{
									pos: position{line: 460, col: 30, offset: 15623},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 460, col: 30, offset: 15623},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 53, offset: 15646},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 460, col: 74, offset: 15667},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 460, col: 74, offset: 15667,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 107, offset: 15700},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 464, col: 1, offset: 15771},
			expr: &actionExpr{
				pos: position{line: 464, col: 25, offset: 15795},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 464, col: 25, offset: 15795},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 25, offset: 15795},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 464, col: 33, offset: 15803},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 464, col: 38, offset: 15808},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 38, offset: 15808},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 78, offset: 15848},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 468, col: 1, offset: 15913},
			expr: &actionExpr{
				pos: position{line: 468, col: 23, offset: 15935},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 468, col: 23, offset: 15935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 23, offset: 15935},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 468, col: 31, offset: 15943},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 468, col: 36, offset: 15948},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 36, offset: 15948},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 468, col: 76, offset: 15988},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 475, col: 1, offset: 16152},
			expr: &oneOrMoreExpr{
				pos: position{line: 475, col: 14, offset: 16165},
				expr: &ruleRefExpr{
					pos:  position{line: 475, col: 14, offset: 16165},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 477, col: 1, offset: 16176},
			expr: &choiceExpr{
				pos: position{line: 477, col: 13, offset: 16188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 13, offset: 16188},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 31, offset: 16206},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 51, offset: 16226},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 69, offset: 16244},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 479, col: 1, offset: 16270},
			expr: &choiceExpr{
				pos: position{line: 479, col: 18, offset: 16287},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 18, offset: 16287},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 479, col: 18, offset: 16287},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 27, offset: 16296},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 9, offset: 16353},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 481, col: 9, offset: 16353},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 481, col: 15, offset: 16359},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 16, offset: 16360},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 485, col: 1, offset: 16452},
			expr: &actionExpr{
				pos: position{line: 485, col: 22, offset: 16473},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 485, col: 22, offset: 16473},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 485, col: 22, offset: 16473},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 23, offset: 16474},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16482},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16483},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 16498},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 16499},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 16521},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 16522},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 489, col: 5, offset: 16548},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 6, offset: 16549},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 490, col: 5, offset: 16577},
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 6, offset: 16578},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 491, col: 5, offset: 16603},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 6, offset: 16604},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 492, col: 5, offset: 16625},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 6, offset: 16626},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 493, col: 5, offset: 16645},
							expr: &seqExpr{
								pos: position{line: 493, col: 7, offset: 16647},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 493, col: 7, offset: 16647},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 493, col: 33, offset: 16673},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 16704},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 495, col: 9, offset: 16719},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 495, col: 9, offset: 16719},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 495, col: 9, offset: 16719},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 495, col: 18, offset: 16728},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 19, offset: 16729},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 495, col: 35, offset: 16745},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 495, col: 45, offset: 16755},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 46, offset: 16756},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 12, offset: 16908},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 501, col: 1, offset: 16955},
			expr: &seqExpr{
				pos: position{line: 501, col: 25, offset: 16979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 501, col: 25, offset: 16979},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 501, col: 29, offset: 16983},
						expr: &ruleRefExpr{
							pos:  position{line: 501, col: 29, offset: 16983},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 501, col: 33, offset: 16987},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 503, col: 1, offset: 16993},
			expr: &actionExpr{
				pos: position{line: 503, col: 29, offset: 17021},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 503, col: 29, offset: 17021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 29, offset: 17021},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 503, col: 41, offset: 17033},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 41, offset: 17033},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 53, offset: 17045},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 74, offset: 17066},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 82, offset: 17074},
								name: "ContinuedListItemBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemBlock",
			pos:  position{line: 507, col: 1, offset: 17212},
			expr: &actionExpr{
				pos: position{line: 507, col: 27, offset: 17238},
				run: (*parser).callonContinuedListItemBlock1,
				expr: &seqExpr{
					pos: position{line: 507, col: 27, offset: 17238},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 507, col: 27, offset: 17238},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 28, offset: 17239},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 5, offset: 17248},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 508, col: 12, offset: 17255},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 508, col: 12, offset: 17255},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 509, col: 11, offset: 17280},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 17304},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 511, col: 11, offset: 17358},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 512, col: 11, offset: 17380},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 11, offset: 17399},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 514, col: 11, offset: 17450},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 515, col: 11, offset: 17474},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 516, col: 11, offset: 17514},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 517, col: 11, offset: 17548},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 518, col: 11, offset: 17585},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 519, col: 11, offset: 17610},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 526, col: 1, offset: 17771},
			expr: &actionExpr{
				pos: position{line: 526, col: 20, offset: 17790},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 526, col: 20, offset: 17790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 526, col: 20, offset: 17790},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 526, col: 31, offset: 17801},
								expr: &ruleRefExpr{
									pos:  position{line: 526, col: 32, offset: 17802},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 52, offset: 17822},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 60, offset: 17830},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 83, offset: 17853},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 92, offset: 17862},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 530, col: 1, offset: 18002},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 18032},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 18032},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 531, col: 5, offset: 18032},
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 5, offset: 18032},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 531, col: 9, offset: 18036},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 533, col: 9, offset: 18099},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 533, col: 9, offset: 18099},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 533, col: 9, offset: 18099},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 533, col: 9, offset: 18099},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 533, col: 16, offset: 18106},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 533, col: 16, offset: 18106},
															expr: &litMatcher{
																pos:        position{line: 533, col: 17, offset: 18107},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 537, col: 9, offset: 18207},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 556, col: 11, offset: 18924},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 556, col: 11, offset: 18924},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 556, col: 11, offset: 18924},
													expr: &charClassMatcher{
														pos:        position{line: 556, col: 12, offset: 18925},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 556, col: 20, offset: 18933},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 558, col: 13, offset: 19044},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 558, col: 13, offset: 19044},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 558, col: 14, offset: 19045},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 558, col: 21, offset: 19052},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 560, col: 13, offset: 19166},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 560, col: 13, offset: 19166},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 560, col: 14, offset: 19167},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 560, col: 21, offset: 19174},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 562, col: 13, offset: 19288},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 562, col: 13, offset: 19288},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 562, col: 13, offset: 19288},
													expr: &charClassMatcher{
														pos:        position{line: 562, col: 14, offset: 19289},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 562, col: 22, offset: 19297},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 564, col: 13, offset: 19411},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 564, col: 13, offset: 19411},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 564, col: 13, offset: 19411},
													expr: &charClassMatcher{
														pos:        position{line: 564, col: 14, offset: 19412},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 564, col: 22, offset: 19420},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 566, col: 12, offset: 19533},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 12, offset: 19533},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 570, col: 1, offset: 19565},
			expr: &actionExpr{
				pos: position{line: 570, col: 27, offset: 19591},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 570, col: 27, offset: 19591},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 570, col: 37, offset: 19601},
						expr: &ruleRefExpr{
							pos:  position{line: 570, col: 37, offset: 19601},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 577, col: 1, offset: 19801},
			expr: &actionExpr{
				pos: position{line: 577, col: 22, offset: 19822},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 577, col: 22, offset: 19822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 577, col: 22, offset: 19822},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 33, offset: 19833},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 34, offset: 19834},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 54, offset: 19854},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 62, offset: 19862},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 87, offset: 19887},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 98, offset: 19898},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 99, offset: 19899},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 129, offset: 19929},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 138, offset: 19938},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 581, col: 1, offset: 20096},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 20128},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 20128},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 582, col: 5, offset: 20128},
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 5, offset: 20128},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 9, offset: 20132},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 582, col: 17, offset: 20140},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 584, col: 9, offset: 20197},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 584, col: 9, offset: 20197},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 584, col: 9, offset: 20197},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 584, col: 16, offset: 20204},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 584, col: 16, offset: 20204},
															expr: &litMatcher{
																pos:        position{line: 584, col: 17, offset: 20205},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 588, col: 9, offset: 20305},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 605, col: 14, offset: 21012},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 605, col: 21, offset: 21019},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 605, col: 22, offset: 21020},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 607, col: 13, offset: 21106},
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 13, offset: 21106},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 611, col: 1, offset: 21139},
			expr: &actionExpr{
				pos: position{line: 611, col: 32, offset: 21170},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 611, col: 32, offset: 21170},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 611, col: 32, offset: 21170},
							expr: &litMatcher{
								pos:        position{line: 611, col: 33, offset: 21171},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 37, offset: 21175},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 612, col: 7, offset: 21189},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 612, col: 7, offset: 21189},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 612, col: 7, offset: 21189},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 613, col: 7, offset: 21234},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 613, col: 7, offset: 21234},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 614, col: 7, offset: 21277},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 614, col: 7, offset: 21277},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 615, col: 7, offset: 21319},
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 7, offset: 21319},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 619, col: 1, offset: 21358},
			expr: &actionExpr{
				pos: position{line: 619, col: 29, offset: 21386},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 619, col: 29, offset: 21386},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 619, col: 39, offset: 21396},
						expr: &ruleRefExpr{
							pos:  position{line: 619, col: 39, offset: 21396},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 626, col: 1, offset: 21712},
			expr: &actionExpr{
				pos: position{line: 626, col: 20, offset: 21731},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 626, col: 20, offset: 21731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 20, offset: 21731},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 626, col: 31, offset: 21742},
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 32, offset: 21743},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 52, offset: 21763},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 58, offset: 21769},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 85, offset: 21796},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 96, offset: 21807},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 122, offset: 21833},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 626, col: 134, offset: 21845},
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 135, offset: 21846},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 630, col: 1, offset: 21992},
			expr: &actionExpr{
				pos: position{line: 630, col: 30, offset: 22021},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 630, col: 30, offset: 22021},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 630, col: 39, offset: 22030},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 630, col: 39, offset: 22030},
							expr: &choiceExpr{
								pos: position{line: 630, col: 40, offset: 22031},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 630, col: 40, offset: 22031},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 630, col: 52, offset: 22043},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 630, col: 62, offset: 22053},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 630, col: 62, offset: 22053},
												expr: &ruleRefExpr{
													pos:  position{line: 630, col: 63, offset: 22054},
													name: "Newline",
												},
											},
											&notExpr{
												pos: position{line: 630, col: 71, offset: 22062},
												expr: &ruleRefExpr{
													pos:  position{line: 630, col: 72, offset: 22063},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 630, col: 97, offset: 22088,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 636, col: 1, offset: 22217},
			expr: &actionExpr{
				pos: position{line: 636, col: 24, offset: 22240},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 636, col: 24, offset: 22240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 636, col: 33, offset: 22249},
						expr: &seqExpr{
							pos: position{line: 636, col: 34, offset: 22250},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 636, col: 34, offset: 22250},
									expr: &ruleRefExpr{
										pos:  position{line: 636, col: 35, offset: 22251},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 636, col: 43, offset: 22259},
									expr: &ruleRefExpr{
										pos:  position{line: 636, col: 44, offset: 22260},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 636, col: 69, offset: 22285},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 640, col: 1, offset: 22420},
			expr: &actionExpr{
				pos: position{line: 640, col: 31, offset: 22450},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 640, col: 31, offset: 22450},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 640, col: 40, offset: 22459},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 640, col: 40, offset: 22459},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 641, col: 11, offset: 22480},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 642, col: 11, offset: 22498},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 643, col: 11, offset: 22523},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 22552},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 645, col: 11, offset: 22572},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 22594},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 22617},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 22632},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 22657},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 650, col: 11, offset: 22678},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 651, col: 11, offset: 22718},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 652, col: 11, offset: 22738},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 653, col: 11, offset: 22758},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 657, col: 1, offset: 22800},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 22833},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 22833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 22833},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 658, col: 16, offset: 22844},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 658, col: 16, offset: 22844},
									expr: &litMatcher{
										pos:        position{line: 658, col: 17, offset: 22845},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 661, col: 5, offset: 22903},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 665, col: 6, offset: 23079},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 665, col: 6, offset: 23079},
									expr: &choiceExpr{
										pos: position{line: 665, col: 7, offset: 23080},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 665, col: 7, offset: 23080},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 665, col: 12, offset: 23085},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 665, col: 24, offset: 23097},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 669, col: 1, offset: 23137},
			expr: &actionExpr{
				pos: position{line: 669, col: 31, offset: 23167},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 669, col: 31, offset: 23167},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 669, col: 40, offset: 23176},
						expr: &ruleRefExpr{
							pos:  position{line: 669, col: 41, offset: 23177},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 676, col: 1, offset: 23368},
			expr: &choiceExpr{
				pos: position{line: 676, col: 19, offset: 23386},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 676, col: 19, offset: 23386},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 676, col: 19, offset: 23386},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 9, offset: 23432},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 678, col: 9, offset: 23432},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 680, col: 9, offset: 23480},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 680, col: 9, offset: 23480},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 682, col: 9, offset: 23538},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 682, col: 9, offset: 23538},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 684, col: 9, offset: 23592},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 684, col: 9, offset: 23592},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 693, col: 1, offset: 23899},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 23946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 23946},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 23946},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 695, col: 5, offset: 23946},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 695, col: 16, offset: 23957},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 17, offset: 23958},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 695, col: 37, offset: 23978},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 40, offset: 23981},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 56, offset: 23997},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 61, offset: 24002},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 67, offset: 24008},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 68, offset: 24009},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 24201},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 24201},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 24201},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 16, offset: 24212},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 17, offset: 24213},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 699, col: 37, offset: 24233},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 699, col: 43, offset: 24239},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 44, offset: 24240},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 704, col: 1, offset: 24405},
			expr: &actionExpr{
				pos: position{line: 704, col: 20, offset: 24424},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 704, col: 20, offset: 24424},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 704, col: 20, offset: 24424},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 704, col: 31, offset: 24435},
								expr: &ruleRefExpr{
									pos:  position{line: 704, col: 32, offset: 24436},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 705, col: 5, offset: 24461},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 713, col: 5, offset: 24752},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 713, col: 16, offset: 24763},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 714, col: 5, offset: 24786},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 714, col: 16, offset: 24797},
								expr: &ruleRefExpr{
									pos:  position{line: 714, col: 17, offset: 24798},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 719, col: 1, offset: 25006},
			expr: &choiceExpr{
				pos: position{line: 721, col: 5, offset: 25062},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 25062},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 25062},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 721, col: 5, offset: 25062},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 721, col: 16, offset: 25073},
										expr: &ruleRefExpr{
											pos:  position{line: 721, col: 17, offset: 25074},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 721, col: 37, offset: 25094},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 40, offset: 25097},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 721, col: 56, offset: 25113},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 721, col: 61, offset: 25118},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 68, offset: 25125},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 25325},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 25325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 725, col: 5, offset: 25325},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 16, offset: 25336},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 17, offset: 25337},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 37, offset: 25357},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 44, offset: 25364},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 729, col: 1, offset: 25465},
			expr: &actionExpr{
				pos: position{line: 729, col: 28, offset: 25492},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 729, col: 28, offset: 25492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 729, col: 28, offset: 25492},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 39, offset: 25503},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 59, offset: 25523},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 70, offset: 25534},
								expr: &seqExpr{
									pos: position{line: 729, col: 71, offset: 25535},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 729, col: 71, offset: 25535},
											expr: &ruleRefExpr{
												pos:  position{line: 729, col: 72, offset: 25536},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 729, col: 93, offset: 25557},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 733, col: 1, offset: 25663},
			expr: &actionExpr{
				pos: position{line: 733, col: 23, offset: 25685},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 733, col: 23, offset: 25685},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 733, col: 23, offset: 25685},
							expr: &seqExpr{
								pos: position{line: 733, col: 25, offset: 25687},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 733, col: 25, offset: 25687},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 51, offset: 25713},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 5, offset: 25743},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 734, col: 15, offset: 25753},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 734, col: 15, offset: 25753},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 734, col: 26, offset: 25764},
										expr: &ruleRefExpr{
											pos:  position{line: 734, col: 26, offset: 25764},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 42, offset: 25780},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 52, offset: 25790},
								expr: &ruleRefExpr{
									pos:  position{line: 734, col: 53, offset: 25791},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 65, offset: 25803},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 738, col: 1, offset: 25893},
			expr: &actionExpr{
				pos: position{line: 738, col: 23, offset: 25915},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 738, col: 23, offset: 25915},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 738, col: 33, offset: 25925},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 742, col: 1, offset: 25971},
			expr: &choiceExpr{
				pos: position{line: 744, col: 5, offset: 26023},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 26023},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 26023},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 744, col: 5, offset: 26023},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 744, col: 16, offset: 26034},
										expr: &ruleRefExpr{
											pos:  position{line: 744, col: 17, offset: 26035},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 745, col: 5, offset: 26059},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 752, col: 5, offset: 26271},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 8, offset: 26274},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 752, col: 24, offset: 26290},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 752, col: 29, offset: 26295},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 752, col: 35, offset: 26301},
										expr: &ruleRefExpr{
											pos:  position{line: 752, col: 36, offset: 26302},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 26494},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 756, col: 5, offset: 26494},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 756, col: 5, offset: 26494},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 756, col: 16, offset: 26505},
										expr: &ruleRefExpr{
											pos:  position{line: 756, col: 17, offset: 26506},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 757, col: 5, offset: 26530},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 764, col: 5, offset: 26742},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 764, col: 11, offset: 26748},
										expr: &ruleRefExpr{
											pos:  position{line: 764, col: 12, offset: 26749},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 768, col: 1, offset: 26850},
			expr: &actionExpr{
				pos: position{line: 768, col: 19, offset: 26868},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 768, col: 19, offset: 26868},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 768, col: 19, offset: 26868},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 20, offset: 26869},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 768, col: 24, offset: 26873},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 25, offset: 26874},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 5, offset: 26888},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 769, col: 15, offset: 26898},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 769, col: 15, offset: 26898},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 769, col: 15, offset: 26898},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 769, col: 24, offset: 26907},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 771, col: 9, offset: 26999},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 771, col: 9, offset: 26999},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 771, col: 9, offset: 26999},
													expr: &ruleRefExpr{
														pos:  position{line: 771, col: 10, offset: 27000},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 771, col: 25, offset: 27015},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 771, col: 34, offset: 27024},
														expr: &ruleRefExpr{
															pos:  position{line: 771, col: 35, offset: 27025},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 771, col: 51, offset: 27041},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 771, col: 61, offset: 27051},
														expr: &ruleRefExpr{
															pos:  position{line: 771, col: 62, offset: 27052},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 771, col: 74, offset: 27064},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 777, col: 1, offset: 27200},
			expr: &actionExpr{
				pos: position{line: 777, col: 18, offset: 27217},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 777, col: 18, offset: 27217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 777, col: 18, offset: 27217},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 19, offset: 27218},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 777, col: 23, offset: 27222},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 24, offset: 27223},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 5, offset: 27238},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 778, col: 14, offset: 27247},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 778, col: 14, offset: 27247},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 27268},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 27286},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 27309},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 27325},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 27348},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 27374},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 27396},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 27422},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 27449},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 27490},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 11, offset: 27517},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 11, offset: 27537},
										name: "ConcealedIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 11, offset: 27566},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 11, offset: 27586},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 800, col: 1, offset: 27849},
			expr: &actionExpr{
				pos: position{line: 800, col: 37, offset: 27885},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 800, col: 37, offset: 27885},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 800, col: 37, offset: 27885},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 38, offset: 27886},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 800, col: 48, offset: 27896},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 49, offset: 27897},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 64, offset: 27912},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 800, col: 73, offset: 27921},
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 74, offset: 27922},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 108, offset: 27956},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 800, col: 118, offset: 27966},
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 119, offset: 27967},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 131, offset: 27979},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 804, col: 1, offset: 28070},
			expr: &actionExpr{
				pos: position{line: 804, col: 36, offset: 28105},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 804, col: 36, offset: 28105},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 804, col: 36, offset: 28105},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 37, offset: 28106},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 804, col: 41, offset: 28110},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 42, offset: 28111},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 5, offset: 28126},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 805, col: 14, offset: 28135},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 805, col: 14, offset: 28135},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 11, offset: 28156},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 11, offset: 28174},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 11, offset: 28197},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 11, offset: 28213},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 11, offset: 28236},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 11, offset: 28258},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 11, offset: 28284},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 11, offset: 28310},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 11, offset: 28330},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 818, col: 1, offset: 28372},
			expr: &actionExpr{
				pos: position{line: 818, col: 22, offset: 28393},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 818, col: 22, offset: 28393},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 818, col: 22, offset: 28393},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 818, col: 33, offset: 28404},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 34, offset: 28405},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 54, offset: 28425},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 818, col: 60, offset: 28431},
								expr: &actionExpr{
									pos: position{line: 818, col: 61, offset: 28432},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 818, col: 61, offset: 28432},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 818, col: 61, offset: 28432},
												expr: &ruleRefExpr{
													pos:  position{line: 818, col: 62, offset: 28433},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 818, col: 66, offset: 28437},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 818, col: 72, offset: 28443},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 824, col: 1, offset: 28563},
			expr: &actionExpr{
				pos: position{line: 824, col: 26, offset: 28588},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 824, col: 26, offset: 28588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 824, col: 26, offset: 28588},
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 27, offset: 28589},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 824, col: 42, offset: 28604},
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 43, offset: 28605},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 53, offset: 28615},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 824, col: 62, offset: 28624},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 63, offset: 28625},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 94, offset: 28656},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 824, col: 104, offset: 28666},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 105, offset: 28667},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 117, offset: 28679},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 828, col: 1, offset: 28770},
			expr: &actionExpr{
				pos: position{line: 828, col: 33, offset: 28802},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 828, col: 33, offset: 28802},
					expr: &seqExpr{
						pos: position{line: 828, col: 34, offset: 28803},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 828, col: 34, offset: 28803},
								expr: &ruleRefExpr{
									pos:  position{line: 828, col: 35, offset: 28804},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 828, col: 39, offset: 28808},
								expr: &ruleRefExpr{
									pos:  position{line: 828, col: 40, offset: 28809},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 828, col: 50, offset: 28819,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 835, col: 1, offset: 29043},
			expr: &actionExpr{
				pos: position{line: 835, col: 14, offset: 29056},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 835, col: 14, offset: 29056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 835, col: 14, offset: 29056},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 835, col: 17, offset: 29059},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 835, col: 21, offset: 29063},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 21, offset: 29063},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 835, col: 25, offset: 29067},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 26, offset: 29068},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 842, col: 1, offset: 29352},
			expr: &actionExpr{
				pos: position{line: 842, col: 15, offset: 29366},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 842, col: 15, offset: 29366},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 842, col: 15, offset: 29366},
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 16, offset: 29367},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 19, offset: 29370},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 842, col: 25, offset: 29376},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 842, col: 25, offset: 29376},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 843, col: 15, offset: 29400},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 844, col: 15, offset: 29426},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 845, col: 15, offset: 29455},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 846, col: 15, offset: 29484},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 847, col: 15, offset: 29515},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 15, offset: 29546},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 15, offset: 29579},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 15, offset: 29615},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 15, offset: 29651},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 852, col: 15, offset: 29688},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 856, col: 1, offset: 29842},
			expr: &choiceExpr{
				pos: position{line: 856, col: 21, offset: 29862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 856, col: 21, offset: 29862},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 28, offset: 29869},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 34, offset: 29875},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 41, offset: 29882},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 47, offset: 29888},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 54, offset: 29895},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 60, offset: 29901},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 856, col: 66, offset: 29907},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 858, col: 1, offset: 29912},
			expr: &choiceExpr{
				pos: position{line: 858, col: 33, offset: 29944},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 858, col: 33, offset: 29944},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 858, col: 39, offset: 29950},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 858, col: 39, offset: 29950},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 862, col: 1, offset: 30083},
			expr: &actionExpr{
				pos: position{line: 862, col: 25, offset: 30107},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 862, col: 25, offset: 30107},
					expr: &litMatcher{
						pos:        position{line: 862, col: 25, offset: 30107},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 866, col: 1, offset: 30148},
			expr: &actionExpr{
				pos: position{line: 866, col: 25, offset: 30172},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 866, col: 25, offset: 30172},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 866, col: 25, offset: 30172},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 866, col: 30, offset: 30177},
							expr: &litMatcher{
								pos:        position{line: 866, col: 30, offset: 30177},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 874, col: 1, offset: 30274},
			expr: &choiceExpr{
				pos: position{line: 874, col: 13, offset: 30286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 874, col: 13, offset: 30286},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 874, col: 35, offset: 30308},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 876, col: 1, offset: 30329},
			expr: &actionExpr{
				pos: position{line: 876, col: 24, offset: 30352},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 876, col: 24, offset: 30352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 876, col: 24, offset: 30352},
							expr: &litMatcher{
								pos:        position{line: 876, col: 25, offset: 30353},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 876, col: 30, offset: 30358},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 876, col: 35, offset: 30363},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 45, offset: 30373},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 876, col: 74, offset: 30402},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 880, col: 1, offset: 30528},
			expr: &seqExpr{
				pos: position{line: 880, col: 32, offset: 30559},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 880, col: 32, offset: 30559},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 880, col: 59, offset: 30586},
						expr: &seqExpr{
							pos: position{line: 880, col: 60, offset: 30587},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 880, col: 60, offset: 30587},
									expr: &litMatcher{
										pos:        position{line: 880, col: 62, offset: 30589},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 880, col: 69, offset: 30596},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 880, col: 69, offset: 30596},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 880, col: 74, offset: 30601},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 882, col: 1, offset: 30666},
			expr: &actionExpr{
				pos: position{line: 882, col: 31, offset: 30696},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 882, col: 31, offset: 30696},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 882, col: 31, offset: 30696},
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 32, offset: 30697},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 40, offset: 30705},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 882, col: 49, offset: 30714},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 882, col: 49, offset: 30714},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30745},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 30767},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 30791},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 30815},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 30841},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 30864},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 889, col: 11, offset: 30886},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 890, col: 11, offset: 30909},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 891, col: 11, offset: 30949},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 892, col: 11, offset: 30982},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 896, col: 1, offset: 31127},
			expr: &actionExpr{
				pos: position{line: 896, col: 27, offset: 31153},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 896, col: 27, offset: 31153},
					exprs: []interface{}{
						&anyMatcher{
							line: 896, col: 28, offset: 31154,
						},
						&zeroOrMoreExpr{
							pos: position{line: 896, col: 31, offset: 31157},
							expr: &seqExpr{
								pos: position{line: 896, col: 32, offset: 31158},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 896, col: 32, offset: 31158},
										expr: &litMatcher{
											pos:        position{line: 896, col: 33, offset: 31159},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 896, col: 38, offset: 31164},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 39, offset: 31165},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 896, col: 42, offset: 31168},
										expr: &litMatcher{
											pos:        position{line: 896, col: 43, offset: 31169},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 896, col: 47, offset: 31173},
										expr: &litMatcher{
											pos:        position{line: 896, col: 48, offset: 31174},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 896, col: 52, offset: 31178},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 53, offset: 31179},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 896, col: 61, offset: 31187},
										expr: &ruleRefExpr{
											pos:  position{line: 896, col: 62, offset: 31188},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 896, col: 74, offset: 31200,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 900, col: 1, offset: 31260},
			expr: &choiceExpr{
				pos: position{line: 900, col: 24, offset: 31283},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 900, col: 24, offset: 31283},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 900, col: 24, offset: 31283},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 900, col: 24, offset: 31283},
									expr: &litMatcher{
										pos:        position{line: 900, col: 25, offset: 31284},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 29, offset: 31288},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 900, col: 33, offset: 31292},
									expr: &litMatcher{
										pos:        position{line: 900, col: 34, offset: 31293},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 900, col: 38, offset: 31297},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 48, offset: 31307},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 900, col: 77, offset: 31336},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 31517},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 902, col: 5, offset: 31517},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 902, col: 5, offset: 31517},
									expr: &litMatcher{
										pos:        position{line: 902, col: 6, offset: 31518},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 11, offset: 31523},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 902, col: 15, offset: 31527},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 902, col: 25, offset: 31537},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 902, col: 25, offset: 31537},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 902, col: 29, offset: 31541},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 58, offset: 31570},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 906, col: 1, offset: 31769},
			expr: &seqExpr{
				pos: position{line: 906, col: 32, offset: 31800},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 906, col: 32, offset: 31800},
						expr: &ruleRefExpr{
							pos:  position{line: 906, col: 33, offset: 31801},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 906, col: 36, offset: 31804},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 906, col: 63, offset: 31831},
						expr: &seqExpr{
							pos: position{line: 906, col: 64, offset: 31832},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 906, col: 64, offset: 31832},
									expr: &seqExpr{
										pos: position{line: 906, col: 66, offset: 31834},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 906, col: 66, offset: 31834},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 906, col: 70, offset: 31838},
												expr: &ruleRefExpr{
													pos:  position{line: 906, col: 71, offset: 31839},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 906, col: 81, offset: 31849},
									expr: &ruleRefExpr{
										pos:  position{line: 906, col: 81, offset: 31849},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 906, col: 85, offset: 31853},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 908, col: 1, offset: 31884},
			expr: &actionExpr{
				pos: position{line: 908, col: 31, offset: 31914},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 908, col: 31, offset: 31914},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 908, col: 31, offset: 31914},
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 32, offset: 31915},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 908, col: 40, offset: 31923},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 908, col: 49, offset: 31932},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 908, col: 49, offset: 31932},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 909, col: 11, offset: 31962},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 31984},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 11, offset: 32008},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 912, col: 11, offset: 32032},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 913, col: 11, offset: 32058},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 32081},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 32103},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 32126},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 32166},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 32199},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 922, col: 1, offset: 32344},
			expr: &actionExpr{
				pos: position{line: 922, col: 27, offset: 32370},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 922, col: 27, offset: 32370},
					exprs: []interface{}{
						&anyMatcher{
							line: 922, col: 28, offset: 32371,
						},
						&zeroOrMoreExpr{
							pos: position{line: 922, col: 31, offset: 32374},
							expr: &seqExpr{
								pos: position{line: 922, col: 32, offset: 32375},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 922, col: 32, offset: 32375},
										expr: &litMatcher{
											pos:        position{line: 922, col: 33, offset: 32376},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 922, col: 37, offset: 32380},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 38, offset: 32381},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 922, col: 41, offset: 32384},
										expr: &litMatcher{
											pos:        position{line: 922, col: 42, offset: 32385},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 922, col: 46, offset: 32389},
										expr: &litMatcher{
											pos:        position{line: 922, col: 47, offset: 32390},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 922, col: 51, offset: 32394},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 52, offset: 32395},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 922, col: 60, offset: 32403},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 61, offset: 32404},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 922, col: 73, offset: 32416,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 926, col: 1, offset: 32476},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 32500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 32500},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 927, col: 5, offset: 32500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 927, col: 5, offset: 32500},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 18, offset: 32513},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 927, col: 40, offset: 32535},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 927, col: 45, offset: 32540},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 55, offset: 32550},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 927, col: 84, offset: 32579},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 929, col: 9, offset: 32736},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 929, col: 9, offset: 32736},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 929, col: 9, offset: 32736},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 22, offset: 32749},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 929, col: 44, offset: 32771},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 929, col: 49, offset: 32776},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 929, col: 59, offset: 32786},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 929, col: 88, offset: 32815},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 9, offset: 33015},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 932, col: 9, offset: 33015},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 932, col: 9, offset: 33015},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 22, offset: 33028},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 44, offset: 33050},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 932, col: 48, offset: 33054},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 58, offset: 33064},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 87, offset: 33093},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 940, col: 1, offset: 33301},
			expr: &choiceExpr{
				pos: position{line: 940, col: 15, offset: 33315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 940, col: 15, offset: 33315},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 39, offset: 33339},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 942, col: 1, offset: 33362},
			expr: &actionExpr{
				pos: position{line: 942, col: 26, offset: 33387},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 942, col: 26, offset: 33387},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 942, col: 26, offset: 33387},
							expr: &litMatcher{
								pos:        position{line: 942, col: 27, offset: 33388},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 942, col: 32, offset: 33393},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 942, col: 37, offset: 33398},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 47, offset: 33408},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 942, col: 78, offset: 33439},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 946, col: 1, offset: 33566},
			expr: &seqExpr{
				pos: position{line: 946, col: 34, offset: 33599},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 946, col: 34, offset: 33599},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 946, col: 63, offset: 33628},
						expr: &seqExpr{
							pos: position{line: 946, col: 64, offset: 33629},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 946, col: 64, offset: 33629},
									expr: &litMatcher{
										pos:        position{line: 946, col: 66, offset: 33631},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 946, col: 73, offset: 33638},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 946, col: 73, offset: 33638},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 946, col: 78, offset: 33643},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 948, col: 1, offset: 33710},
			expr: &actionExpr{
				pos: position{line: 948, col: 33, offset: 33742},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 948, col: 33, offset: 33742},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 948, col: 33, offset: 33742},
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 34, offset: 33743},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 42, offset: 33751},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 948, col: 51, offset: 33760},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 948, col: 51, offset: 33760},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 33793},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 33813},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 33837},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 33861},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 953, col: 11, offset: 33887},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 954, col: 11, offset: 33910},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 955, col: 11, offset: 33932},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 956, col: 11, offset: 33955},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 957, col: 11, offset: 33990},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 961, col: 1, offset: 34135},
			expr: &actionExpr{
				pos: position{line: 961, col: 29, offset: 34163},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 961, col: 29, offset: 34163},
					exprs: []interface{}{
						&anyMatcher{
							line: 961, col: 30, offset: 34164,
						},
						&zeroOrMoreExpr{
							pos: position{line: 961, col: 33, offset: 34167},
							expr: &seqExpr{
								pos: position{line: 961, col: 34, offset: 34168},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 961, col: 34, offset: 34168},
										expr: &litMatcher{
											pos:        position{line: 961, col: 35, offset: 34169},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 961, col: 40, offset: 34174},
										expr: &litMatcher{
											pos:        position{line: 961, col: 41, offset: 34175},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 961, col: 45, offset: 34179},
										expr: &litMatcher{
											pos:        position{line: 961, col: 46, offset: 34180},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 961, col: 50, offset: 34184},
										expr: &ruleRefExpr{
											pos:  position{line: 961, col: 51, offset: 34185},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 961, col: 59, offset: 34193},
										expr: &ruleRefExpr{
											pos:  position{line: 961, col: 60, offset: 34194},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 961, col: 72, offset: 34206,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 965, col: 1, offset: 34266},
			expr: &choiceExpr{
				pos: position{line: 965, col: 26, offset: 34291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 965, col: 26, offset: 34291},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 965, col: 26, offset: 34291},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 965, col: 26, offset: 34291},
									expr: &litMatcher{
										pos:        position{line: 965, col: 27, offset: 34292},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 965, col: 31, offset: 34296},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 965, col: 35, offset: 34300},
									expr: &litMatcher{
										pos:        position{line: 965, col: 36, offset: 34301},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 965, col: 40, offset: 34305},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 50, offset: 34315},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 965, col: 81, offset: 34346},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 34529},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 967, col: 5, offset: 34529},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 967, col: 5, offset: 34529},
									expr: &litMatcher{
										pos:        position{line: 967, col: 6, offset: 34530},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 11, offset: 34535},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 967, col: 15, offset: 34539},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 967, col: 25, offset: 34549},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 967, col: 25, offset: 34549},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 967, col: 29, offset: 34553},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 60, offset: 34584},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 971, col: 1, offset: 34787},
			expr: &seqExpr{
				pos: position{line: 971, col: 34, offset: 34820},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 971, col: 34, offset: 34820},
						expr: &ruleRefExpr{
							pos:  position{line: 971, col: 35, offset: 34821},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 38, offset: 34824},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 971, col: 67, offset: 34853},
						expr: &seqExpr{
							pos: position{line: 971, col: 68, offset: 34854},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 971, col: 68, offset: 34854},
									expr: &seqExpr{
										pos: position{line: 971, col: 70, offset: 34856},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 971, col: 70, offset: 34856},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 971, col: 74, offset: 34860},
												expr: &ruleRefExpr{
													pos:  position{line: 971, col: 75, offset: 34861},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 971, col: 85, offset: 34871},
									expr: &ruleRefExpr{
										pos:  position{line: 971, col: 85, offset: 34871},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 971, col: 89, offset: 34875},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 973, col: 1, offset: 34907},
			expr: &actionExpr{
				pos: position{line: 973, col: 33, offset: 34939},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 973, col: 33, offset: 34939},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 973, col: 33, offset: 34939},
							expr: &ruleRefExpr{
								pos:  position{line: 973, col: 34, offset: 34940},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 973, col: 42, offset: 34948},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 973, col: 51, offset: 34957},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 973, col: 51, offset: 34957},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 974, col: 11, offset: 34989},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 975, col: 11, offset: 35009},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 976, col: 11, offset: 35033},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 977, col: 11, offset: 35057},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 978, col: 11, offset: 35083},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 979, col: 11, offset: 35106},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 980, col: 11, offset: 35128},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 35151},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35186},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 986, col: 1, offset: 35331},
			expr: &actionExpr{
				pos: position{line: 986, col: 29, offset: 35359},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 986, col: 29, offset: 35359},
					exprs: []interface{}{
						&anyMatcher{
							line: 986, col: 30, offset: 35360,
						},
						&zeroOrMoreExpr{
							pos: position{line: 986, col: 33, offset: 35363},
							expr: &seqExpr{
								pos: position{line: 986, col: 34, offset: 35364},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 986, col: 34, offset: 35364},
										expr: &litMatcher{
											pos:        position{line: 986, col: 35, offset: 35365},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 39, offset: 35369},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 40, offset: 35370},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 986, col: 43, offset: 35373},
										expr: &litMatcher{
											pos:        position{line: 986, col: 44, offset: 35374},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 48, offset: 35378},
										expr: &litMatcher{
											pos:        position{line: 986, col: 49, offset: 35379},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 986, col: 53, offset: 35383},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 54, offset: 35384},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 986, col: 62, offset: 35392},
										expr: &ruleRefExpr{
											pos:  position{line: 986, col: 63, offset: 35393},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 986, col: 75, offset: 35405,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 990, col: 1, offset: 35465},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 35491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 35491},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 35491},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 35491},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 18, offset: 35504},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 40, offset: 35526},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 991, col: 45, offset: 35531},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 55, offset: 35541},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 86, offset: 35572},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 9, offset: 35729},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 993, col: 9, offset: 35729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 993, col: 9, offset: 35729},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 22, offset: 35742},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 44, offset: 35764},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 993, col: 49, offset: 35769},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 59, offset: 35779},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 90, offset: 35810},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 996, col: 9, offset: 36010},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 996, col: 9, offset: 36010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 996, col: 9, offset: 36010},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 996, col: 22, offset: 36023},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 996, col: 44, offset: 36045},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 996, col: 48, offset: 36049},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 996, col: 58, offset: 36059},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 996, col: 89, offset: 36090},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1003, col: 1, offset: 36300},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 18, offset: 36317},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1003, col: 18, offset: 36317},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 45, offset: 36344},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1005, col: 1, offset: 36370},
			expr: &actionExpr{
				pos: position{line: 1005, col: 29, offset: 36398},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 29, offset: 36398},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1005, col: 29, offset: 36398},
							expr: &litMatcher{
								pos:        position{line: 1005, col: 30, offset: 36399},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1005, col: 35, offset: 36404},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 40, offset: 36409},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 50, offset: 36419},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1005, col: 84, offset: 36453},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1009, col: 1, offset: 36583},
			expr: &seqExpr{
				pos: position{line: 1009, col: 37, offset: 36619},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1009, col: 37, offset: 36619},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1009, col: 69, offset: 36651},
						expr: &seqExpr{
							pos: position{line: 1009, col: 70, offset: 36652},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1009, col: 70, offset: 36652},
									expr: &litMatcher{
										pos:        position{line: 1009, col: 72, offset: 36654},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 1009, col: 79, offset: 36661},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1009, col: 79, offset: 36661},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 1009, col: 84, offset: 36666},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1011, col: 1, offset: 36735},
			expr: &actionExpr{
				pos: position{line: 1011, col: 36, offset: 36770},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 36, offset: 36770},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1011, col: 36, offset: 36770},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 37, offset: 36771},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 45, offset: 36779},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1011, col: 54, offset: 36788},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1011, col: 54, offset: 36788},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1012, col: 11, offset: 36824},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1013, col: 11, offset: 36843},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1014, col: 11, offset: 36865},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1015, col: 11, offset: 36889},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1016, col: 11, offset: 36915},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1017, col: 11, offset: 36938},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 1018, col: 11, offset: 36960},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1019, col: 11, offset: 36983},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1020, col: 11, offset: 37021},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 1024, col: 1, offset: 37166},
			expr: &actionExpr{
				pos: position{line: 1024, col: 32, offset: 37197},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 32, offset: 37197},
					exprs: []interface{}{
						&anyMatcher{
							line: 1024, col: 33, offset: 37198,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1024, col: 36, offset: 37201},
							expr: &seqExpr{
								pos: position{line: 1024, col: 37, offset: 37202},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1024, col: 37, offset: 37202},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 38, offset: 37203},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 43, offset: 37208},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 44, offset: 37209},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 47, offset: 37212},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 48, offset: 37213},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 52, offset: 37217},
										expr: &litMatcher{
											pos:        position{line: 1024, col: 53, offset: 37218},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 57, offset: 37222},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 58, offset: 37223},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1024, col: 66, offset: 37231},
										expr: &ruleRefExpr{
											pos:  position{line: 1024, col: 67, offset: 37232},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1024, col: 79, offset: 37244,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1028, col: 1, offset: 37304},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 29, offset: 37332},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 29, offset: 37332},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 29, offset: 37332},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1028, col: 29, offset: 37332},
									expr: &litMatcher{
										pos:        position{line: 1028, col: 30, offset: 37333},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1028, col: 34, offset: 37337},
									expr: &litMatcher{
										pos:        position{line: 1028, col: 35, offset: 37338},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 40, offset: 37343},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 44, offset: 37347},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 54, offset: 37357},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 88, offset: 37391},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 37577},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 37577},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1030, col: 5, offset: 37577},
									expr: &litMatcher{
										pos:        position{line: 1030, col: 6, offset: 37578},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 11, offset: 37583},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 15, offset: 37587},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1030, col: 25, offset: 37597},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1030, col: 25, offset: 37597},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1030, col: 29, offset: 37601},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 63, offset: 37635},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1034, col: 1, offset: 37844},
			expr: &seqExpr{
				pos: position{line: 1034, col: 37, offset: 37880},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1034, col: 37, offset: 37880},
						expr: &ruleRefExpr{
							pos:  position{line: 1034, col: 38, offset: 37881},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 41, offset: 37884},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1034, col: 73, offset: 37916},
						expr: &seqExpr{
							pos: position{line: 1034, col: 74, offset: 37917},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1034, col: 74, offset: 37917},
									expr: &seqExpr{
										pos: position{line: 1034, col: 76, offset: 37919},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1034, col: 76, offset: 37919},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1034, col: 80, offset: 37923},
												expr: &ruleRefExpr{
													pos:  position{line: 1034, col: 81, offset: 37924},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1034, col: 91, offset: 37934},
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 91, offset: 37934},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 95, offset: 37938},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1036, col: 1, offset: 37973},
			expr: &actionExpr{
				pos: position{line: 1036, col: 37, offset: 38009},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1036, col: 37, offset: 38009},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1036, col: 46, offset: 38018},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1036, col: 46, offset: 38018},
								name: "Newline",
							},
							&ruleRefExpr{
								pos:  position{line: 1037, col: 11, offset: 38056},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1038, col: 11, offset: 38092},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1039, col: 11, offset: 38112},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1040, col: 11, offset: 38133},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1041, col: 11, offset: 38157},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1042, col: 11, offset: 38183},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1043, col: 11, offset: 38206},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1044, col: 11, offset: 38228},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1045, col: 11, offset: 38251},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1046, col: 11, offset: 38289},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1050, col: 1, offset: 38434},
			expr: &actionExpr{
				pos: position{line: 1050, col: 32, offset: 38465},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 32, offset: 38465},
					exprs: []interface{}{
						&anyMatcher{
							line: 1050, col: 33, offset: 38466,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1050, col: 36, offset: 38469},
							expr: &seqExpr{
								pos: position{line: 1050, col: 37, offset: 38470},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1050, col: 37, offset: 38470},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 38, offset: 38471},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1050, col: 41, offset: 38474},
										expr: &litMatcher{
											pos:        position{line: 1050, col: 42, offset: 38475},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1050, col: 46, offset: 38479},
										expr: &litMatcher{
											pos:        position{line: 1050, col: 47, offset: 38480},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1050, col: 51, offset: 38484},
										expr: &litMatcher{
											pos:        position{line: 1050, col: 52, offset: 38485},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1050, col: 56, offset: 38489},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 57, offset: 38490},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1050, col: 65, offset: 38498},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 66, offset: 38499},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1050, col: 78, offset: 38511,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1054, col: 1, offset: 38592},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 38621},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 38621},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 38621},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1055, col: 5, offset: 38621},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 18, offset: 38634},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 40, offset: 38656},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 45, offset: 38661},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 55, offset: 38671},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 89, offset: 38705},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 9, offset: 38862},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1057, col: 9, offset: 38862},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1057, col: 9, offset: 38862},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 22, offset: 38875},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1057, col: 44, offset: 38897},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 49, offset: 38902},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 59, offset: 38912},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1057, col: 93, offset: 38946},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 9, offset: 39146},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1060, col: 9, offset: 39146},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1060, col: 9, offset: 39146},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1060, col: 22, offset: 39159},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 44, offset: 39181},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 48, offset: 39185},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1060, col: 58, offset: 39195},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 92, offset: 39229},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1064, col: 1, offset: 39379},
			expr: &actionExpr{
				pos: position{line: 1064, col: 18, offset: 39396},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 18, offset: 39396},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1064, col: 18, offset: 39396},
							expr: &litMatcher{
								pos:        position{line: 1064, col: 19, offset: 39397},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1064, col: 23, offset: 39401},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 27, offset: 39405},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 36, offset: 39414},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1064, col: 58, offset: 39436},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1068, col: 1, offset: 39525},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 25, offset: 39549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1068, col: 25, offset: 39549},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 38, offset: 39562},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1070, col: 1, offset: 39581},
			expr: &actionExpr{
				pos: position{line: 1070, col: 21, offset: 39601},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1070, col: 21, offset: 39601},
					expr: &seqExpr{
						pos: position{line: 1070, col: 22, offset: 39602},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1070, col: 22, offset: 39602},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 23, offset: 39603},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1070, col: 31, offset: 39611},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 32, offset: 39612},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1070, col: 35, offset: 39615},
								expr: &litMatcher{
									pos:        position{line: 1070, col: 36, offset: 39616},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1070, col: 40, offset: 39620,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1074, col: 1, offset: 39653},
			expr: &actionExpr{
				pos: position{line: 1074, col: 25, offset: 39677},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 25, offset: 39677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1074, col: 25, offset: 39677},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 38, offset: 39690},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1074, col: 60, offset: 39712},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 64, offset: 39716},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 73, offset: 39725},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1074, col: 95, offset: 39747},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1078, col: 1, offset: 39876},
			expr: &actionExpr{
				pos: position{line: 1078, col: 20, offset: 39895},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 20, offset: 39895},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1078, col: 20, offset: 39895},
							expr: &litMatcher{
								pos:        position{line: 1078, col: 21, offset: 39896},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1078, col: 25, offset: 39900},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 29, offset: 39904},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 38, offset: 39913},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1078, col: 62, offset: 39937},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1082, col: 1, offset: 40028},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 27, offset: 40054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1082, col: 27, offset: 40054},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 40, offset: 40067},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1084, col: 1, offset: 40088},
			expr: &actionExpr{
				pos: position{line: 1084, col: 23, offset: 40110},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1084, col: 23, offset: 40110},
					expr: &seqExpr{
						pos: position{line: 1084, col: 24, offset: 40111},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1084, col: 24, offset: 40111},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 25, offset: 40112},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1084, col: 33, offset: 40120},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 34, offset: 40121},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1084, col: 37, offset: 40124},
								expr: &litMatcher{
									pos:        position{line: 1084, col: 38, offset: 40125},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1084, col: 42, offset: 40129,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1088, col: 1, offset: 40162},
			expr: &actionExpr{
				pos: position{line: 1088, col: 27, offset: 40188},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1088, col: 27, offset: 40188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1088, col: 27, offset: 40188},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1088, col: 40, offset: 40201},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1088, col: 62, offset: 40223},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1088, col: 66, offset: 40227},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1088, col: 75, offset: 40236},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1088, col: 99, offset: 40260},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1095, col: 1, offset: 40496},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 16, offset: 40511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1095, col: 16, offset: 40511},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 40, offset: 40535},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 64, offset: 40559},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1097, col: 1, offset: 40577},
			expr: &litMatcher{
				pos:        position{line: 1097, col: 32, offset: 40608},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1099, col: 1, offset: 40613},
			expr: &actionExpr{
				pos: position{line: 1099, col: 26, offset: 40638},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 26, offset: 40638},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1099, col: 26, offset: 40638},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 54, offset: 40666},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 63, offset: 40675},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1099, col: 93, offset: 40705},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1099, col: 121, offset: 40733},
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 122, offset: 40734},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1103, col: 1, offset: 40833},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 33, offset: 40865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1103, col: 34, offset: 40866},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1103, col: 34, offset: 40866},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1103, col: 35, offset: 40867},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1103, col: 35, offset: 40867},
											expr: &ruleRefExpr{
												pos:  position{line: 1103, col: 36, offset: 40868},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1103, col: 64, offset: 40896},
											expr: &ruleRefExpr{
												pos:  position{line: 1103, col: 65, offset: 40897},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1103, col: 68, offset: 40900},
											expr: &ruleRefExpr{
												pos:  position{line: 1103, col: 69, offset: 40901},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1103, col: 77, offset: 40909,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1103, col: 80, offset: 40912},
									expr: &seqExpr{
										pos: position{line: 1103, col: 81, offset: 40913},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1103, col: 81, offset: 40913},
												expr: &seqExpr{
													pos: position{line: 1103, col: 83, offset: 40915},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1103, col: 83, offset: 40915},
															expr: &ruleRefExpr{
																pos:  position{line: 1103, col: 83, offset: 40915},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1103, col: 87, offset: 40919},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1103, col: 116, offset: 40948},
												expr: &ruleRefExpr{
													pos:  position{line: 1103, col: 117, offset: 40949},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1103, col: 145, offset: 40977},
												expr: &ruleRefExpr{
													pos:  position{line: 1103, col: 146, offset: 40978},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1103, col: 154, offset: 40986,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1105, col: 7, offset: 41128},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1105, col: 8, offset: 41129},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1105, col: 8, offset: 41129},
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 9, offset: 41130},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1105, col: 12, offset: 41133},
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 13, offset: 41134},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1105, col: 21, offset: 41142},
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 22, offset: 41143},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1105, col: 50, offset: 41171,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1109, col: 1, offset: 41253},
			expr: &litMatcher{
				pos:        position{line: 1109, col: 32, offset: 41284},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1111, col: 1, offset: 41291},
			expr: &actionExpr{
				pos: position{line: 1111, col: 26, offset: 41316},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 26, offset: 41316},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1111, col: 26, offset: 41316},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1111, col: 54, offset: 41344},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 63, offset: 41353},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1111, col: 93, offset: 41383},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1111, col: 121, offset: 41411},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 122, offset: 41412},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1115, col: 1, offset: 41511},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 33, offset: 41543},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 34, offset: 41544},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1115, col: 34, offset: 41544},
							expr: &seqExpr{
								pos: position{line: 1115, col: 35, offset: 41545},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1115, col: 35, offset: 41545},
										expr: &ruleRefExpr{
											pos:  position{line: 1115, col: 36, offset: 41546},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1115, col: 64, offset: 41574,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1117, col: 7, offset: 41739},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1117, col: 7, offset: 41739},
							expr: &seqExpr{
								pos: position{line: 1117, col: 8, offset: 41740},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1117, col: 8, offset: 41740},
										expr: &ruleRefExpr{
											pos:  position{line: 1117, col: 9, offset: 41741},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1117, col: 12, offset: 41744},
										expr: &ruleRefExpr{
											pos:  position{line: 1117, col: 13, offset: 41745},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1117, col: 21, offset: 41753},
										expr: &ruleRefExpr{
											pos:  position{line: 1117, col: 22, offset: 41754},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1117, col: 50, offset: 41782,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1121, col: 1, offset: 41865},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 21, offset: 41885},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1121, col: 21, offset: 41885},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1121, col: 21, offset: 41885},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1121, col: 21, offset: 41885},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 30, offset: 41894},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1121, col: 38, offset: 41902},
										expr: &ruleRefExpr{
											pos:  position{line: 1121, col: 39, offset: 41903},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 67, offset: 41931},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1123, col: 5, offset: 42021},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1123, col: 5, offset: 42021},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1123, col: 5, offset: 42021},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1123, col: 15, offset: 42031},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1123, col: 23, offset: 42039},
										expr: &choiceExpr{
											pos: position{line: 1123, col: 24, offset: 42040},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1123, col: 24, offset: 42040},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1123, col: 37, offset: 42053},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1123, col: 65, offset: 42081},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1127, col: 1, offset: 42171},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 31, offset: 42201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 31, offset: 42201},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 43, offset: 42213},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1127, col: 52, offset: 42222},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1127, col: 53, offset: 42223},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1127, col: 53, offset: 42223},
									expr: &litMatcher{
										pos:        position{line: 1127, col: 54, offset: 42224},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1127, col: 58, offset: 42228,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1134, col: 1, offset: 42398},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 19, offset: 42416},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 19, offset: 42416},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 44, offset: 42441},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1136, col: 1, offset: 42466},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 27, offset: 42492},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1136, col: 27, offset: 42492},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1136, col: 27, offset: 42492},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 27, offset: 42492},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 32, offset: 42497},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 36, offset: 42501},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1136, col: 40, offset: 42505},
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 40, offset: 42505},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 44, offset: 42509},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 48, offset: 42513},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 55, offset: 42520},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 76, offset: 42541},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 42624},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 42624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1138, col: 5, offset: 42624},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 10, offset: 42629},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 14, offset: 42633},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1138, col: 18, offset: 42637},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1142, col: 1, offset: 42709},
			expr: &actionExpr{
				pos: position{line: 1142, col: 27, offset: 42735},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 27, offset: 42735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1142, col: 27, offset: 42735},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 35, offset: 42743},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 40, offset: 42748},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 54, offset: 42762},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 72, offset: 42780},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1146, col: 1, offset: 42910},
			expr: &actionExpr{
				pos: position{line: 1146, col: 24, offset: 42933},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1146, col: 24, offset: 42933},
					expr: &choiceExpr{
						pos: position{line: 1146, col: 25, offset: 42934},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1146, col: 25, offset: 42934},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1146, col: 37, offset: 42946},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1146, col: 47, offset: 42956},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1146, col: 47, offset: 42956},
										expr: &litMatcher{
											pos:        position{line: 1146, col: 48, offset: 42957},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1146, col: 54, offset: 42963,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1153, col: 1, offset: 43105},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 9, offset: 43113},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1153, col: 9, offset: 43113},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 24, offset: 43128},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1156, col: 1, offset: 43209},
			expr: &actionExpr{
				pos: position{line: 1156, col: 17, offset: 43225},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 17, offset: 43225},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1156, col: 17, offset: 43225},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 25, offset: 43233},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1156, col: 30, offset: 43238},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1156, col: 30, offset: 43238},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1156, col: 41, offset: 43249},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 55, offset: 43263},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 73, offset: 43281},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1160, col: 1, offset: 43399},
			expr: &actionExpr{
				pos: position{line: 1160, col: 17, offset: 43415},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 17, offset: 43415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1160, col: 17, offset: 43415},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 22, offset: 43420},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 32, offset: 43430},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1160, col: 49, offset: 43447},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 50, offset: 43448},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1164, col: 1, offset: 43541},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 19, offset: 43559},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1164, col: 19, offset: 43559},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 44, offset: 43584},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1166, col: 1, offset: 43611},
			expr: &actionExpr{
				pos: position{line: 1166, col: 27, offset: 43637},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 27, offset: 43637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1166, col: 27, offset: 43637},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 31, offset: 43641},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1166, col: 36, offset: 43646},
								expr: &ruleRefExpr{
									pos:  position{line: 1166, col: 37, offset: 43647},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1166, col: 66, offset: 43676},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1170, col: 1, offset: 43738},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 5, offset: 43810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1172, col: 5, offset: 43810},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1172, col: 5, offset: 43810},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 5, offset: 43810},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 10, offset: 43815},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1172, col: 19, offset: 43824},
										expr: &seqExpr{
											pos: position{line: 1172, col: 20, offset: 43825},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1172, col: 20, offset: 43825},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 21, offset: 43826},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1172, col: 25, offset: 43830},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 26, offset: 43831},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1172, col: 30, offset: 43835},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 31, offset: 43836},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1172, col: 37, offset: 43842},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1172, col: 37, offset: 43842},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1172, col: 50, offset: 43855},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1172, col: 63, offset: 43868},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1172, col: 73, offset: 43878},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1172, col: 74, offset: 43879},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1172, col: 74, offset: 43879},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1172, col: 75, offset: 43880},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1172, col: 78, offset: 43883,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1174, col: 11, offset: 43952},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1174, col: 16, offset: 43957},
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 16, offset: 43957},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1174, col: 24, offset: 43965},
									expr: &notExpr{
										pos: position{line: 1174, col: 26, offset: 43967},
										expr: &litMatcher{
											pos:        position{line: 1174, col: 27, offset: 43968},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 44093},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1178, col: 5, offset: 44093},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1178, col: 5, offset: 44093},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1178, col: 14, offset: 44102},
										expr: &seqExpr{
											pos: position{line: 1178, col: 15, offset: 44103},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1178, col: 15, offset: 44103},
													expr: &litMatcher{
														pos:        position{line: 1178, col: 16, offset: 44104},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1178, col: 20, offset: 44108},
													expr: &litMatcher{
														pos:        position{line: 1178, col: 21, offset: 44109},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1178, col: 26, offset: 44114},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1178, col: 26, offset: 44114},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1178, col: 39, offset: 44127},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1178, col: 52, offset: 44140},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1178, col: 62, offset: 44150},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1178, col: 63, offset: 44151},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1178, col: 63, offset: 44151},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1178, col: 64, offset: 44152},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1178, col: 67, offset: 44155,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1180, col: 11, offset: 44224},
									expr: &notExpr{
										pos: position{line: 1180, col: 13, offset: 44226},
										expr: &litMatcher{
											pos:        position{line: 1180, col: 14, offset: 44227},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1185, col: 1, offset: 44307},
			expr: &actionExpr{
				pos: position{line: 1185, col: 30, offset: 44336},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 30, offset: 44336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1185, col: 30, offset: 44336},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 34, offset: 44340},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1185, col: 39, offset: 44345},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 40, offset: 44346},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1185, col: 60, offset: 44366},
							expr: &litMatcher{
								pos:        position{line: 1185, col: 60, offset: 44366},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1185, col: 65, offset: 44371},
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 65, offset: 44371},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 69, offset: 44375},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1185, col: 80, offset: 44386},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 81, offset: 44387},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 100, offset: 44406},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1189, col: 1, offset: 44491},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 5, offset: 44554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 44554},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1191, col: 5, offset: 44554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 5, offset: 44554},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 10, offset: 44559},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1191, col: 19, offset: 44568},
										expr: &seqExpr{
											pos: position{line: 1191, col: 20, offset: 44569},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1191, col: 20, offset: 44569},
													expr: &litMatcher{
														pos:        position{line: 1191, col: 21, offset: 44570},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1191, col: 25, offset: 44574},
													expr: &litMatcher{
														pos:        position{line: 1191, col: 26, offset: 44575},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1191, col: 30, offset: 44579},
													expr: &litMatcher{
														pos:        position{line: 1191, col: 31, offset: 44580},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1191, col: 37, offset: 44586},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1191, col: 37, offset: 44586},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1191, col: 50, offset: 44599},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1191, col: 63, offset: 44612},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1191, col: 73, offset: 44622},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1191, col: 74, offset: 44623},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1191, col: 74, offset: 44623},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1191, col: 75, offset: 44624},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1191, col: 92, offset: 44641,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 11, offset: 44710},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1193, col: 16, offset: 44715},
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 16, offset: 44715},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1193, col: 24, offset: 44723},
									expr: &notExpr{
										pos: position{line: 1193, col: 26, offset: 44725},
										expr: &litMatcher{
											pos:        position{line: 1193, col: 27, offset: 44726},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 44851},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 44851},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1197, col: 5, offset: 44851},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1197, col: 14, offset: 44860},
										expr: &seqExpr{
											pos: position{line: 1197, col: 15, offset: 44861},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1197, col: 15, offset: 44861},
													expr: &litMatcher{
														pos:        position{line: 1197, col: 16, offset: 44862},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1197, col: 20, offset: 44866},
													expr: &litMatcher{
														pos:        position{line: 1197, col: 21, offset: 44867},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1197, col: 25, offset: 44871},
													expr: &litMatcher{
														pos:        position{line: 1197, col: 26, offset: 44872},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1197, col: 31, offset: 44877},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1197, col: 31, offset: 44877},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1197, col: 44, offset: 44890},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1197, col: 57, offset: 44903},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1197, col: 67, offset: 44913},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1197, col: 68, offset: 44914},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1197, col: 68, offset: 44914},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1197, col: 69, offset: 44915},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1197, col: 86, offset: 44932,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1199, col: 11, offset: 45001},
									expr: &notExpr{
										pos: position{line: 1199, col: 13, offset: 45003},
										expr: &litMatcher{
											pos:        position{line: 1199, col: 14, offset: 45004},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1204, col: 1, offset: 45154},
			expr: &actionExpr{
				pos: position{line: 1205, col: 5, offset: 45174},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1205, col: 5, offset: 45174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1205, col: 5, offset: 45174},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1205, col: 14, offset: 45183},
								expr: &choiceExpr{
									pos: position{line: 1205, col: 15, offset: 45184},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1205, col: 15, offset: 45184},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1206, col: 11, offset: 45205},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1207, col: 11, offset: 45223},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1208, col: 11, offset: 45247},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1209, col: 11, offset: 45267},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1210, col: 11, offset: 45289},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 21, offset: 45299},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1214, col: 1, offset: 45369},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 17, offset: 45385},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 17, offset: 45385},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 40, offset: 45408},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1217, col: 1, offset: 45544},
			expr: &actionExpr{
				pos: position{line: 1217, col: 25, offset: 45568},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 25, offset: 45568},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1217, col: 25, offset: 45568},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 33, offset: 45576},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1217, col: 38, offset: 45581},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1217, col: 38, offset: 45581},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1217, col: 57, offset: 45600},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 79, offset: 45622},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 97, offset: 45640},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1221, col: 1, offset: 45758},
			expr: &actionExpr{
				pos: position{line: 1221, col: 25, offset: 45782},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 25, offset: 45782},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 25, offset: 45782},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 30, offset: 45787},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 48, offset: 45805},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1221, col: 65, offset: 45822},
								expr: &ruleRefExpr{
									pos:  position{line: 1221, col: 66, offset: 45823},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1225, col: 1, offset: 45916},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 15, offset: 45930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1225, col: 15, offset: 45930},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 30, offset: 45945},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1227, col: 1, offset: 45965},
			expr: &actionExpr{
				pos: position{line: 1227, col: 23, offset: 45987},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 23, offset: 45987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1227, col: 23, offset: 45987},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 28, offset: 45992},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 38, offset: 46002},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 56, offset: 46020},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1234, col: 1, offset: 46355},
			expr: &actionExpr{
				pos: position{line: 1234, col: 15, offset: 46369},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 15, offset: 46369},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1234, col: 15, offset: 46369},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1234, col: 26, offset: 46380},
								expr: &ruleRefExpr{
									pos:  position{line: 1234, col: 27, offset: 46381},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1234, col: 47, offset: 46401},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 57, offset: 46411},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1234, col: 63, offset: 46417},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 63, offset: 46417},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1234, col: 74, offset: 46428},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 88, offset: 46442},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 106, offset: 46460},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1234, col: 123, offset: 46477},
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 123, offset: 46477},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 127, offset: 46481},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1238, col: 1, offset: 46600},
			expr: &actionExpr{
				pos: position{line: 1238, col: 16, offset: 46615},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 16, offset: 46615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1238, col: 16, offset: 46615},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1238, col: 25, offset: 46624},
							expr: &litMatcher{
								pos:        position{line: 1238, col: 26, offset: 46625},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 30, offset: 46629},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1238, col: 36, offset: 46635},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1238, col: 36, offset: 46635},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 47, offset: 46646},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 61, offset: 46660},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 79, offset: 46678},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1242, col: 1, offset: 46799},
			expr: &actionExpr{
				pos: position{line: 1242, col: 20, offset: 46818},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1242, col: 20, offset: 46818},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1242, col: 20, offset: 46818},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 24, offset: 46822},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1242, col: 28, offset: 46826},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 29, offset: 46827},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1242, col: 56, offset: 46854},
							expr: &litMatcher{
								pos:        position{line: 1242, col: 56, offset: 46854},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 61, offset: 46859},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1242, col: 67, offset: 46865},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 68, offset: 46866},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1242, col: 95, offset: 46893},
							expr: &litMatcher{
								pos:        position{line: 1242, col: 95, offset: 46893},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 100, offset: 46898},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1242, col: 107, offset: 46905},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 108, offset: 46906},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1242, col: 135, offset: 46933},
							expr: &litMatcher{
								pos:        position{line: 1242, col: 135, offset: 46933},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1242, col: 140, offset: 46938},
							expr: &ruleRefExpr{
								pos:  position{line: 1242, col: 140, offset: 46938},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 144, offset: 46942},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1242, col: 155, offset: 46953},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 156, offset: 46954},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1242, col: 175, offset: 46973},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1249, col: 1, offset: 47263},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 19, offset: 47281},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1249, col: 19, offset: 47281},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1249, col: 19, offset: 47281},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1249, col: 19, offset: 47281},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1249, col: 32, offset: 47294},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1249, col: 41, offset: 47303},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1249, col: 58, offset: 47320},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 47388},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 47388},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1251, col: 5, offset: 47388},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 21, offset: 47404},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 26, offset: 47409},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 39, offset: 47422},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 43, offset: 47426},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 52, offset: 47435},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 69, offset: 47452},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 5, offset: 47530},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1253, col: 5, offset: 47530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1253, col: 5, offset: 47530},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1253, col: 21, offset: 47546},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 26, offset: 47551},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 39, offset: 47564},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1257, col: 1, offset: 47672},
			expr: &actionExpr{
				pos: position{line: 1257, col: 16, offset: 47687},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1257, col: 16, offset: 47687},
					expr: &choiceExpr{
						pos: position{line: 1257, col: 17, offset: 47688},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1257, col: 17, offset: 47688},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1257, col: 29, offset: 47700},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1257, col: 39, offset: 47710},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1257, col: 39, offset: 47710},
										expr: &litMatcher{
											pos:        position{line: 1257, col: 40, offset: 47711},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1257, col: 44, offset: 47715},
										expr: &litMatcher{
											pos:        position{line: 1257, col: 45, offset: 47716},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1257, col: 49, offset: 47720},
										expr: &ruleRefExpr{
											pos:  position{line: 1257, col: 50, offset: 47721},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1257, col: 55, offset: 47726,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1261, col: 1, offset: 47811},
			expr: &actionExpr{
				pos: position{line: 1261, col: 20, offset: 47830},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1261, col: 20, offset: 47830},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1261, col: 29, offset: 47839},
						expr: &seqExpr{
							pos: position{line: 1261, col: 30, offset: 47840},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1261, col: 30, offset: 47840},
									expr: &litMatcher{
										pos:        position{line: 1261, col: 31, offset: 47841},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1261, col: 35, offset: 47845},
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 36, offset: 47846},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1261, col: 40, offset: 47850},
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 40, offset: 47850},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1261, col: 44, offset: 47854},
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 45, offset: 47855},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1261, col: 61, offset: 47871},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1261, col: 75, offset: 47885},
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 75, offset: 47885},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1268, col: 1, offset: 48199},
			expr: &actionExpr{
				pos: position{line: 1268, col: 19, offset: 48217},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 19, offset: 48217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1268, col: 19, offset: 48217},
							expr: &ruleRefExpr{
								pos:  position{line: 1268, col: 20, offset: 48218},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 5, offset: 48247},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1269, col: 12, offset: 48254},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 12, offset: 48254},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 11, offset: 48277},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 11, offset: 48301},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 11, offset: 48325},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 11, offset: 48347},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 11, offset: 48369},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 11, offset: 48392},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 11, offset: 48420},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 11, offset: 48436},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1281, col: 1, offset: 48477},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 19, offset: 48495},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1281, col: 19, offset: 48495},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1282, col: 19, offset: 48536},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 19, offset: 48576},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 19, offset: 48617},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1285, col: 19, offset: 48658},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1286, col: 19, offset: 48699},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 19, offset: 48737},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1293, col: 1, offset: 48956},
			expr: &seqExpr{
				pos: position{line: 1293, col: 25, offset: 48980},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 25, offset: 48980},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1293, col: 31, offset: 48986},
						expr: &ruleRefExpr{
							pos:  position{line: 1293, col: 31, offset: 48986},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 35, offset: 48990},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1295, col: 1, offset: 48995},
			expr: &actionExpr{
				pos: position{line: 1295, col: 16, offset: 49010},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 16, offset: 49010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1295, col: 16, offset: 49010},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1295, col: 27, offset: 49021},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 28, offset: 49022},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1295, col: 48, offset: 49042},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 69, offset: 49063},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1295, col: 77, offset: 49071},
								expr: &ruleRefExpr{
									pos:  position{line: 1295, col: 78, offset: 49072},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1295, col: 100, offset: 49094},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1295, col: 100, offset: 49094},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1295, col: 123, offset: 49117},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1299, col: 1, offset: 49225},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 23, offset: 49247},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1299, col: 23, offset: 49247},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 35, offset: 49259},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 51, offset: 49275},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 62, offset: 49286},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1302, col: 1, offset: 49326},
			expr: &actionExpr{
				pos: position{line: 1302, col: 25, offset: 49350},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1302, col: 25, offset: 49350},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1302, col: 31, offset: 49356},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 32, offset: 49357},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1306, col: 1, offset: 49470},
			expr: &actionExpr{
				pos: position{line: 1306, col: 29, offset: 49498},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 29, offset: 49498},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1306, col: 29, offset: 49498},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 30, offset: 49499},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1306, col: 51, offset: 49520},
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 52, offset: 49521},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 62, offset: 49531},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 68, offset: 49537},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1313, col: 1, offset: 49775},
			expr: &seqExpr{
				pos: position{line: 1313, col: 26, offset: 49800},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1313, col: 26, offset: 49800},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1313, col: 33, offset: 49807},
						expr: &ruleRefExpr{
							pos:  position{line: 1313, col: 33, offset: 49807},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 37, offset: 49811},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1315, col: 1, offset: 49816},
			expr: &actionExpr{
				pos: position{line: 1315, col: 17, offset: 49832},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 17, offset: 49832},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1315, col: 17, offset: 49832},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1315, col: 28, offset: 49843},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 29, offset: 49844},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1315, col: 49, offset: 49864},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 71, offset: 49886},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1315, col: 79, offset: 49894},
								expr: &ruleRefExpr{
									pos:  position{line: 1315, col: 80, offset: 49895},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1315, col: 103, offset: 49918},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1315, col: 103, offset: 49918},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1315, col: 127, offset: 49942},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1319, col: 1, offset: 50051},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 24, offset: 50074},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1319, col: 24, offset: 50074},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 40, offset: 50090},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 64, offset: 50114},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1321, col: 1, offset: 50125},
			expr: &actionExpr{
				pos: position{line: 1321, col: 26, offset: 50150},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1321, col: 26, offset: 50150},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1321, col: 32, offset: 50156},
						expr: &ruleRefExpr{
							pos:  position{line: 1321, col: 33, offset: 50157},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1325, col: 1, offset: 50276},
			expr: &actionExpr{
				pos: position{line: 1325, col: 30, offset: 50305},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 30, offset: 50305},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1325, col: 30, offset: 50305},
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 31, offset: 50306},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 53, offset: 50328},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1325, col: 59, offset: 50334},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1325, col: 59, offset: 50334},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1325, col: 59, offset: 50334},
											expr: &ruleRefExpr{
												pos:  position{line: 1325, col: 60, offset: 50335},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1325, col: 64, offset: 50339},
											expr: &choiceExpr{
												pos: position{line: 1325, col: 65, offset: 50340},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1325, col: 65, offset: 50340},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1325, col: 77, offset: 50352},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1325, col: 87, offset: 50362},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1325, col: 87, offset: 50362},
																expr: &ruleRefExpr{
																	pos:  position{line: 1325, col: 88, offset: 50363},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1325, col: 92, offset: 50367,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1325, col: 128, offset: 50403},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1332, col: 1, offset: 50729},
			expr: &seqExpr{
				pos: position{line: 1332, col: 26, offset: 50754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1332, col: 26, offset: 50754},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1332, col: 33, offset: 50761},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 33, offset: 50761},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 37, offset: 50765},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1334, col: 1, offset: 50770},
			expr: &actionExpr{
				pos: position{line: 1334, col: 17, offset: 50786},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1334, col: 17, offset: 50786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1334, col: 17, offset: 50786},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1334, col: 28, offset: 50797},
								expr: &ruleRefExpr{
									pos:  position{line: 1334, col: 29, offset: 50798},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1334, col: 49, offset: 50818},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1334, col: 71, offset: 50840},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1334, col: 79, offset: 50848},
								expr: &choiceExpr{
									pos: position{line: 1334, col: 80, offset: 50849},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1334, col: 80, offset: 50849},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1334, col: 92, offset: 50861},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1334, col: 108, offset: 50877},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1334, col: 119, offset: 50888},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1334, col: 145, offset: 50914},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1334, col: 145, offset: 50914},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1334, col: 169, offset: 50938},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1339, col: 1, offset: 51065},
			expr: &actionExpr{
				pos: position{line: 1339, col: 26, offset: 51090},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1339, col: 26, offset: 51090},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1339, col: 32, offset: 51096},
						expr: &ruleRefExpr{
							pos:  position{line: 1339, col: 33, offset: 51097},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1343, col: 1, offset: 51211},
			expr: &actionExpr{
				pos: position{line: 1343, col: 30, offset: 51240},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 30, offset: 51240},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1343, col: 30, offset: 51240},
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 31, offset: 51241},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1343, col: 53, offset: 51263},
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 54, offset: 51264},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 64, offset: 51274},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 70, offset: 51280},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1350, col: 1, offset: 51516},
			expr: &seqExpr{
				pos: position{line: 1350, col: 24, offset: 51539},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1350, col: 24, offset: 51539},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1350, col: 31, offset: 51546},
						expr: &ruleRefExpr{
							pos:  position{line: 1350, col: 31, offset: 51546},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 35, offset: 51550},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1352, col: 1, offset: 51580},
			expr: &actionExpr{
				pos: position{line: 1352, col: 15, offset: 51594},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1352, col: 15, offset: 51594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1352, col: 15, offset: 51594},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1352, col: 26, offset: 51605},
								expr: &ruleRefExpr{
									pos:  position{line: 1352, col: 27, offset: 51606},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1352, col: 47, offset: 51626},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1352, col: 67, offset: 51646},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1352, col: 75, offset: 51654},
								expr: &ruleRefExpr{
									pos:  position{line: 1352, col: 76, offset: 51655},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1352, col: 97, offset: 51676},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1352, col: 97, offset: 51676},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 119, offset: 51698},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1356, col: 1, offset: 51805},
			expr: &actionExpr{
				pos: position{line: 1357, col: 5, offset: 51831},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1357, col: 5, offset: 51831},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1357, col: 5, offset: 51831},
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 6, offset: 51832},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1357, col: 26, offset: 51852},
							expr: &ruleRefExpr{
								pos:  position{line: 1357, col: 27, offset: 51853},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1357, col: 31, offset: 51857},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1357, col: 40, offset: 51866},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1357, col: 40, offset: 51866},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 15, offset: 51891},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 15, offset: 51919},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 15, offset: 51945},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 15, offset: 51968},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1362, col: 15, offset: 51994},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 15, offset: 52021},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1364, col: 15, offset: 52048},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1365, col: 15, offset: 52075},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1366, col: 15, offset: 52107},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1367, col: 15, offset: 52133},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1368, col: 15, offset: 52160},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1369, col: 15, offset: 52181},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1370, col: 15, offset: 52209},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1371, col: 15, offset: 52253},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1372, col: 15, offset: 52291},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1373, col: 15, offset: 52332},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1377, col: 1, offset: 52391},
			expr: &actionExpr{
				pos: position{line: 1377, col: 24, offset: 52414},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1377, col: 24, offset: 52414},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1377, col: 30, offset: 52420},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 31, offset: 52421},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1386, col: 1, offset: 52767},
			expr: &actionExpr{
				pos: position{line: 1386, col: 15, offset: 52781},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 15, offset: 52781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 15, offset: 52781},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 27, offset: 52793},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1387, col: 5, offset: 52817},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1391, col: 5, offset: 53003},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 25, offset: 53023},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1391, col: 33, offset: 53031},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 34, offset: 53032},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1391, col: 55, offset: 53053},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1391, col: 55, offset: 53053},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1391, col: 77, offset: 53075},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1395, col: 1, offset: 53190},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 22, offset: 53211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1395, col: 22, offset: 53211},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 41, offset: 53230},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 53, offset: 53242},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1397, col: 1, offset: 53263},
			expr: &actionExpr{
				pos: position{line: 1397, col: 21, offset: 53283},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1397, col: 21, offset: 53283},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1397, col: 21, offset: 53283},
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 22, offset: 53284},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 42, offset: 53304},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 51, offset: 53313},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1402, col: 1, offset: 53375},
			expr: &actionExpr{
				pos: position{line: 1402, col: 24, offset: 53398},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1402, col: 24, offset: 53398},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1402, col: 30, offset: 53404},
						expr: &ruleRefExpr{
							pos:  position{line: 1402, col: 31, offset: 53405},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1406, col: 1, offset: 53495},
			expr: &actionExpr{
				pos: position{line: 1406, col: 28, offset: 53522},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 28, offset: 53522},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1406, col: 28, offset: 53522},
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 29, offset: 53523},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1406, col: 49, offset: 53543},
							expr: &ruleRefExpr{
								pos:  position{line: 1406, col: 50, offset: 53544},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 60, offset: 53554},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1406, col: 66, offset: 53560},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1406, col: 66, offset: 53560},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1406, col: 66, offset: 53560},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1406, col: 75, offset: 53569},
												expr: &ruleRefExpr{
													pos:  position{line: 1406, col: 76, offset: 53570},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1406, col: 109, offset: 53603},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1412, col: 1, offset: 53699},
			expr: &actionExpr{
				pos: position{line: 1412, col: 35, offset: 53733},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1412, col: 35, offset: 53733},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1412, col: 35, offset: 53733},
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 36, offset: 53734},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1412, col: 40, offset: 53738},
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 41, offset: 53739},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1413, col: 5, offset: 53754},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1413, col: 14, offset: 53763},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1413, col: 14, offset: 53763},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1414, col: 11, offset: 53781},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1415, col: 11, offset: 53804},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1416, col: 11, offset: 53820},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1417, col: 11, offset: 53843},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1418, col: 11, offset: 53869},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1419, col: 11, offset: 53891},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1420, col: 11, offset: 53917},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1421, col: 11, offset: 53944},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1422, col: 11, offset: 53985},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1423, col: 11, offset: 54012},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1424, col: 11, offset: 54032},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1431, col: 1, offset: 54264},
			expr: &seqExpr{
				pos: position{line: 1431, col: 26, offset: 54289},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1431, col: 26, offset: 54289},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1431, col: 33, offset: 54296},
						expr: &ruleRefExpr{
							pos:  position{line: 1431, col: 33, offset: 54296},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 37, offset: 54300},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1433, col: 1, offset: 54305},
			expr: &actionExpr{
				pos: position{line: 1433, col: 17, offset: 54321},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 17, offset: 54321},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1433, col: 17, offset: 54321},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1433, col: 28, offset: 54332},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 29, offset: 54333},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 49, offset: 54353},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 71, offset: 54375},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1433, col: 79, offset: 54383},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 80, offset: 54384},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1433, col: 104, offset: 54408},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1433, col: 104, offset: 54408},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1433, col: 128, offset: 54432},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1437, col: 1, offset: 54541},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 24, offset: 54564},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1437, col: 24, offset: 54564},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 36, offset: 54576},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 52, offset: 54592},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 63, offset: 54603},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 81, offset: 54621},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1439, col: 1, offset: 54644},
			expr: &actionExpr{
				pos: position{line: 1439, col: 20, offset: 54663},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 20, offset: 54663},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1439, col: 20, offset: 54663},
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 21, offset: 54664},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 34, offset: 54677},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 43, offset: 54686},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1444, col: 1, offset: 54749},
			expr: &actionExpr{
				pos: position{line: 1444, col: 26, offset: 54774},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1444, col: 26, offset: 54774},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1444, col: 32, offset: 54780},
						expr: &ruleRefExpr{
							pos:  position{line: 1444, col: 33, offset: 54781},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1448, col: 1, offset: 54895},
			expr: &actionExpr{
				pos: position{line: 1448, col: 30, offset: 54924},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 30, offset: 54924},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1448, col: 30, offset: 54924},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 31, offset: 54925},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1448, col: 53, offset: 54947},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 54, offset: 54948},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 64, offset: 54958},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 70, offset: 54964},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1456, col: 1, offset: 55195},
			expr: &actionExpr{
				pos: position{line: 1456, col: 10, offset: 55204},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 10, offset: 55204},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1456, col: 10, offset: 55204},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1456, col: 21, offset: 55215},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 22, offset: 55216},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 42, offset: 55236},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1457, col: 5, offset: 55255},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1457, col: 12, offset: 55262},
								expr: &ruleRefExpr{
									pos:  position{line: 1457, col: 13, offset: 55263},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1458, col: 5, offset: 55285},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1458, col: 11, offset: 55291},
								expr: &ruleRefExpr{
									pos:  position{line: 1458, col: 12, offset: 55292},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1459, col: 6, offset: 55309},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1459, col: 6, offset: 55309},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1459, col: 23, offset: 55326},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1463, col: 1, offset: 55441},
			expr: &seqExpr{
				pos: position{line: 1463, col: 23, offset: 55463},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1463, col: 23, offset: 55463},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1463, col: 27, offset: 55467},
						expr: &ruleRefExpr{
							pos:  position{line: 1463, col: 27, offset: 55467},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1465, col: 1, offset: 55472},
			expr: &seqExpr{
				pos: position{line: 1465, col: 19, offset: 55490},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 19, offset: 55490},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 26, offset: 55497},
						expr: &ruleRefExpr{
							pos:  position{line: 1465, col: 26, offset: 55497},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 30, offset: 55501},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1468, col: 1, offset: 55569},
			expr: &actionExpr{
				pos: position{line: 1468, col: 20, offset: 55588},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1468, col: 20, offset: 55588},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1468, col: 20, offset: 55588},
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 21, offset: 55589},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 36, offset: 55604},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1468, col: 42, offset: 55610},
								expr: &ruleRefExpr{
									pos:  position{line: 1468, col: 43, offset: 55611},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1468, col: 55, offset: 55623},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1468, col: 59, offset: 55627},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1472, col: 1, offset: 55695},
			expr: &actionExpr{
				pos: position{line: 1472, col: 14, offset: 55708},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1472, col: 14, offset: 55708},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1472, col: 14, offset: 55708},
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 15, offset: 55709},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1472, col: 30, offset: 55724},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1472, col: 36, offset: 55730},
								expr: &ruleRefExpr{
									pos:  position{line: 1472, col: 37, offset: 55731},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1472, col: 49, offset: 55743},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1472, col: 53, offset: 55747},
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 53, offset: 55747},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1476, col: 1, offset: 55816},
			expr: &actionExpr{
				pos: position{line: 1476, col: 14, offset: 55829},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1476, col: 14, offset: 55829},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1476, col: 14, offset: 55829},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1476, col: 33, offset: 55848},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1476, col: 42, offset: 55857},
								expr: &seqExpr{
									pos: position{line: 1476, col: 43, offset: 55858},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1476, col: 43, offset: 55858},
											expr: &ruleRefExpr{
												pos:  position{line: 1476, col: 44, offset: 55859},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1476, col: 63, offset: 55878},
											expr: &ruleRefExpr{
												pos:  position{line: 1476, col: 64, offset: 55879},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1476, col: 68, offset: 55883},
											expr: &ruleRefExpr{
												pos:  position{line: 1476, col: 68, offset: 55883},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1476, col: 72, offset: 55887},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1476, col: 86, offset: 55901},
											expr: &ruleRefExpr{
												pos:  position{line: 1476, col: 86, offset: 55901},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1483, col: 1, offset: 56147},
			expr: &litMatcher{
				pos:        position{line: 1483, col: 26, offset: 56172},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1485, col: 1, offset: 56180},
			expr: &actionExpr{
				pos: position{line: 1485, col: 17, offset: 56196},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 17, offset: 56196},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1485, col: 17, offset: 56196},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1485, col: 39, offset: 56218},
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 39, offset: 56218},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 43, offset: 56222},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 51, offset: 56230},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1485, col: 59, offset: 56238},
								expr: &ruleRefExpr{
									pos:  position{line: 1485, col: 60, offset: 56239},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1485, col: 81, offset: 56260},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1485, col: 82, offset: 56261},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1485, col: 82, offset: 56261},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1485, col: 104, offset: 56283},
											expr: &ruleRefExpr{
												pos:  position{line: 1485, col: 104, offset: 56283},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1485, col: 108, offset: 56287},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1485, col: 115, offset: 56294},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1489, col: 1, offset: 56400},
			expr: &actionExpr{
				pos: position{line: 1489, col: 21, offset: 56420},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 21, offset: 56420},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1489, col: 21, offset: 56420},
							expr: &choiceExpr{
								pos: position{line: 1489, col: 22, offset: 56421},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1489, col: 22, offset: 56421},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1489, col: 34, offset: 56433},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1489, col: 44, offset: 56443},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1489, col: 44, offset: 56443},
												expr: &ruleRefExpr{
													pos:  position{line: 1489, col: 45, offset: 56444},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1489, col: 67, offset: 56466},
												expr: &ruleRefExpr{
													pos:  position{line: 1489, col: 68, offset: 56467},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1489, col: 72, offset: 56471,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 77, offset: 56476},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1493, col: 1, offset: 56516},
			expr: &actionExpr{
				pos: position{line: 1493, col: 22, offset: 56537},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 22, offset: 56537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1493, col: 22, offset: 56537},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 23, offset: 56538},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1493, col: 45, offset: 56560},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 45, offset: 56560},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1493, col: 49, offset: 56564},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 54, offset: 56569},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 63, offset: 56578},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1493, col: 89, offset: 56604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1497, col: 1, offset: 56669},
			expr: &actionExpr{
				pos: position{line: 1497, col: 29, offset: 56697},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1497, col: 29, offset: 56697},
					expr: &choiceExpr{
						pos: position{line: 1497, col: 30, offset: 56698},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1497, col: 30, offset: 56698},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1497, col: 42, offset: 56710},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1497, col: 52, offset: 56720},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1497, col: 52, offset: 56720},
										expr: &ruleRefExpr{
											pos:  position{line: 1497, col: 53, offset: 56721},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1497, col: 58, offset: 56726,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1505, col: 1, offset: 57035},
			expr: &choiceExpr{
				pos: position{line: 1505, col: 17, offset: 57051},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1505, col: 17, offset: 57051},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1505, col: 49, offset: 57083},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1505, col: 78, offset: 57112},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1507, col: 1, offset: 57148},
			expr: &litMatcher{
				pos:        position{line: 1507, col: 26, offset: 57173},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1510, col: 1, offset: 57245},
			expr: &actionExpr{
				pos: position{line: 1510, col: 31, offset: 57275},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 31, offset: 57275},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1510, col: 31, offset: 57275},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1510, col: 42, offset: 57286},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 43, offset: 57287},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 63, offset: 57307},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 70, offset: 57314},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1515, col: 1, offset: 57544},
			expr: &actionExpr{
				pos: position{line: 1516, col: 5, offset: 57584},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 5, offset: 57584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1516, col: 5, offset: 57584},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1516, col: 16, offset: 57595},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1516, col: 16, offset: 57595},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1516, col: 16, offset: 57595},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1516, col: 19, offset: 57598},
											expr: &choiceExpr{
												pos: position{line: 1516, col: 20, offset: 57599},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1516, col: 20, offset: 57599},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1516, col: 32, offset: 57611},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1516, col: 41, offset: 57620},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1516, col: 42, offset: 57621},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1516, col: 42, offset: 57621},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1516, col: 43, offset: 57622},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1516, col: 48, offset: 57627,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1520, col: 8, offset: 57718},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 5, offset: 57781},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1521, col: 16, offset: 57792},
								expr: &actionExpr{
									pos: position{line: 1522, col: 9, offset: 57802},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1522, col: 9, offset: 57802},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1522, col: 9, offset: 57802},
												expr: &ruleRefExpr{
													pos:  position{line: 1522, col: 10, offset: 57803},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1523, col: 9, offset: 57822},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1523, col: 20, offset: 57833},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1523, col: 20, offset: 57833},
														expr: &choiceExpr{
															pos: position{line: 1523, col: 21, offset: 57834},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1523, col: 21, offset: 57834},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1523, col: 33, offset: 57846},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1523, col: 43, offset: 57856},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1523, col: 43, offset: 57856},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1523, col: 44, offset: 57857},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1523, col: 49, offset: 57862,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1525, col: 12, offset: 57919},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1532, col: 1, offset: 58149},
			expr: &actionExpr{
				pos: position{line: 1532, col: 39, offset: 58187},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 39, offset: 58187},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1532, col: 39, offset: 58187},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1532, col: 50, offset: 58198},
								expr: &ruleRefExpr{
									pos:  position{line: 1532, col: 51, offset: 58199},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 9, offset: 58227},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1533, col: 31, offset: 58249},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 31, offset: 58249},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1533, col: 35, offset: 58253},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 43, offset: 58261},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 50, offset: 58268},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1533, col: 92, offset: 58310},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1533, col: 93, offset: 58311},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1533, col: 93, offset: 58311},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1533, col: 115, offset: 58333},
											expr: &ruleRefExpr{
												pos:  position{line: 1533, col: 115, offset: 58333},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1533, col: 119, offset: 58337},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1533, col: 126, offset: 58344},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1538, col: 1, offset: 58503},
			expr: &actionExpr{
				pos: position{line: 1538, col: 44, offset: 58546},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1538, col: 44, offset: 58546},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1538, col: 50, offset: 58552},
						expr: &ruleRefExpr{
							pos:  position{line: 1538, col: 51, offset: 58553},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1542, col: 1, offset: 58637},
			expr: &actionExpr{
				pos: position{line: 1543, col: 5, offset: 58692},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1543, col: 5, offset: 58692},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1543, col: 5, offset: 58692},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1543, col: 11, offset: 58698},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1543, col: 11, offset: 58698},
									expr: &choiceExpr{
										pos: position{line: 1543, col: 12, offset: 58699},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1543, col: 12, offset: 58699},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1543, col: 24, offset: 58711},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1543, col: 34, offset: 58721},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1543, col: 34, offset: 58721},
														expr: &ruleRefExpr{
															pos:  position{line: 1543, col: 35, offset: 58722},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1543, col: 57, offset: 58744},
														expr: &ruleRefExpr{
															pos:  position{line: 1543, col: 58, offset: 58745},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1543, col: 62, offset: 58749,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1545, col: 8, offset: 58798},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1550, col: 1, offset: 58924},
			expr: &actionExpr{
				pos: position{line: 1551, col: 5, offset: 58962},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1551, col: 5, offset: 58962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1551, col: 5, offset: 58962},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1551, col: 16, offset: 58973},
								expr: &ruleRefExpr{
									pos:  position{line: 1551, col: 17, offset: 58974},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1552, col: 5, offset: 58998},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1559, col: 5, offset: 59212},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1559, col: 12, offset: 59219},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1563, col: 1, offset: 59369},
			expr: &actionExpr{
				pos: position{line: 1563, col: 16, offset: 59384},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1563, col: 16, offset: 59384},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1568, col: 1, offset: 59467},
			expr: &actionExpr{
				pos: position{line: 1568, col: 39, offset: 59505},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1568, col: 39, offset: 59505},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1568, col: 45, offset: 59511},
						expr: &ruleRefExpr{
							pos:  position{line: 1568, col: 46, offset: 59512},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1572, col: 1, offset: 59592},
			expr: &actionExpr{
				pos: position{line: 1572, col: 38, offset: 59629},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 38, offset: 59629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1572, col: 38, offset: 59629},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1572, col: 44, offset: 59635},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1572, col: 44, offset: 59635},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1572, col: 44, offset: 59635},
											expr: &ruleRefExpr{
												pos:  position{line: 1572, col: 46, offset: 59637},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1572, col: 57, offset: 59648},
											expr: &choiceExpr{
												pos: position{line: 1572, col: 58, offset: 59649},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1572, col: 58, offset: 59649},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1572, col: 70, offset: 59661},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1572, col: 80, offset: 59671},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1572, col: 80, offset: 59671},
																expr: &ruleRefExpr{
																	pos:  position{line: 1572, col: 81, offset: 59672},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1572, col: 86, offset: 59677,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1574, col: 4, offset: 59718},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1581, col: 1, offset: 59892},
			expr: &actionExpr{
				pos: position{line: 1581, col: 14, offset: 59905},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1581, col: 14, offset: 59905},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1581, col: 14, offset: 59905},
							val:        "((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1581, col: 19, offset: 59910},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1581, col: 25, offset: 59916},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1581, col: 43, offset: 59934},
							val:        "))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1585, col: 1, offset: 59999},
			expr: &actionExpr{
				pos: position{line: 1585, col: 21, offset: 60019},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1585, col: 21, offset: 60019},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1585, col: 30, offset: 60028},
						expr: &choiceExpr{
							pos: position{line: 1585, col: 31, offset: 60029},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1585, col: 31, offset: 60029},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1585, col: 44, offset: 60042},
									name: "WS",
								},
								&ruleRefExpr{
									pos:  position{line: 1585, col: 49, offset: 60047},
									name: "Alphanum",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1589, col: 1, offset: 60124},
			expr: &actionExpr{
				pos: position{line: 1589, col: 23, offset: 60146},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1589, col: 23, offset: 60146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1589, col: 23, offset: 60146},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 29, offset: 60152},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 36, offset: 60159},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1590, col: 5, offset: 60191},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1590, col: 11, offset: 60197},
								expr: &actionExpr{
									pos: position{line: 1590, col: 12, offset: 60198},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1590, col: 12, offset: 60198},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1590, col: 12, offset: 60198},
												expr: &ruleRefExpr{
													pos:  position{line: 1590, col: 12, offset: 60198},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1590, col: 16, offset: 60202},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1590, col: 20, offset: 60206},
												expr: &ruleRefExpr{
													pos:  position{line: 1590, col: 20, offset: 60206},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1590, col: 24, offset: 60210},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1590, col: 33, offset: 60219},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 5, offset: 60277},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1591, col: 11, offset: 60283},
								expr: &actionExpr{
									pos: position{line: 1591, col: 12, offset: 60284},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1591, col: 12, offset: 60284},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1591, col: 12, offset: 60284},
												expr: &ruleRefExpr{
													pos:  position{line: 1591, col: 12, offset: 60284},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1591, col: 16, offset: 60288},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1591, col: 20, offset: 60292},
												expr: &ruleRefExpr{
													pos:  position{line: 1591, col: 20, offset: 60292},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1591, col: 24, offset: 60296},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1591, col: 33, offset: 60305},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1592, col: 5, offset: 60363},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1596, col: 1, offset: 60442},
			expr: &actionExpr{
				pos: position{line: 1596, col: 30, offset: 60471},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1596, col: 30, offset: 60471},
					expr: &choiceExpr{
						pos: position{line: 1596, col: 31, offset: 60472},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1596, col: 31, offset: 60472},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1596, col: 42, offset: 60483},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1602, col: 1, offset: 60628},
			expr: &actionExpr{
				pos: position{line: 1602, col: 14, offset: 60641},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1602, col: 14, offset: 60641},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1602, col: 14, offset: 60641},
							expr: &ruleRefExpr{
								pos:  position{line: 1602, col: 15, offset: 60642},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1602, col: 19, offset: 60646},
							expr: &ruleRefExpr{
								pos:  position{line: 1602, col: 19, offset: 60646},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1602, col: 23, offset: 60650},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1609, col: 1, offset: 60797},
			expr: &charClassMatcher{
				pos:        position{line: 1609, col: 13, offset: 60809},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1611, col: 1, offset: 60819},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 16, offset: 60834},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1611, col: 16, offset: 60834},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 22, offset: 60840},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 28, offset: 60846},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 34, offset: 60852},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 40, offset: 60858},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 46, offset: 60864},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1613, col: 1, offset: 60870},
			expr: &actionExpr{
				pos: position{line: 1613, col: 14, offset: 60883},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1613, col: 14, offset: 60883},
					expr: &charClassMatcher{
						pos:        position{line: 1613, col: 14, offset: 60883},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1617, col: 1, offset: 60929},
			expr: &litMatcher{
				pos:        position{line: 1617, col: 8, offset: 60936},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1619, col: 1, offset: 60941},
			expr: &actionExpr{
				pos: position{line: 1619, col: 15, offset: 60955},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1619, col: 15, offset: 60955},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1619, col: 15, offset: 60955},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1619, col: 25, offset: 60965},
							expr: &choiceExpr{
								pos: position{line: 1619, col: 27, offset: 60967},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1619, col: 27, offset: 60967},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1619, col: 32, offset: 60972},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1624, col: 1, offset: 61237},
			expr: &actionExpr{
				pos: position{line: 1624, col: 14, offset: 61250},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1624, col: 15, offset: 61251},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1624, col: 15, offset: 61251},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1624, col: 27, offset: 61263},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1624, col: 46, offset: 61282},
							expr: &actionExpr{
								pos: position{line: 1624, col: 47, offset: 61283},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1624, col: 47, offset: 61283},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1624, col: 48, offset: 61284},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1624, col: 48, offset: 61284},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 49, offset: 61285},
														name: "Newline",
													},
												},
												&notExpr{
													pos: position{line: 1624, col: 57, offset: 61293},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 58, offset: 61294},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1624, col: 61, offset: 61297},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 62, offset: 61298},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1624, col: 66, offset: 61302},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 67, offset: 61303},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1624, col: 84, offset: 61320},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 85, offset: 61321},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1624, col: 110, offset: 61346},
													expr: &ruleRefExpr{
														pos:  position{line: 1624, col: 111, offset: 61347},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1624, col: 123, offset: 61359,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1624, col: 126, offset: 61362},
											expr: &ruleRefExpr{
												pos:  position{line: 1624, col: 126, offset: 61362},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1626, col: 7, offset: 61471},
							expr: &litMatcher{
								pos:        position{line: 1626, col: 7, offset: 61471},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1630, col: 1, offset: 61652},
			expr: &oneOrMoreExpr{
				pos: position{line: 1630, col: 11, offset: 61662},
				expr: &ruleRefExpr{
					pos:  position{line: 1630, col: 11, offset: 61662},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1632, col: 1, offset: 61668},
			expr: &actionExpr{
				pos: position{line: 1632, col: 17, offset: 61684},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1632, col: 17, offset: 61684},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1632, col: 26, offset: 61693},
						expr: &choiceExpr{
							pos: position{line: 1632, col: 27, offset: 61694},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1632, col: 27, offset: 61694},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1632, col: 38, offset: 61705},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1636, col: 1, offset: 61797},
			expr: &actionExpr{
				pos: position{line: 1636, col: 25, offset: 61821},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1636, col: 25, offset: 61821},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1636, col: 34, offset: 61830},
						expr: &seqExpr{
							pos: position{line: 1636, col: 35, offset: 61831},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1636, col: 35, offset: 61831},
									expr: &ruleRefExpr{
										pos:  position{line: 1636, col: 36, offset: 61832},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1636, col: 40, offset: 61836},
									expr: &ruleRefExpr{
										pos:  position{line: 1636, col: 41, offset: 61837},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1636, col: 44, offset: 61840},
									expr: &litMatcher{
										pos:        position{line: 1636, col: 45, offset: 61841},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1636, col: 49, offset: 61845,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1640, col: 1, offset: 61909},
			expr: &actionExpr{
				pos: position{line: 1640, col: 13, offset: 61921},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1640, col: 13, offset: 61921},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1640, col: 23, offset: 61931},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1640, col: 23, offset: 61931},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1640, col: 34, offset: 61942},
								expr: &choiceExpr{
									pos: position{line: 1640, col: 35, offset: 61943},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1640, col: 35, offset: 61943},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 46, offset: 61954},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1644, col: 1, offset: 62047},
			expr: &oneOrMoreExpr{
				pos: position{line: 1644, col: 13, offset: 62059},
				expr: &choiceExpr{
					pos: position{line: 1644, col: 14, offset: 62060},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1644, col: 14, offset: 62060},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1644, col: 99, offset: 62145},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1644, col: 105, offset: 62151},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1646, col: 1, offset: 62272},
			expr: &actionExpr{
				pos: position{line: 1646, col: 21, offset: 62292},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1646, col: 21, offset: 62292},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1646, col: 31, offset: 62302},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1646, col: 31, offset: 62302},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1646, col: 42, offset: 62313},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1650, col: 1, offset: 62392},
			expr: &oneOrMoreExpr{
				pos: position{line: 1650, col: 22, offset: 62413},
				expr: &choiceExpr{
					pos: position{line: 1650, col: 23, offset: 62414},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1650, col: 23, offset: 62414},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1650, col: 110, offset: 62501},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1650, col: 116, offset: 62507},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1652, col: 1, offset: 62556},
			expr: &actionExpr{
				pos: position{line: 1652, col: 8, offset: 62563},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1652, col: 8, offset: 62563},
					expr: &choiceExpr{
						pos: position{line: 1652, col: 9, offset: 62564},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1652, col: 9, offset: 62564},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1652, col: 22, offset: 62577},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1652, col: 22, offset: 62577},
										expr: &ruleRefExpr{
											pos:  position{line: 1652, col: 23, offset: 62578},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1652, col: 31, offset: 62586},
										expr: &ruleRefExpr{
											pos:  position{line: 1652, col: 32, offset: 62587},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1652, col: 35, offset: 62590},
										expr: &litMatcher{
											pos:        position{line: 1652, col: 36, offset: 62591},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1652, col: 40, offset: 62595},
										expr: &litMatcher{
											pos:        position{line: 1652, col: 41, offset: 62596},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1652, col: 46, offset: 62601,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1656, col: 1, offset: 62642},
			expr: &choiceExpr{
				pos: position{line: 1656, col: 15, offset: 62656},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1656, col: 15, offset: 62656},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1656, col: 27, offset: 62668},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1656, col: 40, offset: 62681},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1656, col: 51, offset: 62692},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1656, col: 62, offset: 62703},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1658, col: 1, offset: 62714},
			expr: &actionExpr{
				pos: position{line: 1658, col: 7, offset: 62720},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1658, col: 7, offset: 62720},
					expr: &choiceExpr{
						pos: position{line: 1658, col: 8, offset: 62721},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1658, col: 8, offset: 62721},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1658, col: 21, offset: 62734},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1658, col: 21, offset: 62734},
										expr: &ruleRefExpr{
											pos:  position{line: 1658, col: 22, offset: 62735},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 30, offset: 62743},
										expr: &ruleRefExpr{
											pos:  position{line: 1658, col: 31, offset: 62744},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 34, offset: 62747},
										expr: &litMatcher{
											pos:        position{line: 1658, col: 35, offset: 62748},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 39, offset: 62752},
										expr: &litMatcher{
											pos:        position{line: 1658, col: 40, offset: 62753},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 44, offset: 62757},
										expr: &litMatcher{
											pos:        position{line: 1658, col: 45, offset: 62758},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 50, offset: 62763},
										expr: &litMatcher{
											pos:        position{line: 1658, col: 51, offset: 62764},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1658, col: 56, offset: 62769},
										expr: &litMatcher{
											pos:        position{line: 1658, col: 57, offset: 62770},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1658, col: 62, offset: 62775,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1662, col: 1, offset: 62816},
			expr: &actionExpr{
				pos: position{line: 1662, col: 10, offset: 62825},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1662, col: 10, offset: 62825},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1666, col: 1, offset: 62867},
			expr: &actionExpr{
				pos: position{line: 1666, col: 11, offset: 62877},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1666, col: 11, offset: 62877},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1666, col: 11, offset: 62877},
							expr: &litMatcher{
								pos:        position{line: 1666, col: 11, offset: 62877},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1666, col: 16, offset: 62882},
							expr: &ruleRefExpr{
								pos:  position{line: 1666, col: 16, offset: 62882},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1670, col: 1, offset: 62934},
			expr: &choiceExpr{
				pos: position{line: 1670, col: 7, offset: 62940},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1670, col: 7, offset: 62940},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1670, col: 13, offset: 62946},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1670, col: 13, offset: 62946},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1674, col: 1, offset: 62987},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 12, offset: 62998},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1674, col: 12, offset: 62998},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1674, col: 21, offset: 63007},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1674, col: 28, offset: 63014},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1676, col: 1, offset: 63020},
			expr: &notExpr{
				pos: position{line: 1676, col: 8, offset: 63027},
				expr: &anyMatcher{
					line: 1676, col: 9, offset: 63028,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1678, col: 1, offset: 63031},
			expr: &choiceExpr{
				pos: position{line: 1678, col: 8, offset: 63038},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1678, col: 8, offset: 63038},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1678, col: 18, offset: 63048},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onContinuedListItemBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonContinuedListItemBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemBlock1(stack["block"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
