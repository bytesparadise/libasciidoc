// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1615},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1640},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1678},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1724},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1731},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1732},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1769},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1806},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1806},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1806},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1807},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1816},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1823},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1823},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1848},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1872},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1897},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1919},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1938},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1989},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2013},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2053},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2087},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2118},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2143},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2181},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2203},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2210},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2211},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2232},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2253},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2253},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2253},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2254},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2263},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2270},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2270},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2282},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2428},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2443},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2461},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2480},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2480},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2501},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2509},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2510},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2535},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2615},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2640},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2640},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2646},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2652},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2678},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2678},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2679},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2680},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2681},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2702,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2868},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2886},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2886},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2890},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2890},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2894},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2901},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2916},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2920},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2920},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2938},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2950},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 2959},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 2959},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 2986},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 2996},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 2996},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 108, col: 1, offset: 3097},
			expr: &choiceExpr{
				pos: position{line: 108, col: 20, offset: 3116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 108, col: 20, offset: 3116},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 48, offset: 3144},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 110, col: 1, offset: 3174},
			expr: &actionExpr{
				pos: position{line: 110, col: 30, offset: 3203},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 110, col: 30, offset: 3203},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 30, offset: 3203},
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 30, offset: 3203},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 110, col: 34, offset: 3207},
							expr: &litMatcher{
								pos:        position{line: 110, col: 35, offset: 3208},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 39, offset: 3212},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 48, offset: 3221},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 48, offset: 3221},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 65, offset: 3238},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 114, col: 1, offset: 3308},
			expr: &actionExpr{
				pos: position{line: 114, col: 33, offset: 3340},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 114, col: 33, offset: 3340},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 33, offset: 3340},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 33, offset: 3340},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 114, col: 37, offset: 3344},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 114, col: 48, offset: 3355},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 56, offset: 3363},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 72, offset: 3379},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 118, col: 1, offset: 3458},
			expr: &actionExpr{
				pos: position{line: 118, col: 19, offset: 3476},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 118, col: 19, offset: 3476},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 19, offset: 3476},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 19, offset: 3476},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 23, offset: 3480},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 33, offset: 3490},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 53, offset: 3510},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 118, col: 59, offset: 3516},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 60, offset: 3517},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 82, offset: 3539},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 82, offset: 3539},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 118, col: 86, offset: 3543},
							expr: &litMatcher{
								pos:        position{line: 118, col: 86, offset: 3543},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 91, offset: 3548},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 91, offset: 3548},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 123, col: 1, offset: 3690},
			expr: &actionExpr{
				pos: position{line: 123, col: 23, offset: 3712},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 123, col: 23, offset: 3712},
					expr: &choiceExpr{
						pos: position{line: 123, col: 24, offset: 3713},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 123, col: 24, offset: 3713},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 123, col: 37, offset: 3726},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 123, col: 37, offset: 3726},
										expr: &litMatcher{
											pos:        position{line: 123, col: 38, offset: 3727},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 42, offset: 3731},
										expr: &litMatcher{
											pos:        position{line: 123, col: 43, offset: 3732},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 123, col: 47, offset: 3736},
										expr: &ruleRefExpr{
											pos:  position{line: 123, col: 48, offset: 3737},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 123, col: 56, offset: 3745,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 127, col: 1, offset: 3786},
			expr: &actionExpr{
				pos: position{line: 127, col: 24, offset: 3809},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 127, col: 24, offset: 3809},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 127, col: 24, offset: 3809},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 127, col: 28, offset: 3813},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 127, col: 35, offset: 3820},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 127, col: 35, offset: 3820},
									expr: &choiceExpr{
										pos: position{line: 127, col: 36, offset: 3821},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 127, col: 36, offset: 3821},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 127, col: 49, offset: 3834},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 127, col: 49, offset: 3834},
														expr: &litMatcher{
															pos:        position{line: 127, col: 50, offset: 3835},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 127, col: 54, offset: 3839},
														expr: &ruleRefExpr{
															pos:  position{line: 127, col: 55, offset: 3840},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 127, col: 60, offset: 3845,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 129, col: 4, offset: 3886},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 135, col: 1, offset: 4047},
			expr: &actionExpr{
				pos: position{line: 135, col: 21, offset: 4067},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 135, col: 21, offset: 4067},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 135, col: 21, offset: 4067},
							expr: &ruleRefExpr{
								pos:  position{line: 135, col: 21, offset: 4067},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 135, col: 25, offset: 4071},
							expr: &litMatcher{
								pos:        position{line: 135, col: 26, offset: 4072},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 30, offset: 4076},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 136, col: 9, offset: 4095},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 136, col: 10, offset: 4096},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 136, col: 10, offset: 4096},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 136, col: 10, offset: 4096},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 136, col: 21, offset: 4107},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 45, offset: 4131},
													expr: &litMatcher{
														pos:        position{line: 136, col: 45, offset: 4131},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 50, offset: 4136},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 58, offset: 4144},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 59, offset: 4145},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 136, col: 82, offset: 4168},
													expr: &litMatcher{
														pos:        position{line: 136, col: 82, offset: 4168},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 136, col: 87, offset: 4173},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 136, col: 97, offset: 4183},
														expr: &ruleRefExpr{
															pos:  position{line: 136, col: 98, offset: 4184},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 138, col: 15, offset: 4301},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 138, col: 15, offset: 4301},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 15, offset: 4301},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 24, offset: 4310},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 46, offset: 4332},
													expr: &litMatcher{
														pos:        position{line: 138, col: 46, offset: 4332},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 51, offset: 4337},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 61, offset: 4347},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 62, offset: 4348},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 13, offset: 4457},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 145, col: 1, offset: 4587},
			expr: &choiceExpr{
				pos: position{line: 145, col: 27, offset: 4613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 145, col: 27, offset: 4613},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 145, col: 27, offset: 4613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 145, col: 27, offset: 4613},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 32, offset: 4618},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 145, col: 39, offset: 4625},
									expr: &choiceExpr{
										pos: position{line: 145, col: 40, offset: 4626},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 145, col: 40, offset: 4626},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 145, col: 52, offset: 4638},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 145, col: 62, offset: 4648},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 145, col: 62, offset: 4648},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 63, offset: 4649},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 145, col: 67, offset: 4653},
														expr: &litMatcher{
															pos:        position{line: 145, col: 68, offset: 4654},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 145, col: 72, offset: 4658},
														expr: &litMatcher{
															pos:        position{line: 145, col: 73, offset: 4659},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 145, col: 78, offset: 4664,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4706},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4706},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 147, col: 5, offset: 4706},
									expr: &litMatcher{
										pos:        position{line: 147, col: 5, offset: 4706},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 11, offset: 4712},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 18, offset: 4719},
									expr: &choiceExpr{
										pos: position{line: 147, col: 19, offset: 4720},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 19, offset: 4720},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 31, offset: 4732},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 41, offset: 4742},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 41, offset: 4742},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 42, offset: 4743},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 46, offset: 4747},
														expr: &litMatcher{
															pos:        position{line: 147, col: 47, offset: 4748},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 51, offset: 4752},
														expr: &litMatcher{
															pos:        position{line: 147, col: 52, offset: 4753},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 57, offset: 4758,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 147, col: 62, offset: 4763},
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 62, offset: 4763},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 147, col: 66, offset: 4767},
									expr: &litMatcher{
										pos:        position{line: 147, col: 67, offset: 4768},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 151, col: 1, offset: 4808},
			expr: &actionExpr{
				pos: position{line: 151, col: 25, offset: 4832},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 151, col: 25, offset: 4832},
					expr: &choiceExpr{
						pos: position{line: 151, col: 26, offset: 4833},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 151, col: 26, offset: 4833},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 151, col: 38, offset: 4845},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 151, col: 48, offset: 4855},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 151, col: 48, offset: 4855},
										expr: &ruleRefExpr{
											pos:  position{line: 151, col: 49, offset: 4856},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 151, col: 53, offset: 4860},
										expr: &litMatcher{
											pos:        position{line: 151, col: 54, offset: 4861},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 151, col: 59, offset: 4866,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 155, col: 1, offset: 4907},
			expr: &actionExpr{
				pos: position{line: 155, col: 27, offset: 4933},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 155, col: 27, offset: 4933},
					expr: &choiceExpr{
						pos: position{line: 155, col: 28, offset: 4934},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 155, col: 28, offset: 4934},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 155, col: 40, offset: 4946},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 155, col: 50, offset: 4956},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 155, col: 50, offset: 4956},
										expr: &ruleRefExpr{
											pos:  position{line: 155, col: 51, offset: 4957},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 155, col: 56, offset: 4962,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 162, col: 1, offset: 5118},
			expr: &actionExpr{
				pos: position{line: 162, col: 33, offset: 5150},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 162, col: 33, offset: 5150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 162, col: 33, offset: 5150},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 37, offset: 5154},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 43, offset: 5160},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 162, col: 66, offset: 5183},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 162, col: 70, offset: 5187},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 162, col: 76, offset: 5193},
								expr: &actionExpr{
									pos: position{line: 162, col: 77, offset: 5194},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 162, col: 78, offset: 5195},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 162, col: 78, offset: 5195},
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 78, offset: 5195},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 162, col: 82, offset: 5199},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 162, col: 89, offset: 5206},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 162, col: 138, offset: 5255},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 169, col: 1, offset: 5504},
			expr: &actionExpr{
				pos: position{line: 169, col: 26, offset: 5529},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 169, col: 26, offset: 5529},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 169, col: 27, offset: 5530},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 169, col: 27, offset: 5530},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 35, offset: 5538},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 169, col: 43, offset: 5546},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 169, col: 51, offset: 5554},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 169, col: 56, offset: 5559},
							expr: &choiceExpr{
								pos: position{line: 169, col: 57, offset: 5560},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 169, col: 57, offset: 5560},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 65, offset: 5568},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 169, col: 73, offset: 5576},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 169, col: 81, offset: 5584},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 173, col: 1, offset: 5626},
			expr: &actionExpr{
				pos: position{line: 173, col: 27, offset: 5652},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 173, col: 27, offset: 5652},
					expr: &seqExpr{
						pos: position{line: 173, col: 28, offset: 5653},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 173, col: 28, offset: 5653},
								expr: &ruleRefExpr{
									pos:  position{line: 173, col: 29, offset: 5654},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 173, col: 37, offset: 5662,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 177, col: 1, offset: 5702},
			expr: &choiceExpr{
				pos: position{line: 177, col: 27, offset: 5728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 27, offset: 5728},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 177, col: 27, offset: 5728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 177, col: 27, offset: 5728},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 177, col: 32, offset: 5733},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 38, offset: 5739},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 177, col: 61, offset: 5762},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 65, offset: 5766},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5835},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5835},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5835},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 9, offset: 5839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 15, offset: 5845},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 38, offset: 5868},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 43, offset: 5873},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 183, col: 1, offset: 5941},
			expr: &actionExpr{
				pos: position{line: 183, col: 34, offset: 5974},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 183, col: 34, offset: 5974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 183, col: 34, offset: 5974},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 5978},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 44, offset: 5984},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 183, col: 67, offset: 6007},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 190, col: 1, offset: 6195},
			expr: &actionExpr{
				pos: position{line: 190, col: 22, offset: 6216},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 22, offset: 6216},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 190, col: 28, offset: 6222},
						expr: &ruleRefExpr{
							pos:  position{line: 190, col: 29, offset: 6223},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 194, col: 1, offset: 6313},
			expr: &actionExpr{
				pos: position{line: 194, col: 21, offset: 6333},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 194, col: 21, offset: 6333},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 194, col: 21, offset: 6333},
							expr: &choiceExpr{
								pos: position{line: 194, col: 23, offset: 6335},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 194, col: 23, offset: 6335},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 29, offset: 6341},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 194, col: 35, offset: 6347},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 6423},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 195, col: 11, offset: 6429},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 195, col: 11, offset: 6429},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 196, col: 9, offset: 6450},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6474},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6497},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6525},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6553},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6580},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6607},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6644},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6672},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 209, col: 1, offset: 6855},
			expr: &choiceExpr{
				pos: position{line: 209, col: 24, offset: 6878},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 24, offset: 6878},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 42, offset: 6896},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 211, col: 1, offset: 6913},
			expr: &choiceExpr{
				pos: position{line: 211, col: 14, offset: 6926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 14, offset: 6926},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 211, col: 14, offset: 6926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 211, col: 14, offset: 6926},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 211, col: 19, offset: 6931},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 23, offset: 6935},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 211, col: 27, offset: 6939},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 32, offset: 6944},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6998},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 5, offset: 6998},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 10, offset: 7003},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 14, offset: 7007},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 7011},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 7016},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 217, col: 1, offset: 7069},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 7088},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 7088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 7088},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 217, col: 25, offset: 7093},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 29, offset: 7097},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 33, offset: 7101},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 217, col: 38, offset: 7106},
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 38, offset: 7106},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 223, col: 1, offset: 7380},
			expr: &actionExpr{
				pos: position{line: 223, col: 17, offset: 7396},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 223, col: 17, offset: 7396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 17, offset: 7396},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 223, col: 21, offset: 7400},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 223, col: 28, offset: 7407},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 223, col: 28, offset: 7407},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 28, offset: 7407},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 223, col: 38, offset: 7417},
											expr: &choiceExpr{
												pos: position{line: 223, col: 39, offset: 7418},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 223, col: 39, offset: 7418},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 223, col: 51, offset: 7430},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 223, col: 61, offset: 7440},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 223, col: 61, offset: 7440},
																expr: &ruleRefExpr{
																	pos:  position{line: 223, col: 62, offset: 7441},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 223, col: 70, offset: 7449,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 4, offset: 7490},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 231, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 231, col: 16, offset: 7657},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 231, col: 16, offset: 7657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 16, offset: 7657},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 231, col: 21, offset: 7662},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 231, col: 27, offset: 7668},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 231, col: 27, offset: 7668},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 27, offset: 7668},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 231, col: 37, offset: 7678},
											expr: &choiceExpr{
												pos: position{line: 231, col: 38, offset: 7679},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 231, col: 38, offset: 7679},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 231, col: 50, offset: 7691},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 231, col: 60, offset: 7701},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 231, col: 60, offset: 7701},
																expr: &ruleRefExpr{
																	pos:  position{line: 231, col: 61, offset: 7702},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 231, col: 69, offset: 7710},
																expr: &litMatcher{
																	pos:        position{line: 231, col: 70, offset: 7711},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 231, col: 74, offset: 7715,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 4, offset: 7756},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 8, offset: 7760},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 237, col: 1, offset: 7817},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7837},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7837},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7837},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 33, offset: 7849},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 33, offset: 7849},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 37, offset: 7853},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 242, col: 1, offset: 7985},
			expr: &actionExpr{
				pos: position{line: 242, col: 30, offset: 8014},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 30, offset: 8014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 30, offset: 8014},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 242, col: 34, offset: 8018},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 37, offset: 8021},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 242, col: 53, offset: 8037},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 57, offset: 8041},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 247, col: 1, offset: 8197},
			expr: &actionExpr{
				pos: position{line: 247, col: 21, offset: 8217},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 247, col: 21, offset: 8217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 247, col: 21, offset: 8217},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 247, col: 31, offset: 8227},
							expr: &litMatcher{
								pos:        position{line: 247, col: 31, offset: 8227},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 36, offset: 8232},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 45, offset: 8241},
								expr: &actionExpr{
									pos: position{line: 247, col: 46, offset: 8242},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 247, col: 46, offset: 8242},
										expr: &choiceExpr{
											pos: position{line: 247, col: 47, offset: 8243},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 247, col: 47, offset: 8243},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 247, col: 59, offset: 8255},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 247, col: 69, offset: 8265},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 247, col: 69, offset: 8265},
															expr: &ruleRefExpr{
																pos:  position{line: 247, col: 70, offset: 8266},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 247, col: 78, offset: 8274},
															expr: &litMatcher{
																pos:        position{line: 247, col: 79, offset: 8275},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 247, col: 83, offset: 8279,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 249, col: 9, offset: 8329},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 13, offset: 8333},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 254, col: 1, offset: 8458},
			expr: &actionExpr{
				pos: position{line: 254, col: 19, offset: 8476},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 254, col: 19, offset: 8476},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 19, offset: 8476},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 254, col: 23, offset: 8480},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 254, col: 34, offset: 8491},
								expr: &ruleRefExpr{
									pos:  position{line: 254, col: 35, offset: 8492},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 254, col: 54, offset: 8511},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 58, offset: 8515},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 258, col: 1, offset: 8588},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 8613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 259, col: 5, offset: 8613},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 259, col: 5, offset: 8613},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 259, col: 5, offset: 8613},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 10, offset: 8618},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 259, col: 24, offset: 8632},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 259, col: 28, offset: 8636},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 259, col: 34, offset: 8642},
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 35, offset: 8643},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 259, col: 52, offset: 8660},
									expr: &litMatcher{
										pos:        position{line: 259, col: 52, offset: 8660},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 259, col: 57, offset: 8665},
									expr: &ruleRefExpr{
										pos:  position{line: 259, col: 57, offset: 8665},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 9, offset: 8770},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 261, col: 9, offset: 8770},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 9, offset: 8770},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 14, offset: 8775},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 28, offset: 8789},
									expr: &litMatcher{
										pos:        position{line: 261, col: 28, offset: 8789},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 33, offset: 8794},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 33, offset: 8794},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 265, col: 1, offset: 8887},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8903},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8903},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 265, col: 17, offset: 8903},
							expr: &litMatcher{
								pos:        position{line: 265, col: 18, offset: 8904},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 26, offset: 8912},
							expr: &litMatcher{
								pos:        position{line: 265, col: 27, offset: 8913},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 35, offset: 8921},
							expr: &litMatcher{
								pos:        position{line: 265, col: 36, offset: 8922},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 265, col: 46, offset: 8932},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 47, offset: 8933},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 54, offset: 8940},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 265, col: 58, offset: 8944},
								expr: &choiceExpr{
									pos: position{line: 265, col: 59, offset: 8945},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 59, offset: 8945},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 265, col: 71, offset: 8957},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 92, offset: 8978},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 92, offset: 8978},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 269, col: 1, offset: 9018},
			expr: &actionExpr{
				pos: position{line: 269, col: 19, offset: 9036},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 269, col: 19, offset: 9036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 269, col: 19, offset: 9036},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 269, col: 25, offset: 9042},
								expr: &choiceExpr{
									pos: position{line: 269, col: 26, offset: 9043},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 26, offset: 9043},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 38, offset: 9055},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 269, col: 47, offset: 9064},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 269, col: 68, offset: 9085},
							expr: &litMatcher{
								pos:        position{line: 269, col: 69, offset: 9086},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 273, col: 1, offset: 9241},
			expr: &seqExpr{
				pos: position{line: 273, col: 24, offset: 9264},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 273, col: 24, offset: 9264},
						expr: &litMatcher{
							pos:        position{line: 273, col: 25, offset: 9265},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 29, offset: 9269},
						expr: &litMatcher{
							pos:        position{line: 273, col: 30, offset: 9270},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 273, col: 34, offset: 9274},
						expr: &litMatcher{
							pos:        position{line: 273, col: 35, offset: 9275},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 273, col: 39, offset: 9279,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 275, col: 1, offset: 9283},
			expr: &actionExpr{
				pos: position{line: 275, col: 21, offset: 9303},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 275, col: 21, offset: 9303},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 21, offset: 9303},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 36, offset: 9318},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 279, col: 1, offset: 9392},
			expr: &actionExpr{
				pos: position{line: 279, col: 20, offset: 9411},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 279, col: 20, offset: 9411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 20, offset: 9411},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 29, offset: 9420},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 29, offset: 9420},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 33, offset: 9424},
							expr: &litMatcher{
								pos:        position{line: 279, col: 33, offset: 9424},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 38, offset: 9429},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 45, offset: 9436},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 46, offset: 9437},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 63, offset: 9454},
							expr: &litMatcher{
								pos:        position{line: 279, col: 63, offset: 9454},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 68, offset: 9459},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 74, offset: 9465},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 75, offset: 9466},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 92, offset: 9483},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 96, offset: 9487},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 283, col: 1, offset: 9557},
			expr: &actionExpr{
				pos: position{line: 283, col: 20, offset: 9576},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 283, col: 20, offset: 9576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 20, offset: 9576},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 9585},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 29, offset: 9585},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 33, offset: 9589},
							expr: &litMatcher{
								pos:        position{line: 283, col: 33, offset: 9589},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 38, offset: 9594},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 45, offset: 9601},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 46, offset: 9602},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 63, offset: 9619},
							expr: &litMatcher{
								pos:        position{line: 283, col: 63, offset: 9619},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 68, offset: 9624},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 74, offset: 9630},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 75, offset: 9631},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 92, offset: 9648},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 96, offset: 9652},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 287, col: 1, offset: 9740},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9758},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 287, col: 19, offset: 9758},
					expr: &choiceExpr{
						pos: position{line: 287, col: 20, offset: 9759},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 287, col: 20, offset: 9759},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 287, col: 32, offset: 9771},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 287, col: 42, offset: 9781},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 287, col: 42, offset: 9781},
										expr: &litMatcher{
											pos:        position{line: 287, col: 43, offset: 9782},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 47, offset: 9786},
										expr: &litMatcher{
											pos:        position{line: 287, col: 48, offset: 9787},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 287, col: 52, offset: 9791},
										expr: &ruleRefExpr{
											pos:  position{line: 287, col: 53, offset: 9792},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 287, col: 57, offset: 9796,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 291, col: 1, offset: 9837},
			expr: &actionExpr{
				pos: position{line: 291, col: 21, offset: 9857},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 291, col: 21, offset: 9857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 21, offset: 9857},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 291, col: 25, offset: 9861},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 291, col: 31, offset: 9867},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 32, offset: 9868},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 51, offset: 9887},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 298, col: 1, offset: 10061},
			expr: &actionExpr{
				pos: position{line: 298, col: 12, offset: 10072},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 298, col: 12, offset: 10072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 298, col: 12, offset: 10072},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 23, offset: 10083},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 24, offset: 10084},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 5, offset: 10108},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 299, col: 12, offset: 10115},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 299, col: 12, offset: 10115},
									expr: &litMatcher{
										pos:        position{line: 299, col: 13, offset: 10116},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 303, col: 5, offset: 10207},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 307, col: 5, offset: 10359},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 5, offset: 10359},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 9, offset: 10363},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 16, offset: 10370},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 31, offset: 10385},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 307, col: 35, offset: 10389},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 35, offset: 10389},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 53, offset: 10407},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 311, col: 1, offset: 10513},
			expr: &actionExpr{
				pos: position{line: 311, col: 18, offset: 10530},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 18, offset: 10530},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 311, col: 27, offset: 10539},
						expr: &seqExpr{
							pos: position{line: 311, col: 28, offset: 10540},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 311, col: 28, offset: 10540},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 29, offset: 10541},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 311, col: 37, offset: 10549},
									expr: &ruleRefExpr{
										pos:  position{line: 311, col: 38, offset: 10550},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 311, col: 54, offset: 10566},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 315, col: 1, offset: 10687},
			expr: &actionExpr{
				pos: position{line: 315, col: 17, offset: 10703},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 315, col: 17, offset: 10703},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 315, col: 26, offset: 10712},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 315, col: 26, offset: 10712},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10733},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10751},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10776},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10798},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10821},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10836},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10861},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10882},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10922},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10942},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 10962},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 333, col: 1, offset: 11117},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 11141},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 25, offset: 11141},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 35, offset: 11151},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11262},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11280},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11280},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11280},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11286},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11301},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11306},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11313},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11329},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11336},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11477},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11496},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11496},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11502},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11517},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11521},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11528},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11544},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11551},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11693},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11710},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11710},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11711},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11711},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11725},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11731},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11773},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11791},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11791},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11792},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11792},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11805},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11805},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11806},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11809},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11810},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11814},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11815},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11819},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11820},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11824,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11865},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11888},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11888},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11892},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11898},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11899},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11918},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12098},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12115},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12115},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12121},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12121},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12121},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12133},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12139},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12153},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12171},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12325},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12378},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12403},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12403},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12407},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12413},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12414},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12414},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12436},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12457},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12476},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12546},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12569},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12569},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12569},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12578},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12585},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12611},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12611},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12670},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12698},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12698},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12705},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12705},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12822},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12858},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12884},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12916},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12948},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 12975},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 12995},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 12995},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13000},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13000},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13001},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13007},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13008},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13040},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13062},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13062},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13069},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13069},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13086},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13108},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13115},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13116},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13116},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13116},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13120},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13127},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13127},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13144},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13282},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13310},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13310},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13315},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13322},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13322},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13339},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13361},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13368},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13369},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13369},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13369},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13373},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13380},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13380},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13397},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13450},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13540},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13558},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13558},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13565},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13573},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13578},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13583},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13671},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13695},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13695},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13700},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13707},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13715},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13720},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13725},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13733},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13818},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13837},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13837},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13849},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13944},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 13969},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 13969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 13969},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 13974},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 13986},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 13994},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14086},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14108},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14108},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14109},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14109},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14110},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14114},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14115},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14119},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14120},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14123,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14163},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14185},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14185},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14186},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14186},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14196},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14204},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14210},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14235},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14235},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14384},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14411},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14411},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14418},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14437},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14437},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14442},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14442},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14443},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14449},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14450},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14482},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14503},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14503},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14503},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14510},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14524},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14531},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14532},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14532},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14532},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14536},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14543},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14674},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14686},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14686},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14691},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14691},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14703},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14771},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14771},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14775},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14780},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14792},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14860},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14875},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14875},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14882},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14882},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14883},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14937},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15231},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15251},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15251},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15259},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15260},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15260},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15283},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15304},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15304,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15337},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15408},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15432},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15432},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15440},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15445},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15445},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15485},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15550},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15572},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15572},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15580},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15585},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15585},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15625},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15789},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15802},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15802},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15813},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15825},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15825},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15843},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15863},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15881},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15907},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15924},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15924},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15924},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15933},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 15990},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 15990},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 15996},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 15997},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16089},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16110},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16110},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16110},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16111},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16119},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16120},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16135},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16136},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16158},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16159},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16185},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16186},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16214},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16216},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16216},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 33, offset: 16242},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16273},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16274},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16299},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16300},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16321},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16322},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16341},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16356},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16356},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16356},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16365},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16366},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16382},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16392},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16393},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16545},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16592},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16616},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16616},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16620},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16627},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16655},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16655},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16655},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16667},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16667},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16679},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16700},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16708},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16950},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 16969},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 16969},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 16969},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 16980},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 16981},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 17001},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17009},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17032},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17041},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17181},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17211},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17211},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17211},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17211},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17215},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17278},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17278},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17278},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17278},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17285},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17285},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17286},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17386},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18103},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18103},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18103},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18104},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18112},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18223},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18223},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18224},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18231},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18345},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18345},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18346},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18353},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18467},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18467},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18467},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18468},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18476},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18590},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18590},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18590},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18591},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18599},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18712},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18712},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18744},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18770},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18770},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18780},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18780},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 18980},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 19001},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 19001},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 19001},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19012},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19013},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19033},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19041},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19066},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19077},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19078},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19108},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19117},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19275},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19307},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19307},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19307},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19307},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19311},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19319},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19376},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19376},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19376},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19383},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19383},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19384},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19484},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20191},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20198},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20199},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20285},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20285},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20318},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20349},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20349},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20349},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20350},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20354},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20368},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20368},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20368},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20413},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20413},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20456},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20456},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20498},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20498},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20537},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20565},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20565},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20575},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20575},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20891},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20910},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20910},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20921},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20922},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20942},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20948},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 85, offset: 20975},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 96, offset: 20986},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 122, offset: 21012},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 134, offset: 21024},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 135, offset: 21025},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21171},
			expr: &actionExpr{
				pos: position{line: 607, col: 30, offset: 21200},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 607, col: 30, offset: 21200},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 607, col: 39, offset: 21209},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 607, col: 39, offset: 21209},
							expr: &choiceExpr{
								pos: position{line: 607, col: 40, offset: 21210},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 607, col: 40, offset: 21210},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 607, col: 52, offset: 21222},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 607, col: 62, offset: 21232},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 607, col: 62, offset: 21232},
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 63, offset: 21233},
													name: "NEWLINE",
												},
											},
											&notExpr{
												pos: position{line: 607, col: 71, offset: 21241},
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 72, offset: 21242},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 607, col: 97, offset: 21267,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 613, col: 1, offset: 21396},
			expr: &actionExpr{
				pos: position{line: 613, col: 24, offset: 21419},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 613, col: 24, offset: 21419},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 613, col: 33, offset: 21428},
						expr: &seqExpr{
							pos: position{line: 613, col: 34, offset: 21429},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 613, col: 34, offset: 21429},
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 35, offset: 21430},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 613, col: 43, offset: 21438},
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 44, offset: 21439},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 69, offset: 21464},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 617, col: 1, offset: 21599},
			expr: &actionExpr{
				pos: position{line: 617, col: 31, offset: 21629},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 617, col: 31, offset: 21629},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 617, col: 40, offset: 21638},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 617, col: 40, offset: 21638},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 618, col: 11, offset: 21659},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 619, col: 11, offset: 21677},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 21702},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 21724},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 622, col: 11, offset: 21747},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 21762},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 21787},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 21808},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 21848},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 21868},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 21888},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 632, col: 1, offset: 21930},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 21963},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 21963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 21963},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 633, col: 16, offset: 21974},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 633, col: 16, offset: 21974},
									expr: &litMatcher{
										pos:        position{line: 633, col: 17, offset: 21975},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 636, col: 5, offset: 22033},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 640, col: 6, offset: 22209},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 640, col: 6, offset: 22209},
									expr: &choiceExpr{
										pos: position{line: 640, col: 7, offset: 22210},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 7, offset: 22210},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 12, offset: 22215},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 24, offset: 22227},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 644, col: 1, offset: 22267},
			expr: &actionExpr{
				pos: position{line: 644, col: 31, offset: 22297},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 31, offset: 22297},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 644, col: 40, offset: 22306},
						expr: &ruleRefExpr{
							pos:  position{line: 644, col: 41, offset: 22307},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 651, col: 1, offset: 22498},
			expr: &choiceExpr{
				pos: position{line: 651, col: 19, offset: 22516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 651, col: 19, offset: 22516},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 651, col: 19, offset: 22516},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 9, offset: 22562},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 653, col: 9, offset: 22562},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 9, offset: 22610},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 655, col: 9, offset: 22610},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 9, offset: 22668},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 657, col: 9, offset: 22668},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 9, offset: 22722},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 659, col: 9, offset: 22722},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 668, col: 1, offset: 23029},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 23076},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 23076},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 23076},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 670, col: 5, offset: 23076},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 670, col: 16, offset: 23087},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 17, offset: 23088},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 670, col: 37, offset: 23108},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 40, offset: 23111},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 670, col: 56, offset: 23127},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 670, col: 61, offset: 23132},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 670, col: 67, offset: 23138},
										expr: &ruleRefExpr{
											pos:  position{line: 670, col: 68, offset: 23139},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 23331},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 23331},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 674, col: 5, offset: 23331},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 674, col: 16, offset: 23342},
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 17, offset: 23343},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 674, col: 37, offset: 23363},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 674, col: 43, offset: 23369},
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 44, offset: 23370},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 679, col: 1, offset: 23535},
			expr: &actionExpr{
				pos: position{line: 679, col: 20, offset: 23554},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 679, col: 20, offset: 23554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 20, offset: 23554},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 31, offset: 23565},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 32, offset: 23566},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 680, col: 5, offset: 23591},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 23882},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 16, offset: 23893},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 23916},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 16, offset: 23927},
								expr: &ruleRefExpr{
									pos:  position{line: 689, col: 17, offset: 23928},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 693, col: 1, offset: 24062},
			expr: &actionExpr{
				pos: position{line: 693, col: 19, offset: 24080},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 693, col: 19, offset: 24080},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 693, col: 19, offset: 24080},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 30, offset: 24091},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 50, offset: 24111},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 693, col: 61, offset: 24122},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 62, offset: 24123},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 697, col: 1, offset: 24229},
			expr: &actionExpr{
				pos: position{line: 697, col: 23, offset: 24251},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 697, col: 23, offset: 24251},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 697, col: 23, offset: 24251},
							expr: &seqExpr{
								pos: position{line: 697, col: 25, offset: 24253},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 697, col: 25, offset: 24253},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 697, col: 51, offset: 24279},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 24309},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 698, col: 15, offset: 24319},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 698, col: 15, offset: 24319},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 698, col: 26, offset: 24330},
										expr: &ruleRefExpr{
											pos:  position{line: 698, col: 26, offset: 24330},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 42, offset: 24346},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 698, col: 52, offset: 24356},
								expr: &ruleRefExpr{
									pos:  position{line: 698, col: 53, offset: 24357},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 65, offset: 24369},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 702, col: 1, offset: 24459},
			expr: &actionExpr{
				pos: position{line: 702, col: 23, offset: 24481},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 702, col: 23, offset: 24481},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 702, col: 33, offset: 24491},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 706, col: 1, offset: 24537},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 24589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 24589},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 708, col: 5, offset: 24589},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 708, col: 5, offset: 24589},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 708, col: 16, offset: 24600},
										expr: &ruleRefExpr{
											pos:  position{line: 708, col: 17, offset: 24601},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 709, col: 5, offset: 24625},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 716, col: 5, offset: 24837},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 8, offset: 24840},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 716, col: 24, offset: 24856},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 716, col: 29, offset: 24861},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 716, col: 35, offset: 24867},
										expr: &ruleRefExpr{
											pos:  position{line: 716, col: 36, offset: 24868},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 25060},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 25060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 25060},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 720, col: 16, offset: 25071},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 17, offset: 25072},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 721, col: 5, offset: 25096},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 25308},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 728, col: 11, offset: 25314},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 12, offset: 25315},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 732, col: 1, offset: 25416},
			expr: &actionExpr{
				pos: position{line: 732, col: 19, offset: 25434},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 732, col: 19, offset: 25434},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 732, col: 19, offset: 25434},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 20, offset: 25435},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 732, col: 24, offset: 25439},
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 25, offset: 25440},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 5, offset: 25454},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 733, col: 15, offset: 25464},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 733, col: 15, offset: 25464},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 733, col: 15, offset: 25464},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 733, col: 24, offset: 25473},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 735, col: 9, offset: 25565},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 735, col: 9, offset: 25565},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 735, col: 9, offset: 25565},
													expr: &ruleRefExpr{
														pos:  position{line: 735, col: 10, offset: 25566},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 735, col: 25, offset: 25581},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 735, col: 34, offset: 25590},
														expr: &ruleRefExpr{
															pos:  position{line: 735, col: 35, offset: 25591},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 735, col: 51, offset: 25607},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 735, col: 61, offset: 25617},
														expr: &ruleRefExpr{
															pos:  position{line: 735, col: 62, offset: 25618},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 735, col: 74, offset: 25630},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 741, col: 1, offset: 25766},
			expr: &actionExpr{
				pos: position{line: 741, col: 18, offset: 25783},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 741, col: 18, offset: 25783},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 18, offset: 25783},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 19, offset: 25784},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 741, col: 23, offset: 25788},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 24, offset: 25789},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 742, col: 5, offset: 25804},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 742, col: 14, offset: 25813},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 742, col: 14, offset: 25813},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 25834},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 11, offset: 25852},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25875},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25891},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25914},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25940},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 25962},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 25988},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26015},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26056},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26083},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26103},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26132},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 763, col: 1, offset: 26395},
			expr: &actionExpr{
				pos: position{line: 763, col: 37, offset: 26431},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 763, col: 37, offset: 26431},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 763, col: 37, offset: 26431},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 38, offset: 26432},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 763, col: 48, offset: 26442},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 49, offset: 26443},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 64, offset: 26458},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 763, col: 73, offset: 26467},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 74, offset: 26468},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 763, col: 108, offset: 26502},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 763, col: 118, offset: 26512},
								expr: &ruleRefExpr{
									pos:  position{line: 763, col: 119, offset: 26513},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 131, offset: 26525},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 767, col: 1, offset: 26616},
			expr: &actionExpr{
				pos: position{line: 767, col: 36, offset: 26651},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 767, col: 36, offset: 26651},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 36, offset: 26651},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 37, offset: 26652},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 767, col: 41, offset: 26656},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 42, offset: 26657},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 768, col: 5, offset: 26672},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 768, col: 14, offset: 26681},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 768, col: 14, offset: 26681},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 769, col: 11, offset: 26702},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26720},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26743},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26759},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26782},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26804},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26830},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26856},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26876},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 781, col: 1, offset: 26918},
			expr: &actionExpr{
				pos: position{line: 781, col: 22, offset: 26939},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 781, col: 22, offset: 26939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 781, col: 22, offset: 26939},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 781, col: 33, offset: 26950},
								expr: &ruleRefExpr{
									pos:  position{line: 781, col: 34, offset: 26951},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 781, col: 54, offset: 26971},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 781, col: 60, offset: 26977},
								expr: &actionExpr{
									pos: position{line: 781, col: 61, offset: 26978},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 781, col: 61, offset: 26978},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 781, col: 61, offset: 26978},
												expr: &ruleRefExpr{
													pos:  position{line: 781, col: 62, offset: 26979},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 781, col: 66, offset: 26983},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 781, col: 72, offset: 26989},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 787, col: 1, offset: 27109},
			expr: &actionExpr{
				pos: position{line: 787, col: 26, offset: 27134},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 787, col: 26, offset: 27134},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 787, col: 26, offset: 27134},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 27, offset: 27135},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 787, col: 42, offset: 27150},
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 43, offset: 27151},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 53, offset: 27161},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 787, col: 62, offset: 27170},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 63, offset: 27171},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 94, offset: 27202},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 787, col: 104, offset: 27212},
								expr: &ruleRefExpr{
									pos:  position{line: 787, col: 105, offset: 27213},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 787, col: 117, offset: 27225},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 791, col: 1, offset: 27316},
			expr: &actionExpr{
				pos: position{line: 791, col: 33, offset: 27348},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 791, col: 33, offset: 27348},
					expr: &seqExpr{
						pos: position{line: 791, col: 34, offset: 27349},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 791, col: 34, offset: 27349},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 35, offset: 27350},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 791, col: 39, offset: 27354},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 40, offset: 27355},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 791, col: 50, offset: 27365,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 798, col: 1, offset: 27589},
			expr: &actionExpr{
				pos: position{line: 798, col: 14, offset: 27602},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 798, col: 14, offset: 27602},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 798, col: 14, offset: 27602},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 798, col: 17, offset: 27605},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 798, col: 21, offset: 27609},
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 21, offset: 27609},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 798, col: 25, offset: 27613},
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 26, offset: 27614},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 805, col: 1, offset: 27898},
			expr: &actionExpr{
				pos: position{line: 805, col: 15, offset: 27912},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 805, col: 15, offset: 27912},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 805, col: 15, offset: 27912},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 16, offset: 27913},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 805, col: 19, offset: 27916},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 805, col: 25, offset: 27922},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 805, col: 25, offset: 27922},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 806, col: 15, offset: 27946},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 807, col: 15, offset: 27972},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 15, offset: 28001},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 15, offset: 28030},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 15, offset: 28061},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 15, offset: 28092},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 15, offset: 28125},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28161},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28197},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28234},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 819, col: 1, offset: 28388},
			expr: &choiceExpr{
				pos: position{line: 819, col: 21, offset: 28408},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 819, col: 21, offset: 28408},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 28, offset: 28415},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 34, offset: 28421},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 41, offset: 28428},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 47, offset: 28434},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 54, offset: 28441},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 60, offset: 28447},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 819, col: 66, offset: 28453},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 821, col: 1, offset: 28458},
			expr: &choiceExpr{
				pos: position{line: 821, col: 33, offset: 28490},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 821, col: 33, offset: 28490},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 821, col: 39, offset: 28496},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 821, col: 39, offset: 28496},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 825, col: 1, offset: 28629},
			expr: &actionExpr{
				pos: position{line: 825, col: 25, offset: 28653},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 825, col: 25, offset: 28653},
					expr: &litMatcher{
						pos:        position{line: 825, col: 25, offset: 28653},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 829, col: 1, offset: 28694},
			expr: &actionExpr{
				pos: position{line: 829, col: 25, offset: 28718},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 829, col: 25, offset: 28718},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 25, offset: 28718},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 829, col: 30, offset: 28723},
							expr: &litMatcher{
								pos:        position{line: 829, col: 30, offset: 28723},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 837, col: 1, offset: 28820},
			expr: &choiceExpr{
				pos: position{line: 837, col: 13, offset: 28832},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 837, col: 13, offset: 28832},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 837, col: 35, offset: 28854},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 839, col: 1, offset: 28875},
			expr: &actionExpr{
				pos: position{line: 839, col: 24, offset: 28898},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 839, col: 24, offset: 28898},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 839, col: 24, offset: 28898},
							expr: &litMatcher{
								pos:        position{line: 839, col: 25, offset: 28899},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 839, col: 30, offset: 28904},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 839, col: 35, offset: 28909},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 44, offset: 28918},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 839, col: 72, offset: 28946},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 843, col: 1, offset: 29071},
			expr: &seqExpr{
				pos: position{line: 843, col: 31, offset: 29101},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 843, col: 31, offset: 29101},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 843, col: 58, offset: 29128},
						expr: &actionExpr{
							pos: position{line: 843, col: 59, offset: 29129},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 843, col: 59, offset: 29129},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 843, col: 59, offset: 29129},
										expr: &litMatcher{
											pos:        position{line: 843, col: 61, offset: 29131},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 843, col: 67, offset: 29137},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 843, col: 76, offset: 29146},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 843, col: 76, offset: 29146},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 843, col: 81, offset: 29151},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 847, col: 1, offset: 29243},
			expr: &actionExpr{
				pos: position{line: 847, col: 31, offset: 29273},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 847, col: 31, offset: 29273},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 847, col: 31, offset: 29273},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 32, offset: 29274},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 40, offset: 29282},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 847, col: 49, offset: 29291},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 847, col: 49, offset: 29291},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 11, offset: 29322},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 29344},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 11, offset: 29368},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 29392},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 852, col: 11, offset: 29418},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29441},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29463},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29486},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 29526},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 29559},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 861, col: 1, offset: 29704},
			expr: &actionExpr{
				pos: position{line: 861, col: 27, offset: 29730},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 861, col: 27, offset: 29730},
					exprs: []interface{}{
						&anyMatcher{
							line: 861, col: 28, offset: 29731,
						},
						&zeroOrMoreExpr{
							pos: position{line: 861, col: 31, offset: 29734},
							expr: &seqExpr{
								pos: position{line: 861, col: 32, offset: 29735},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 861, col: 32, offset: 29735},
										expr: &litMatcher{
											pos:        position{line: 861, col: 33, offset: 29736},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 38, offset: 29741},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 39, offset: 29742},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 42, offset: 29745},
										expr: &litMatcher{
											pos:        position{line: 861, col: 43, offset: 29746},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 47, offset: 29750},
										expr: &litMatcher{
											pos:        position{line: 861, col: 48, offset: 29751},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 52, offset: 29755},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 53, offset: 29756},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 61, offset: 29764},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 62, offset: 29765},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 861, col: 74, offset: 29777,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 865, col: 1, offset: 29837},
			expr: &choiceExpr{
				pos: position{line: 865, col: 24, offset: 29860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 24, offset: 29860},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 865, col: 24, offset: 29860},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 865, col: 24, offset: 29860},
									expr: &litMatcher{
										pos:        position{line: 865, col: 25, offset: 29861},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 865, col: 29, offset: 29865},
									expr: &litMatcher{
										pos:        position{line: 865, col: 30, offset: 29866},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 35, offset: 29871},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 865, col: 39, offset: 29875},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 48, offset: 29884},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 76, offset: 29912},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 30092},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 30092},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 867, col: 5, offset: 30092},
									expr: &litMatcher{
										pos:        position{line: 867, col: 6, offset: 30093},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 11, offset: 30098},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 867, col: 16, offset: 30103},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 25, offset: 30112},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 53, offset: 30140},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 871, col: 1, offset: 30398},
			expr: &seqExpr{
				pos: position{line: 871, col: 31, offset: 30428},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 871, col: 31, offset: 30428},
						expr: &ruleRefExpr{
							pos:  position{line: 871, col: 32, offset: 30429},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 35, offset: 30432},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 871, col: 62, offset: 30459},
						expr: &actionExpr{
							pos: position{line: 871, col: 63, offset: 30460},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 871, col: 63, offset: 30460},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 871, col: 63, offset: 30460},
										expr: &seqExpr{
											pos: position{line: 871, col: 65, offset: 30462},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 871, col: 65, offset: 30462},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 871, col: 69, offset: 30466},
													expr: &ruleRefExpr{
														pos:  position{line: 871, col: 70, offset: 30467},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 871, col: 80, offset: 30477},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 871, col: 88, offset: 30485},
											expr: &ruleRefExpr{
												pos:  position{line: 871, col: 88, offset: 30485},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 871, col: 93, offset: 30490},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 102, offset: 30499},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 875, col: 1, offset: 30590},
			expr: &actionExpr{
				pos: position{line: 875, col: 31, offset: 30620},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 875, col: 31, offset: 30620},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 875, col: 31, offset: 30620},
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 32, offset: 30621},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 875, col: 40, offset: 30629},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 875, col: 49, offset: 30638},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 875, col: 49, offset: 30638},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 30668},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 30690},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 30714},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30738},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30764},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30787},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 30809},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30832},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 30872},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 30905},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 889, col: 1, offset: 31050},
			expr: &actionExpr{
				pos: position{line: 889, col: 27, offset: 31076},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 889, col: 27, offset: 31076},
					exprs: []interface{}{
						&anyMatcher{
							line: 889, col: 28, offset: 31077,
						},
						&zeroOrMoreExpr{
							pos: position{line: 889, col: 31, offset: 31080},
							expr: &seqExpr{
								pos: position{line: 889, col: 32, offset: 31081},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 889, col: 32, offset: 31081},
										expr: &litMatcher{
											pos:        position{line: 889, col: 33, offset: 31082},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 889, col: 37, offset: 31086},
										expr: &ruleRefExpr{
											pos:  position{line: 889, col: 38, offset: 31087},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 889, col: 41, offset: 31090},
										expr: &litMatcher{
											pos:        position{line: 889, col: 42, offset: 31091},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 889, col: 46, offset: 31095},
										expr: &litMatcher{
											pos:        position{line: 889, col: 47, offset: 31096},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 889, col: 51, offset: 31100},
										expr: &ruleRefExpr{
											pos:  position{line: 889, col: 52, offset: 31101},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 889, col: 60, offset: 31109},
										expr: &ruleRefExpr{
											pos:  position{line: 889, col: 61, offset: 31110},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 889, col: 73, offset: 31122,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 893, col: 1, offset: 31182},
			expr: &choiceExpr{
				pos: position{line: 894, col: 5, offset: 31206},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 31206},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 894, col: 5, offset: 31206},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 894, col: 5, offset: 31206},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 18, offset: 31219},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 40, offset: 31241},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 894, col: 45, offset: 31246},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 54, offset: 31255},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 82, offset: 31283},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 9, offset: 31439},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 896, col: 9, offset: 31439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 896, col: 9, offset: 31439},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 22, offset: 31452},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 896, col: 44, offset: 31474},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 896, col: 49, offset: 31479},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 58, offset: 31488},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 896, col: 86, offset: 31516},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 9, offset: 31715},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 899, col: 9, offset: 31715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 9, offset: 31715},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 22, offset: 31728},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 44, offset: 31750},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 899, col: 48, offset: 31754},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 57, offset: 31763},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 85, offset: 31791},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 907, col: 1, offset: 31998},
			expr: &choiceExpr{
				pos: position{line: 907, col: 15, offset: 32012},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 907, col: 15, offset: 32012},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 907, col: 39, offset: 32036},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 909, col: 1, offset: 32059},
			expr: &actionExpr{
				pos: position{line: 909, col: 26, offset: 32084},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 909, col: 26, offset: 32084},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 909, col: 26, offset: 32084},
							expr: &litMatcher{
								pos:        position{line: 909, col: 27, offset: 32085},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 909, col: 32, offset: 32090},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 909, col: 37, offset: 32095},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 46, offset: 32104},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 909, col: 76, offset: 32134},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 913, col: 1, offset: 32260},
			expr: &seqExpr{
				pos: position{line: 913, col: 33, offset: 32292},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 913, col: 33, offset: 32292},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 913, col: 62, offset: 32321},
						expr: &actionExpr{
							pos: position{line: 913, col: 63, offset: 32322},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 913, col: 63, offset: 32322},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 913, col: 63, offset: 32322},
										expr: &litMatcher{
											pos:        position{line: 913, col: 65, offset: 32324},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 913, col: 71, offset: 32330},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 913, col: 80, offset: 32339},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 913, col: 80, offset: 32339},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 913, col: 85, offset: 32344},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 917, col: 1, offset: 32438},
			expr: &actionExpr{
				pos: position{line: 917, col: 33, offset: 32470},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 917, col: 33, offset: 32470},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 917, col: 33, offset: 32470},
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 34, offset: 32471},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 42, offset: 32479},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 917, col: 51, offset: 32488},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 917, col: 51, offset: 32488},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 32521},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32541},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32565},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 32589},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 32615},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 32638},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 32660},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 32683},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 32718},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 930, col: 1, offset: 32863},
			expr: &actionExpr{
				pos: position{line: 930, col: 29, offset: 32891},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 930, col: 29, offset: 32891},
					exprs: []interface{}{
						&anyMatcher{
							line: 930, col: 30, offset: 32892,
						},
						&zeroOrMoreExpr{
							pos: position{line: 930, col: 33, offset: 32895},
							expr: &seqExpr{
								pos: position{line: 930, col: 34, offset: 32896},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 930, col: 34, offset: 32896},
										expr: &litMatcher{
											pos:        position{line: 930, col: 35, offset: 32897},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 930, col: 40, offset: 32902},
										expr: &litMatcher{
											pos:        position{line: 930, col: 41, offset: 32903},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 930, col: 45, offset: 32907},
										expr: &litMatcher{
											pos:        position{line: 930, col: 46, offset: 32908},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 930, col: 50, offset: 32912},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 51, offset: 32913},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 930, col: 59, offset: 32921},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 60, offset: 32922},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 930, col: 72, offset: 32934,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 934, col: 1, offset: 32994},
			expr: &choiceExpr{
				pos: position{line: 934, col: 26, offset: 33019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 26, offset: 33019},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 934, col: 26, offset: 33019},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 934, col: 26, offset: 33019},
									expr: &litMatcher{
										pos:        position{line: 934, col: 27, offset: 33020},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 934, col: 31, offset: 33024},
									expr: &litMatcher{
										pos:        position{line: 934, col: 32, offset: 33025},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 37, offset: 33030},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 934, col: 41, offset: 33034},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 50, offset: 33043},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 934, col: 80, offset: 33073},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 33255},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 33255},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 936, col: 5, offset: 33255},
									expr: &litMatcher{
										pos:        position{line: 936, col: 6, offset: 33256},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 11, offset: 33261},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 936, col: 16, offset: 33266},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 25, offset: 33275},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 55, offset: 33305},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 940, col: 1, offset: 33567},
			expr: &seqExpr{
				pos: position{line: 940, col: 33, offset: 33599},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 940, col: 33, offset: 33599},
						expr: &ruleRefExpr{
							pos:  position{line: 940, col: 34, offset: 33600},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 37, offset: 33603},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 940, col: 66, offset: 33632},
						expr: &actionExpr{
							pos: position{line: 940, col: 67, offset: 33633},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 940, col: 67, offset: 33633},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 940, col: 67, offset: 33633},
										expr: &seqExpr{
											pos: position{line: 940, col: 69, offset: 33635},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 940, col: 69, offset: 33635},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 940, col: 73, offset: 33639},
													expr: &ruleRefExpr{
														pos:  position{line: 940, col: 74, offset: 33640},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 940, col: 84, offset: 33650},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 940, col: 92, offset: 33658},
											expr: &ruleRefExpr{
												pos:  position{line: 940, col: 92, offset: 33658},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 940, col: 97, offset: 33663},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 940, col: 106, offset: 33672},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 944, col: 1, offset: 33765},
			expr: &actionExpr{
				pos: position{line: 944, col: 33, offset: 33797},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 944, col: 33, offset: 33797},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 944, col: 33, offset: 33797},
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 34, offset: 33798},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 944, col: 42, offset: 33806},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 944, col: 51, offset: 33815},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 944, col: 51, offset: 33815},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33847},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 33867},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 33891},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 948, col: 11, offset: 33915},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 33941},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 33964},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 33986},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 34009},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 953, col: 11, offset: 34044},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 957, col: 1, offset: 34189},
			expr: &actionExpr{
				pos: position{line: 957, col: 29, offset: 34217},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 957, col: 29, offset: 34217},
					exprs: []interface{}{
						&anyMatcher{
							line: 957, col: 30, offset: 34218,
						},
						&zeroOrMoreExpr{
							pos: position{line: 957, col: 33, offset: 34221},
							expr: &seqExpr{
								pos: position{line: 957, col: 34, offset: 34222},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 957, col: 34, offset: 34222},
										expr: &litMatcher{
											pos:        position{line: 957, col: 35, offset: 34223},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 957, col: 39, offset: 34227},
										expr: &ruleRefExpr{
											pos:  position{line: 957, col: 40, offset: 34228},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 957, col: 43, offset: 34231},
										expr: &litMatcher{
											pos:        position{line: 957, col: 44, offset: 34232},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 957, col: 48, offset: 34236},
										expr: &litMatcher{
											pos:        position{line: 957, col: 49, offset: 34237},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 957, col: 53, offset: 34241},
										expr: &ruleRefExpr{
											pos:  position{line: 957, col: 54, offset: 34242},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 957, col: 62, offset: 34250},
										expr: &ruleRefExpr{
											pos:  position{line: 957, col: 63, offset: 34251},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 957, col: 75, offset: 34263,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 961, col: 1, offset: 34323},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 34349},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 34349},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 34349},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 962, col: 5, offset: 34349},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 18, offset: 34362},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 962, col: 40, offset: 34384},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 962, col: 45, offset: 34389},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 54, offset: 34398},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 962, col: 84, offset: 34428},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 9, offset: 34584},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 964, col: 9, offset: 34584},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 964, col: 9, offset: 34584},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 22, offset: 34597},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 44, offset: 34619},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 964, col: 49, offset: 34624},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 58, offset: 34633},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 88, offset: 34663},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 9, offset: 34862},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 967, col: 9, offset: 34862},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 967, col: 9, offset: 34862},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 22, offset: 34875},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 44, offset: 34897},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 967, col: 48, offset: 34901},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 967, col: 57, offset: 34910},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 967, col: 87, offset: 34940},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 974, col: 1, offset: 35149},
			expr: &choiceExpr{
				pos: position{line: 974, col: 18, offset: 35166},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 18, offset: 35166},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 45, offset: 35193},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 976, col: 1, offset: 35219},
			expr: &actionExpr{
				pos: position{line: 976, col: 29, offset: 35247},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 976, col: 29, offset: 35247},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 976, col: 29, offset: 35247},
							expr: &litMatcher{
								pos:        position{line: 976, col: 30, offset: 35248},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 976, col: 35, offset: 35253},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 976, col: 40, offset: 35258},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 49, offset: 35267},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 976, col: 82, offset: 35300},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 980, col: 1, offset: 35429},
			expr: &seqExpr{
				pos: position{line: 980, col: 36, offset: 35464},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 36, offset: 35464},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 980, col: 68, offset: 35496},
						expr: &actionExpr{
							pos: position{line: 980, col: 69, offset: 35497},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 980, col: 69, offset: 35497},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 980, col: 69, offset: 35497},
										expr: &litMatcher{
											pos:        position{line: 980, col: 71, offset: 35499},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 980, col: 77, offset: 35505},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 980, col: 86, offset: 35514},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 980, col: 86, offset: 35514},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 980, col: 91, offset: 35519},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 984, col: 1, offset: 35616},
			expr: &actionExpr{
				pos: position{line: 984, col: 36, offset: 35651},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 984, col: 36, offset: 35651},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 984, col: 36, offset: 35651},
							expr: &ruleRefExpr{
								pos:  position{line: 984, col: 37, offset: 35652},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 984, col: 45, offset: 35660},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 984, col: 54, offset: 35669},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 984, col: 54, offset: 35669},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 35705},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 35724},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 35746},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 988, col: 11, offset: 35770},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 989, col: 11, offset: 35796},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 990, col: 11, offset: 35819},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 991, col: 11, offset: 35841},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 992, col: 11, offset: 35864},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 993, col: 11, offset: 35902},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 997, col: 1, offset: 36047},
			expr: &actionExpr{
				pos: position{line: 997, col: 32, offset: 36078},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 997, col: 32, offset: 36078},
					exprs: []interface{}{
						&anyMatcher{
							line: 997, col: 33, offset: 36079,
						},
						&zeroOrMoreExpr{
							pos: position{line: 997, col: 36, offset: 36082},
							expr: &seqExpr{
								pos: position{line: 997, col: 37, offset: 36083},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 997, col: 37, offset: 36083},
										expr: &litMatcher{
											pos:        position{line: 997, col: 38, offset: 36084},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 43, offset: 36089},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 44, offset: 36090},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 997, col: 47, offset: 36093},
										expr: &litMatcher{
											pos:        position{line: 997, col: 48, offset: 36094},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 52, offset: 36098},
										expr: &litMatcher{
											pos:        position{line: 997, col: 53, offset: 36099},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 57, offset: 36103},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 58, offset: 36104},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 997, col: 66, offset: 36112},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 67, offset: 36113},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 997, col: 79, offset: 36125,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1001, col: 1, offset: 36185},
			expr: &choiceExpr{
				pos: position{line: 1001, col: 29, offset: 36213},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1001, col: 29, offset: 36213},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1001, col: 29, offset: 36213},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1001, col: 29, offset: 36213},
									expr: &litMatcher{
										pos:        position{line: 1001, col: 30, offset: 36214},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1001, col: 34, offset: 36218},
									expr: &litMatcher{
										pos:        position{line: 1001, col: 35, offset: 36219},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1001, col: 40, offset: 36224},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1001, col: 44, offset: 36228},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1001, col: 53, offset: 36237},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1001, col: 86, offset: 36270},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 36455},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 36455},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1003, col: 5, offset: 36455},
									expr: &litMatcher{
										pos:        position{line: 1003, col: 6, offset: 36456},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1003, col: 11, offset: 36461},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 16, offset: 36466},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 25, offset: 36475},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1003, col: 58, offset: 36508},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 1007, col: 1, offset: 36776},
			expr: &seqExpr{
				pos: position{line: 1007, col: 36, offset: 36811},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1007, col: 36, offset: 36811},
						expr: &ruleRefExpr{
							pos:  position{line: 1007, col: 37, offset: 36812},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 40, offset: 36815},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1007, col: 72, offset: 36847},
						expr: &actionExpr{
							pos: position{line: 1007, col: 73, offset: 36848},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 1007, col: 73, offset: 36848},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1007, col: 73, offset: 36848},
										expr: &seqExpr{
											pos: position{line: 1007, col: 75, offset: 36850},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1007, col: 75, offset: 36850},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 1007, col: 79, offset: 36854},
													expr: &ruleRefExpr{
														pos:  position{line: 1007, col: 80, offset: 36855},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1007, col: 90, offset: 36865},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 1007, col: 98, offset: 36873},
											expr: &ruleRefExpr{
												pos:  position{line: 1007, col: 98, offset: 36873},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 1007, col: 103, offset: 36878},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 1007, col: 112, offset: 36887},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1011, col: 1, offset: 36983},
			expr: &actionExpr{
				pos: position{line: 1011, col: 37, offset: 37019},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1011, col: 37, offset: 37019},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1011, col: 46, offset: 37028},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1011, col: 46, offset: 37028},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 11, offset: 37066},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 11, offset: 37102},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 11, offset: 37122},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 11, offset: 37143},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 11, offset: 37167},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1017, col: 11, offset: 37193},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1018, col: 11, offset: 37216},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1019, col: 11, offset: 37238},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1020, col: 11, offset: 37261},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1021, col: 11, offset: 37299},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1025, col: 1, offset: 37444},
			expr: &actionExpr{
				pos: position{line: 1025, col: 32, offset: 37475},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 32, offset: 37475},
					exprs: []interface{}{
						&anyMatcher{
							line: 1025, col: 33, offset: 37476,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1025, col: 36, offset: 37479},
							expr: &seqExpr{
								pos: position{line: 1025, col: 37, offset: 37480},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1025, col: 37, offset: 37480},
										expr: &ruleRefExpr{
											pos:  position{line: 1025, col: 38, offset: 37481},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1025, col: 41, offset: 37484},
										expr: &litMatcher{
											pos:        position{line: 1025, col: 42, offset: 37485},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1025, col: 46, offset: 37489},
										expr: &litMatcher{
											pos:        position{line: 1025, col: 47, offset: 37490},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1025, col: 51, offset: 37494},
										expr: &litMatcher{
											pos:        position{line: 1025, col: 52, offset: 37495},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1025, col: 56, offset: 37499},
										expr: &ruleRefExpr{
											pos:  position{line: 1025, col: 57, offset: 37500},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1025, col: 65, offset: 37508},
										expr: &ruleRefExpr{
											pos:  position{line: 1025, col: 66, offset: 37509},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1025, col: 78, offset: 37521,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1029, col: 1, offset: 37602},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 37631},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 37631},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 37631},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 37631},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 18, offset: 37644},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 40, offset: 37666},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 45, offset: 37671},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 54, offset: 37680},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 87, offset: 37713},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1032, col: 9, offset: 37869},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1032, col: 9, offset: 37869},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1032, col: 9, offset: 37869},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1032, col: 22, offset: 37882},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 44, offset: 37904},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 49, offset: 37909},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1032, col: 58, offset: 37918},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1032, col: 91, offset: 37951},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 9, offset: 38150},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1035, col: 9, offset: 38150},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1035, col: 9, offset: 38150},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1035, col: 22, offset: 38163},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1035, col: 44, offset: 38185},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 48, offset: 38189},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1035, col: 57, offset: 38198},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1035, col: 90, offset: 38231},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1039, col: 1, offset: 38380},
			expr: &actionExpr{
				pos: position{line: 1039, col: 18, offset: 38397},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 18, offset: 38397},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1039, col: 18, offset: 38397},
							expr: &litMatcher{
								pos:        position{line: 1039, col: 19, offset: 38398},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 23, offset: 38402},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 27, offset: 38406},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 36, offset: 38415},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 58, offset: 38437},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1043, col: 1, offset: 38526},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 25, offset: 38550},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1043, col: 25, offset: 38550},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 38, offset: 38563},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1045, col: 1, offset: 38582},
			expr: &actionExpr{
				pos: position{line: 1045, col: 21, offset: 38602},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1045, col: 21, offset: 38602},
					expr: &seqExpr{
						pos: position{line: 1045, col: 22, offset: 38603},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1045, col: 22, offset: 38603},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 23, offset: 38604},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1045, col: 31, offset: 38612},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 32, offset: 38613},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1045, col: 35, offset: 38616},
								expr: &litMatcher{
									pos:        position{line: 1045, col: 36, offset: 38617},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1045, col: 40, offset: 38621,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1049, col: 1, offset: 38654},
			expr: &actionExpr{
				pos: position{line: 1049, col: 25, offset: 38678},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 25, offset: 38678},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1049, col: 25, offset: 38678},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 38, offset: 38691},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 60, offset: 38713},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 64, offset: 38717},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 73, offset: 38726},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 95, offset: 38748},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1053, col: 1, offset: 38877},
			expr: &actionExpr{
				pos: position{line: 1053, col: 20, offset: 38896},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 20, offset: 38896},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1053, col: 20, offset: 38896},
							expr: &litMatcher{
								pos:        position{line: 1053, col: 21, offset: 38897},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 25, offset: 38901},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 29, offset: 38905},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 38, offset: 38914},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 62, offset: 38938},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1057, col: 1, offset: 39029},
			expr: &choiceExpr{
				pos: position{line: 1057, col: 27, offset: 39055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1057, col: 27, offset: 39055},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 40, offset: 39068},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1059, col: 1, offset: 39089},
			expr: &actionExpr{
				pos: position{line: 1059, col: 23, offset: 39111},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1059, col: 23, offset: 39111},
					expr: &seqExpr{
						pos: position{line: 1059, col: 24, offset: 39112},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1059, col: 24, offset: 39112},
								expr: &ruleRefExpr{
									pos:  position{line: 1059, col: 25, offset: 39113},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1059, col: 33, offset: 39121},
								expr: &ruleRefExpr{
									pos:  position{line: 1059, col: 34, offset: 39122},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1059, col: 37, offset: 39125},
								expr: &litMatcher{
									pos:        position{line: 1059, col: 38, offset: 39126},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1059, col: 42, offset: 39130,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1063, col: 1, offset: 39163},
			expr: &actionExpr{
				pos: position{line: 1063, col: 27, offset: 39189},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 27, offset: 39189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1063, col: 27, offset: 39189},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 40, offset: 39202},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1063, col: 62, offset: 39224},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1063, col: 66, offset: 39228},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 75, offset: 39237},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1063, col: 99, offset: 39261},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1070, col: 1, offset: 39497},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 16, offset: 39512},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1070, col: 16, offset: 39512},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 40, offset: 39536},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 64, offset: 39560},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1072, col: 1, offset: 39578},
			expr: &litMatcher{
				pos:        position{line: 1072, col: 32, offset: 39609},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1074, col: 1, offset: 39614},
			expr: &actionExpr{
				pos: position{line: 1074, col: 26, offset: 39639},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 26, offset: 39639},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1074, col: 26, offset: 39639},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 54, offset: 39667},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 63, offset: 39676},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 93, offset: 39706},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1074, col: 121, offset: 39734},
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 122, offset: 39735},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1078, col: 1, offset: 39834},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 33, offset: 39866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 34, offset: 39867},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1078, col: 34, offset: 39867},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1078, col: 35, offset: 39868},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1078, col: 35, offset: 39868},
											expr: &ruleRefExpr{
												pos:  position{line: 1078, col: 36, offset: 39869},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1078, col: 64, offset: 39897},
											expr: &ruleRefExpr{
												pos:  position{line: 1078, col: 65, offset: 39898},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1078, col: 68, offset: 39901},
											expr: &ruleRefExpr{
												pos:  position{line: 1078, col: 69, offset: 39902},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1078, col: 77, offset: 39910,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1078, col: 80, offset: 39913},
									expr: &seqExpr{
										pos: position{line: 1078, col: 81, offset: 39914},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1078, col: 81, offset: 39914},
												expr: &seqExpr{
													pos: position{line: 1078, col: 83, offset: 39916},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1078, col: 83, offset: 39916},
															expr: &ruleRefExpr{
																pos:  position{line: 1078, col: 83, offset: 39916},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1078, col: 87, offset: 39920},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1078, col: 116, offset: 39949},
												expr: &ruleRefExpr{
													pos:  position{line: 1078, col: 117, offset: 39950},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1078, col: 145, offset: 39978},
												expr: &ruleRefExpr{
													pos:  position{line: 1078, col: 146, offset: 39979},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1078, col: 154, offset: 39987,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 7, offset: 40129},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1080, col: 8, offset: 40130},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1080, col: 8, offset: 40130},
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 9, offset: 40131},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1080, col: 12, offset: 40134},
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 13, offset: 40135},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1080, col: 21, offset: 40143},
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 22, offset: 40144},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1080, col: 50, offset: 40172,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1084, col: 1, offset: 40254},
			expr: &litMatcher{
				pos:        position{line: 1084, col: 32, offset: 40285},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1086, col: 1, offset: 40292},
			expr: &actionExpr{
				pos: position{line: 1086, col: 26, offset: 40317},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 26, offset: 40317},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1086, col: 26, offset: 40317},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 54, offset: 40345},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 63, offset: 40354},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1086, col: 93, offset: 40384},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1086, col: 121, offset: 40412},
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 122, offset: 40413},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1090, col: 1, offset: 40512},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 33, offset: 40544},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1090, col: 34, offset: 40545},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1090, col: 34, offset: 40545},
							expr: &seqExpr{
								pos: position{line: 1090, col: 35, offset: 40546},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1090, col: 35, offset: 40546},
										expr: &ruleRefExpr{
											pos:  position{line: 1090, col: 36, offset: 40547},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1090, col: 64, offset: 40575,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 7, offset: 40740},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1092, col: 7, offset: 40740},
							expr: &seqExpr{
								pos: position{line: 1092, col: 8, offset: 40741},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1092, col: 8, offset: 40741},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 9, offset: 40742},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1092, col: 12, offset: 40745},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 13, offset: 40746},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1092, col: 21, offset: 40754},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 22, offset: 40755},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1092, col: 50, offset: 40783,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1096, col: 1, offset: 40866},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 21, offset: 40886},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1096, col: 21, offset: 40886},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1096, col: 21, offset: 40886},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1096, col: 21, offset: 40886},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1096, col: 30, offset: 40895},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1096, col: 38, offset: 40903},
										expr: &ruleRefExpr{
											pos:  position{line: 1096, col: 39, offset: 40904},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1096, col: 67, offset: 40932},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 41022},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 41022},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1098, col: 5, offset: 41022},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 15, offset: 41032},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1098, col: 23, offset: 41040},
										expr: &choiceExpr{
											pos: position{line: 1098, col: 24, offset: 41041},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1098, col: 24, offset: 41041},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1098, col: 37, offset: 41054},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 65, offset: 41082},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1102, col: 1, offset: 41172},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 31, offset: 41202},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1102, col: 31, offset: 41202},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 43, offset: 41214},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1102, col: 52, offset: 41223},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1102, col: 53, offset: 41224},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1102, col: 53, offset: 41224},
									expr: &litMatcher{
										pos:        position{line: 1102, col: 54, offset: 41225},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1102, col: 58, offset: 41229,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1109, col: 1, offset: 41399},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 19, offset: 41417},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 19, offset: 41417},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 44, offset: 41442},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1111, col: 1, offset: 41467},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 27, offset: 41493},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1111, col: 27, offset: 41493},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1111, col: 27, offset: 41493},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 27, offset: 41493},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 32, offset: 41498},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 36, offset: 41502},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1111, col: 40, offset: 41506},
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 40, offset: 41506},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 44, offset: 41510},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 48, offset: 41514},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 55, offset: 41521},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 76, offset: 41542},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 41625},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 41625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 41625},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 10, offset: 41630},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 14, offset: 41634},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 18, offset: 41638},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1117, col: 1, offset: 41710},
			expr: &actionExpr{
				pos: position{line: 1117, col: 27, offset: 41736},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 27, offset: 41736},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1117, col: 27, offset: 41736},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 35, offset: 41744},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 40, offset: 41749},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 54, offset: 41763},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 72, offset: 41781},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1121, col: 1, offset: 41911},
			expr: &actionExpr{
				pos: position{line: 1121, col: 24, offset: 41934},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1121, col: 24, offset: 41934},
					expr: &choiceExpr{
						pos: position{line: 1121, col: 25, offset: 41935},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1121, col: 25, offset: 41935},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1121, col: 37, offset: 41947},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1121, col: 47, offset: 41957},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1121, col: 47, offset: 41957},
										expr: &litMatcher{
											pos:        position{line: 1121, col: 48, offset: 41958},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1121, col: 54, offset: 41964,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1128, col: 1, offset: 42106},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 9, offset: 42114},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1128, col: 9, offset: 42114},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 24, offset: 42129},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1131, col: 1, offset: 42210},
			expr: &actionExpr{
				pos: position{line: 1131, col: 17, offset: 42226},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 17, offset: 42226},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 17, offset: 42226},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 25, offset: 42234},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1131, col: 30, offset: 42239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1131, col: 30, offset: 42239},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 41, offset: 42250},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 55, offset: 42264},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 73, offset: 42282},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1135, col: 1, offset: 42400},
			expr: &actionExpr{
				pos: position{line: 1135, col: 17, offset: 42416},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 17, offset: 42416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1135, col: 17, offset: 42416},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 22, offset: 42421},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1135, col: 32, offset: 42431},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1135, col: 49, offset: 42448},
								expr: &ruleRefExpr{
									pos:  position{line: 1135, col: 50, offset: 42449},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1139, col: 1, offset: 42542},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 19, offset: 42560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 19, offset: 42560},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 44, offset: 42585},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1141, col: 1, offset: 42612},
			expr: &actionExpr{
				pos: position{line: 1141, col: 27, offset: 42638},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1141, col: 27, offset: 42638},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1141, col: 27, offset: 42638},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1141, col: 31, offset: 42642},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1141, col: 36, offset: 42647},
								expr: &ruleRefExpr{
									pos:  position{line: 1141, col: 37, offset: 42648},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1141, col: 66, offset: 42677},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1145, col: 1, offset: 42739},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 42811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 42811},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 5, offset: 42811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 5, offset: 42811},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 10, offset: 42816},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1147, col: 19, offset: 42825},
										expr: &seqExpr{
											pos: position{line: 1147, col: 20, offset: 42826},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1147, col: 20, offset: 42826},
													expr: &litMatcher{
														pos:        position{line: 1147, col: 21, offset: 42827},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1147, col: 25, offset: 42831},
													expr: &litMatcher{
														pos:        position{line: 1147, col: 26, offset: 42832},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1147, col: 30, offset: 42836},
													expr: &litMatcher{
														pos:        position{line: 1147, col: 31, offset: 42837},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1147, col: 37, offset: 42843},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1147, col: 37, offset: 42843},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1147, col: 50, offset: 42856},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1147, col: 63, offset: 42869},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1147, col: 73, offset: 42879},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1147, col: 74, offset: 42880},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1147, col: 74, offset: 42880},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1147, col: 75, offset: 42881},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1147, col: 78, offset: 42884,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 11, offset: 42953},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1149, col: 16, offset: 42958},
									expr: &ruleRefExpr{
										pos:  position{line: 1149, col: 16, offset: 42958},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1149, col: 24, offset: 42966},
									expr: &notExpr{
										pos: position{line: 1149, col: 26, offset: 42968},
										expr: &litMatcher{
											pos:        position{line: 1149, col: 27, offset: 42969},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1153, col: 5, offset: 43094},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1153, col: 5, offset: 43094},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1153, col: 5, offset: 43094},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1153, col: 14, offset: 43103},
										expr: &seqExpr{
											pos: position{line: 1153, col: 15, offset: 43104},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1153, col: 15, offset: 43104},
													expr: &litMatcher{
														pos:        position{line: 1153, col: 16, offset: 43105},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1153, col: 20, offset: 43109},
													expr: &litMatcher{
														pos:        position{line: 1153, col: 21, offset: 43110},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1153, col: 26, offset: 43115},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1153, col: 26, offset: 43115},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1153, col: 39, offset: 43128},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1153, col: 52, offset: 43141},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1153, col: 62, offset: 43151},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1153, col: 63, offset: 43152},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1153, col: 63, offset: 43152},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1153, col: 64, offset: 43153},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1153, col: 67, offset: 43156,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1155, col: 11, offset: 43225},
									expr: &notExpr{
										pos: position{line: 1155, col: 13, offset: 43227},
										expr: &litMatcher{
											pos:        position{line: 1155, col: 14, offset: 43228},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1160, col: 1, offset: 43308},
			expr: &actionExpr{
				pos: position{line: 1160, col: 30, offset: 43337},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 30, offset: 43337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1160, col: 30, offset: 43337},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 34, offset: 43341},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1160, col: 39, offset: 43346},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 40, offset: 43347},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1160, col: 60, offset: 43367},
							expr: &litMatcher{
								pos:        position{line: 1160, col: 60, offset: 43367},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1160, col: 65, offset: 43372},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 65, offset: 43372},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 69, offset: 43376},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1160, col: 80, offset: 43387},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 81, offset: 43388},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1160, col: 100, offset: 43407},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1164, col: 1, offset: 43492},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 5, offset: 43555},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 43555},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 43555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 43555},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 10, offset: 43560},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1166, col: 19, offset: 43569},
										expr: &seqExpr{
											pos: position{line: 1166, col: 20, offset: 43570},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1166, col: 20, offset: 43570},
													expr: &litMatcher{
														pos:        position{line: 1166, col: 21, offset: 43571},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1166, col: 25, offset: 43575},
													expr: &litMatcher{
														pos:        position{line: 1166, col: 26, offset: 43576},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1166, col: 30, offset: 43580},
													expr: &litMatcher{
														pos:        position{line: 1166, col: 31, offset: 43581},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1166, col: 37, offset: 43587},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1166, col: 37, offset: 43587},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1166, col: 50, offset: 43600},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1166, col: 63, offset: 43613},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1166, col: 73, offset: 43623},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1166, col: 74, offset: 43624},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1166, col: 74, offset: 43624},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1166, col: 75, offset: 43625},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1166, col: 92, offset: 43642,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 11, offset: 43711},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1168, col: 16, offset: 43716},
									expr: &ruleRefExpr{
										pos:  position{line: 1168, col: 16, offset: 43716},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1168, col: 24, offset: 43724},
									expr: &notExpr{
										pos: position{line: 1168, col: 26, offset: 43726},
										expr: &litMatcher{
											pos:        position{line: 1168, col: 27, offset: 43727},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 5, offset: 43852},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1172, col: 5, offset: 43852},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1172, col: 5, offset: 43852},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1172, col: 14, offset: 43861},
										expr: &seqExpr{
											pos: position{line: 1172, col: 15, offset: 43862},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1172, col: 15, offset: 43862},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 16, offset: 43863},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1172, col: 20, offset: 43867},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 21, offset: 43868},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1172, col: 25, offset: 43872},
													expr: &litMatcher{
														pos:        position{line: 1172, col: 26, offset: 43873},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1172, col: 31, offset: 43878},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1172, col: 31, offset: 43878},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1172, col: 44, offset: 43891},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1172, col: 57, offset: 43904},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1172, col: 67, offset: 43914},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1172, col: 68, offset: 43915},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1172, col: 68, offset: 43915},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1172, col: 69, offset: 43916},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1172, col: 86, offset: 43933,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1174, col: 11, offset: 44002},
									expr: &notExpr{
										pos: position{line: 1174, col: 13, offset: 44004},
										expr: &litMatcher{
											pos:        position{line: 1174, col: 14, offset: 44005},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1179, col: 1, offset: 44155},
			expr: &actionExpr{
				pos: position{line: 1180, col: 5, offset: 44175},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 5, offset: 44175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1180, col: 5, offset: 44175},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1180, col: 14, offset: 44184},
								expr: &choiceExpr{
									pos: position{line: 1180, col: 15, offset: 44185},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1180, col: 15, offset: 44185},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1181, col: 11, offset: 44206},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1182, col: 11, offset: 44224},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1183, col: 11, offset: 44248},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1184, col: 11, offset: 44268},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1185, col: 11, offset: 44290},
											name: "NEWLINE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1185, col: 21, offset: 44300},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1189, col: 1, offset: 44370},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 17, offset: 44386},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1189, col: 17, offset: 44386},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 40, offset: 44409},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1192, col: 1, offset: 44545},
			expr: &actionExpr{
				pos: position{line: 1192, col: 25, offset: 44569},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 25, offset: 44569},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1192, col: 25, offset: 44569},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 33, offset: 44577},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1192, col: 38, offset: 44582},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1192, col: 38, offset: 44582},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 57, offset: 44601},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 79, offset: 44623},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 97, offset: 44641},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1196, col: 1, offset: 44759},
			expr: &actionExpr{
				pos: position{line: 1196, col: 25, offset: 44783},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 25, offset: 44783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 25, offset: 44783},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 30, offset: 44788},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 48, offset: 44806},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1196, col: 65, offset: 44823},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 66, offset: 44824},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1200, col: 1, offset: 44917},
			expr: &choiceExpr{
				pos: position{line: 1200, col: 15, offset: 44931},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 15, offset: 44931},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 30, offset: 44946},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1202, col: 1, offset: 44966},
			expr: &actionExpr{
				pos: position{line: 1202, col: 23, offset: 44988},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 23, offset: 44988},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1202, col: 23, offset: 44988},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 28, offset: 44993},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 38, offset: 45003},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 56, offset: 45021},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1209, col: 1, offset: 45356},
			expr: &actionExpr{
				pos: position{line: 1209, col: 15, offset: 45370},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 15, offset: 45370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1209, col: 15, offset: 45370},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1209, col: 26, offset: 45381},
								expr: &ruleRefExpr{
									pos:  position{line: 1209, col: 27, offset: 45382},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1209, col: 47, offset: 45402},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 57, offset: 45412},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1209, col: 63, offset: 45418},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1209, col: 63, offset: 45418},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 74, offset: 45429},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 88, offset: 45443},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 106, offset: 45461},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1209, col: 123, offset: 45478},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1213, col: 1, offset: 45598},
			expr: &actionExpr{
				pos: position{line: 1213, col: 16, offset: 45613},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 16, offset: 45613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1213, col: 16, offset: 45613},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1213, col: 25, offset: 45622},
							expr: &litMatcher{
								pos:        position{line: 1213, col: 26, offset: 45623},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 30, offset: 45627},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1213, col: 36, offset: 45633},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1213, col: 36, offset: 45633},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1213, col: 47, offset: 45644},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 61, offset: 45658},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 79, offset: 45676},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1217, col: 1, offset: 45797},
			expr: &actionExpr{
				pos: position{line: 1217, col: 20, offset: 45816},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 20, offset: 45816},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1217, col: 20, offset: 45816},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 24, offset: 45820},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1217, col: 28, offset: 45824},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 29, offset: 45825},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1217, col: 46, offset: 45842},
							expr: &litMatcher{
								pos:        position{line: 1217, col: 46, offset: 45842},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 51, offset: 45847},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1217, col: 57, offset: 45853},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 58, offset: 45854},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1217, col: 75, offset: 45871},
							expr: &litMatcher{
								pos:        position{line: 1217, col: 75, offset: 45871},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 80, offset: 45876},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1217, col: 87, offset: 45883},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 88, offset: 45884},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1217, col: 105, offset: 45901},
							expr: &litMatcher{
								pos:        position{line: 1217, col: 105, offset: 45901},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1217, col: 110, offset: 45906},
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 110, offset: 45906},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 114, offset: 45910},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1217, col: 125, offset: 45921},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 126, offset: 45922},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1217, col: 145, offset: 45941},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1224, col: 1, offset: 46231},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 19, offset: 46249},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1224, col: 19, offset: 46249},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1224, col: 19, offset: 46249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 19, offset: 46249},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1224, col: 32, offset: 46262},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 41, offset: 46271},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 58, offset: 46288},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 46356},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1226, col: 5, offset: 46356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 5, offset: 46356},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 21, offset: 46372},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 26, offset: 46377},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 39, offset: 46390},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1226, col: 43, offset: 46394},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 52, offset: 46403},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 69, offset: 46420},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 5, offset: 46498},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1228, col: 5, offset: 46498},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1228, col: 5, offset: 46498},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 21, offset: 46514},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 26, offset: 46519},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 39, offset: 46532},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1232, col: 1, offset: 46640},
			expr: &actionExpr{
				pos: position{line: 1232, col: 16, offset: 46655},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1232, col: 16, offset: 46655},
					expr: &choiceExpr{
						pos: position{line: 1232, col: 17, offset: 46656},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1232, col: 17, offset: 46656},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1232, col: 29, offset: 46668},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1232, col: 39, offset: 46678},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1232, col: 39, offset: 46678},
										expr: &litMatcher{
											pos:        position{line: 1232, col: 40, offset: 46679},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1232, col: 44, offset: 46683},
										expr: &litMatcher{
											pos:        position{line: 1232, col: 45, offset: 46684},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1232, col: 49, offset: 46688},
										expr: &ruleRefExpr{
											pos:  position{line: 1232, col: 50, offset: 46689},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1232, col: 55, offset: 46694,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1236, col: 1, offset: 46779},
			expr: &actionExpr{
				pos: position{line: 1236, col: 20, offset: 46798},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1236, col: 20, offset: 46798},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1236, col: 29, offset: 46807},
						expr: &seqExpr{
							pos: position{line: 1236, col: 30, offset: 46808},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1236, col: 30, offset: 46808},
									expr: &litMatcher{
										pos:        position{line: 1236, col: 31, offset: 46809},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1236, col: 35, offset: 46813},
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 36, offset: 46814},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1236, col: 40, offset: 46818},
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 40, offset: 46818},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1236, col: 44, offset: 46822},
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 45, offset: 46823},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 61, offset: 46839},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1236, col: 75, offset: 46853},
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 75, offset: 46853},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1243, col: 1, offset: 47167},
			expr: &actionExpr{
				pos: position{line: 1243, col: 19, offset: 47185},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1243, col: 19, offset: 47185},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1243, col: 19, offset: 47185},
							expr: &ruleRefExpr{
								pos:  position{line: 1243, col: 20, offset: 47186},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 5, offset: 47215},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1244, col: 12, offset: 47222},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1244, col: 12, offset: 47222},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47245},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47269},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47293},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 47315},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 47337},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 47360},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 47388},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 47404},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1256, col: 1, offset: 47445},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 19, offset: 47463},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 19, offset: 47463},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 19, offset: 47504},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 19, offset: 47544},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 19, offset: 47585},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 19, offset: 47626},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 19, offset: 47667},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 19, offset: 47705},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1268, col: 1, offset: 47924},
			expr: &seqExpr{
				pos: position{line: 1268, col: 25, offset: 47948},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1268, col: 25, offset: 47948},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 31, offset: 47954},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1270, col: 1, offset: 47960},
			expr: &actionExpr{
				pos: position{line: 1270, col: 16, offset: 47975},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 16, offset: 47975},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 16, offset: 47975},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1270, col: 27, offset: 47986},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 28, offset: 47987},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1270, col: 48, offset: 48007},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 69, offset: 48028},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1270, col: 77, offset: 48036},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 78, offset: 48037},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1270, col: 100, offset: 48059},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1270, col: 100, offset: 48059},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1270, col: 123, offset: 48082},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1274, col: 1, offset: 48190},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 23, offset: 48212},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1274, col: 23, offset: 48212},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 35, offset: 48224},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 51, offset: 48240},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 62, offset: 48251},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1277, col: 1, offset: 48291},
			expr: &actionExpr{
				pos: position{line: 1277, col: 25, offset: 48315},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1277, col: 25, offset: 48315},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1277, col: 31, offset: 48321},
						expr: &ruleRefExpr{
							pos:  position{line: 1277, col: 32, offset: 48322},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1281, col: 1, offset: 48435},
			expr: &actionExpr{
				pos: position{line: 1281, col: 29, offset: 48463},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 29, offset: 48463},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1281, col: 29, offset: 48463},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 30, offset: 48464},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1281, col: 51, offset: 48485},
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 52, offset: 48486},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 62, offset: 48496},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1281, col: 68, offset: 48502},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1288, col: 1, offset: 48740},
			expr: &seqExpr{
				pos: position{line: 1288, col: 26, offset: 48765},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1288, col: 26, offset: 48765},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 33, offset: 48772},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1290, col: 1, offset: 48778},
			expr: &actionExpr{
				pos: position{line: 1290, col: 17, offset: 48794},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 17, offset: 48794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1290, col: 17, offset: 48794},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1290, col: 28, offset: 48805},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 29, offset: 48806},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1290, col: 49, offset: 48826},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 71, offset: 48848},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1290, col: 79, offset: 48856},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 80, offset: 48857},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1290, col: 103, offset: 48880},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1290, col: 103, offset: 48880},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1290, col: 127, offset: 48904},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1294, col: 1, offset: 49013},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 24, offset: 49036},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 24, offset: 49036},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 40, offset: 49052},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 64, offset: 49076},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1296, col: 1, offset: 49087},
			expr: &actionExpr{
				pos: position{line: 1296, col: 26, offset: 49112},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1296, col: 26, offset: 49112},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1296, col: 32, offset: 49118},
						expr: &ruleRefExpr{
							pos:  position{line: 1296, col: 33, offset: 49119},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1300, col: 1, offset: 49238},
			expr: &actionExpr{
				pos: position{line: 1300, col: 30, offset: 49267},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 30, offset: 49267},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 30, offset: 49267},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 31, offset: 49268},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 53, offset: 49290},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1300, col: 59, offset: 49296},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1300, col: 59, offset: 49296},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1300, col: 59, offset: 49296},
											expr: &ruleRefExpr{
												pos:  position{line: 1300, col: 60, offset: 49297},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1300, col: 64, offset: 49301},
											expr: &choiceExpr{
												pos: position{line: 1300, col: 65, offset: 49302},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1300, col: 65, offset: 49302},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1300, col: 77, offset: 49314},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1300, col: 87, offset: 49324},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1300, col: 87, offset: 49324},
																expr: &ruleRefExpr{
																	pos:  position{line: 1300, col: 88, offset: 49325},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1300, col: 92, offset: 49329,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1300, col: 128, offset: 49365},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1307, col: 1, offset: 49691},
			expr: &seqExpr{
				pos: position{line: 1307, col: 26, offset: 49716},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1307, col: 26, offset: 49716},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 33, offset: 49723},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1309, col: 1, offset: 49729},
			expr: &actionExpr{
				pos: position{line: 1309, col: 17, offset: 49745},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 17, offset: 49745},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1309, col: 17, offset: 49745},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1309, col: 28, offset: 49756},
								expr: &ruleRefExpr{
									pos:  position{line: 1309, col: 29, offset: 49757},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1309, col: 49, offset: 49777},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 71, offset: 49799},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1309, col: 79, offset: 49807},
								expr: &choiceExpr{
									pos: position{line: 1309, col: 80, offset: 49808},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1309, col: 80, offset: 49808},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1309, col: 92, offset: 49820},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1309, col: 108, offset: 49836},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1309, col: 119, offset: 49847},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1309, col: 145, offset: 49873},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1309, col: 145, offset: 49873},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1309, col: 169, offset: 49897},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1314, col: 1, offset: 50024},
			expr: &actionExpr{
				pos: position{line: 1314, col: 26, offset: 50049},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1314, col: 26, offset: 50049},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1314, col: 32, offset: 50055},
						expr: &ruleRefExpr{
							pos:  position{line: 1314, col: 33, offset: 50056},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1318, col: 1, offset: 50170},
			expr: &actionExpr{
				pos: position{line: 1318, col: 30, offset: 50199},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 30, offset: 50199},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1318, col: 30, offset: 50199},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 31, offset: 50200},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1318, col: 53, offset: 50222},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 54, offset: 50223},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 64, offset: 50233},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 70, offset: 50239},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1325, col: 1, offset: 50475},
			expr: &seqExpr{
				pos: position{line: 1325, col: 24, offset: 50498},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1325, col: 24, offset: 50498},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 31, offset: 50505},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1327, col: 1, offset: 50536},
			expr: &actionExpr{
				pos: position{line: 1327, col: 15, offset: 50550},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 15, offset: 50550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1327, col: 15, offset: 50550},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1327, col: 26, offset: 50561},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 27, offset: 50562},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1327, col: 47, offset: 50582},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 67, offset: 50602},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1327, col: 75, offset: 50610},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 76, offset: 50611},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1327, col: 97, offset: 50632},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1327, col: 97, offset: 50632},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1327, col: 119, offset: 50654},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1331, col: 1, offset: 50761},
			expr: &actionExpr{
				pos: position{line: 1332, col: 5, offset: 50787},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 5, offset: 50787},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1332, col: 5, offset: 50787},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 6, offset: 50788},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1332, col: 26, offset: 50808},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 27, offset: 50809},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 31, offset: 50813},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1332, col: 40, offset: 50822},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1332, col: 40, offset: 50822},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50847},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50875},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50901},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 50924},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 15, offset: 50950},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 15, offset: 50977},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 15, offset: 51004},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 15, offset: 51031},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 15, offset: 51063},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 15, offset: 51089},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 15, offset: 51116},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1344, col: 15, offset: 51137},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1345, col: 15, offset: 51165},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1346, col: 15, offset: 51209},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1347, col: 15, offset: 51247},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1348, col: 15, offset: 51282},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1352, col: 1, offset: 51341},
			expr: &actionExpr{
				pos: position{line: 1352, col: 24, offset: 51364},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1352, col: 24, offset: 51364},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1352, col: 30, offset: 51370},
						expr: &ruleRefExpr{
							pos:  position{line: 1352, col: 31, offset: 51371},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1361, col: 1, offset: 51717},
			expr: &actionExpr{
				pos: position{line: 1361, col: 15, offset: 51731},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 15, offset: 51731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1361, col: 15, offset: 51731},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 27, offset: 51743},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1362, col: 5, offset: 51767},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1366, col: 5, offset: 51953},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 25, offset: 51973},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1366, col: 33, offset: 51981},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 34, offset: 51982},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1366, col: 55, offset: 52003},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1366, col: 55, offset: 52003},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 77, offset: 52025},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1370, col: 1, offset: 52140},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 22, offset: 52161},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 22, offset: 52161},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 41, offset: 52180},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 53, offset: 52192},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1372, col: 1, offset: 52213},
			expr: &actionExpr{
				pos: position{line: 1372, col: 21, offset: 52233},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 21, offset: 52233},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1372, col: 21, offset: 52233},
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 22, offset: 52234},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 42, offset: 52254},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 51, offset: 52263},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1377, col: 1, offset: 52325},
			expr: &actionExpr{
				pos: position{line: 1377, col: 24, offset: 52348},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1377, col: 24, offset: 52348},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1377, col: 30, offset: 52354},
						expr: &ruleRefExpr{
							pos:  position{line: 1377, col: 31, offset: 52355},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1381, col: 1, offset: 52445},
			expr: &actionExpr{
				pos: position{line: 1381, col: 28, offset: 52472},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1381, col: 28, offset: 52472},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1381, col: 28, offset: 52472},
							expr: &ruleRefExpr{
								pos:  position{line: 1381, col: 29, offset: 52473},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1381, col: 49, offset: 52493},
							expr: &ruleRefExpr{
								pos:  position{line: 1381, col: 50, offset: 52494},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 60, offset: 52504},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1381, col: 66, offset: 52510},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1381, col: 66, offset: 52510},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1381, col: 66, offset: 52510},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1381, col: 75, offset: 52519},
												expr: &ruleRefExpr{
													pos:  position{line: 1381, col: 76, offset: 52520},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1381, col: 109, offset: 52553},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1387, col: 1, offset: 52649},
			expr: &actionExpr{
				pos: position{line: 1387, col: 35, offset: 52683},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 35, offset: 52683},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1387, col: 35, offset: 52683},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 36, offset: 52684},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1387, col: 40, offset: 52688},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 41, offset: 52689},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 5, offset: 52704},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1388, col: 14, offset: 52713},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1388, col: 14, offset: 52713},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 52731},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 11, offset: 52754},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 11, offset: 52770},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 11, offset: 52793},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 11, offset: 52819},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 11, offset: 52841},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 11, offset: 52867},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1396, col: 11, offset: 52894},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1397, col: 11, offset: 52935},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1398, col: 11, offset: 52962},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1399, col: 11, offset: 52982},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1406, col: 1, offset: 53214},
			expr: &seqExpr{
				pos: position{line: 1406, col: 26, offset: 53239},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1406, col: 26, offset: 53239},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 33, offset: 53246},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1408, col: 1, offset: 53252},
			expr: &actionExpr{
				pos: position{line: 1408, col: 17, offset: 53268},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 17, offset: 53268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1408, col: 17, offset: 53268},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1408, col: 28, offset: 53279},
								expr: &ruleRefExpr{
									pos:  position{line: 1408, col: 29, offset: 53280},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1408, col: 49, offset: 53300},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 71, offset: 53322},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1408, col: 79, offset: 53330},
								expr: &ruleRefExpr{
									pos:  position{line: 1408, col: 80, offset: 53331},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1408, col: 104, offset: 53355},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1408, col: 104, offset: 53355},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1408, col: 128, offset: 53379},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1412, col: 1, offset: 53488},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 24, offset: 53511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1412, col: 24, offset: 53511},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 36, offset: 53523},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 52, offset: 53539},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 63, offset: 53550},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 81, offset: 53568},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1414, col: 1, offset: 53591},
			expr: &actionExpr{
				pos: position{line: 1414, col: 20, offset: 53610},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1414, col: 20, offset: 53610},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1414, col: 20, offset: 53610},
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 21, offset: 53611},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1414, col: 34, offset: 53624},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1414, col: 43, offset: 53633},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1419, col: 1, offset: 53696},
			expr: &actionExpr{
				pos: position{line: 1419, col: 26, offset: 53721},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1419, col: 26, offset: 53721},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1419, col: 32, offset: 53727},
						expr: &ruleRefExpr{
							pos:  position{line: 1419, col: 33, offset: 53728},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1423, col: 1, offset: 53842},
			expr: &actionExpr{
				pos: position{line: 1423, col: 30, offset: 53871},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 30, offset: 53871},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1423, col: 30, offset: 53871},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 31, offset: 53872},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1423, col: 53, offset: 53894},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 54, offset: 53895},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 64, offset: 53905},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 70, offset: 53911},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1431, col: 1, offset: 54142},
			expr: &actionExpr{
				pos: position{line: 1431, col: 10, offset: 54151},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 10, offset: 54151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 10, offset: 54151},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1431, col: 21, offset: 54162},
								expr: &ruleRefExpr{
									pos:  position{line: 1431, col: 22, offset: 54163},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1431, col: 42, offset: 54183},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1432, col: 5, offset: 54202},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1432, col: 12, offset: 54209},
								expr: &ruleRefExpr{
									pos:  position{line: 1432, col: 13, offset: 54210},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 5, offset: 54232},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1433, col: 11, offset: 54238},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 12, offset: 54239},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1434, col: 6, offset: 54256},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1434, col: 6, offset: 54256},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1434, col: 23, offset: 54273},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1438, col: 1, offset: 54388},
			expr: &seqExpr{
				pos: position{line: 1438, col: 23, offset: 54410},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1438, col: 23, offset: 54410},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1438, col: 27, offset: 54414},
						expr: &ruleRefExpr{
							pos:  position{line: 1438, col: 27, offset: 54414},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1440, col: 1, offset: 54419},
			expr: &seqExpr{
				pos: position{line: 1440, col: 19, offset: 54437},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1440, col: 19, offset: 54437},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 26, offset: 54444},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1443, col: 1, offset: 54513},
			expr: &actionExpr{
				pos: position{line: 1443, col: 20, offset: 54532},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 20, offset: 54532},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1443, col: 20, offset: 54532},
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 21, offset: 54533},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 36, offset: 54548},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1443, col: 42, offset: 54554},
								expr: &ruleRefExpr{
									pos:  position{line: 1443, col: 43, offset: 54555},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1443, col: 55, offset: 54567},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1443, col: 59, offset: 54571},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1447, col: 1, offset: 54639},
			expr: &actionExpr{
				pos: position{line: 1447, col: 14, offset: 54652},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1447, col: 14, offset: 54652},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1447, col: 14, offset: 54652},
							expr: &ruleRefExpr{
								pos:  position{line: 1447, col: 15, offset: 54653},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1447, col: 30, offset: 54668},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1447, col: 36, offset: 54674},
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 37, offset: 54675},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1447, col: 49, offset: 54687},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1447, col: 53, offset: 54691},
							expr: &ruleRefExpr{
								pos:  position{line: 1447, col: 53, offset: 54691},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1451, col: 1, offset: 54760},
			expr: &actionExpr{
				pos: position{line: 1451, col: 14, offset: 54773},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1451, col: 14, offset: 54773},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1451, col: 14, offset: 54773},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 33, offset: 54792},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1451, col: 42, offset: 54801},
								expr: &seqExpr{
									pos: position{line: 1451, col: 43, offset: 54802},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1451, col: 43, offset: 54802},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 44, offset: 54803},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1451, col: 63, offset: 54822},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 64, offset: 54823},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1451, col: 68, offset: 54827},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 68, offset: 54827},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1451, col: 72, offset: 54831},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1451, col: 86, offset: 54845},
											expr: &ruleRefExpr{
												pos:  position{line: 1451, col: 86, offset: 54845},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1458, col: 1, offset: 55091},
			expr: &litMatcher{
				pos:        position{line: 1458, col: 26, offset: 55116},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1460, col: 1, offset: 55124},
			expr: &actionExpr{
				pos: position{line: 1460, col: 17, offset: 55140},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 17, offset: 55140},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1460, col: 17, offset: 55140},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1460, col: 39, offset: 55162},
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 39, offset: 55162},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1460, col: 43, offset: 55166},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 51, offset: 55174},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1460, col: 59, offset: 55182},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 60, offset: 55183},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1460, col: 81, offset: 55204},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1460, col: 82, offset: 55205},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1460, col: 82, offset: 55205},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1460, col: 104, offset: 55227},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1460, col: 112, offset: 55235},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1464, col: 1, offset: 55341},
			expr: &actionExpr{
				pos: position{line: 1464, col: 21, offset: 55361},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1464, col: 21, offset: 55361},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1464, col: 21, offset: 55361},
							expr: &choiceExpr{
								pos: position{line: 1464, col: 22, offset: 55362},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1464, col: 22, offset: 55362},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1464, col: 34, offset: 55374},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1464, col: 44, offset: 55384},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1464, col: 44, offset: 55384},
												expr: &ruleRefExpr{
													pos:  position{line: 1464, col: 45, offset: 55385},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1464, col: 67, offset: 55407},
												expr: &ruleRefExpr{
													pos:  position{line: 1464, col: 68, offset: 55408},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1464, col: 72, offset: 55412,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1464, col: 77, offset: 55417},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1468, col: 1, offset: 55457},
			expr: &actionExpr{
				pos: position{line: 1468, col: 22, offset: 55478},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1468, col: 22, offset: 55478},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1468, col: 22, offset: 55478},
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 23, offset: 55479},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1468, col: 45, offset: 55501},
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 45, offset: 55501},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1468, col: 49, offset: 55505},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 54, offset: 55510},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1468, col: 63, offset: 55519},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1468, col: 89, offset: 55545},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1472, col: 1, offset: 55610},
			expr: &actionExpr{
				pos: position{line: 1472, col: 29, offset: 55638},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1472, col: 29, offset: 55638},
					expr: &choiceExpr{
						pos: position{line: 1472, col: 30, offset: 55639},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1472, col: 30, offset: 55639},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1472, col: 42, offset: 55651},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1472, col: 52, offset: 55661},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1472, col: 52, offset: 55661},
										expr: &ruleRefExpr{
											pos:  position{line: 1472, col: 53, offset: 55662},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1472, col: 58, offset: 55667,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1480, col: 1, offset: 55976},
			expr: &choiceExpr{
				pos: position{line: 1480, col: 17, offset: 55992},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1480, col: 17, offset: 55992},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 49, offset: 56024},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1480, col: 78, offset: 56053},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1482, col: 1, offset: 56089},
			expr: &litMatcher{
				pos:        position{line: 1482, col: 26, offset: 56114},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1485, col: 1, offset: 56186},
			expr: &actionExpr{
				pos: position{line: 1485, col: 31, offset: 56216},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1485, col: 31, offset: 56216},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1485, col: 31, offset: 56216},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1485, col: 42, offset: 56227},
								expr: &ruleRefExpr{
									pos:  position{line: 1485, col: 43, offset: 56228},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1485, col: 63, offset: 56248},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1485, col: 70, offset: 56255},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1490, col: 1, offset: 56485},
			expr: &actionExpr{
				pos: position{line: 1491, col: 5, offset: 56525},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 5, offset: 56525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 56525},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1491, col: 16, offset: 56536},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1491, col: 16, offset: 56536},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1491, col: 16, offset: 56536},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1491, col: 19, offset: 56539},
											expr: &choiceExpr{
												pos: position{line: 1491, col: 20, offset: 56540},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1491, col: 20, offset: 56540},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1491, col: 32, offset: 56552},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1491, col: 41, offset: 56561},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1491, col: 42, offset: 56562},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1491, col: 42, offset: 56562},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1491, col: 43, offset: 56563},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1491, col: 48, offset: 56568,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 8, offset: 56659},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1496, col: 5, offset: 56722},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1496, col: 16, offset: 56733},
								expr: &actionExpr{
									pos: position{line: 1497, col: 9, offset: 56743},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1497, col: 9, offset: 56743},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1497, col: 9, offset: 56743},
												expr: &ruleRefExpr{
													pos:  position{line: 1497, col: 10, offset: 56744},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1498, col: 9, offset: 56763},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1498, col: 20, offset: 56774},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1498, col: 20, offset: 56774},
														expr: &choiceExpr{
															pos: position{line: 1498, col: 21, offset: 56775},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1498, col: 21, offset: 56775},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1498, col: 33, offset: 56787},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1498, col: 43, offset: 56797},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1498, col: 43, offset: 56797},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1498, col: 44, offset: 56798},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1498, col: 49, offset: 56803,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1500, col: 12, offset: 56860},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1507, col: 1, offset: 57090},
			expr: &actionExpr{
				pos: position{line: 1507, col: 39, offset: 57128},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 39, offset: 57128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1507, col: 39, offset: 57128},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1507, col: 50, offset: 57139},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 51, offset: 57140},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 9, offset: 57168},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1508, col: 31, offset: 57190},
							expr: &ruleRefExpr{
								pos:  position{line: 1508, col: 31, offset: 57190},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 35, offset: 57194},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1508, col: 43, offset: 57202},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1508, col: 50, offset: 57209},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1508, col: 92, offset: 57251},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1508, col: 93, offset: 57252},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1508, col: 93, offset: 57252},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1508, col: 115, offset: 57274},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1508, col: 123, offset: 57282},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1513, col: 1, offset: 57441},
			expr: &actionExpr{
				pos: position{line: 1513, col: 44, offset: 57484},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1513, col: 44, offset: 57484},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1513, col: 50, offset: 57490},
						expr: &ruleRefExpr{
							pos:  position{line: 1513, col: 51, offset: 57491},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1517, col: 1, offset: 57575},
			expr: &actionExpr{
				pos: position{line: 1518, col: 5, offset: 57630},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 5, offset: 57630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1518, col: 5, offset: 57630},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1518, col: 11, offset: 57636},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1518, col: 11, offset: 57636},
									expr: &choiceExpr{
										pos: position{line: 1518, col: 12, offset: 57637},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1518, col: 12, offset: 57637},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1518, col: 24, offset: 57649},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1518, col: 34, offset: 57659},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1518, col: 34, offset: 57659},
														expr: &ruleRefExpr{
															pos:  position{line: 1518, col: 35, offset: 57660},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1518, col: 57, offset: 57682},
														expr: &ruleRefExpr{
															pos:  position{line: 1518, col: 58, offset: 57683},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1518, col: 62, offset: 57687,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1520, col: 8, offset: 57736},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1525, col: 1, offset: 57862},
			expr: &actionExpr{
				pos: position{line: 1526, col: 5, offset: 57900},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 5, offset: 57900},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1526, col: 5, offset: 57900},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1526, col: 16, offset: 57911},
								expr: &ruleRefExpr{
									pos:  position{line: 1526, col: 17, offset: 57912},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1527, col: 5, offset: 57936},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 5, offset: 58150},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 12, offset: 58157},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1538, col: 1, offset: 58307},
			expr: &actionExpr{
				pos: position{line: 1538, col: 16, offset: 58322},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1538, col: 16, offset: 58322},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1543, col: 1, offset: 58405},
			expr: &actionExpr{
				pos: position{line: 1543, col: 39, offset: 58443},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1543, col: 39, offset: 58443},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1543, col: 45, offset: 58449},
						expr: &ruleRefExpr{
							pos:  position{line: 1543, col: 46, offset: 58450},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1547, col: 1, offset: 58530},
			expr: &actionExpr{
				pos: position{line: 1547, col: 38, offset: 58567},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1547, col: 38, offset: 58567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1547, col: 38, offset: 58567},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1547, col: 44, offset: 58573},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1547, col: 44, offset: 58573},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1547, col: 44, offset: 58573},
											expr: &ruleRefExpr{
												pos:  position{line: 1547, col: 46, offset: 58575},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1547, col: 57, offset: 58586},
											expr: &choiceExpr{
												pos: position{line: 1547, col: 58, offset: 58587},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1547, col: 58, offset: 58587},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1547, col: 70, offset: 58599},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1547, col: 80, offset: 58609},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1547, col: 80, offset: 58609},
																expr: &ruleRefExpr{
																	pos:  position{line: 1547, col: 81, offset: 58610},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1547, col: 86, offset: 58615,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1549, col: 4, offset: 58656},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1556, col: 1, offset: 58830},
			expr: &actionExpr{
				pos: position{line: 1556, col: 23, offset: 58852},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1556, col: 23, offset: 58852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1556, col: 23, offset: 58852},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 29, offset: 58858},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 35, offset: 58864},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 45, offset: 58874},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1556, col: 51, offset: 58880},
								expr: &actionExpr{
									pos: position{line: 1556, col: 52, offset: 58881},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1556, col: 52, offset: 58881},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1556, col: 52, offset: 58881},
												expr: &ruleRefExpr{
													pos:  position{line: 1556, col: 52, offset: 58881},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1556, col: 56, offset: 58885},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1556, col: 60, offset: 58889},
												expr: &ruleRefExpr{
													pos:  position{line: 1556, col: 60, offset: 58889},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1556, col: 64, offset: 58893},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1556, col: 72, offset: 58901},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 9, offset: 58949},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1558, col: 15, offset: 58955},
								expr: &actionExpr{
									pos: position{line: 1558, col: 16, offset: 58956},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1558, col: 16, offset: 58956},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1558, col: 16, offset: 58956},
												expr: &ruleRefExpr{
													pos:  position{line: 1558, col: 16, offset: 58956},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1558, col: 20, offset: 58960},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1558, col: 24, offset: 58964},
												expr: &ruleRefExpr{
													pos:  position{line: 1558, col: 24, offset: 58964},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1558, col: 28, offset: 58968},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1558, col: 36, offset: 58976},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1560, col: 9, offset: 59024},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1567, col: 1, offset: 59208},
			expr: &actionExpr{
				pos: position{line: 1567, col: 14, offset: 59221},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1567, col: 14, offset: 59221},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1567, col: 14, offset: 59221},
							expr: &ruleRefExpr{
								pos:  position{line: 1567, col: 15, offset: 59222},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1567, col: 19, offset: 59226},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1574, col: 1, offset: 59374},
			expr: &charClassMatcher{
				pos:        position{line: 1574, col: 13, offset: 59386},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1576, col: 1, offset: 59396},
			expr: &choiceExpr{
				pos: position{line: 1576, col: 16, offset: 59411},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1576, col: 16, offset: 59411},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1576, col: 22, offset: 59417},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1576, col: 28, offset: 59423},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1576, col: 34, offset: 59429},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1576, col: 40, offset: 59435},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1576, col: 46, offset: 59441},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1578, col: 1, offset: 59447},
			expr: &actionExpr{
				pos: position{line: 1578, col: 14, offset: 59460},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1578, col: 14, offset: 59460},
					expr: &charClassMatcher{
						pos:        position{line: 1578, col: 14, offset: 59460},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1582, col: 1, offset: 59506},
			expr: &litMatcher{
				pos:        position{line: 1582, col: 8, offset: 59513},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1584, col: 1, offset: 59518},
			expr: &actionExpr{
				pos: position{line: 1584, col: 15, offset: 59532},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1584, col: 15, offset: 59532},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1584, col: 15, offset: 59532},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1584, col: 25, offset: 59542},
							expr: &choiceExpr{
								pos: position{line: 1584, col: 27, offset: 59544},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1584, col: 27, offset: 59544},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1584, col: 32, offset: 59549},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1589, col: 1, offset: 59814},
			expr: &actionExpr{
				pos: position{line: 1589, col: 14, offset: 59827},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1589, col: 15, offset: 59828},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1589, col: 15, offset: 59828},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1589, col: 27, offset: 59840},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1589, col: 46, offset: 59859},
							expr: &actionExpr{
								pos: position{line: 1589, col: 47, offset: 59860},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1589, col: 47, offset: 59860},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1589, col: 48, offset: 59861},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1589, col: 48, offset: 59861},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 49, offset: 59862},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1589, col: 57, offset: 59870},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 58, offset: 59871},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1589, col: 61, offset: 59874},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 62, offset: 59875},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1589, col: 66, offset: 59879},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 67, offset: 59880},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1589, col: 84, offset: 59897},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 85, offset: 59898},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1589, col: 110, offset: 59923},
													expr: &ruleRefExpr{
														pos:  position{line: 1589, col: 111, offset: 59924},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1589, col: 123, offset: 59936,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1589, col: 126, offset: 59939},
											expr: &ruleRefExpr{
												pos:  position{line: 1589, col: 126, offset: 59939},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1591, col: 7, offset: 60048},
							expr: &litMatcher{
								pos:        position{line: 1591, col: 7, offset: 60048},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1595, col: 1, offset: 60229},
			expr: &oneOrMoreExpr{
				pos: position{line: 1595, col: 11, offset: 60239},
				expr: &ruleRefExpr{
					pos:  position{line: 1595, col: 11, offset: 60239},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1597, col: 1, offset: 60245},
			expr: &actionExpr{
				pos: position{line: 1597, col: 17, offset: 60261},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1597, col: 17, offset: 60261},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1597, col: 26, offset: 60270},
						expr: &choiceExpr{
							pos: position{line: 1597, col: 27, offset: 60271},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1597, col: 27, offset: 60271},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1597, col: 38, offset: 60282},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1601, col: 1, offset: 60374},
			expr: &actionExpr{
				pos: position{line: 1601, col: 25, offset: 60398},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 25, offset: 60398},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1601, col: 34, offset: 60407},
						expr: &seqExpr{
							pos: position{line: 1601, col: 35, offset: 60408},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1601, col: 35, offset: 60408},
									expr: &ruleRefExpr{
										pos:  position{line: 1601, col: 36, offset: 60409},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1601, col: 40, offset: 60413},
									expr: &ruleRefExpr{
										pos:  position{line: 1601, col: 41, offset: 60414},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1601, col: 44, offset: 60417},
									expr: &litMatcher{
										pos:        position{line: 1601, col: 45, offset: 60418},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1601, col: 49, offset: 60422,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1605, col: 1, offset: 60486},
			expr: &actionExpr{
				pos: position{line: 1605, col: 13, offset: 60498},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1605, col: 13, offset: 60498},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1605, col: 23, offset: 60508},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1605, col: 23, offset: 60508},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1605, col: 34, offset: 60519},
								expr: &choiceExpr{
									pos: position{line: 1605, col: 35, offset: 60520},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1605, col: 35, offset: 60520},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1605, col: 46, offset: 60531},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1609, col: 1, offset: 60624},
			expr: &oneOrMoreExpr{
				pos: position{line: 1609, col: 13, offset: 60636},
				expr: &choiceExpr{
					pos: position{line: 1609, col: 14, offset: 60637},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1609, col: 14, offset: 60637},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1609, col: 99, offset: 60722},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1609, col: 105, offset: 60728},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1611, col: 1, offset: 60849},
			expr: &actionExpr{
				pos: position{line: 1611, col: 21, offset: 60869},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1611, col: 21, offset: 60869},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1611, col: 31, offset: 60879},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1611, col: 31, offset: 60879},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1611, col: 42, offset: 60890},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1615, col: 1, offset: 60969},
			expr: &oneOrMoreExpr{
				pos: position{line: 1615, col: 22, offset: 60990},
				expr: &choiceExpr{
					pos: position{line: 1615, col: 23, offset: 60991},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1615, col: 23, offset: 60991},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1615, col: 110, offset: 61078},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1615, col: 116, offset: 61084},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1617, col: 1, offset: 61133},
			expr: &actionExpr{
				pos: position{line: 1617, col: 8, offset: 61140},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1617, col: 8, offset: 61140},
					expr: &choiceExpr{
						pos: position{line: 1617, col: 9, offset: 61141},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1617, col: 9, offset: 61141},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1617, col: 22, offset: 61154},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1617, col: 22, offset: 61154},
										expr: &ruleRefExpr{
											pos:  position{line: 1617, col: 23, offset: 61155},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1617, col: 31, offset: 61163},
										expr: &ruleRefExpr{
											pos:  position{line: 1617, col: 32, offset: 61164},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1617, col: 35, offset: 61167},
										expr: &litMatcher{
											pos:        position{line: 1617, col: 36, offset: 61168},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1617, col: 40, offset: 61172},
										expr: &litMatcher{
											pos:        position{line: 1617, col: 41, offset: 61173},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1617, col: 46, offset: 61178,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1621, col: 1, offset: 61219},
			expr: &choiceExpr{
				pos: position{line: 1621, col: 15, offset: 61233},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1621, col: 15, offset: 61233},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1621, col: 27, offset: 61245},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1621, col: 40, offset: 61258},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1621, col: 51, offset: 61269},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1621, col: 62, offset: 61280},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1623, col: 1, offset: 61291},
			expr: &actionExpr{
				pos: position{line: 1623, col: 7, offset: 61297},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1623, col: 7, offset: 61297},
					expr: &choiceExpr{
						pos: position{line: 1623, col: 8, offset: 61298},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1623, col: 8, offset: 61298},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1623, col: 21, offset: 61311},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1623, col: 21, offset: 61311},
										expr: &ruleRefExpr{
											pos:  position{line: 1623, col: 22, offset: 61312},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 30, offset: 61320},
										expr: &ruleRefExpr{
											pos:  position{line: 1623, col: 31, offset: 61321},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 34, offset: 61324},
										expr: &litMatcher{
											pos:        position{line: 1623, col: 35, offset: 61325},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 39, offset: 61329},
										expr: &litMatcher{
											pos:        position{line: 1623, col: 40, offset: 61330},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 44, offset: 61334},
										expr: &litMatcher{
											pos:        position{line: 1623, col: 45, offset: 61335},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 50, offset: 61340},
										expr: &litMatcher{
											pos:        position{line: 1623, col: 51, offset: 61341},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1623, col: 56, offset: 61346},
										expr: &litMatcher{
											pos:        position{line: 1623, col: 57, offset: 61347},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1623, col: 62, offset: 61352,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1627, col: 1, offset: 61393},
			expr: &actionExpr{
				pos: position{line: 1627, col: 10, offset: 61402},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1627, col: 10, offset: 61402},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1631, col: 1, offset: 61444},
			expr: &actionExpr{
				pos: position{line: 1631, col: 11, offset: 61454},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 11, offset: 61454},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1631, col: 11, offset: 61454},
							expr: &litMatcher{
								pos:        position{line: 1631, col: 11, offset: 61454},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1631, col: 16, offset: 61459},
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 16, offset: 61459},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1635, col: 1, offset: 61511},
			expr: &choiceExpr{
				pos: position{line: 1635, col: 7, offset: 61517},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1635, col: 7, offset: 61517},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1635, col: 13, offset: 61523},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1635, col: 13, offset: 61523},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1639, col: 1, offset: 61564},
			expr: &choiceExpr{
				pos: position{line: 1639, col: 12, offset: 61575},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1639, col: 12, offset: 61575},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1639, col: 21, offset: 61584},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1639, col: 28, offset: 61591},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1641, col: 1, offset: 61597},
			expr: &notExpr{
				pos: position{line: 1641, col: 8, offset: 61604},
				expr: &anyMatcher{
					line: 1641, col: 9, offset: 61605,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1643, col: 1, offset: 61608},
			expr: &choiceExpr{
				pos: position{line: 1643, col: 8, offset: 61615},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1643, col: 8, offset: 61615},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 18, offset: 61625},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1645, col: 1, offset: 61630},
			expr: &seqExpr{
				pos: position{line: 1645, col: 9, offset: 61638},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1645, col: 9, offset: 61638},
						expr: &ruleRefExpr{
							pos:  position{line: 1645, col: 9, offset: 61638},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1645, col: 13, offset: 61642},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
